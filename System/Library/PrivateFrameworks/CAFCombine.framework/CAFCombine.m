id CAFTestControlAsyncObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_observed);
}

uint64_t CAFTestControlAsyncObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTestControlAsyncObservable._description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x80000002374DEE40;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTestControlAsyncObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTestControlAsyncObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTestControlAsyncObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTestControlAsyncObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFTestControlAsyncObservable.init(_:)(a1);
}

id CAFTestControlAsyncObservable.init(_:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = &v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)&v1[v4] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTestControlAsyncObservable();
  v6 = a1;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B8122F0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for CAFTestControlAsyncObservable()
{
  return objc_opt_self();
}

uint64_t CAFTestControlAsyncObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTestControlAsyncObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTestControlAsyncObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTestControlAsyncObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTestControlAsyncObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTestControlAsyncObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTestControlAsyncObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTestControlAsyncObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTestControlAsyncObservable(void **a1)
{
  return CAFTestControlAsyncObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTestControlAsyncObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTestControlAsyncObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTestControlAsyncObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFTestControlAsyncObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t specialized CAFObservable.notifyChange()()
{
  uint64_t result;

  result = specialized CAFObservable._objectDidChange.getter();
  if (result)
  {
    PassthroughSubject.send(_:)();
    return OUTLINED_FUNCTION_0();
  }
  return result;
}

uint64_t CAFTestControlAsyncObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t CAFTestControlAsyncObservable.serviceDidFinishGroupUpdate(_:)()
{
  return specialized CAFObservable.notifyChange()();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTestControlAsync(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlAsyncObservable, (uint64_t)&protocol conformance descriptor for CAFTestControlAsyncObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTestControlAsyncObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlAsync and conformance CAFTestControlAsync, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlAsync, (uint64_t)&protocol conformance descriptor for CAFTestControlAsync);
}

unint64_t type metadata accessor for CAFTestControlAsync()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFTestControlAsync;
  if (!lazy cache variable for type metadata for CAFTestControlAsync)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTestControlAsync);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTestControlAsyncObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlAsyncObservable, (uint64_t)&protocol conformance descriptor for CAFTestControlAsyncObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x23B812308](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in CAFTestControlAsyncObservable()
{
  return MEMORY[0x24BDB9D70];
}

uint64_t method lookup function for CAFTestControlAsyncObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTestControlAsyncObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

void type metadata accessor for CAFPairedDeviceState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFPairedDeviceState);
}

void type metadata accessor for CAFSettingProminenceLevel(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFSettingProminenceLevel);
}

void type metadata accessor for CAFImageColor(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFImageColor);
}

void type metadata accessor for CAFDeviceAction(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFDeviceAction);
}

void type metadata accessor for CAFMediaCategory(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFMediaCategory);
}

void type metadata accessor for CAFFillLevelLabel(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFFillLevelLabel);
}

void type metadata accessor for CAFFuelLevelState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFFuelLevelState);
}

void type metadata accessor for CAFUISceneState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFUISceneState);
}

void type metadata accessor for CAFPortSideIndicator(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFPortSideIndicator);
}

void type metadata accessor for CAFCableState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFCableState);
}

void type metadata accessor for CAFChargingState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFChargingState);
}

void type metadata accessor for CAFTransmissionMode(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFTransmissionMode);
}

void type metadata accessor for CAFBatteryLevelState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFBatteryLevelState);
}

void type metadata accessor for CAFSeatBeltIndicator(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFSeatBeltIndicator);
}

void type metadata accessor for CAFSeatOccupancy(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFSeatOccupancy);
}

void type metadata accessor for CAFMeasurementSystem(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFMeasurementSystem);
}

void type metadata accessor for CAFPlaybackState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFPlaybackState);
}

void type metadata accessor for CAFRotationalSpeedState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFRotationalSpeedState);
}

void type metadata accessor for CAFPressureState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFPressureState);
}

void type metadata accessor for CAFSensorState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFSensorState);
}

void type metadata accessor for CAFTargetSpeedState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFTargetSpeedState);
}

void type metadata accessor for CAFDefrostTypes(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFDefrostTypes);
}

void type metadata accessor for CAFMediaSourceSemanticType(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFMediaSourceSemanticType);
}

void type metadata accessor for CAFEqualizerType(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFEqualizerType);
}

void type metadata accessor for CAFVolumeType(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFVolumeType);
}

void type metadata accessor for CAFNotificationSeverity(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFNotificationSeverity);
}

void type metadata accessor for CAFCharacteristicState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFCharacteristicState);
}

void type metadata accessor for CAFAutoModeIntensity(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFAutoModeIntensity);
}

void type metadata accessor for CAFUIInputDeviceButtonEvent(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFUIInputDeviceButtonEvent);
}

void type metadata accessor for CAFUIInputDevicePurpose(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFUIInputDevicePurpose);
}

void type metadata accessor for CAFTemperatureState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFTemperatureState);
}

void type metadata accessor for CAFUnitType(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFUnitType);
}

void type metadata accessor for CAFButtonAction(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFButtonAction);
}

void type metadata accessor for CAFVentTypes(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFVentTypes);
}

void type metadata accessor for CAFSettingsCategory(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFSettingsCategory);
}

void type metadata accessor for CAFLockState(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, &lazy cache variable for type metadata for CAFLockState);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for CAFPairedDeviceState(a1, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for CAFPairedDeviceState(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t specialized CAFObservable._objectDidChange.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static AssociatedKeys.objectDidChange);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFTestControlAsyncObservable.resetCachedDescription()()
{
  return CAFTestControlAsyncObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_0()
{
  return swift_release();
}

void CAFClimate.on.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  id v24;
  os_log_type_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x24BDAC7A8](v3);
  v4 = OUTLINED_FUNCTION_3();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_7();
  v7 = OUTLINED_FUNCTION_9(v6, sel_cabin);
  if (v7)
  {
    v8 = v7;
    if (objc_msgSend(v7, sel_hasHvacOn))
    {
      static os_log_type_t.debug.getter();
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_0_0();
      static CAFCombineLogger.log(_:message:function:file:line:)(v9, v10, v11, v12, v13);
      objc_msgSend(v8, sel_hvacOn);
      OUTLINED_FUNCTION_6();
      goto LABEL_10;
    }

  }
  v14 = OUTLINED_FUNCTION_9((uint64_t)v7, sel_car);
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, sel_positionManager);

    if (v16)
    {
      CAFPositionManager.driverSeat.getter(v1);
      if (__swift_getEnumTagSinglePayload(v1, 1, v4) != 1)
      {
        OUTLINED_FUNCTION_8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
        v22 = (void *)CAFPositionManager.fan(for:)(v0);
        if (v22)
        {
          v23 = v22;
          v24 = objc_msgSend(v22, sel_hasOn);
          if ((_DWORD)v24)
          {
            static os_log_type_t.debug.getter();
            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_0_0();
            static CAFCombineLogger.log(_:message:function:file:line:)(v25, v26, v27, v28, v29);
            objc_msgSend(v23, sel_on);

            OUTLINED_FUNCTION_1(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
            goto LABEL_10;
          }
          objc_msgSend(OUTLINED_FUNCTION_10((uint64_t)v24, sel_fanLevelRange), sel_minimumValue);
          OUTLINED_FUNCTION_6();
          if (!v2)
          {
            static os_log_type_t.debug.getter();
            OUTLINED_FUNCTION_4();
            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_0_0();
            static CAFCombineLogger.log(_:message:function:file:line:)(v35, v36, v37, v38, v39);
            v40 = OUTLINED_FUNCTION_10((uint64_t)objc_msgSend(v23, sel_fanLevel), sel_fanLevelRange);
            objc_msgSend(v40, sel_minimumValue);

            OUTLINED_FUNCTION_1(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
            goto LABEL_10;
          }

        }
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0_0();
        static CAFCombineLogger.log(_:message:function:file:line:)(v30, v31, v32, v33, v34);

        OUTLINED_FUNCTION_1(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
        goto LABEL_10;
      }

      outlined destroy of CAUVehicleLayoutKey?(v1);
    }
  }
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0();
  static CAFCombineLogger.log(_:message:function:file:line:)(v17, v18, v19, v20, v21);
LABEL_10:
  OUTLINED_FUNCTION_5();
}

void CAFClimate.on.setter(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  os_log_type_t v17;
  id v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  os_log_type_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  id v35;
  os_log_type_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BOOL8 v46;
  id v47;
  char **v48;
  void *v49;

  v4 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_3();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_7();
  if (v4 == 2)
  {
    static os_log_type_t.debug.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_5();
    static CAFCombineLogger.log(_:message:function:file:line:)(v8, v9, v10, v11, v12);
    return;
  }
  CAFClimate.on.getter();
  if (v13 == 2 || (((v13 == 0) ^ v4) & 1) == 0)
  {
    v18 = OUTLINED_FUNCTION_9(v13, sel_cabin);
    if (v18)
    {
      v49 = v18;
      if (objc_msgSend(v18, sel_hasHvacOn))
      {
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0_0();
        static CAFCombineLogger.log(_:message:function:file:line:)(v19, v20, v21, v22, v23);
        objc_msgSend(v49, sel_setHvacOn_, v4 & 1);
        OUTLINED_FUNCTION_5();

        return;
      }

    }
    v25 = OUTLINED_FUNCTION_9((uint64_t)v18, sel_car);
    if (!v25)
      goto LABEL_20;
    v26 = v25;
    v27 = objc_msgSend(v25, sel_positionManager);

    if (!v27)
      goto LABEL_20;
    CAFPositionManager.driverSeat.getter(v2);
    if (__swift_getEnumTagSinglePayload(v2, 1, v6) == 1)
    {

      outlined destroy of CAUVehicleLayoutKey?(v2);
LABEL_20:
      static os_log_type_t.debug.getter();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_0_0();
      static CAFCombineLogger.log(_:message:function:file:line:)(v28, v29, v30, v31, v32);
LABEL_21:
      OUTLINED_FUNCTION_5();
      return;
    }
    OUTLINED_FUNCTION_8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
    v33 = (void *)CAFPositionManager.fan(for:)(v1);
    if (v33)
    {
      v34 = v33;
      v35 = objc_msgSend(v33, sel_hasOn);
      if ((_DWORD)v35)
      {
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0_0();
        static CAFCombineLogger.log(_:message:function:file:line:)(v36, v37, v38, v39, v40);
        objc_msgSend(v34, sel_setOn_, v4 & 1);
LABEL_32:

        OUTLINED_FUNCTION_1(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
        goto LABEL_21;
      }
      objc_msgSend(OUTLINED_FUNCTION_10((uint64_t)v35, sel_fanLevelRange), sel_minimumValue);
      OUTLINED_FUNCTION_6();
      if (!(_DWORD)v3)
      {
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0_0();
        v46 = static CAFCombineLogger.log(_:message:function:file:line:)(v41, v42, v43, v44, v45);
        v47 = OUTLINED_FUNCTION_10(v46, sel_fanLevelRange);
        v48 = &selRef_stepValue;
        if ((v4 & 1) == 0)
          v48 = &selRef_minimumValue;
        objc_msgSend(v47, *v48);
        OUTLINED_FUNCTION_6();
        objc_msgSend(v34, sel_setFanLevel_, v3);
        goto LABEL_32;
      }
      OUTLINED_FUNCTION_1(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));

    }
    else
    {
      OUTLINED_FUNCTION_1(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    }

    goto LABEL_21;
  }
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if ((v4 & 1) != 0)
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v17, 0xD00000000000001BLL, 0x80000002374DF070, 28271, 0xE200000000000000);
  OUTLINED_FUNCTION_5();
  swift_bridgeObjectRelease();
}

uint64_t CAFPositionManager.fan(for:)(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v2 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(a1, 1, 0, 0);
  v3 = v2;
  v12 = MEMORY[0x24BEE4AF8];
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v1 = v2;
    else
      v1 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    v1 = MEMORY[0x24BEE4AF8];
    goto LABEL_20;
  }
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_19;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_32;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x23B811D2C](i, v3);
    else
      v6 = *(id *)(v3 + 8 * i + 32);
    v7 = v6;
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      MEMORY[0x23B811C18]();
      if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v1 = v12;
LABEL_20:
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_22;
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10 != 1)
    goto LABEL_29;
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_25;
LABEL_22:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_32:
    v8 = (id)MEMORY[0x23B811D2C](0, v1);
    goto LABEL_24;
  }
  v8 = *(id *)(v1 + 32);
LABEL_24:
  v9 = (uint64_t)v8;
LABEL_25:
  swift_bridgeObjectRelease();
  return v9;
}

void (*CAFClimate.on.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  CAFClimate.on.getter();
  *(_BYTE *)(a1 + 8) = v3;
  return CAFClimate.on.modify;
}

void CAFClimate.on.modify(uint64_t a1)
{
  CAFClimate.on.setter(*(_BYTE *)(a1 + 8));
  OUTLINED_FUNCTION_11();
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t outlined destroy of CAUVehicleLayoutKey?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16)
    return 0;
  _StringGuts.grow(_:)(a1);
  return 0;
}

void sub_2374261D0(_BYTE *a1@<X8>)
{
  char v2;

  CAFClimate.on.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_11();
}

void sub_2374261F4(unsigned __int8 *a1)
{
  CAFClimate.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

uint64_t OUTLINED_FUNCTION_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_3()
{
  return type metadata accessor for CAUVehicleLayoutKey();
}

void OUTLINED_FUNCTION_6()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

id OUTLINED_FUNCTION_9(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id OUTLINED_FUNCTION_10(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id CAFTemperatureObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
}

uint64_t CAFTemperatureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTemperatureObservable.currentTemperature.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  OUTLINED_FUNCTION_146();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_37();
  return OUTLINED_FUNCTION_112();
}

void CAFTemperatureObservable.$currentTemperature.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__currentTemperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

#error "2374263A0: call analysis failed (funcsize=8)"

uint64_t key path setter for CAFTemperatureObservable.targetTemperature : CAFTemperatureObservable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return CAFTemperatureObservable.targetTemperature.setter();
}

void CAFTemperatureObservable.targetTemperature.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_134();
  a23 = v25;
  a24 = v26;
  OUTLINED_FUNCTION_15();
  v27 = *(void **)(v24 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  a13 = v27;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v28 = v27;
  v29 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v32 = OUTLINED_FUNCTION_150();
  v33(v32, v31);
  v29(&a9, 0);
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_37();

  OUTLINED_FUNCTION_36();
}

uint64_t CAFTemperatureObservable.targetTemperature.setter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_109();
  v12 = v1;
  v13 = v2;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_101((uint64_t)v8, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  specialized static SafePublished.subscript.setter((uint64_t)v8, v0, KeyPath);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
}

uint64_t specialized static SafePublished.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(void **, _QWORD);
  void *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;

  v20 = a1;
  v21 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v19 = *(_QWORD *)(v7 - 8);
  v8 = v19;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAFTemperatureObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v11, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  v23 = a2;
  v12 = a2;
  swift_retain();
  v13 = (void (*)(void **, _QWORD))swift_readAtKeyPath();
  swift_retain();
  v13(&v22, 0);
  swift_release();

  v22 = *(void **)&v12[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed];
  v14 = v22;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16 = v20;
  v15(v10, v20, v7);
  swift_retain();
  v17 = v14;
  swift_setAtReferenceWritableKeyPath();

  v15(v6, v16, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  specialized SafePublished.value.setter();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v16, v7);
}

#error "23742682C: call analysis failed (funcsize=41)"

#error "2374268E0: call analysis failed (funcsize=41)"

#error "237426990: call analysis failed (funcsize=40)"

#error "237426A40: call analysis failed (funcsize=40)"

#error "237426AF4: call analysis failed (funcsize=44)"

#error "237426BB0: call analysis failed (funcsize=40)"

#error "237426C60: call analysis failed (funcsize=40)"

#error "237426D14: call analysis failed (funcsize=41)"

#error "237426DC8: call analysis failed (funcsize=41)"

#error "237426E7C: call analysis failed (funcsize=43)"

#error "237426F38: call analysis failed (funcsize=41)"

#error "237426FE8: call analysis failed (funcsize=42)"

#error "2374270A0: call analysis failed (funcsize=42)"

#error "23742715C: call analysis failed (funcsize=41)"

#error "237427210: call analysis failed (funcsize=41)"

#error "2374272C4: call analysis failed (funcsize=41)"

#error "237427380: call analysis failed (funcsize=47)"

#error "237427444: call analysis failed (funcsize=41)"

#error "237427500: call analysis failed (funcsize=47)"

#error "2374275C0: call analysis failed (funcsize=40)"

#error "237427670: call analysis failed (funcsize=40)"

#error "237427720: call analysis failed (funcsize=40)"

#error "2374277D0: call analysis failed (funcsize=42)"

#error "237427888: call analysis failed (funcsize=42)"

#error "237427940: call analysis failed (funcsize=42)"

#error "2374279F8: call analysis failed (funcsize=40)"

#error "237427AA8: call analysis failed (funcsize=42)"

#error "237427B60: call analysis failed (funcsize=42)"

#error "237427C18: call analysis failed (funcsize=42)"

#error "237427CE8: call analysis failed (funcsize=44)"

#error "237427D90: call analysis failed (funcsize=42)"

#error "237427E48: call analysis failed (funcsize=42)"

#error "237427F00: call analysis failed (funcsize=42)"

#error "237427FD0: call analysis failed (funcsize=44)"

#error "237428078: call analysis failed (funcsize=42)"

#error "23742814C: call analysis failed (funcsize=51)"

#error "237428224: call analysis failed (funcsize=51)"

#error "2374282E8: call analysis failed (funcsize=42)"

#error "2374283A0: call analysis failed (funcsize=42)"

#error "237428458: call analysis failed (funcsize=42)"

#error "237428510: call analysis failed (funcsize=39)"

#error "2374285BC: call analysis failed (funcsize=39)"

#error "237428668: call analysis failed (funcsize=39)"

#error "237428714: call analysis failed (funcsize=39)"

#error "2374287C0: call analysis failed (funcsize=39)"

#error "23742886C: call analysis failed (funcsize=39)"

#error "237428918: call analysis failed (funcsize=39)"

#error "2374289C4: call analysis failed (funcsize=39)"

#error "237428A70: call analysis failed (funcsize=39)"

#error "237428B1C: call analysis failed (funcsize=39)"

#error "237428BC8: call analysis failed (funcsize=39)"

#error "237428C74: call analysis failed (funcsize=39)"

#error "237428D20: call analysis failed (funcsize=42)"

#error "237428DDC: call analysis failed (funcsize=41)"

#error "237428E90: call analysis failed (funcsize=44)"

#error "237428F50: call analysis failed (funcsize=41)"

#error "237429004: call analysis failed (funcsize=43)"

#error "2374290C0: call analysis failed (funcsize=41)"

#error "237429174: call analysis failed (funcsize=41)"

#error "237429224: call analysis failed (funcsize=40)"

#error "2374292D4: call analysis failed (funcsize=40)"

#error "237429388: call analysis failed (funcsize=41)"

#error "23742943C: call analysis failed (funcsize=41)"

#error "2374294F0: call analysis failed (funcsize=41)"

#error "2374295A0: call analysis failed (funcsize=40)"

#error "237429650: call analysis failed (funcsize=40)"

#error "237429700: call analysis failed (funcsize=40)"

#error "2374297B0: call analysis failed (funcsize=42)"

#error "23742986C: call analysis failed (funcsize=41)"

#error "237429920: call analysis failed (funcsize=41)"

#error "2374299D4: call analysis failed (funcsize=41)"

#error "237429A84: call analysis failed (funcsize=40)"

#error "237429B34: call analysis failed (funcsize=42)"

#error "237429BEC: call analysis failed (funcsize=42)"

#error "237429CA4: call analysis failed (funcsize=42)"

#error "237429D74: call analysis failed (funcsize=44)"

#error "237429E1C: call analysis failed (funcsize=42)"

#error "237429ED4: call analysis failed (funcsize=42)"

#error "237429F8C: call analysis failed (funcsize=42)"

#error "23742A05C: call analysis failed (funcsize=44)"

#error "23742A104: call analysis failed (funcsize=42)"

#error "23742A1C8: call analysis failed (funcsize=47)"

#error "23742A29C: call analysis failed (funcsize=50)"

#error "23742A360: call analysis failed (funcsize=42)"

#error "23742A418: call analysis failed (funcsize=42)"

#error "23742A4D0: call analysis failed (funcsize=42)"

#error "23742A588: call analysis failed (funcsize=39)"

#error "23742A634: call analysis failed (funcsize=39)"

#error "23742A6E0: call analysis failed (funcsize=39)"

#error "23742A78C: call analysis failed (funcsize=39)"

#error "23742A838: call analysis failed (funcsize=39)"

#error "23742A8E4: call analysis failed (funcsize=39)"

#error "23742A990: call analysis failed (funcsize=39)"

#error "23742AA3C: call analysis failed (funcsize=39)"

#error "23742AAE8: call analysis failed (funcsize=39)"

#error "23742AB94: call analysis failed (funcsize=39)"

#error "23742AC40: call analysis failed (funcsize=39)"

#error "23742ACEC: call analysis failed (funcsize=39)"

#error "23742AD98: call analysis failed (funcsize=42)"

uint64_t specialized static SafePublished.subscript.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(void **, _QWORD);
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_9_0();
  v21 = v1;
  v22 = v2;
  v18 = v3;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_2_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  v17 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_143();
  v10 = v9 - v8;
  type metadata accessor for CAFBatteryLevelObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, v11, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  OUTLINED_FUNCTION_25();
  v20 = v5;
  v12 = v5;
  OUTLINED_FUNCTION_146();
  v13 = (void (*)(void **, _QWORD))swift_readAtKeyPath();
  OUTLINED_FUNCTION_26();
  v13(&v19, 0);
  OUTLINED_FUNCTION_37();

  v19 = *(void **)&v12[OBJC_IVAR____TtC10CAFCombine25CAFBatteryLevelObservable_observed];
  v14 = v19;
  OUTLINED_FUNCTION_151(v10);
  swift_retain();
  v15 = v14;
  swift_setAtReferenceWritableKeyPath();

  OUTLINED_FUNCTION_151(v0);
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v7);
  specialized SafePublished.value.setter();

  swift_release();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_25();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v7);
}

#error "23742B028: call analysis failed (funcsize=44)"

#error "23742B0E8: call analysis failed (funcsize=46)"

#error "23742B1B0: call analysis failed (funcsize=46)"

#error "23742B268: call analysis failed (funcsize=42)"

#error "23742B338: call analysis failed (funcsize=44)"

#error "23742B3F0: call analysis failed (funcsize=46)"

#error "23742B4B8: call analysis failed (funcsize=46)"

#error "23742B570: call analysis failed (funcsize=42)"

#error "23742B640: call analysis failed (funcsize=44)"

#error "23742B6E8: call analysis failed (funcsize=42)"

#error "23742B7BC: call analysis failed (funcsize=51)"

#error "23742B890: call analysis failed (funcsize=50)"

#error "23742B964: call analysis failed (funcsize=46)"

#error "23742BA2C: call analysis failed (funcsize=46)"

#error "23742BAE4: call analysis failed (funcsize=42)"

#error "23742BB9C: call analysis failed (funcsize=39)"

#error "23742BC48: call analysis failed (funcsize=39)"

#error "23742BCF4: call analysis failed (funcsize=39)"

#error "23742BDA0: call analysis failed (funcsize=39)"

#error "23742BE4C: call analysis failed (funcsize=39)"

#error "23742BEF8: call analysis failed (funcsize=39)"

#error "23742BFA4: call analysis failed (funcsize=39)"

#error "23742C050: call analysis failed (funcsize=39)"

#error "23742C0FC: call analysis failed (funcsize=39)"

#error "23742C1A8: call analysis failed (funcsize=39)"

#error "23742C254: call analysis failed (funcsize=39)"

#error "23742C300: call analysis failed (funcsize=39)"

#error "23742C3AC: call analysis failed (funcsize=42)"

#error "23742C464: call analysis failed (funcsize=42)"

#error "23742C51C: call analysis failed (funcsize=42)"

#error "23742C5D4: call analysis failed (funcsize=42)"

#error "23742C68C: call analysis failed (funcsize=42)"

#error "23742C748: call analysis failed (funcsize=43)"

void specialized static SafePublished.subscript.setter(void *a1, float a2)
{
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18[4];
  void *v19;

  type metadata accessor for CAFFloatSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, v4, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_25();
  v19 = a1;
  v5 = a1;
  OUTLINED_FUNCTION_40();
  v6 = (void (*)(uint64_t *, _QWORD))OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_26();
  v6(v18, 0);
  v7 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_38(v7, v8, v9, v10, v11, v12, v13, v14, v17, v18[0], v18[1], v18[2], v18[3], v19);
  v18[0] = *(_QWORD *)&v5[OBJC_IVAR____TtC10CAFCombine25CAFFloatSettingObservable_observed];
  v15 = (void *)v18[0];
  *(float *)&v19 = a2;
  swift_retain();
  v16 = v15;
  swift_setAtReferenceWritableKeyPath();

  LOBYTE(v18[0]) = 0;
  specialized SafePublished.value.setter();

  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_130();
  OUTLINED_FUNCTION_36();
}

void (*CAFTemperatureObservable.targetTemperature.modify())()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  void *v8;
  id v9;
  void (*v10)(void *, _QWORD);
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_109();
  v2 = v1;
  v3 = malloc(0x80uLL);
  *v2 = v3;
  *((_QWORD *)v3 + 8) = v0;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  *((_QWORD *)v3 + 9) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *((_QWORD *)v3 + 10) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *((_QWORD *)v3 + 11) = malloc(v6);
  v7 = malloc(v6);
  *((_QWORD *)v3 + 12) = v7;
  *((_QWORD *)v3 + 13) = swift_getKeyPath();
  *((_QWORD *)v3 + 14) = swift_getKeyPath();
  OUTLINED_FUNCTION_15();
  v8 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  *((_QWORD *)v3 + 7) = v8;
  swift_retain();
  OUTLINED_FUNCTION_41();
  v9 = v8;
  v10 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *((_QWORD *)v3 + 15) = v11;
  OUTLINED_FUNCTION_101((uint64_t)v7, v12, v11);
  v10(v3, 0);
  OUTLINED_FUNCTION_130();
  OUTLINED_FUNCTION_42();

  return CAFTemperatureObservable.targetTemperature.modify;
}

void CAFTemperatureObservable.targetTemperature.modify()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  OUTLINED_FUNCTION_109();
  v1 = *v0;
  if ((v2 & 1) != 0)
  {
    v3 = *(void **)(v1 + 96);
    v5 = *(_QWORD *)(v1 + 80);
    v4 = *(void **)(v1 + 88);
    v7 = *(void **)(v1 + 64);
    v6 = *(_QWORD *)(v1 + 72);
    (*(void (**)(void *, void *, uint64_t))(v1 + 120))(v4, v3, v6);
    OUTLINED_FUNCTION_148((uint64_t)v4, v7);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    v4 = *(void **)(v1 + 88);
    v3 = *(void **)(v1 + 96);
    OUTLINED_FUNCTION_148((uint64_t)v3, *(id *)(v1 + 64));
  }
  free(v3);
  free(v4);
  free((void *)v1);
}

uint64_t CAFTemperatureObservable.$targetTemperature.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_32();
  v0 = specialized SafePublished.projectedValue.getter();
  OUTLINED_FUNCTION_25();
  return v0;
}

uint64_t CAFTemperatureObservable.vehicleLayoutKey.getter()
{
  return CAFTemperatureObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTemperatureObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTemperatureObservable.name.getter()
{
  return CAFTemperatureObservable.vehicleLayoutKey.getter();
}

void CAFTemperatureObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__name, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFTemperatureObservable.$currentTemperature.getter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_32();
  a2(v3);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFTemperatureObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_9_0();
  v47 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_143();
  v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_143();
  v9 = (uint64_t)OUTLINED_FUNCTION_152(v8, sel_registeredForCurrentTemperature);
  v10 = 0x73696765726E753CLL;
  v11 = (void *)0xEE003E6465726574;
  if ((_DWORD)v9)
  {
    CAFTemperatureObservable.currentTemperature.getter();
    v9 = String.init<A>(describing:)();
    v10 = v9;
    v11 = v12;
  }
  v13 = OUTLINED_FUNCTION_152(v9, sel_registeredForTargetTemperature);
  v21 = 0x73696765726E753CLL;
  v22 = (void *)0xEE003E6465726574;
  if ((_DWORD)v13)
  {
    CAFTemperatureObservable.targetTemperature.getter((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
      v44,
      v45,
      v46,
      v0,
      v47);
    lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v22 = v23;
    v13 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  }
  v24 = (void *)0xEE003E6465726574;
  v25 = 0x73696765726E753CLL;
  if (OUTLINED_FUNCTION_152((uint64_t)v13, sel_registeredForVehicleLayoutKey))
  {
    v25 = CAFTemperatureObservable.vehicleLayoutKey.getter();
    v24 = v26;
  }
  _StringGuts.grow(_:)(102);
  OUTLINED_FUNCTION_128(0xD00000000000001BLL, (uint64_t)"<CAFTemperatureObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000017, (uint64_t)" { currentTemperature: ");
  v27._countAndFlagsBits = v10;
  v27._object = v11;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000015, (uint64_t)", targetTemperature: ");
  v28._countAndFlagsBits = v21;
  v28._object = v22;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x80000002374DF1B0;
  v29._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v29);
  v30._countAndFlagsBits = v25;
  v30._object = v24;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 4095264;
  v31._object = (void *)0xE300000000000000;
  String.append(_:)(v31);
  return 0;
}

uint64_t CAFTemperatureObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTemperatureObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTemperatureObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

void CAFTemperatureObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFTemperatureObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFTemperatureObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__currentTemperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTemperatureObservable, Measurement<NSUnitTemperature>?>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__targetTemperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTemperatureObservable, Measurement<NSUnitTemperature>>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTemperatureObservable, String>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_142();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_142();
  *(_QWORD *)&v8[v14] = v15;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFTemperatureObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFTemperatureObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTemperatureObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFTemperatureObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTemperatureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTemperatureObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTemperatureObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTemperatureObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTemperatureObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTemperatureObservable(void **a1)
{
  CAFTemperatureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTemperatureObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTemperatureObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateCurrentTemperature:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.setValue(_:)(a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateTargetTemperature:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.setValue(_:)(a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>, (void (*)(uint64_t))specialized SafePublished.value.setter);
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateName:)()
{
  return CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v8;
  id v9;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = a3;
  v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFTemperatureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFTemperatureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFTemperatureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t specialized SafePublished.projectedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>.Publisher);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>.Publisher);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>>);
  v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

void specialized SafePublished.projectedValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFLockState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFLockState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFLockState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFLockState?>.Publisher, CAFLockState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Bool?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Bool?>.Publisher, Bool> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Bool??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Bool??>.Publisher, Bool?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int32?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int32?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int32?>.Publisher, Int32> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[UInt8]?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt32?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFButtonAction(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFButtonAction?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFButtonAction?>.Publisher, CAFButtonAction> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int32??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int32??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int32??>.Publisher, Int32?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt8??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt8??>.Publisher, UInt8?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutoModeIntensity??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFAutoModeIntensity?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFAutoModeIntensity??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFAutoModeIntensity??>.Publisher, CAFAutoModeIntensity?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt8?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Int16?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int16?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int16?>.Publisher, Int16> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String?>.Publisher, String> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String?>.Publisher, String> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNotificationSeverity?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFNotificationSeverity(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFNotificationSeverity?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFNotificationSeverity?>.Publisher, CAFNotificationSeverity> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFButtonAction??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt16??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt16??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt16??>.Publisher, UInt16?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt32??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt32??>.Publisher, UInt32?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt64??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt64??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt64??>.Publisher, UInt64?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int8??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int8??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int8??>.Publisher, Int8?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int16??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int16??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int16??>.Publisher, Int16?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int64??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int64??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int64??>.Publisher, Int64?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Float??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Float??>.Publisher, Float?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<String??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String??>.Publisher, String?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Data??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Data??>.Publisher, Data?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFUnitType??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItem??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexItem??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Bool]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Bool]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Bool]??>.Publisher, [Bool]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[UInt8]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt8]??>.Publisher, [UInt8]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt16]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[UInt16]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt16]??>.Publisher, [UInt16]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt32]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[UInt32]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt32]??>.Publisher, [UInt32]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[UInt64]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt64]??>.Publisher, [UInt64]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int8]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Int8]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int8]??>.Publisher, [Int8]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int16]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Int16]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int16]??>.Publisher, [Int16]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int32]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Int32]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int32]??>.Publisher, [Int32]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int64]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Int64]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int64]??>.Publisher, [Int64]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Float]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Float]??>.Publisher, [Float]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[String]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[String]??>.Publisher, [String]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Data]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItems??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexItems??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexItems??>.Publisher, CAFTestComplexItems?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[UInt8]?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDeviceActionRequest??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFDeviceActionRequest?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFDeviceActionRequest??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFDeviceActionRequest??>.Publisher, CAFDeviceActionRequest?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int8?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Int8?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int8?>.Publisher, Int8> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt8?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Bool??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Bool??>.Publisher, Bool?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Float??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Float??>.Publisher, Float?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<String??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String??>.Publisher, String?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Data??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Data??>.Publisher, Data?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFButtonAction??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFUnitType??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItem??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexItem??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Data]??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexArrayItem??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexArrayItem?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexArrayItem??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexArrayItem??>.Publisher, CAFTestComplexArrayItem?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedItem??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexNestedItem?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexNestedItem??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexNestedItem??>.Publisher, CAFTestComplexNestedItem?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedItems??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexNestedItems?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexNestedItems??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexNestedItems??>.Publisher, CAFTestComplexNestedItems?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedListItem??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexNestedListItem?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTestComplexNestedListItem??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexNestedListItem??>.Publisher, CAFTestComplexNestedListItem?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Float?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Float?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Float?>.Publisher, Float> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

void specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

{
  return a1 & 0xFFFFFFFFFFLL | (((a1 >> 40) & 1) << 40);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

{
  outlined copy of [Data]??(a1);
  return a1;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  outlined copy of String??(a1, a2);
  return a1;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return outlined copy of Data??(a1, a2);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(int a1)
{
  return a1 & 0x1FFFF;
}

{
  return a1 & 0x1FFFFFF;
}

void *specialized closure #1 in SafePublished.projectedValue.getter(void *a1)
{
  outlined copy of CAFMediaItems??(a1);
  return a1;
}

void specialized SafePublished.setValue(_:)(uint64_t a1)
{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?, (uint64_t)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void specialized SafePublished.init(observedValuekeypath:)()
{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_9_0();
  v3 = v2;
  v5 = v4;
  v19 = v6;
  v8 = OUTLINED_FUNCTION_94(v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_114();
  OUTLINED_FUNCTION_111();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  v16 = (char *)v0 + *(_QWORD *)(*v0 + 112);
  v17 = __swift_instantiateConcreteTypeFromMangledName(v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v17);
  outlined init with copy of Measurement<CAFUnitPercent>?((uint64_t)v15, (uint64_t)v13, v5);
  Published.init(initialValue:)();
  outlined destroy of Measurement<NSUnitTemperature>?((uint64_t)v15, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v16, v1, v8);
  v0[2] = v19;
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_105();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_105();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data??);
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool?>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_105();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_76(v0, v1);
  OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_105();
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String??);
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool??);
  OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

void specialized SafeReadOnlyPublished.value.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTemperatureObservable();
  v10[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  v10[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v7, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  v9 = v8;
  v10[6] = v8;
  swift_getKeyPath();
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v9;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFInteriorConditionsObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFInteriorConditionsObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFEngineTemperatureObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineTemperatureObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFEngineTemperatureObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineTemperatureObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFChargingTimeObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingTimeObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFExteriorConditionsObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFExteriorConditionsObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFExteriorConditionsObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFExteriorConditionsObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFHistoricalNotificationObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFEnginePowerObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEnginePowerObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPower>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFEnginePowerObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEnginePowerObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFFuelConsumptionObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelConsumptionObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFRemainingRangeObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(lazy protocol witness table cache variable for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFRemainingRangeObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFOdometerObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFOdometerObservable and conformance CAFOdometerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFOdometerObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTargetSpeedObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTargetSpeedObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFBatteryTemperatureObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryTemperatureObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFBatteryTemperatureObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryTemperatureObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFTirePressureObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTirePressureObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFEngineRPMObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineRPMObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFEngineRPMObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineRPMObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFNowPlayingObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFChargingRateObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingRateObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFChargingRateObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingRateObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFBatteryLevelObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFBatteryLevelObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFDisplayedSpeedObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDisplayedSpeedObservable and conformance CAFDisplayedSpeedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDisplayedSpeedObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFFuelLevelObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CAFFuelLevelObservable();
  v9[4] = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  v9[5] = v6;
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  v8 = v7;
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

uint64_t specialized SafeReadOnlyPublished.value.setter()
{
  uint64_t v0;

  type metadata accessor for CAFTemperatureObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void specialized SafeReadOnlyPublished.value.setter()
{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFClimateControlsLockedObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFZonesSyncedObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFZonesSyncedObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFSeatHeatingCoolingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFSeatHeatingCoolingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFVentObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFVentObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFButtonSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFTripObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFTypeTestIndexByUnitObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFLocalNotificationObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFLocalNotificationObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFUIInputDeviceButtonObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFAutoClimateControlObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFStaticSettingObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFClosureStateObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFClosureStateObservable and conformance CAFClosureStateObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFClosureStateObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_133();
  v0 = type metadata accessor for CAFPairedDevicesInformationObservable();
  OUTLINED_FUNCTION_98(v0, &lazy cache variable for type metadata for CAFPairedDeviceList);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_95(&lazy protocol witness table cache variable for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_36();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFCriticalInputStreamObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFCriticalInputStreamObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134();
  type metadata accessor for CAFProtocolPerfTestObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  static Published.subscript.setter();
  OUTLINED_FUNCTION_36();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFProtocolPerfTestObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFHistoricalNotificationObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFCameraButtonObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFRequestContentObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFRequestContentObservable and conformance CAFRequestContentObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFRequestContentObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_133();
  v0 = type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_98(v0, (unint64_t *)&lazy cache variable for type metadata for CAFSelectSettingEntryList);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_95(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_36();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFVehicleInformationObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFVehicleInformationObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFVolumeObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFVolumeObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFEqualizerObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFEqualizerObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFBooleanSettingObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_133();
  type metadata accessor for CAFMediaSourceObservable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_95(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_36();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFMediaSourceObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFFanObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFFanObservable and conformance CAFFanObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFFanObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_46();
  type metadata accessor for CAFDefrostObservable();
  type metadata accessor for CAFDefrostTypes(0);
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDefrostObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  static Published.subscript.setter();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFDefrostObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFDefrostObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFPickerObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFPickerObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_133();
  v0 = type metadata accessor for CAFPickerObservable();
  OUTLINED_FUNCTION_98(v0, &lazy cache variable for type metadata for CAFEntryList);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_95(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_36();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_96(v2, v3);
  OUTLINED_FUNCTION_103(v0, 255, v1);
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_144();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFTirePressureObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTirePressureObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFSeatFanObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFSeatFanObservable and conformance CAFSeatFanObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFSeatFanObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFSingleSelectSettingObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_133();
  v0 = type metadata accessor for CAFSingleSelectSettingObservable();
  OUTLINED_FUNCTION_98(v0, (unint64_t *)&lazy cache variable for type metadata for CAFSelectSettingEntryList);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_95(lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_36();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_96(v2, v3);
  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_103(v0, 255, v1);
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_144();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFIntegerSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFRemoteNotificationObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_133();
  v0 = type metadata accessor for CAFRemoteNotificationObservable();
  OUTLINED_FUNCTION_98(v0, &lazy cache variable for type metadata for CAFNotificationUserActions);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_95(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable);
  OUTLINED_FUNCTION_117();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_36();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFSettingsSectionObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFSettingsSectionObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFDeepLinkSettingObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFSeatBeltObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFSeatBeltObservable and conformance CAFSeatBeltObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFSeatBeltObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFTypeTestIndexByPositionObservable();
  OUTLINED_FUNCTION_33(&lazy protocol witness table cache variable for type CAFTypeTestIndexByPositionObservable and conformance CAFTypeTestIndexByPositionObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByPositionObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFVehicleVariantObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFVehicleVariantObservable and conformance CAFVehicleVariantObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFVehicleVariantObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  type metadata accessor for CAFFloatSettingObservable();
  OUTLINED_FUNCTION_33(lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  void (*v0)(_QWORD);

  OUTLINED_FUNCTION_46();
  v0(0);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  void (*v0)(_QWORD);
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v1, v2);
  v0(0);
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_96(v2, v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_103(v0, 255, v1);
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_144();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

uint64_t specialized SafeReadOnlyPublished.projectedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>.Publisher);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>.Publisher);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?>);
  v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String?>.Publisher);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String?>.Publisher, String> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

#error "2374368DC: call analysis failed (funcsize=8)"

char *keypath_get_selector_currentTemperature()
{
  return sel_currentTemperature;
}

void specialized SafeReadOnlyPublished.projectedValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSettingsCategory?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFSettingsCategory?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSettingsCategory?>.Publisher, CAFSettingsCategory> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFProminenceInformation??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFProminenceInformation??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFProminenceInformation??>.Publisher, CAFProminenceInformation?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String]?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[String]?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[String]?>.Publisher, [String]> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[Data]?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Data]?>.Publisher, [Data]> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[CAFVentTypes]?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFVentTypes]);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<[CAFVentTypes]?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[CAFVentTypes]?>.Publisher, [CAFVentTypes]> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitLength>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitLength>??>.Publisher, Measurement<NSUnitLength>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitEnergy>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitEnergy>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitEnergy>??>.Publisher, Measurement<NSUnitEnergy>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitEnergyEfficiency>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher, Measurement<CAFUnitEnergyEfficiency>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitFuelEfficiency>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>??>.Publisher, Measurement<NSUnitFuelEfficiency>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFUnitType?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUnitType?>.Publisher, CAFUnitType> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitAirQuality>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTemperatureState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFTemperatureState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTemperatureState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTemperatureState?>.Publisher, CAFTemperatureState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUIInputDevicePurpose?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFUIInputDevicePurpose(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFUIInputDevicePurpose?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUIInputDevicePurpose?>.Publisher, CAFUIInputDevicePurpose> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUIInputDeviceButtonEvent?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFUIInputDeviceButtonEvent(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFUIInputDeviceButtonEvent?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUIInputDeviceButtonEvent?>.Publisher, CAFUIInputDeviceButtonEvent> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPairedDeviceList?>);
  OUTLINED_FUNCTION_17();
  v2 = OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_98(v2, &lazy cache variable for type metadata for CAFPairedDeviceList);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFPairedDeviceList?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPairedDeviceList?>.Publisher, CAFPairedDeviceList> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitAirQuality>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt32?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt16?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<UInt16?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt16?>.Publisher, UInt16> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFHistoricalNotificationUserActions??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFHistoricalNotificationUserActions?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFHistoricalNotificationUserActions??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFHistoricalNotificationUserActions??>.Publisher, CAFHistoricalNotificationUserActions?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSelectSettingEntryList?>);
  OUTLINED_FUNCTION_17();
  v2 = OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_98(v2, (unint64_t *)&lazy cache variable for type metadata for CAFSelectSettingEntryList);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFSelectSettingEntryList?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSelectSettingEntryList?>.Publisher, CAFSelectSettingEntryList> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPower>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPower>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPower>??>.Publisher, Measurement<NSUnitPower>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVolumeType?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFVolumeType(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFVolumeType?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFVolumeType?>.Publisher, CAFVolumeType> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitFuelEfficiency>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>?>.Publisher, Measurement<NSUnitFuelEfficiency>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEqualizerType?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFEqualizerType(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFEqualizerType?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFEqualizerType?>.Publisher, CAFEqualizerType> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaItems??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItems?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFMediaItems??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFMediaItems??>.Publisher, CAFMediaItems?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaSourceSemanticType?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFMediaSourceSemanticType(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFMediaSourceSemanticType?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFMediaSourceSemanticType?>.Publisher, CAFMediaSourceSemanticType> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaItemImages??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItemImages?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFMediaItemImages??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFMediaItemImages??>.Publisher, CAFMediaItemImages?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitLength>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitLength>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDefrostTypes?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFDefrostTypes(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFDefrostTypes?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFDefrostTypes?>.Publisher, CAFDefrostTypes> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEntryList?>);
  OUTLINED_FUNCTION_17();
  v2 = OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_98(v2, &lazy cache variable for type metadata for CAFEntryList);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFEntryList?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFEntryList?>.Publisher, CAFEntryList> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTargetSpeedState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFTargetSpeedState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTargetSpeedState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTargetSpeedState?>.Publisher, CAFTargetSpeedState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSensorState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFSensorState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFSensorState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSensorState?>.Publisher, CAFSensorState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPressure>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPressure>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPressure>?>.Publisher, Measurement<NSUnitPressure>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPressureState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFPressureState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFPressureState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPressureState?>.Publisher, CAFPressureState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher, Measurement<CAFUnitRotationalSpeed>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFRotationalSpeedState??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFRotationalSpeedState?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFRotationalSpeedState??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFRotationalSpeedState??>.Publisher, CAFRotationalSpeedState?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher, Measurement<CAFUnitRotationalSpeed>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Data?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Data?>.Publisher, Data> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPlaybackState??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFPlaybackState?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFPlaybackState??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPlaybackState??>.Publisher, CAFPlaybackState?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNotificationUserActions?>);
  OUTLINED_FUNCTION_17();
  v2 = OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_98(v2, &lazy cache variable for type metadata for CAFNotificationUserActions);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFNotificationUserActions?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFNotificationUserActions?>.Publisher, CAFNotificationUserActions> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSymbolImageWithColor??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFSymbolImageWithColor?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFSymbolImageWithColor??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSymbolImageWithColor??>.Publisher, CAFSymbolImageWithColor?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPower>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeatOccupancy??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFSeatOccupancy?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFSeatOccupancy??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSeatOccupancy??>.Publisher, CAFSeatOccupancy?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFLockState??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFLockState?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFLockState??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFLockState??>.Publisher, CAFLockState?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeatBeltIndicator?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFSeatBeltIndicator(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFSeatBeltIndicator?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSeatBeltIndicator?>.Publisher, CAFSeatBeltIndicator> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFBatteryLevelState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFBatteryLevelState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFBatteryLevelState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFBatteryLevelState?>.Publisher, CAFBatteryLevelState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTransmissionMode?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFTransmissionMode(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFTransmissionMode?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTransmissionMode?>.Publisher, CAFTransmissionMode> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFChargingState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFChargingState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFChargingState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFChargingState?>.Publisher, CAFChargingState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCableState??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFCableState?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFCableState??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFCableState??>.Publisher, CAFCableState?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPortSideIndicator??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFPortSideIndicator?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFPortSideIndicator??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPortSideIndicator??>.Publisher, CAFPortSideIndicator?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUISceneState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFUISceneState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFUISceneState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUISceneState?>.Publisher, CAFUISceneState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFuelLevelState?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFFuelLevelState(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFFuelLevelState?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFFuelLevelState?>.Publisher, CAFFuelLevelState> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>??>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFillLevelLabel?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFFillLevelLabel(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFFillLevelLabel?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFFillLevelLabel?>.Publisher, CAFFillLevelLabel> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_7_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPortSideIndicator?>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  type metadata accessor for CAFPortSideIndicator(0);
  OUTLINED_FUNCTION_20(&lazy protocol witness table cache variable for type Published<CAFPortSideIndicator?>.Publisher and conformance Published<A>.Publisher);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_24(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPortSideIndicator?>.Publisher, CAFPortSideIndicator> and conformance Publishers.CompactMap<A, B>);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_5();
}

void specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
}

{
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

void *specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return outlined copy of Data?(a1, a2);
}

void specialized SafeReadOnlyPublished.setValue(_:)(uint64_t a1)
{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitLength>??, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitDuration>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitDuration>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitPower>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitPower>??, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitLength>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitLength>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitPressure>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?, (uint64_t)&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitPower>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?, (uint64_t)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>?, (uint64_t)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?, (uint64_t)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>, specialized SafeReadOnlyPublished.value.setter);
}

{
  specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?, (void (*)(char *))specialized SafeReadOnlyPublished.value.setter);
}

void specialized SafePublished.setValue(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_94(a1, a2);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_114();
  OUTLINED_FUNCTION_101(v4, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16));
  __swift_storeEnumTagSinglePayload(v4, 0, 1, v8);
  a4(v4);
  OUTLINED_FUNCTION_81();
}

void specialized SafeReadOnlyPublished.setValue(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_94(a1, a2);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v9, a3);
  v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v10);
  a4(v9);
  OUTLINED_FUNCTION_81();
}

void specialized SafeReadOnlyPublished.init(observedValuekeypath:)()
{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDefrostTypes?>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFDefrostTypes?);
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  OUTLINED_FUNCTION_82();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_81();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

uint64_t key path getter for CAFTemperature.currentTemperature : CAFTemperature@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_currentTemperature);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

char *keypath_get_selector_targetTemperature()
{
  return sel_targetTemperature;
}

void key path getter for CAFTemperature.targetTemperature : CAFTemperature(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_targetTemperature);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void key path setter for CAFTemperature.targetTemperature : CAFTemperature(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  NSMeasurement v4;

  v2 = *a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v4 = Measurement._bridgeToObjectiveC()();
  isa = v4.super.isa;
  objc_msgSend(v2, sel_setTargetTemperature_, v4.super.isa, v4._doubleValue);

}

char *keypath_get_selector_vehicleLayoutKey()
{
  return sel_vehicleLayoutKey;
}

void sub_23743B450(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

char *keypath_get_selector_name()
{
  return sel_name;
}

void key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend(*a1, *a2);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  *a3 = v5;
  a3[1] = v7;
}

void sub_23743B4C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFTemperatureObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTemperature(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTemperature and conformance CAFTemperature()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFTemperature and conformance CAFTemperature;
  if (!lazy protocol witness table cache variable for type CAFTemperature and conformance CAFTemperature)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTemperature);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFTemperature, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTemperature and conformance CAFTemperature);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTemperatureObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

void lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (!*a1)
  {
    a3(a2);
    OUTLINED_FUNCTION_149();
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFTemperatureObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTemperatureObservable.currentTemperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$currentTemperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.targetTemperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.targetTemperature.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.targetTemperature.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$targetTemperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23743B734()
{
  return 24;
}

__n128 sub_23743B740(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(_QWORD))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(_QWORD))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(unint64_t))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(unint64_t))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

void specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(unsigned __int16 *a1)
{
  specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(a1, (uint64_t (*)(_QWORD))specialized closure #1 in SafePublished.projectedValue.getter);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  result = specialized closure #1 in SafePublished.projectedValue.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

{
  uint64_t result;

  result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(_QWORD))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(_QWORD))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

void specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized closure #1 in SafePublished.projectedValue.getter();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
  OUTLINED_FUNCTION_89();
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

void specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void *specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

void specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(unsigned __int16 *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_137(a1, a2);
  *(_WORD *)v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v3) & 1;
  OUTLINED_FUNCTION_89();
}

uint64_t specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in SafePublished.projectedValue.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned __int16 *a1)
{
  specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(a1, (uint64_t (*)(_QWORD))specialized closure #1 in SafePublished.projectedValue.getter);
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned __int16 *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  int v4;

  v4 = a2(*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (*((unsigned __int8 *)a1 + 3) << 24));
  *(_WORD *)a3 = v4;
  *(_BYTE *)(a3 + 2) = BYTE2(v4);
  *(_BYTE *)(a3 + 3) = HIBYTE(v4) & 1;
  OUTLINED_FUNCTION_89();
}

void *specialized closure #1 in SafePublished.projectedValue.getter@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned int *a1@<X0>, uint64_t (*a2)(unint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = a2(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40));
  *(_DWORD *)a3 = v4;
  *(_BYTE *)(a3 + 4) = BYTE4(v4);
  *(_BYTE *)(a3 + 5) = BYTE5(v4) & 1;
  OUTLINED_FUNCTION_89();
}

{
  uint64_t v4;

  v4 = a2(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
  *(_DWORD *)a3 = v4;
  *(_BYTE *)(a3 + 4) = BYTE4(v4) & 1;
  OUTLINED_FUNCTION_89();
}

void specialized closure #1 in SafePublished.projectedValue.getter(unsigned __int8 *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _BYTE *a3@<X8>)
{
  __int16 v4;

  v4 = a2(*a1 | (a1[1] << 8));
  *a3 = v4;
  a3[1] = HIBYTE(v4) & 1;
  OUTLINED_FUNCTION_89();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B8122FC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined copy of [Data]??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined copy of Data??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return outlined copy of Data?(a1, a2);
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

id outlined copy of CAFMediaItems??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t type metadata accessor for CAFTemperature(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void outlined init with copy of Measurement<CAFUnitPercent>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a3);
  v4 = OUTLINED_FUNCTION_150();
  v5(v4, a1);
  OUTLINED_FUNCTION_11();
}

void outlined destroy of Measurement<NSUnitTemperature>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_94(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_11();
}

uint64_t partial apply for closure #1 in CAFTemperatureObservable.resetCachedDescription()()
{
  return CAFTemperatureObservable.cachedDescription.setter(0, 0);
}

void lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    OUTLINED_FUNCTION_149();
  }
  OUTLINED_FUNCTION_11();
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return swift_setAtReferenceWritableKeyPath();
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_16()
{
  return swift_setAtReferenceWritableKeyPath();
}

uint64_t OUTLINED_FUNCTION_17()
{
  return Published.projectedValue.getter();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_19()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_20(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(a1, v1);
}

uint64_t OUTLINED_FUNCTION_21()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_23()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_24(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(a1, v1);
}

uint64_t OUTLINED_FUNCTION_25()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_30(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_32()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_33(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t))
{
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(a1, 255, a3);
}

uint64_t OUTLINED_FUNCTION_34()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_release();
}

void OUTLINED_FUNCTION_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

}

void OUTLINED_FUNCTION_39()
{
  ObservableObjectPublisher.send()();
}

uint64_t OUTLINED_FUNCTION_40()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_41()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_42()
{
  return swift_release();
}

id OUTLINED_FUNCTION_43()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_44()
{
  return type metadata accessor for CAFTypeTestObservable();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_49()
{
  return type metadata accessor for CAFTypeTestWithStatesObservable();
}

uint64_t OUTLINED_FUNCTION_50()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_51()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_52()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_53()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_54()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t OUTLINED_FUNCTION_55()
{
  return type metadata accessor for CAFTypeTestObservable();
}

uint64_t OUTLINED_FUNCTION_56()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_59()
{
  return swift_setAtReferenceWritableKeyPath();
}

uint64_t OUTLINED_FUNCTION_60()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_61()
{
  return type metadata accessor for CAFTypeTestWithStatesObservable();
}

uint64_t OUTLINED_FUNCTION_64()
{
  return type metadata accessor for CAFTypeTestObservable();
}

id OUTLINED_FUNCTION_65()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_66()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_69()
{
  uint64_t v0;

  return v0 & 0x1FFFFFFFFLL;
}

uint64_t OUTLINED_FUNCTION_70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_71()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_73(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_75()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_76(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

uint64_t OUTLINED_FUNCTION_77()
{
  return static Published.subscript.setter();
}

void OUTLINED_FUNCTION_79()
{
  _QWORD *v0;
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(v0, 255, v1);
}

uint64_t OUTLINED_FUNCTION_80()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_84()
{
  return type metadata accessor for CAFHistoricalNotificationObservable();
}

uint64_t OUTLINED_FUNCTION_85()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

id OUTLINED_FUNCTION_86()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_87()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_88()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_90(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t OUTLINED_FUNCTION_91()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_92()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return v1;
}

uint64_t OUTLINED_FUNCTION_94(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

void OUTLINED_FUNCTION_95(_QWORD *a1)
{
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(a1, 255, v1);
}

uint64_t OUTLINED_FUNCTION_96(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t OUTLINED_FUNCTION_97()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_98(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for CAFTemperature(0, a2);
}

void OUTLINED_FUNCTION_99()
{
  type metadata accessor for CAFSettingsCategory(0);
}

uint64_t OUTLINED_FUNCTION_100()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_101@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_103(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t))
{
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_104()
{
  unsigned int v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_105()
{
  return Published.init(initialValue:)();
}

void OUTLINED_FUNCTION_106()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 72) = 0;
}

uint64_t OUTLINED_FUNCTION_110()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_112()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_114()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_115()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_118()
{
  return type metadata accessor for CAFSoundDistributionObservable();
}

uint64_t OUTLINED_FUNCTION_119()
{
  return type metadata accessor for CAFCameraButtonObservable();
}

uint64_t OUTLINED_FUNCTION_120()
{
  return type metadata accessor for CAFSeatHeatingCoolingObservable();
}

uint64_t OUTLINED_FUNCTION_121()
{
  return type metadata accessor for CAFAutoClimateControlObservable();
}

uint64_t OUTLINED_FUNCTION_122()
{
  return type metadata accessor for CAFSeatFanObservable();
}

uint64_t OUTLINED_FUNCTION_123()
{
  return type metadata accessor for CAFVentObservable();
}

uint64_t OUTLINED_FUNCTION_124()
{
  return type metadata accessor for CAFFanObservable();
}

uint64_t OUTLINED_FUNCTION_125()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data?(v1, v0);
  return v1;
}

uint64_t OUTLINED_FUNCTION_126()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_127()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_128(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_130()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_131()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_133()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_135()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_136()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_137(unsigned __int16 *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1 | (*((unsigned __int8 *)a1 + 2) << 16));
}

uint64_t OUTLINED_FUNCTION_138()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_139()
{
  return type metadata accessor for CAFNowPlayingObservable();
}

uint64_t OUTLINED_FUNCTION_140()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_141()
{
  return Published.init(initialValue:)();
}

void OUTLINED_FUNCTION_142()
{
  specialized SafePublished.init(observedValuekeypath:)();
}

uint64_t OUTLINED_FUNCTION_146()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_147()
{
  type metadata accessor for CAFUnitType(0);
}

uint64_t OUTLINED_FUNCTION_148(uint64_t a1, void *a2)
{
  uint64_t v2;

  return specialized static SafePublished.subscript.setter(a1, a2, v2);
}

void OUTLINED_FUNCTION_149()
{
  JUMPOUT(0x23B812308);
}

uint64_t OUTLINED_FUNCTION_150()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_151(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

id OUTLINED_FUNCTION_152(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void one-time initialization function for allCases()
{
  static CAFLockState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFMediaCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFVentTypes.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSeatOccupancy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFFuelLevelState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFDeviceAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPlaybackState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFUIInputDeviceButtonEvent.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFButtonAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFMediaSourceSemanticType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFUIInputDevicePurpose.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFCableState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFChargingState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFBatteryLevelState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFEqualizerType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSensorState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFTemperatureState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFImageColor.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSeatBeltIndicator.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFTransmissionMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFFillLevelLabel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFUISceneState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFRotationalSpeedState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFNotificationSeverity.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFTargetSpeedState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSettingProminenceLevel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFVolumeType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFDefrostTypes.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPairedDeviceState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPressureState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFAutoModeIntensity.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPortSideIndicator.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSettingsCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static CAFLockState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFLockState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFLockState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFLockState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFLockState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromLockState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFLockState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(&lazy protocol witness table cache variable for type CAFLockState and conformance CAFLockState, (uint64_t)&protocol conformance descriptor for CAFLockState);
  a1[2] = lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(&lazy protocol witness table cache variable for type CAFLockState and conformance CAFLockState, (uint64_t)&protocol conformance descriptor for CAFLockState);
  result = lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(&lazy protocol witness table cache variable for type CAFLockState and conformance CAFLockState, (uint64_t)&protocol conformance descriptor for CAFLockState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFLockState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFLockState()
{
  return CAFLockState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFLockState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFLockState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFLockState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFLockState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFLockState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFLockState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFLockState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CAFLockState()
{
  return MEMORY[0x24BEE0D10];
}

void protocol witness for Identifiable.id.getter in conformance CAFLockState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void CAFAccessory.id.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x23B812308](MEMORY[0x24BDCEA88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFAccessory()
{
  CAFAccessory.id.getter();
}

id CAFClimateControlsLockedObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
}

uint64_t CAFClimateControlsLockedObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFClimateControlsLockedObservable.lockState : CAFClimateControlsLockedObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFClimateControlsLockedObservable.lockState.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFClimateControlsLockedObservable.lockState : CAFClimateControlsLockedObservable(unsigned __int8 *a1)
{
  return CAFClimateControlsLockedObservable.lockState.setter(*a1);
}

uint64_t CAFClimateControlsLockedObservable.lockState.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFClimateControlsLockedObservable.lockState.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFClimateControlsLockedObservable.lockState.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFClimateControlsLockedObservable.lockState.modify;
}

void CAFClimateControlsLockedObservable.lockState.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFClimateControlsLockedObservable.$lockState.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFClimateControlsLockedObservable.vehicleLayoutKey.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFClimateControlsLockedObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFClimateControlsLockedObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClimateControlsLockedObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForLockState))
  {
    CAFClimateControlsLockedObservable.lockState.getter();
    v4 = (id)NSStringFromLockState();
    if (v4)
    {
      v5 = v4;
      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v3 = v6;

    }
    else
    {
      v3 = (void *)0xE900000000000029;
      v2 = 0x6E776F6E6B6E7528;
    }
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
  {
    CAFClimateControlsLockedObservable.vehicleLayoutKey.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(80);
  v7._countAndFlagsBits = 0xD000000000000025;
  v7._object = (void *)0x80000002374DF250;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 0x536B636F6C207B20;
  v8._object = (void *)0xEE00203A65746174;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v2;
  v9._object = v3;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000002374DF1B0;
  v10._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v10);
  v11._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 4095264;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t CAFClimateControlsLockedObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFClimateControlsLockedObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFClimateControlsLockedObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFClimateControlsLockedObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFClimateControlsLockedObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFClimateControlsLockedObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__lockState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFClimateControlsLockedObservable, CAFLockState>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__vehicleLayoutKey;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClimateControlsLockedObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v12 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__name;
  v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClimateControlsLockedObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFClimateControlsLockedObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFClimateControlsLockedObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFClimateControlsLockedObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFClimateControlsLockedObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFClimateControlsLockedObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFClimateControlsLockedObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFClimateControlsLockedObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFClimateControlsLockedObservable(id *a1@<X8>)
{
  *a1 = CAFClimateControlsLockedObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23743D474(_BYTE *a1@<X8>)
{
  *a1 = CAFClimateControlsLockedObservable.lockState.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23743D498(unsigned __int8 *a1)
{
  CAFClimateControlsLockedObservable.lockState.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFClimateControlsLockedObservable(void **a1)
{
  CAFClimateControlsLockedObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFClimateControlsLockedObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFClimateControlsLockedObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFClimateControlsLockedObservable.climateControlsLockedService(_:didUpdateLockState:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFClimateControlsLockedObservable.climateControlsLockedService(_:didUpdateVehicleLayoutKey:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFClimateControlsLockedObservable.climateControlsLockedService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void CAFClimateControlsLockedObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t locked;

  locked = CAFClimateControlsLockedObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(locked);
}

uint64_t CAFClimateControlsLockedObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void specialized SafePublished.value.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_19_0();
  type metadata accessor for CAFTemperatureObservable();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_36_0(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v1, v2, (uint64_t)&protocol conformance descriptor for CAFTemperatureObservable);
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_72();
}

{
  uint64_t v0;

  type metadata accessor for CAFClimateControlsLockedObservable();
  type metadata accessor for CAFLockState(0);
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, v0, (uint64_t (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable, (uint64_t)&protocol conformance descriptor for CAFClimateControlsLockedObservable);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  static Published.subscript.setter();
  OUTLINED_FUNCTION_25_0();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  unint64_t *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_96(v2, v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_11_1(v0, 255, v1);
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  unint64_t *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_96(v2, v3);
  OUTLINED_FUNCTION_11_1(v0, 255, v1);
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  type metadata accessor for CAFProtocolPerfTestObservable();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable, (uint64_t)&protocol conformance descriptor for CAFProtocolPerfTestObservable);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  static Published.subscript.setter();
  OUTLINED_FUNCTION_25_0();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  void (*v0)(_QWORD);
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v1, v2);
  v0(0);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_37_0(v0, v1, v2);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_37_0(v0, v1, v2);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_31();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_90(v0, v1);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_62();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_19_0();
  type metadata accessor for CAFBatteryLevelObservable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  OUTLINED_FUNCTION_36_0(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, v1, v2, (uint64_t)&protocol conformance descriptor for CAFBatteryLevelObservable);
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_72();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

void specialized SafePublished.value.setter(uint64_t a1, uint64_t a2)
{
  specialized SafePublished.value.setter(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable, &lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable);
}

{
  specialized SafePublished.value.setter(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable, &lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable);
}

void specialized SafePublished.value.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  a3(0);
  OUTLINED_FUNCTION_11_1(a4, 255, a3);
  OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_31();
}

char *keypath_get_selector_lockState()
{
  return sel_lockState;
}

void sub_23743F2C4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_lockState);
  OUTLINED_FUNCTION_11();
}

id sub_23743F2F0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLockState_, *a1);
}

void key path getter for CAFClimateControlsLocked.vehicleLayoutKey : CAFClimateControlsLocked(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_vehicleLayoutKey);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void key path getter for CAFService.name : CAFClimateControlsLocked(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_name);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t type metadata accessor for CAFClimateControlsLockedObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFClimateControlsLocked(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable, (uint64_t)&protocol conformance descriptor for CAFClimateControlsLockedObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFClimateControlsLockedObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLocked and conformance CAFClimateControlsLocked, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFClimateControlsLocked, (uint64_t)&protocol conformance descriptor for CAFClimateControlsLocked);
}

unint64_t type metadata accessor for CAFClimateControlsLocked()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFClimateControlsLocked;
  if (!lazy cache variable for type metadata for CAFClimateControlsLocked)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFClimateControlsLocked);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFClimateControlsLockedObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable, (uint64_t)&protocol conformance descriptor for CAFClimateControlsLockedObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFClimateControlsLockedObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.lockState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.lockState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.lockState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.$lockState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t sub_23743F5B4()
{
  return 24;
}

__n128 sub_23743F5C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in CAFClimateControlsLockedObservable.resetCachedDescription()()
{
  return CAFClimateControlsLockedObservable.cachedDescription.setter(0, 0);
}

void lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x23B812308](a4, v6), a1);
  }
  OUTLINED_FUNCTION_11();
}

void _s10Foundation11MeasurementVySo14CAFUnitPercentCGSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_11();
}

void outlined destroy of Measurement<CAFUnitPercent>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_11();
}

void OUTLINED_FUNCTION_1_0()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(v1, 255, v2, v0);
}

void OUTLINED_FUNCTION_3_1()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(v1, 255, v2, v0);
}

void OUTLINED_FUNCTION_11_1(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return static Published.subscript.setter();
}

void OUTLINED_FUNCTION_26_0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  _s10Foundation11MeasurementVySo14CAFUnitPercentCGSgWOcTm_0(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_36_0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t);

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(a1, 255, v4, a4);
}

uint64_t OUTLINED_FUNCTION_37_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

void OUTLINED_FUNCTION_38_0()
{
  uint64_t v0;
  uint64_t *v1;

  outlined destroy of Measurement<CAFUnitPercent>?(v0, v1);
}

uint64_t static CAFMediaCategory.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFMediaCategory.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFMediaCategory.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFMediaCategory.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFMediaCategory.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromMediaCategory();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFMediaCategory(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(&lazy protocol witness table cache variable for type CAFMediaCategory and conformance CAFMediaCategory, (uint64_t)&protocol conformance descriptor for CAFMediaCategory);
  a1[2] = lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(&lazy protocol witness table cache variable for type CAFMediaCategory and conformance CAFMediaCategory, (uint64_t)&protocol conformance descriptor for CAFMediaCategory);
  result = lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(&lazy protocol witness table cache variable for type CAFMediaCategory and conformance CAFMediaCategory, (uint64_t)&protocol conformance descriptor for CAFMediaCategory);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFMediaCategory(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFMediaCategory()
{
  return CAFMediaCategory.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFMediaCategory] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFMediaCategory] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFMediaCategory] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFMediaCategory]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFMediaCategory] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFMediaCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFMediaCategory.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFMediaCategory(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFZonesSyncedObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
}

uint64_t CAFZonesSyncedObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFZonesSyncedObservable.on : CAFZonesSyncedObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFZonesSyncedObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFZonesSyncedObservable.on : CAFZonesSyncedObservable(unsigned __int8 *a1)
{
  return CAFZonesSyncedObservable.on.setter(*a1);
}

uint64_t CAFZonesSyncedObservable.on.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFZonesSyncedObservable.on.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFZonesSyncedObservable.on.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFZonesSyncedObservable.on.modify;
}

void CAFZonesSyncedObservable.on.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFZonesSyncedObservable.$on.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFZonesSyncedObservable.vehicleLayoutKey.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFZonesSyncedObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFZonesSyncedObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFZonesSyncedObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFZonesSyncedObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  char v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForOn))
  {
    v4 = CAFZonesSyncedObservable.on.getter();
    if ((v4 & 1) != 0)
      v2 = 1702195828;
    else
      v2 = 0x65736C6166;
    if ((v4 & 1) != 0)
      v3 = (void *)0xE400000000000000;
    else
      v3 = (void *)0xE500000000000000;
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
  {
    CAFZonesSyncedObservable.vehicleLayoutKey.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(63);
  v5._countAndFlagsBits = 0xD00000000000001BLL;
  v5._object = (void *)0x80000002374DF2E0;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x203A6E6F207B20;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000002374DF1B0;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFZonesSyncedObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFZonesSyncedObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFZonesSyncedObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFZonesSyncedObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFZonesSyncedObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFZonesSyncedObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFZonesSyncedObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__vehicleLayoutKey;
  v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFZonesSyncedObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  v12 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__name;
  v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFZonesSyncedObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for CAFZonesSyncedObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFZonesSyncedObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFZonesSyncedObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFZonesSyncedObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFZonesSyncedObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFZonesSyncedObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFZonesSyncedObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFZonesSyncedObservable(id *a1@<X8>)
{
  *a1 = CAFZonesSyncedObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374404FC(_BYTE *a1@<X8>)
{
  *a1 = CAFZonesSyncedObservable.on.getter() & 1;
  OUTLINED_FUNCTION_11();
}

void sub_237440524(unsigned __int8 *a1)
{
  CAFZonesSyncedObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFZonesSyncedObservable(void **a1)
{
  CAFZonesSyncedObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFZonesSyncedObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFZonesSyncedObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFZonesSyncedObservable.zonesSyncedService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFZonesSyncedObservable.zonesSyncedService(_:didUpdateVehicleLayoutKey:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFZonesSyncedObservable.zonesSyncedService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void CAFZonesSyncedObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFZonesSyncedObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFZonesSyncedObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_on()
{
  return sel_on;
}

void sub_2374408D4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_on);
  OUTLINED_FUNCTION_11();
}

id sub_237440900(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

uint64_t type metadata accessor for CAFZonesSyncedObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFZonesSynced(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFZonesSyncedObservable, (uint64_t)&protocol conformance descriptor for CAFZonesSyncedObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFZonesSyncedObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFZonesSynced and conformance CAFZonesSynced, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFZonesSynced, (uint64_t)&protocol conformance descriptor for CAFZonesSynced);
}

unint64_t type metadata accessor for CAFZonesSynced()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFZonesSynced;
  if (!lazy cache variable for type metadata for CAFZonesSynced)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFZonesSynced);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFZonesSyncedObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFZonesSyncedObservable, (uint64_t)&protocol conformance descriptor for CAFZonesSyncedObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFZonesSyncedObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t partial apply for closure #1 in CAFZonesSyncedObservable.resetCachedDescription()()
{
  return CAFZonesSyncedObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFVentTypes.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFVentTypes.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFVentTypes.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFVentTypes.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFVentTypes.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromVentTypes();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void CAFVentTypes.hasWindow.getter(uint64_t a1)
{
  objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 1);
  OUTLINED_FUNCTION_11();
}

void CAFVentTypes.hasUpper.getter(uint64_t a1)
{
  objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 2);
  OUTLINED_FUNCTION_11();
}

void CAFVentTypes.hasLower.getter(uint64_t a1)
{
  objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 4);
  OUTLINED_FUNCTION_11();
}

void CAFVentTypes.hasNeck.getter(uint64_t a1)
{
  objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 8);
  OUTLINED_FUNCTION_11();
}

void CAFVentTypes.hasMiddle.getter(uint64_t a1)
{
  objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 16);
  OUTLINED_FUNCTION_11();
}

uint64_t instantiation function for generic protocol witness table for CAFVentTypes(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(&lazy protocol witness table cache variable for type CAFVentTypes and conformance CAFVentTypes, (uint64_t)&protocol conformance descriptor for CAFVentTypes);
  a1[2] = lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(&lazy protocol witness table cache variable for type CAFVentTypes and conformance CAFVentTypes, (uint64_t)&protocol conformance descriptor for CAFVentTypes);
  result = lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(&lazy protocol witness table cache variable for type CAFVentTypes and conformance CAFVentTypes, (uint64_t)&protocol conformance descriptor for CAFVentTypes);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFVentTypes(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFVentTypes()
{
  return CAFVentTypes.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFVentTypes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFVentTypes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFVentTypes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFVentTypes]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFVentTypes] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFVentTypes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFVentTypes.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFVentTypes(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t CAFSeatHeatingCooling.onBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasOn, (SEL *)&selRef_on);
}

id CAFSeatHeatingCooling.onBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setOn_, a1 & 1);
}

uint64_t CAFSeatHeatingCooling.autoModeBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasAutoMode, (SEL *)&selRef_autoMode);
}

uint64_t CAFSeatHeatingCooling.onBridged.getter(SEL *a1, SEL *a2)
{
  void *v2;

  if (objc_msgSend(v2, *a1))
    return (uint64_t)objc_msgSend(v2, *a2);
  else
    return 2;
}

id CAFSeatHeatingCoolingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
}

uint64_t CAFSeatHeatingCoolingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void key path getter for CAFSeatHeatingCoolingObservable.on : CAFSeatHeatingCoolingObservable(_BYTE *a1@<X8>)
{
  char v2;

  CAFSeatHeatingCoolingObservable.on.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFSeatHeatingCoolingObservable.on : CAFSeatHeatingCoolingObservable()
{
  return CAFSeatHeatingCoolingObservable.on.setter();
}

void CAFSeatHeatingCoolingObservable.on.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_15_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_14_0((uint64_t)&v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_13_0();
}

uint64_t CAFSeatHeatingCoolingObservable.on.setter()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_25_1();
  return specialized static SafePublished.subscript.setter(v2);
}

void CAFSeatHeatingCoolingObservable.on.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  _BYTE *v6;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  LOBYTE(v3) = *v6;
  OUTLINED_FUNCTION_14_0(v0, v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFSeatHeatingCoolingObservable.on.modify(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(id *)(*(_QWORD *)a1 + 64);
  v3 = OUTLINED_FUNCTION_26_1();
  specialized static SafePublished.subscript.setter(v3);
  OUTLINED_FUNCTION_8_1(v1);
}

uint64_t CAFSeatHeatingCoolingObservable.$on.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFSeatHeatingCoolingObservable.heatingCoolingLevel : CAFSeatHeatingCoolingObservable(_DWORD *a1@<X8>)
{
  int v2;

  CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFSeatHeatingCoolingObservable.heatingCoolingLevel : CAFSeatHeatingCoolingObservable()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter();
}

void CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_15_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_14_0((uint64_t)&v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_13_0();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_25_1();
  return specialized static SafePublished.subscript.setter(v2);
}

void CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  _DWORD *v6;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  LODWORD(v3) = *v6;
  OUTLINED_FUNCTION_14_0(v0, v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_DWORD *)(v0 + 88) = (_DWORD)v3;
  OUTLINED_FUNCTION_81();
}

void CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(id *)(*(_QWORD *)a1 + 64);
  v3 = OUTLINED_FUNCTION_26_1();
  specialized static SafePublished.subscript.setter(v3);
  OUTLINED_FUNCTION_8_1(v1);
}

uint64_t CAFSeatHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__heatingCoolingLevel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.$on.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_0();
  v3 = OUTLINED_FUNCTION_32();
  v4 = a2(v3);
  OUTLINED_FUNCTION_25();
  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable.autoMode.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSeatHeatingCoolingObservable.$autoMode.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__autoMode, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter()
{
  return CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSeatHeatingCoolingObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.name.getter()
{
  return CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter();
}

void CAFSeatHeatingCoolingObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable._description.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;

  v1 = (void *)0xEE003E6465726574;
  v24 = 0x73696765726E753CLL;
  v2 = (uint64_t)OUTLINED_FUNCTION_152(a1, sel_registeredForOn);
  v3 = 0x73696765726E753CLL;
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v2)
  {
    CAFSeatHeatingCoolingObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v2 = OUTLINED_FUNCTION_24_0();
    v3 = v2;
    v4 = v5;
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_152(v2, sel_registeredForHeatingCoolingLevel);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter();
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
    v8 = v9;
  }
  v10 = (uint64_t)OUTLINED_FUNCTION_152(v6, sel_registeredForAutoMode);
  v11 = 0x73696765726E753CLL;
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFSeatHeatingCoolingObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v10 = OUTLINED_FUNCTION_24_0();
    v11 = v10;
    v12 = v13;
  }
  if (OUTLINED_FUNCTION_152(v10, sel_registeredForVehicleLayoutKey))
  {
    v24 = CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter();
    v1 = v14;
  }
  _StringGuts.grow(_:)(109);
  OUTLINED_FUNCTION_12_0(0xD000000000000022, (uint64_t)"<CAFSeatHeatingCoolingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v15._countAndFlagsBits = 0x203A6E6F207B20;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = v3;
  v16._object = v4;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD000000000000017, (uint64_t)", heatingCoolingLevel: ");
  v17._countAndFlagsBits = v7;
  v17._object = v8;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v18._object = (void *)0xEC000000203A6564;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v11;
  v19._object = v12;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x80000002374DF1B0;
  v20._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v24;
  v21._object = v1;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFSeatHeatingCoolingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFSeatHeatingCoolingObservable._description.getter(v3);
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFSeatHeatingCoolingObservable.cachedDescription.setter(v4, v7);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v5 + 4);
  OUTLINED_FUNCTION_25();
  return v4;
}

void CAFSeatHeatingCoolingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFSeatHeatingCoolingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFSeatHeatingCoolingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatHeatingCoolingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__heatingCoolingLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatHeatingCoolingObservable, Int32>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__autoMode;
  v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatHeatingCoolingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  v14 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatHeatingCoolingObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for CAFSeatHeatingCoolingObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFSeatHeatingCoolingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSeatHeatingCoolingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSeatHeatingCoolingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSeatHeatingCoolingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSeatHeatingCoolingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSeatHeatingCoolingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFSeatHeatingCoolingObservable(id *a1@<X8>)
{
  *a1 = CAFSeatHeatingCoolingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237441D88()
{
  _BYTE *v0;
  char v1;

  OUTLINED_FUNCTION_20_0();
  CAFSeatHeatingCoolingObservable.on.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_237441DA8()
{
  CAFSeatHeatingCoolingObservable.on.setter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFSeatHeatingCoolingObservable(void **a1)
{
  CAFSeatHeatingCoolingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSeatHeatingCoolingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSeatHeatingCoolingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateHeatingCoolingLevel:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateAutoMode:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateName:)()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)();
}

void CAFSeatHeatingCoolingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFSeatHeatingCoolingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFSeatHeatingCoolingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237442198()
{
  _DWORD *v0;
  int v1;

  OUTLINED_FUNCTION_20_0();
  CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374421B8()
{
  CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter();
  OUTLINED_FUNCTION_11();
}

void sub_2374421D8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.onBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374421F8(char *a1)
{
  CAFSeatHeatingCooling.onBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_heatingCoolingLevel()
{
  return sel_heatingCoolingLevel;
}

void sub_237442224(id *a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_heatingCoolingLevel);
  OUTLINED_FUNCTION_11();
}

id sub_237442250(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHeatingCoolingLevel_, *a1);
}

void sub_237442264()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.autoModeBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237442284(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void sub_2374422A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFSeatHeatingCoolingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSeatHeatingCooling(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSeatHeatingCoolingObservable, (uint64_t)&protocol conformance descriptor for CAFSeatHeatingCoolingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSeatHeatingCoolingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSeatHeatingCooling and conformance CAFSeatHeatingCooling, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSeatHeatingCooling, (uint64_t)&protocol conformance descriptor for CAFSeatHeatingCooling);
}

unint64_t type metadata accessor for CAFSeatHeatingCooling()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSeatHeatingCooling;
  if (!lazy cache variable for type metadata for CAFSeatHeatingCooling)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSeatHeatingCooling);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFSeatHeatingCoolingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSeatHeatingCoolingObservable, (uint64_t)&protocol conformance descriptor for CAFSeatHeatingCoolingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFSeatHeatingCoolingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t partial apply for closure #1 in CAFSeatHeatingCoolingObservable.resetCachedDescription()()
{
  return CAFSeatHeatingCoolingObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_8_1(void *a1)
{
  free(a1);
}

void OUTLINED_FUNCTION_12_0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_14_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  return a2(a1, 0);
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  uint64_t v0;

  return specialized SafePublished.init(observedValuekeypath:)(v0);
}

uint64_t OUTLINED_FUNCTION_22_1(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = result;
  *(_QWORD *)(result + 64) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  uint64_t v0;

  return v0;
}

void *OUTLINED_FUNCTION_27_0()
{
  return malloc(0x60uLL);
}

uint64_t specialized static SafePublished.subscript.getter(void *a1)
{
  char *v1;
  void (*v2)(_BYTE *, _QWORD);
  void *v3;
  id v4;
  void (*v5)(_BYTE *, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[32];
  id v10;

  v10 = a1;
  v1 = a1;
  v2 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  swift_retain();
  v2(v9, 0);

  v3 = *(void **)&v1[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed];
  v10 = v3;
  swift_retain_n();
  v4 = v3;
  v5 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v7 = *v6;
  swift_bridgeObjectRetain();
  v5(v9, 0);
  swift_release_n();
  swift_release();

  return v7;
}

void specialized static SafePublished.subscript.getter(void *a1)
{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;

  OUTLINED_FUNCTION_20_1(a1);
  OUTLINED_FUNCTION_1_1();
  v2 = OUTLINED_FUNCTION_19_2();
  v3 = OUTLINED_FUNCTION_13_1(v2);
  OUTLINED_FUNCTION_38(v3, v4, v5, v6, v7, v8, v9, v10, v21, v23, v25, v27, v29, v31);
  OUTLINED_FUNCTION_4_1();
  v11 = v1;
  OUTLINED_FUNCTION_1_1();
  v12 = OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_26_2(v12);
  OUTLINED_FUNCTION_112();
  v13 = OUTLINED_FUNCTION_33_1();
  OUTLINED_FUNCTION_38(v13, v14, v15, v16, v17, v18, v19, v20, v22, v24, v26, v28, v30, v32);
  OUTLINED_FUNCTION_42_0();
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  v1 = a1;
  OUTLINED_FUNCTION_13();
  v2 = OUTLINED_FUNCTION_146();
  v3 = OUTLINED_FUNCTION_26_2(v2);
  OUTLINED_FUNCTION_38(v3, v4, v5, v6, v7, v8, v9, v10, v21, v23, v25, v27, v29, a1);
  v32 = *(void **)&v1[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed];
  swift_retain_n();
  v11 = v32;
  OUTLINED_FUNCTION_13();
  v12 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_1(v12);
  OUTLINED_FUNCTION_37();
  v13 = swift_release_n();
  OUTLINED_FUNCTION_38(v13, v14, v15, v16, v17, v18, v19, v20, v22, v24, v26, v28, v30, v32);
  OUTLINED_FUNCTION_36_1();
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  specialized static SafePublished.subscript.getter(a1);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;

  OUTLINED_FUNCTION_20_1(a1);
  OUTLINED_FUNCTION_1_1();
  v2 = OUTLINED_FUNCTION_19_2();
  v3 = OUTLINED_FUNCTION_13_1(v2);
  OUTLINED_FUNCTION_38(v3, v4, v5, v6, v7, v8, v9, v10, v21, v23, v25, v27, v29, v31);
  OUTLINED_FUNCTION_4_1();
  v11 = v1;
  OUTLINED_FUNCTION_1_1();
  v12 = OUTLINED_FUNCTION_64_0();
  OUTLINED_FUNCTION_26_2(v12);
  OUTLINED_FUNCTION_112();
  v13 = OUTLINED_FUNCTION_33_1();
  OUTLINED_FUNCTION_38(v13, v14, v15, v16, v17, v18, v19, v20, v22, v24, v26, v28, v30, v32);
  OUTLINED_FUNCTION_36_1();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;

  OUTLINED_FUNCTION_20_1(a1);
  OUTLINED_FUNCTION_1_1();
  v2 = OUTLINED_FUNCTION_19_2();
  v3 = OUTLINED_FUNCTION_13_1(v2);
  OUTLINED_FUNCTION_38(v3, v4, v5, v6, v7, v8, v9, v10, v21, v23, v25, v27, v29, v31);
  OUTLINED_FUNCTION_4_1();
  v11 = v1;
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_26_2((uint64_t)*v12);
  OUTLINED_FUNCTION_112();
  v13 = OUTLINED_FUNCTION_33_1();
  OUTLINED_FUNCTION_38(v13, v14, v15, v16, v17, v18, v19, v20, v22, v24, v26, v28, v30, v32);
  OUTLINED_FUNCTION_36_1();
}

void specialized static SafePublished.subscript.getter(void *a1@<X0>, uint64_t *a2@<X8>)
{
  specialized static SafePublished.subscript.getter(a1, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed, a2);
}

{
  specialized static SafePublished.subscript.getter(a1, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed, a2);
}

{
  specialized static SafePublished.subscript.getter(a1, &OBJC_IVAR____TtC10CAFCombine21CAFTypeTestObservable_observed, a2);
}

void specialized static SafePublished.subscript.getter(void *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  char *v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  v35 = a1;
  v5 = a1;
  v6 = (uint64_t (*)(uint64_t *, _QWORD))OUTLINED_FUNCTION_59_0();
  swift_retain();
  v7 = v6(&v31, 0);
  OUTLINED_FUNCTION_38(v7, v8, v9, v10, v11, v12, v13, v14, v29, v31, v32, v33, v34, v35);
  v15 = *(void **)&v5[*a2];
  v35 = v15;
  swift_retain_n();
  v16 = v15;
  OUTLINED_FUNCTION_59_0();
  v18 = *v17;
  v19 = v17[1];
  *a3 = v18;
  a3[1] = v19;
  v20 = outlined copy of Data?(v18, v19);
  OUTLINED_FUNCTION_13_1(v20);
  swift_release();
  v21 = swift_release_n();
  OUTLINED_FUNCTION_38(v21, v22, v23, v24, v25, v26, v27, v28, v30, v31, v32, v33, v34, v35);
}

uint64_t CAFMultipleSelectImageSetting.sortOrderBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = objc_msgSend(v0, sel_hasSortOrder);
  v2 = v1;
  if (v1)
    v1 = objc_msgSend(v0, sel_sortOrder);
  return v1 | ((v2 ^ 1) << 8);
}

uint64_t CAFMultipleSelectImageSetting.disabledBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasDisabled, (SEL *)&selRef_disabled);
}

uint64_t CAFMultipleSelectImageSetting.limitableUIElementBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasLimitableUIElement, (SEL *)&selRef_limitableUIElement);
}

uint64_t CAFMultipleSelectImageSetting.hiddenBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasHidden, (SEL *)&selRef_hidden);
}

uint64_t CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasShowAudioBrandLogo, (SEL *)&selRef_showAudioBrandLogo);
}

void CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  v1 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_11;
LABEL_3:
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_unsignedCharValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_11;
  }
  __break(1u);
}

void CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = 0;
    do
    {
      v5 = v4 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedChar_, *(unsigned __int8 *)(a1 + v4 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 = v5;
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setIndicesUserVisibleValue_, isa);

}

id CAFMultipleSelectImageSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
}

uint64_t CAFMultipleSelectImageSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFMultipleSelectImageSettingObservable.userVisibleLabel.getter()
{
  CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_40_0();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFMultipleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFMultipleSelectImageSettingObservable.$sortOrder.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectImageSettingObservable.$category.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.identifier.getter()
{
  CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectImageSettingObservable.$identifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.disabled.getter()
{
  CAFMultipleSelectImageSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_40_0();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectImageSettingObservable.$disabled.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.limitableUIElement.getter()
{
  CAFMultipleSelectImageSettingObservable.disabled.getter();
}

void CAFMultipleSelectImageSettingObservable.$limitableUIElement.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.hidden.getter()
{
  CAFMultipleSelectImageSettingObservable.disabled.getter();
}

void CAFMultipleSelectImageSettingObservable.$hidden.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  CAFMultipleSelectImageSettingObservable.disabled.getter();
}

void CAFMultipleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.symbolName.getter()
{
  CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectImageSettingObservable.$symbolName.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectImageSettingObservable.$prominenceInfo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void key path getter for CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue : CAFMultipleSelectImageSettingObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue : CAFMultipleSelectImageSettingObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.setter(v0);
}

void CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter()
{
  void *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  id v4;

  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  v4 = OUTLINED_FUNCTION_69_0();
  return specialized static SafePublished.subscript.setter(a1, v4, KeyPath, v1);
}

void CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  a1[2] = swift_getKeyPath();
  a1[3] = swift_getKeyPath();
  *a1 = specialized static SafePublished.subscript.getter(v1);
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify(uint64_t *a1, char a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *a1;
  v5 = (id)a1[1];
  v8 = a1 + 2;
  v7 = a1[2];
  v6 = v8[1];
  if ((a2 & 1) == 0)
    return specialized static SafePublished.subscript.setter(v4, v5, v7, v6);
  v9 = OUTLINED_FUNCTION_71_0();
  specialized static SafePublished.subscript.setter(v9, v5, v7, v6);
  return OUTLINED_FUNCTION_5_1();
}

uint64_t CAFMultipleSelectImageSettingObservable.$indicesUserVisibleValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_40_0();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__listUserVisibleValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.images.getter()
{
  CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter();
}

void CAFMultipleSelectImageSettingObservable.$images.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__images, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.name.getter()
{
  CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectImageSettingObservable.$name.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_15_1();
  a2(v3);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFMultipleSelectImageSettingObservable._description.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  v2 = (uint64_t)OUTLINED_FUNCTION_67(a1, sel_registeredForIndicesUserVisibleValue);
  v3 = 0x73696765726E753CLL;
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v5 = specialized static SafePublished.subscript.getter(v1);
    OUTLINED_FUNCTION_25();
    swift_release();
    v3 = MEMORY[0x23B811C3C](v5, MEMORY[0x24BEE4260]);
    v4 = v6;
    v2 = swift_bridgeObjectRelease();
  }
  v7 = (uint64_t)OUTLINED_FUNCTION_67(v2, sel_registeredForListUserVisibleValue);
  v8 = 0x73696765726E753CLL;
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter();
    v8 = MEMORY[0x23B811C3C]();
    v9 = v10;
    v7 = swift_bridgeObjectRelease();
  }
  if (OUTLINED_FUNCTION_67(v7, sel_registeredForImageList))
  {
    CAFMultipleSelectImageSettingObservable.images.getter();
    MEMORY[0x23B811C3C]();
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(115);
  OUTLINED_FUNCTION_12_0(0xD00000000000002ALL, (uint64_t)"<CAFMultipleSelectImageSettingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_12_0(0xD00000000000001CLL, (uint64_t)" { indicesUserVisibleValue: ");
  v11._countAndFlagsBits = v3;
  v11._object = v4;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x80000002374DF6B0;
  v12._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v8;
  v13._object = v9;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x736567616D69202CLL;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4095264;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  return 0;
}

void CAFMultipleSelectImageSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    OUTLINED_FUNCTION_71_0();
  }
  else
  {
    CAFMultipleSelectImageSettingObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFMultipleSelectImageSettingObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_24_1();
}

void CAFMultipleSelectImageSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFMultipleSelectImageSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFMultipleSelectImageSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  objc_super v34;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__indicesUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFMultipleSelectImageSettingObservable, [UInt8]>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__listUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, [String]>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v26] = v27;
  v28 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__images;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, [Data]>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v28] = v29;
  v30 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v30] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed] = a1;
  v31 = a1;

  v34.receiver = v9;
  v34.super_class = (Class)type metadata accessor for CAFMultipleSelectImageSettingObservable();
  v32 = objc_msgSendSuper2(&v34, sel_init);
  objc_msgSend(v31, sel_registerObserver_, v32);

  return v32;
}

void CAFMultipleSelectImageSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFMultipleSelectImageSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFMultipleSelectImageSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFMultipleSelectImageSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFMultipleSelectImageSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFMultipleSelectImageSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFMultipleSelectImageSettingObservable(id *a1@<X8>)
{
  *a1 = CAFMultipleSelectImageSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFMultipleSelectImageSettingObservable(void **a1)
{
  CAFMultipleSelectImageSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFMultipleSelectImageSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v8;
  id v9;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = a3;
  v9 = a1;
  a5();

  return OUTLINED_FUNCTION_5_1();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  if (a4)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a3;
  v11 = OUTLINED_FUNCTION_69_0();
  a5(v11, v7, v9);

  return OUTLINED_FUNCTION_5_1();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateIndicesUserVisibleValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_61_0();
  if (a2 >> 62)
  {
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_40();
  }
  if (!v3)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27();
    return;
  }
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, a2);
      else
        v5 = *(id *)(a2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_unsignedCharValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2)
{
  return CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__listUserVisibleValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateImages:)(uint64_t a1, uint64_t a2)
{
  return CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__images, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  OUTLINED_FUNCTION_15_1();
  v5 = OUTLINED_FUNCTION_64_0();
  a4(v5);
  return OUTLINED_FUNCTION_18_0();
}

uint64_t @objc CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  id v8;
  id v9;

  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = OUTLINED_FUNCTION_69_0();
  v9 = a1;
  a6();

  return OUTLINED_FUNCTION_5_1();
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateName:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFMultipleSelectImageSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFMultipleSelectImageSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFMultipleSelectImageSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237444774()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_userVisibleLabel()
{
  return sel_userVisibleLabel;
}

void sub_2374447A4(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel, a4);
}

char *keypath_get_selector_sectionIdentifier()
{
  return sel_sectionIdentifier;
}

void sub_2374447CC(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier, a4);
}

uint64_t key path getter for CAFMultipleSelectImageSetting.sortOrderBridged : CAFMultipleSelectImageSetting@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFMultipleSelectImageSetting.sortOrderBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

char *keypath_get_selector_category()
{
  return sel_category;
}

void sub_237444828(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

void sub_237444860(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_identifier, a4);
}

void sub_23744487C()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23744489C()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374448BC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374448DC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374448FC(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey, a4);
}

char *keypath_get_selector_symbolName()
{
  return sel_symbolName;
}

void key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, SEL *a4@<X3>, uint64_t *a5@<X8>)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = OUTLINED_FUNCTION_48_0(a1, a2, a3, a4);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  *a5 = v8;
  a5[1] = v10;
  OUTLINED_FUNCTION_24_1();
}

void sub_237444974(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_symbolName, a4);
}

char *keypath_get_selector_prominenceInfo()
{
  return sel_prominenceInfo;
}

id key path getter for CAFAutomakerSetting.prominenceInfo : CAFMultipleSelectImageSetting@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_prominenceInfo);
  *a2 = result;
  return result;
}

void sub_2374449D8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged : CAFMultipleSelectImageSetting()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.setter(v0);
}

char *keypath_get_selector_listUserVisibleValue()
{
  return sel_listUserVisibleValue;
}

void sub_237444A30(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFMultipleSelectImageSetting.listUserVisibleValue : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_listUserVisibleValue, a4);
}

char *keypath_get_selector_images()
{
  return sel_images;
}

void key path getter for CAFMultipleSelectImageSetting.listUserVisibleValue : CAFMultipleSelectImageSetting(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, SEL *a4@<X3>, uint64_t *a5@<X8>)
{
  id v6;
  uint64_t v7;

  v6 = OUTLINED_FUNCTION_48_0(a1, a2, a3, a4);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a5 = v7;
  OUTLINED_FUNCTION_24_1();
}

void sub_237444AA4(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFMultipleSelectImageSetting.listUserVisibleValue : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_images, a4);
}

void key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, SEL *a4@<X3>, uint64_t *a5@<X8>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = OUTLINED_FUNCTION_48_0(a1, a2, a3, a4);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  *a5 = v7;
  a5[1] = v9;
  OUTLINED_FUNCTION_24_1();
}

void sub_237444B08(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_name, a4);
}

uint64_t type metadata accessor for CAFMultipleSelectImageSettingObservable()
{
  return objc_opt_self();
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 < a1
         || a1 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for CAUVehicleLayoutKey() - 8) + 72) * a2 <= a3)
  {
    type metadata accessor for CAUVehicleLayoutKey();
    OUTLINED_FUNCTION_68();
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 == a1)
  {
    OUTLINED_FUNCTION_33_0();
  }
  else
  {
    OUTLINED_FUNCTION_68();
    swift_arrayInitWithTakeBackToFront();
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_2();
    __src = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[2 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_9_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_9_1(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_9_1(a3, result);
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (v3 = a1 + 8 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFService]);
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_29_1();
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
    {
      type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFService);
      return swift_arrayInitWithCopy();
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_28_0();
  }
  result = OUTLINED_FUNCTION_3_2();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if ((a2 & 0x8000000000000000) == 0 && (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst))
    return memcpy(__dst, __src, 8 * a2);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void *result;

  if ((a2 & 0x8000000000000000) == 0 && (&__dst[4 * a2] <= __src || &__src[4 * a2] <= __dst))
    return memcpy(__dst, __src, 4 * a2);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *a1, size_t a2, char *a3)
{
  void *result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_29_1();
  }
  else
  {
    if (&a3[a2] <= a1 || &a1[a2] <= a3)
      return OUTLINED_FUNCTION_10_1(a3, a1, a2);
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_28_0();
  }
  result = (void *)OUTLINED_FUNCTION_3_2();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *a1, uint64_t a2, char *a3)
{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_29_1();
  }
  else
  {
    if (&a3[2 * a2] <= a1 || &a1[2 * a2] <= a3)
      return OUTLINED_FUNCTION_10_1(a3, a1, 2 * a2);
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_28_0();
  }
  result = (void *)OUTLINED_FUNCTION_3_2();
  __break(1u);
  return result;
}

{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_29_1();
  }
  else
  {
    if (&a3[4 * a2] <= a1 || &a1[4 * a2] <= a3)
      return OUTLINED_FUNCTION_10_1(a3, a1, 4 * a2);
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_28_0();
  }
  result = (void *)OUTLINED_FUNCTION_3_2();
  __break(1u);
  return result;
}

{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_29_1();
  }
  else
  {
    if (&a3[8 * a2] <= a1 || &a1[8 * a2] <= a3)
      return OUTLINED_FUNCTION_10_1(a3, a1, 8 * a2);
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_28_0();
  }
  result = (void *)OUTLINED_FUNCTION_3_2();
  __break(1u);
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[CAFService]>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CAFVentTypes>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFMultipleSelectImageSetting()
{
  lazy protocol witness table accessor for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, (uint64_t)&protocol conformance descriptor for CAFMultipleSelectImageSettingObservable);
}

unint64_t lazy protocol witness table accessor for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting;
  if (!lazy protocol witness table cache variable for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFMultipleSelectImageSetting);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFMultipleSelectImageSetting, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFMultipleSelectImageSettingObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, (uint64_t)&protocol conformance descriptor for CAFMultipleSelectImageSettingObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFMultipleSelectImageSettingObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFMultipleSelectImageSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))() & 0x1FF;
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$indicesUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.images.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$images.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 560))();
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  uint64_t v19;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_31_1();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_55_0();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_30_0();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    OUTLINED_FUNCTION_44_0(a1, a2, a3, a4, a5);
    v16 = (_QWORD *)OUTLINED_FUNCTION_34_0();
    v17 = _swift_stdlib_malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 8);
  }
  else
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v18 = v16 + 4;
  v19 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v19, v14, v18);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v19, v14, v18);
  }
  OUTLINED_FUNCTION_27();
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  OUTLINED_FUNCTION_70_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_31_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_55_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_30_0();
    }
  }
  OUTLINED_FUNCTION_41_0();
  if (v2)
  {
    OUTLINED_FUNCTION_44_0(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_34_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_52_0(v12 - 32);
  }
  v13 = (char *)OUTLINED_FUNCTION_38_1();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v14, v15);
  }
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_24_1();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  size_t v13;
  char *v14;
  size_t v15;
  char *v16;

  OUTLINED_FUNCTION_70_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_31_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_55_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_30_0();
    }
  }
  OUTLINED_FUNCTION_41_0();
  if (v3)
  {
    OUTLINED_FUNCTION_44_0(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v12[2] = v2;
    v12[3] = 2 * v13 - 64;
  }
  v14 = (char *)OUTLINED_FUNCTION_38_1();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v15, v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v15, v16);
  }
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_24_1();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  OUTLINED_FUNCTION_70_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_31_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_55_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_30_0();
    }
  }
  OUTLINED_FUNCTION_41_0();
  if (v2)
  {
    OUTLINED_FUNCTION_44_0(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_34_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_52_0(v12 - 32);
  }
  v13 = (char *)OUTLINED_FUNCTION_38_1();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v14, v15);
  }
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_24_1();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  OUTLINED_FUNCTION_70_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_31_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_55_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_30_0();
    }
  }
  OUTLINED_FUNCTION_41_0();
  if (v2)
  {
    OUTLINED_FUNCTION_44_0(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_34_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_52_0(v12 - 32);
  }
  v13 = (char *)OUTLINED_FUNCTION_38_1();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v14, v15);
  }
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_24_1();
}

uint64_t partial apply for closure #1 in CAFMultipleSelectImageSettingObservable.resetCachedDescription()()
{
  return CAFMultipleSelectImageSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return swift_bridgeObjectRelease();
}

void *OUTLINED_FUNCTION_9_1@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

void *OUTLINED_FUNCTION_10_1(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t OUTLINED_FUNCTION_13_1(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  uint64_t v0;

  return specialized SafePublished.init(observedValuekeypath:)(v0);
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return swift_retain();
}

id OUTLINED_FUNCTION_20_1(id a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_26_2(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  uint64_t v0;

  return specialized SafePublished.init(observedValuekeypath:)(v0);
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_44_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return swift_allocObject();
}

id OUTLINED_FUNCTION_48_0(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  return objc_msgSend(*a1, *a4);
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_52_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_67(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_68()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_69_0()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSeatOccupancy.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSeatOccupancy.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFSeatOccupancy.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSeatOccupancy.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSeatOccupancy.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromSeatOccupancy();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFSeatOccupancy(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(&lazy protocol witness table cache variable for type CAFSeatOccupancy and conformance CAFSeatOccupancy, (uint64_t)&protocol conformance descriptor for CAFSeatOccupancy);
  a1[2] = lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(&lazy protocol witness table cache variable for type CAFSeatOccupancy and conformance CAFSeatOccupancy, (uint64_t)&protocol conformance descriptor for CAFSeatOccupancy);
  result = lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(&lazy protocol witness table cache variable for type CAFSeatOccupancy and conformance CAFSeatOccupancy, (uint64_t)&protocol conformance descriptor for CAFSeatOccupancy);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSeatOccupancy(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSeatOccupancy()
{
  return CAFSeatOccupancy.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSeatOccupancy] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFSeatOccupancy] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSeatOccupancy] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFSeatOccupancy]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSeatOccupancy] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSeatOccupancy@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFSeatOccupancy.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFSeatOccupancy(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void CAFCharacteristic.id.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

}

void protocol witness for Identifiable.id.getter in conformance CAFCharacteristic()
{
  CAFCharacteristic.id.getter();
}

uint64_t static CAFFuelLevelState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFFuelLevelState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFFuelLevelState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFFuelLevelState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFFuelLevelState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromFuelLevelState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFFuelLevelState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(&lazy protocol witness table cache variable for type CAFFuelLevelState and conformance CAFFuelLevelState, (uint64_t)&protocol conformance descriptor for CAFFuelLevelState);
  a1[2] = lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(&lazy protocol witness table cache variable for type CAFFuelLevelState and conformance CAFFuelLevelState, (uint64_t)&protocol conformance descriptor for CAFFuelLevelState);
  result = lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(&lazy protocol witness table cache variable for type CAFFuelLevelState and conformance CAFFuelLevelState, (uint64_t)&protocol conformance descriptor for CAFFuelLevelState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFFuelLevelState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFFuelLevelState()
{
  return CAFFuelLevelState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFFuelLevelState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFFuelLevelState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFFuelLevelState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFFuelLevelState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFFuelLevelState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFFuelLevelState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFFuelLevelState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFFuelLevelState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFCarObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFCarObservable_observed);
}

uint64_t key path getter for CAFCarObservable.receivedAllValues : CAFCarObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCarObservable.receivedAllValues.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFCarObservable.receivedAllValues : CAFCarObservable()
{
  return CAFCarObservable.receivedAllValues.setter();
}

uint64_t CAFCarObservable.receivedAllValues.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v1;
}

void sub_237446AC8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCarObservable.receivedAllValues.getter() & 1;
  OUTLINED_FUNCTION_11();
}

void sub_237446AEC()
{
  CAFCarObservable.receivedAllValues.setter();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFCarObservable.receivedAllValues.setter()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  return static Published.subscript.setter();
}

uint64_t CAFCarObservable.$receivedAllValues.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__receivedAllValues, &demangling cache variable for type metadata for Published<Bool>);
}

uint64_t CAFCarObservable.$receivedAllValues.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__receivedAllValues, &demangling cache variable for type metadata for Published<Bool>);
}

void key path getter for CAFCarObservable.audioSettings : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.audioSettings.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.audioSettings : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.audioSettings.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  CAFCarObservable.audioSettings.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000028, 0x80000002374DFB00, 0x7465536F69647561, 0xED000073676E6974);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.audioSettings.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237446D2C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.audioSettings.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.audioSettings.setter()
{
  CAFCarObservable.audioSettings.setter();
}

{
  void (*v0)(uint64_t);
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_52_1();
  v3 = v2;
  v4 = v1;
  v5 = OUTLINED_FUNCTION_38_2();
  v0(v5);

  OUTLINED_FUNCTION_32_1();
}

uint64_t key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_143();
  v11 = v10 - v9;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v10 - v9, a1);
  return a6(v11);
}

uint64_t CAFCarObservable.$audioSettings.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__audioSettings, &demangling cache variable for type metadata for Published<CAFAudioSettings?>);
}

uint64_t CAFCarObservable.$audioSettings.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAudioSettings?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__audioSettings, &demangling cache variable for type metadata for Published<CAFAudioSettings?>);
}

void key path getter for CAFCarObservable.automakerExteriorCamera : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.automakerExteriorCamera.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.automakerExteriorCamera : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.automakerExteriorCamera.setter();
}

uint64_t CAFCarObservable.automakerExteriorCamera.didset()
{
  Swift::String v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  os_log_type_t v8;

  _StringGuts.grow(_:)(52);
  v0._countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x80000002374DFB30;
  String.append(_:)(v0);
  CAFCarObservable.automakerExteriorCamera.getter();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_description);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xE500000000000000;
    v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000017, 0x80000002374DFB70);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.automakerExteriorCamera.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237446FA0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.automakerExteriorCamera.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.automakerExteriorCamera.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$automakerExteriorCamera.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerExteriorCamera, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>);
}

uint64_t CAFCarObservable.$automakerExteriorCamera.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerExteriorCamera, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>);
}

void key path getter for CAFCarObservable.automakerInputStreams : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.automakerInputStreams.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.automakerInputStreams : CAFCarObservable()
{
  swift_bridgeObjectRetain();
  CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.automakerInputStreams.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  CAFCarObservable.automakerInputStreams.getter();
  v1 = v0;
  v2 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerInputStreams);
  v3 = MEMORY[0x23B811C3C](v1, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000030, 0x80000002374DFB90, 0xD000000000000015, 0x80000002374DFBD0);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.automakerInputStreams.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

{
  swift_getKeyPath();
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_56_0();
}

void sub_237447184()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.automakerInputStreams.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.automakerInputStreams.setter()
{
  CAFCarObservable.automakerInputStreams.setter();
}

{
  void (*v0)(uint64_t);
  void *v1;
  id v2;
  uint64_t v3;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_52_1();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_38_2();
  v0(v3);
  OUTLINED_FUNCTION_32_1();
}

uint64_t CAFCarObservable.$automakerInputStreams.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerInputStreams, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>);
}

uint64_t CAFCarObservable.$automakerInputStreams.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerInputStreams, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>);
}

void key path getter for CAFCarObservable.automakerNotificationHistory : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.automakerNotificationHistory.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.automakerNotificationHistory : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.automakerNotificationHistory.setter();
}

uint64_t CAFCarObservable.automakerNotificationHistory.didset()
{
  Swift::String v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  os_log_type_t v8;

  _StringGuts.grow(_:)(57);
  v0._countAndFlagsBits = 0xD000000000000037;
  v0._object = (void *)0x80000002374DFBF0;
  String.append(_:)(v0);
  CAFCarObservable.automakerNotificationHistory.getter();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_description);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xE500000000000000;
    v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD00000000000001CLL, 0x80000002374DFC30);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.automakerNotificationHistory.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_23744737C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.automakerNotificationHistory.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.automakerNotificationHistory.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$automakerNotificationHistory.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotificationHistory, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>);
}

uint64_t CAFCarObservable.$automakerNotificationHistory.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotificationHistory, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>);
}

void key path getter for CAFCarObservable.automakerNotifications : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.automakerNotifications.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.automakerNotifications : CAFCarObservable()
{
  swift_bridgeObjectRetain();
  CAFCarObservable.automakerNotifications.setter();
}

uint64_t CAFCarObservable.automakerNotifications.didset()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  os_log_type_t v8;

  _StringGuts.grow(_:)(51);
  v0._countAndFlagsBits = 0xD000000000000031;
  v0._object = (void *)0x80000002374DFC50;
  String.append(_:)(v0);
  CAFCarObservable.automakerNotifications.getter();
  v2 = v1;
  v3 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerNotifications);
  v4 = MEMORY[0x23B811C3C](v2, v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000016, 0x80000002374DFC90);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.automakerNotifications.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237447564()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.automakerNotifications.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.automakerNotifications.setter()
{
  CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$automakerNotifications.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotifications, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>);
}

uint64_t CAFCarObservable.$automakerNotifications.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotifications, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>);
}

void key path getter for CAFCarObservable.automakerRequestContent : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.automakerRequestContent.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.automakerRequestContent : CAFCarObservable()
{
  swift_bridgeObjectRetain();
  CAFCarObservable.automakerRequestContent.setter();
}

uint64_t CAFCarObservable.automakerRequestContent.didset()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  os_log_type_t v8;

  _StringGuts.grow(_:)(52);
  v0._countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x80000002374DFCB0;
  String.append(_:)(v0);
  CAFCarObservable.automakerRequestContent.getter();
  v2 = v1;
  v3 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerRequestContent);
  v4 = MEMORY[0x23B811C3C](v2, v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000017, 0x80000002374DFCF0);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.automakerRequestContent.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_23744774C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.automakerRequestContent.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.automakerRequestContent.setter()
{
  CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$automakerRequestContent.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerRequestContent, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>);
}

uint64_t CAFCarObservable.$automakerRequestContent.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerRequestContent, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>);
}

void key path getter for CAFCarObservable.automakerSettings : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.automakerSettings.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.automakerSettings : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.automakerSettings.setter();
}

uint64_t CAFCarObservable.automakerSettings.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  CAFCarObservable.automakerSettings.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002CLL, 0x80000002374DFD10, 0xD000000000000011, 0x80000002374DFD40);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.automakerSettings.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237447940()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.automakerSettings.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.automakerSettings.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$automakerSettings.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerSettings, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>);
}

uint64_t CAFCarObservable.$automakerSettings.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerSettings, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>);
}

void key path getter for CAFCarObservable.charging : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.charging.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.charging : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.charging.setter();
}

uint64_t CAFCarObservable.charging.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  CAFCarObservable.charging.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000023, 0x80000002374DFD60, 0x676E696772616863, 0xE800000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.charging.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237447B2C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.charging.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.charging.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$charging.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__charging, &demangling cache variable for type metadata for Published<CAFCharging?>);
}

uint64_t CAFCarObservable.$charging.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFCharging?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__charging, &demangling cache variable for type metadata for Published<CAFCharging?>);
}

void key path getter for CAFCarObservable.climate : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.climate.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.climate : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.climate.setter();
}

uint64_t CAFCarObservable.climate.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  CAFCarObservable.climate.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000022, 0x80000002374DFD90, 0x6574616D696C63, 0xE700000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.climate.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237447D18()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.climate.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.climate.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$climate.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__climate, &demangling cache variable for type metadata for Published<CAFClimate?>);
}

uint64_t CAFCarObservable.$climate.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFClimate?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__climate, &demangling cache variable for type metadata for Published<CAFClimate?>);
}

void key path getter for CAFCarObservable.closure : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.closure.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.closure : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.closure.setter();
}

uint64_t CAFCarObservable.closure.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  CAFCarObservable.closure.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000022, 0x80000002374DFDC0, 0x657275736F6C63, 0xE700000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.closure.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237447F04()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.closure.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.closure.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$closure.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__closure, &demangling cache variable for type metadata for Published<CAFClosure?>);
}

uint64_t CAFCarObservable.$closure.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFClosure?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__closure, &demangling cache variable for type metadata for Published<CAFClosure?>);
}

void key path getter for CAFCarObservable.driveState : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.driveState.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.driveState : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.driveState.setter();
}

uint64_t CAFCarObservable.driveState.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  CAFCarObservable.driveState.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000025, 0x80000002374DFDF0, 0x6174536576697264, 0xEA00000000006574);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.driveState.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_2374480F4()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.driveState.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.driveState.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$driveState.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driveState, &demangling cache variable for type metadata for Published<CAFDriveState?>);
}

uint64_t CAFCarObservable.$driveState.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFDriveState?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driveState, &demangling cache variable for type metadata for Published<CAFDriveState?>);
}

void key path getter for CAFCarObservable.driverAssistance : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.driverAssistance.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.driverAssistance : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.driverAssistance.setter();
}

uint64_t CAFCarObservable.driverAssistance.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  CAFCarObservable.driverAssistance.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002BLL, 0x80000002374DFE20, 0xD000000000000010, 0x80000002374DFE50);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.driverAssistance.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_2374482E8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.driverAssistance.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.driverAssistance.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$driverAssistance.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driverAssistance, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>);
}

uint64_t CAFCarObservable.$driverAssistance.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driverAssistance, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>);
}

void key path getter for CAFCarObservable.electricEngine : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.electricEngine.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.electricEngine : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.electricEngine.setter();
}

uint64_t CAFCarObservable.electricEngine.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  CAFCarObservable.electricEngine.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000029, 0x80000002374DFE70, 0x6369727463656C65, 0xEE00656E69676E45);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.electricEngine.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_2374484E0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.electricEngine.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.electricEngine.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$electricEngine.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__electricEngine, &demangling cache variable for type metadata for Published<CAFElectricEngine?>);
}

uint64_t CAFCarObservable.$electricEngine.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFElectricEngine?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__electricEngine, &demangling cache variable for type metadata for Published<CAFElectricEngine?>);
}

void key path getter for CAFCarObservable.environmentalConditions : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.environmentalConditions.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.environmentalConditions : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.environmentalConditions.setter();
}

uint64_t CAFCarObservable.environmentalConditions.didset()
{
  Swift::String v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  os_log_type_t v8;

  _StringGuts.grow(_:)(52);
  v0._countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x80000002374DFEA0;
  String.append(_:)(v0);
  CAFCarObservable.environmentalConditions.getter();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_description);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xE500000000000000;
    v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000017, 0x80000002374DFEE0);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.environmentalConditions.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_2374486D8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.environmentalConditions.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.environmentalConditions.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$environmentalConditions.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__environmentalConditions, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>);
}

uint64_t CAFCarObservable.$environmentalConditions.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__environmentalConditions, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>);
}

void key path getter for CAFCarObservable.fuel : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.fuel.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.fuel : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.fuel.setter();
}

uint64_t CAFCarObservable.fuel.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  CAFCarObservable.fuel.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000001FLL, 0x80000002374DFF00, 1818588518, 0xE400000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.fuel.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_2374488BC()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.fuel.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.fuel.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$fuel.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__fuel, &demangling cache variable for type metadata for Published<CAFFuel?>);
}

uint64_t CAFCarObservable.$fuel.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFFuel?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__fuel, &demangling cache variable for type metadata for Published<CAFFuel?>);
}

void key path getter for CAFCarObservable.highVoltageBattery : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.highVoltageBattery.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.highVoltageBattery : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.highVoltageBattery.setter();
}

uint64_t CAFCarObservable.highVoltageBattery.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  CAFCarObservable.highVoltageBattery.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002DLL, 0x80000002374DFF20, 0xD000000000000012, 0x80000002374DFF50);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.highVoltageBattery.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237448AB0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.highVoltageBattery.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.highVoltageBattery.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$highVoltageBattery.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__highVoltageBattery, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>);
}

uint64_t CAFCarObservable.$highVoltageBattery.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__highVoltageBattery, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>);
}

void key path getter for CAFCarObservable.internalCombustionEngine : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.internalCombustionEngine.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.internalCombustionEngine : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.internalCombustionEngine.setter();
}

uint64_t CAFCarObservable.internalCombustionEngine.didset()
{
  Swift::String v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  os_log_type_t v8;

  _StringGuts.grow(_:)(53);
  v0._countAndFlagsBits = 0xD000000000000033;
  v0._object = (void *)0x80000002374DFF70;
  String.append(_:)(v0);
  CAFCarObservable.internalCombustionEngine.getter();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_description);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xE500000000000000;
    v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000018, 0x80000002374DFFB0);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.internalCombustionEngine.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237448CA8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.internalCombustionEngine.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.internalCombustionEngine.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$internalCombustionEngine.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__internalCombustionEngine, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>);
}

uint64_t CAFCarObservable.$internalCombustionEngine.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__internalCombustionEngine, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>);
}

void key path getter for CAFCarObservable.media : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.media.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.media : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.media.setter();
}

uint64_t CAFCarObservable.media.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  CAFCarObservable.media.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000020, 0x80000002374DFFD0, 0x616964656DLL, 0xE500000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.media.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237448E90()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.media.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.media.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$media.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__media, &demangling cache variable for type metadata for Published<CAFMedia?>);
}

uint64_t CAFCarObservable.$media.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFMedia?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__media, &demangling cache variable for type metadata for Published<CAFMedia?>);
}

void key path getter for CAFCarObservable.nowPlayingInformation : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.nowPlayingInformation.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.nowPlayingInformation : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.nowPlayingInformation.setter();
}

uint64_t CAFCarObservable.nowPlayingInformation.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  CAFCarObservable.nowPlayingInformation.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000030, 0x80000002374E0000, 0xD000000000000015, 0x80000002374E0040);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.nowPlayingInformation.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237449084()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.nowPlayingInformation.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.nowPlayingInformation.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$nowPlayingInformation.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__nowPlayingInformation, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>);
}

uint64_t CAFCarObservable.$nowPlayingInformation.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__nowPlayingInformation, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>);
}

void key path getter for CAFCarObservable.pairedDevices : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.pairedDevices.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.pairedDevices : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.pairedDevices.setter();
}

uint64_t CAFCarObservable.pairedDevices.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  CAFCarObservable.pairedDevices.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000028, 0x80000002374E0060, 0x6544646572696170, 0xED00007365636976);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.pairedDevices.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_23744927C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.pairedDevices.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.pairedDevices.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$pairedDevices.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__pairedDevices, &demangling cache variable for type metadata for Published<CAFPairedDevices?>);
}

uint64_t CAFCarObservable.$pairedDevices.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFPairedDevices?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__pairedDevices, &demangling cache variable for type metadata for Published<CAFPairedDevices?>);
}

void key path getter for CAFCarObservable.seat : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.seat.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.seat : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.seat.setter();
}

uint64_t CAFCarObservable.seat.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  CAFCarObservable.seat.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000001FLL, 0x80000002374E0090, 1952540019, 0xE400000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.seat.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237449460()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.seat.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.seat.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$seat.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__seat, &demangling cache variable for type metadata for Published<CAFSeat?>);
}

uint64_t CAFCarObservable.$seat.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFSeat?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__seat, &demangling cache variable for type metadata for Published<CAFSeat?>);
}

void key path getter for CAFCarObservable.testingUseOnly : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.testingUseOnly.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.testingUseOnly : CAFCarObservable()
{
  swift_bridgeObjectRetain();
  CAFCarObservable.testingUseOnly.setter();
}

uint64_t CAFCarObservable.testingUseOnly.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  CAFCarObservable.testingUseOnly.getter();
  v1 = v0;
  v2 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFTestingUseOnly);
  v3 = MEMORY[0x23B811C3C](v1, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000029, 0x80000002374E00B0, 0x55676E6974736574, 0xEE00796C6E4F6573);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.testingUseOnly.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_23744964C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.testingUseOnly.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.testingUseOnly.setter()
{
  CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$testingUseOnly.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__testingUseOnly, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>);
}

uint64_t CAFCarObservable.$testingUseOnly.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__testingUseOnly, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>);
}

void key path getter for CAFCarObservable.tire : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.tire.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.tire : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.tire.setter();
}

uint64_t CAFCarObservable.tire.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  CAFCarObservable.tire.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000001FLL, 0x80000002374E00E0, 1701996916, 0xE400000000000000);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.tire.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237449830()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.tire.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.tire.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$tire.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tire, &demangling cache variable for type metadata for Published<CAFTire?>);
}

uint64_t CAFCarObservable.$tire.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFTire?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tire, &demangling cache variable for type metadata for Published<CAFTire?>);
}

void key path getter for CAFCarObservable.tripComputer : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.tripComputer.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.tripComputer : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.tripComputer.setter();
}

uint64_t CAFCarObservable.tripComputer.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  CAFCarObservable.tripComputer.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000027, 0x80000002374E0100, 0x706D6F4370697274, 0xEC00000072657475);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.tripComputer.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237449A24()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.tripComputer.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.tripComputer.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$tripComputer.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tripComputer, &demangling cache variable for type metadata for Published<CAFTripComputer?>);
}

uint64_t CAFCarObservable.$tripComputer.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFTripComputer?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tripComputer, &demangling cache variable for type metadata for Published<CAFTripComputer?>);
}

void key path getter for CAFCarObservable.uiControl : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.uiControl.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.uiControl : CAFCarObservable()
{
  swift_bridgeObjectRetain();
  CAFCarObservable.uiControl.setter();
}

uint64_t CAFCarObservable.uiControl.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  CAFCarObservable.uiControl.getter();
  v1 = v0;
  v2 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFUIControl);
  v3 = MEMORY[0x23B811C3C](v1, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000024, 0x80000002374E0130, 0x6F72746E6F436975, 0xE90000000000006CLL);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.uiControl.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237449C40()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.uiControl.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.uiControl.setter()
{
  CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$uiControl.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__uiControl, &demangling cache variable for type metadata for Published<[CAFUIControl]>);
}

uint64_t CAFCarObservable.$uiControl.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFUIControl]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__uiControl, &demangling cache variable for type metadata for Published<[CAFUIControl]>);
}

void key path getter for CAFCarObservable.vehicleMotion : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.vehicleMotion.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.vehicleMotion : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.vehicleMotion.setter();
}

uint64_t CAFCarObservable.vehicleMotion.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  CAFCarObservable.vehicleMotion.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000028, 0x80000002374E0160, 0x4D656C6369686576, 0xED00006E6F69746FLL);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.vehicleMotion.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_237449E74()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.vehicleMotion.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.vehicleMotion.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$vehicleMotion.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleMotion, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>);
}

uint64_t CAFCarObservable.$vehicleMotion.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleMotion, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>);
}

void key path getter for CAFCarObservable.vehicleResources : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.vehicleResources.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.vehicleResources : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.vehicleResources.setter();
}

uint64_t CAFCarObservable.vehicleResources.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  CAFCarObservable.vehicleResources.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002BLL, 0x80000002374E0190, 0xD000000000000010, 0x80000002374E01C0);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.vehicleResources.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_23744A068()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.vehicleResources.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.vehicleResources.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$vehicleResources.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleResources, &demangling cache variable for type metadata for Published<CAFVehicleResources?>);
}

uint64_t CAFCarObservable.$vehicleResources.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFVehicleResources?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleResources, &demangling cache variable for type metadata for Published<CAFVehicleResources?>);
}

void key path getter for CAFCarObservable.vehicleUnits : CAFCarObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFCarObservable.vehicleUnits.getter();
  *a1 = v2;
}

void key path setter for CAFCarObservable.vehicleUnits : CAFCarObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFCarObservable.vehicleUnits.setter();
}

uint64_t CAFCarObservable.vehicleUnits.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  os_log_type_t v7;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  CAFCarObservable.vehicleUnits.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_description);

    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000027, 0x80000002374E01E0, 0x55656C6369686576, 0xEC0000007374696ELL);
  return swift_bridgeObjectRelease();
}

void CAFCarObservable.vehicleUnits.getter()
{
  CAFCarObservable.automakerInputStreams.getter();
}

void sub_23744A25C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFCarObservable.vehicleUnits.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void CAFCarObservable.vehicleUnits.setter()
{
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.$vehicleUnits.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleUnits, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>);
}

uint64_t CAFCarObservable.$receivedAllValues.getter(uint64_t a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t CAFCarObservable.$vehicleUnits.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleUnits, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>);
}

uint64_t CAFCarObservable.$receivedAllValues.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_143();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9 - v8, a1, v6);
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

id CAFCarObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFCarObservable.init(_:)(a1);
}

id CAFCarObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, _QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, _QWORD);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t, _QWORD);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, _QWORD);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, _QWORD);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, _QWORD);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, _QWORD);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t, _QWORD);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(uint64_t, uint64_t, _QWORD);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t, _QWORD);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(uint64_t, uint64_t, _QWORD);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t, _QWORD);
  id v193;
  uint64_t v194;
  void *v195;
  void *v196;
  Swift::String v197;
  uint64_t v198;
  unint64_t v199;
  os_log_type_t v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t, _QWORD);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  uint64_t v223;
  uint64_t (*v224)(uint64_t, _QWORD);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  id v237;
  uint64_t v238;
  uint64_t (*v239)(uint64_t, _QWORD);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  id v247;
  uint64_t v248;
  uint64_t (*v249)(uint64_t, _QWORD);
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  uint64_t v254;
  uint64_t (*v255)(uint64_t, _QWORD);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  id v259;
  uint64_t v260;
  uint64_t (*v261)(uint64_t, _QWORD);
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  id v265;
  uint64_t v266;
  uint64_t (*v267)(uint64_t, _QWORD);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  id v271;
  uint64_t v272;
  uint64_t (*v273)(uint64_t, _QWORD);
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  id v277;
  uint64_t v278;
  uint64_t (*v279)(uint64_t, _QWORD);
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  id v283;
  uint64_t v284;
  uint64_t (*v285)(uint64_t, _QWORD);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  id v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t, _QWORD);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  id v295;
  uint64_t v296;
  uint64_t (*v297)(uint64_t, _QWORD);
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  id v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  id v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  id v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  id v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  id v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  id v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  id v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  id v337;
  uint64_t v338;
  uint64_t (*v339)(uint64_t, _QWORD);
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  id v343;
  objc_class *v344;
  id v345;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362[2];
  uint64_t v363[2];
  objc_super v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  char v368[8];
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVehicleUnits?>);
  OUTLINED_FUNCTION_26_3(v3, (uint64_t)&v357);
  v353 = v4;
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVehicleResources?>);
  OUTLINED_FUNCTION_26_3(v7, (uint64_t)&v372);
  OUTLINED_FUNCTION_15_2(v8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVehicleMotion?>);
  v363[0] = *(_QWORD *)(v11 - 8);
  v363[1] = v11;
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTripComputer?>);
  v362[0] = *(_QWORD *)(v14 - 8);
  v362[1] = v14;
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTire?>);
  v360 = *(_QWORD *)(v17 - 8);
  v361 = v17;
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeat?>);
  v358 = *(_QWORD *)(v20 - 8);
  v359 = v20;
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v22);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPairedDevices?>);
  v356 = *(_QWORD *)(v23 - 8);
  v357 = v23;
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v25);
  v355 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>)
                   - 8);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v27);
  v354 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMedia?>)
                   - 8);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v29);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>);
  OUTLINED_FUNCTION_26_3(v30, (uint64_t)&v373);
  OUTLINED_FUNCTION_15_2(v31);
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v33);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>);
  OUTLINED_FUNCTION_26_3(v34, (uint64_t)&v371);
  OUTLINED_FUNCTION_15_2(v35);
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v37);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFuel?>);
  OUTLINED_FUNCTION_26_3(v38, (uint64_t)&v370);
  OUTLINED_FUNCTION_15_2(v39);
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v41);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>);
  OUTLINED_FUNCTION_26_3(v42, (uint64_t)&v369);
  OUTLINED_FUNCTION_15_2(v43);
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v45);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFElectricEngine?>);
  OUTLINED_FUNCTION_26_3(v46, (uint64_t)v368);
  OUTLINED_FUNCTION_15_2(v47);
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v49);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDriverAssistance?>);
  OUTLINED_FUNCTION_26_3(v50, (uint64_t)&v366);
  OUTLINED_FUNCTION_15_2(v51);
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v53);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDriveState?>);
  OUTLINED_FUNCTION_26_3(v54, (uint64_t)v362);
  OUTLINED_FUNCTION_15_2(v55);
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v57);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFClosure?>);
  OUTLINED_FUNCTION_26_3(v58, (uint64_t)&v359);
  OUTLINED_FUNCTION_15_2(v59);
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v61);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFClimate?>);
  OUTLINED_FUNCTION_26_3(v62, (uint64_t)&v364);
  OUTLINED_FUNCTION_15_2(v63);
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v65);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharging?>);
  OUTLINED_FUNCTION_26_3(v66, (uint64_t)v363);
  OUTLINED_FUNCTION_15_2(v67);
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v69);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutomakerSettings?>);
  OUTLINED_FUNCTION_26_3(v70, (uint64_t)&v361);
  OUTLINED_FUNCTION_15_2(v71);
  MEMORY[0x24BDAC7A8](v72);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_18_2(v73);
  v351 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>);
  v74 = *(_QWORD *)(v351 - 8);
  MEMORY[0x24BDAC7A8](v351);
  OUTLINED_FUNCTION_143();
  v77 = v76 - v75;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>);
  v79 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  OUTLINED_FUNCTION_143();
  v82 = v81 - v80;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAudioSettings?>);
  v84 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  OUTLINED_FUNCTION_143();
  v87 = v86 - v85;
  v88 = &v2[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__audioSettings];
  v366 = 0;
  v89 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAudioSettings?);
  v90 = OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_14_1(v90, v91);
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v88, v87, v83);
  v92 = &v89[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerExteriorCamera];
  v366 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAutomakerExteriorCamera?);
  v93 = OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_14_1(v93, v94);
  v347 = v79;
  v95 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 32);
  v96 = (uint64_t)v92;
  v95(v92, v82, v78);
  v97 = (uint64_t)&v89[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotificationHistory];
  v366 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAutomakerNotificationHistory?);
  v98 = OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_14_1(v98, v99);
  OUTLINED_FUNCTION_22_2(v97, v77, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v74 + 32));
  v100 = (uint64_t)&v89[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerSettings];
  v366 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAutomakerSettings?);
  v101 = OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_14_1(v101, v102);
  OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_22_2(v100, v348, v103);
  v104 = (uint64_t)&v89[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__charging];
  v366 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFCharging?);
  v105 = OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_14_1(v105, v106);
  OUTLINED_FUNCTION_27_1();
  v107 = v104;
  OUTLINED_FUNCTION_22_2(v104, v349, v108);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFClimate?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v109, v110);
  OUTLINED_FUNCTION_27_1();
  v111 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v111, v112, v113);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFClosure?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v114, v115);
  OUTLINED_FUNCTION_27_1();
  v116 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v116, v117, v118);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFDriveState?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v119, v120);
  OUTLINED_FUNCTION_27_1();
  v121 = v89;
  v122 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v122, v123, v124);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFDriverAssistance?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v125, v126);
  OUTLINED_FUNCTION_27_1();
  v127 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v127, v128, v129);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFElectricEngine?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v130, v131);
  OUTLINED_FUNCTION_27_1();
  v132 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v132, v133, v134);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFEnvironmentalConditions?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v135, v136);
  OUTLINED_FUNCTION_27_1();
  v137 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v137, v138, v139);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFFuel?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v140, v141);
  OUTLINED_FUNCTION_27_1();
  v142 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v142, v143, v144);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFHighVoltageBattery?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_14_1(v145, v146);
  OUTLINED_FUNCTION_27_1();
  v147 = OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_2(v147, v148, v149);
  OUTLINED_FUNCTION_33_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFInternalCombustionEngine?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v150, v151);
  OUTLINED_FUNCTION_27_1();
  v152 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_22_2(v152, v153, v154);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMedia?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v155, v156);
  v157 = OUTLINED_FUNCTION_20_2();
  v158(v157);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFNowPlayingInformation?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v159, v160);
  v161 = OUTLINED_FUNCTION_20_2();
  v162(v161);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFPairedDevices?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v163, v164);
  v165 = OUTLINED_FUNCTION_20_2();
  v166(v165);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFSeat?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v167, v168);
  v169 = OUTLINED_FUNCTION_20_2();
  v170(v169);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTire?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v171, v172);
  v173 = OUTLINED_FUNCTION_20_2();
  v174(v173);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTripComputer?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v175, v176);
  v177 = OUTLINED_FUNCTION_20_2();
  v178(v177);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFVehicleMotion?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v179, v180);
  v181 = OUTLINED_FUNCTION_20_2();
  v182(v181);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFVehicleResources?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v183, v184);
  OUTLINED_FUNCTION_27_1();
  v185 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_22_2(v185, v186, v187);
  OUTLINED_FUNCTION_35_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFVehicleUnits?);
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_14_1(v188, v189);
  v190 = OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_22_2(v190, v191, v192);
  v366 = 0;
  v367 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v366 = 0xD00000000000001DLL;
  v367 = 0x80000002374DF6D0;
  v193 = objc_msgSend(a1, sel_description);
  v194 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v196 = v195;

  v197._countAndFlagsBits = v194;
  v197._object = v196;
  String.append(_:)(v197);
  OUTLINED_FUNCTION_56();
  v198 = v366;
  v199 = v367;
  v200 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v200, v198, v199, 0x293A5F2874696E69, 0xE800000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v121[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable_observed] = a1;
  v201 = a1;
  v202 = objc_msgSend(v201, sel_receivedAllValues);
  v203 = (uint64_t)&v121[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__receivedAllValues];
  OUTLINED_FUNCTION_2_2();
  LOBYTE(v365) = (_BYTE)v202;
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_7_1();
  v204 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v206 = (uint64_t)OUTLINED_FUNCTION_8_2(v204, v205);
  if ((v206 & 1) != 0)
  {
    v207 = OUTLINED_FUNCTION_9(v206, sel_audioSettings);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v208 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v208, v209);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v212 = (uint64_t)OUTLINED_FUNCTION_8_2(v210, v211);
  if ((v212 & 1) != 0)
  {
    v213 = OUTLINED_FUNCTION_9(v212, sel_automakerExteriorCamera);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_21_1(v96, *(uint64_t (**)(uint64_t, _QWORD))(v347 + 8));
    v365 = (uint64_t)v202;
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v214 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v216 = (uint64_t)OUTLINED_FUNCTION_8_2(v214, v215);
  v217 = MEMORY[0x24BEE4AF8];
  if ((v216 & 1) != 0)
  {
    v218 = OUTLINED_FUNCTION_9(v216, sel_automakerInputStreams);
    OUTLINED_FUNCTION_98((uint64_t)v218, &lazy cache variable for type metadata for CAFAutomakerInputStreams);
    OUTLINED_FUNCTION_30_1();
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_2_2();
    v365 = v203;
  }
  else
  {
    OUTLINED_FUNCTION_2_2();
    v365 = v217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerInputStreams]);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_7_1();
  v219 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v221 = (uint64_t)OUTLINED_FUNCTION_8_2(v219, v220);
  if ((v221 & 1) != 0)
  {
    v222 = OUTLINED_FUNCTION_9(v221, sel_automakerNotificationHistory);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v223 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v223, v224);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v225 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v227 = (uint64_t)OUTLINED_FUNCTION_8_2(v225, v226);
  if ((v227 & 1) != 0)
  {
    v228 = OUTLINED_FUNCTION_9(v227, sel_automakerNotifications);
    OUTLINED_FUNCTION_98((uint64_t)v228, &lazy cache variable for type metadata for CAFAutomakerNotifications);
    OUTLINED_FUNCTION_30_1();
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_2_2();
    v365 = v203;
  }
  else
  {
    OUTLINED_FUNCTION_2_2();
    v365 = v217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerNotifications]);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_7_1();
  v229 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v231 = (uint64_t)OUTLINED_FUNCTION_8_2(v229, v230);
  if ((v231 & 1) != 0)
  {
    v232 = OUTLINED_FUNCTION_9(v231, sel_automakerRequestContent);
    OUTLINED_FUNCTION_98((uint64_t)v232, &lazy cache variable for type metadata for CAFAutomakerRequestContent);
    OUTLINED_FUNCTION_30_1();
    OUTLINED_FUNCTION_40_1();
    v233 = &v121[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerRequestContent];
    OUTLINED_FUNCTION_2_2();
    v365 = v203;
  }
  else
  {
    v233 = &v121[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerRequestContent];
    OUTLINED_FUNCTION_2_2();
    v365 = v217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerRequestContent]);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_7_1();
  v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v236 = (uint64_t)OUTLINED_FUNCTION_8_2(v234, v235);
  if ((v236 & 1) != 0)
  {
    v237 = OUTLINED_FUNCTION_9(v236, sel_automakerSettings);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v238 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v238, v239);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v240 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v242 = (uint64_t)OUTLINED_FUNCTION_8_2(v240, v241);
  if ((v242 & 1) != 0)
  {
    v243 = OUTLINED_FUNCTION_9(v242, sel_charging);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_21_1(v107, *(uint64_t (**)(uint64_t, _QWORD))(v352 + 8));
    v365 = (uint64_t)v233;
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v244 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v246 = (uint64_t)OUTLINED_FUNCTION_8_2(v244, v245);
  if ((v246 & 1) != 0)
  {
    v247 = OUTLINED_FUNCTION_9(v246, sel_climate);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v248 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v248, v249);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v250 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v252 = (uint64_t)OUTLINED_FUNCTION_8_2(v250, v251);
  if ((v252 & 1) != 0)
  {
    v253 = OUTLINED_FUNCTION_9(v252, sel_closure);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v254 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v254, v255);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v256 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v258 = (uint64_t)OUTLINED_FUNCTION_8_2(v256, v257);
  if ((v258 & 1) != 0)
  {
    v259 = OUTLINED_FUNCTION_9(v258, sel_driveState);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v260 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v260, v261);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v262 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v264 = (uint64_t)OUTLINED_FUNCTION_8_2(v262, v263);
  if ((v264 & 1) != 0)
  {
    v265 = OUTLINED_FUNCTION_9(v264, sel_driverAssistance);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v266 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v266, v267);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v268 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v270 = (uint64_t)OUTLINED_FUNCTION_8_2(v268, v269);
  if ((v270 & 1) != 0)
  {
    v271 = OUTLINED_FUNCTION_9(v270, sel_electricEngine);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v272 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v272, v273);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v274 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v276 = (uint64_t)OUTLINED_FUNCTION_8_2(v274, v275);
  if ((v276 & 1) != 0)
  {
    v277 = OUTLINED_FUNCTION_9(v276, sel_environmentalConditions);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v278 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v278, v279);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v280 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v282 = (uint64_t)OUTLINED_FUNCTION_8_2(v280, v281);
  if ((v282 & 1) != 0)
  {
    v283 = OUTLINED_FUNCTION_9(v282, sel_fuel);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v284 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v284, v285);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v286 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v288 = (uint64_t)OUTLINED_FUNCTION_8_2(v286, v287);
  if ((v288 & 1) != 0)
  {
    v289 = OUTLINED_FUNCTION_9(v288, sel_highVoltageBattery);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v290 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v290, v291);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v292 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v294 = (uint64_t)OUTLINED_FUNCTION_8_2(v292, v293);
  if ((v294 & 1) != 0)
  {
    v295 = OUTLINED_FUNCTION_9(v294, sel_internalCombustionEngine);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v296 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v296, v297);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v298 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v300 = (uint64_t)OUTLINED_FUNCTION_8_2(v298, v299);
  if ((v300 & 1) != 0)
  {
    v301 = OUTLINED_FUNCTION_9(v300, sel_media);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v354);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v302 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v304 = (uint64_t)OUTLINED_FUNCTION_8_2(v302, v303);
  if ((v304 & 1) != 0)
  {
    v305 = OUTLINED_FUNCTION_9(v304, sel_nowPlayingInformation);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v355);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v306 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v308 = (uint64_t)OUTLINED_FUNCTION_8_2(v306, v307);
  if ((v308 & 1) != 0)
  {
    v309 = OUTLINED_FUNCTION_9(v308, sel_pairedDevices);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v356);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v310 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v312 = (uint64_t)OUTLINED_FUNCTION_8_2(v310, v311);
  if ((v312 & 1) != 0)
  {
    v313 = OUTLINED_FUNCTION_9(v312, sel_seat);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v358);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v314 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v316 = (uint64_t)OUTLINED_FUNCTION_8_2(v314, v315);
  if ((v316 & 1) != 0)
  {
    v317 = OUTLINED_FUNCTION_9(v316, sel_testingUseOnly);
    OUTLINED_FUNCTION_98((uint64_t)v317, &lazy cache variable for type metadata for CAFTestingUseOnly);
    OUTLINED_FUNCTION_30_1();
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_2_2();
    v365 = v203;
  }
  else
  {
    OUTLINED_FUNCTION_2_2();
    v365 = v217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFTestingUseOnly]);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_7_1();
  v318 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v320 = (uint64_t)OUTLINED_FUNCTION_8_2(v318, v319);
  if ((v320 & 1) != 0)
  {
    v321 = OUTLINED_FUNCTION_9(v320, sel_tire);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v360);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v322 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v324 = (uint64_t)OUTLINED_FUNCTION_8_2(v322, v323);
  if ((v324 & 1) != 0)
  {
    v325 = OUTLINED_FUNCTION_9(v324, sel_tripComputer);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v362[0]);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v326 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v328 = (uint64_t)OUTLINED_FUNCTION_8_2(v326, v327);
  if ((v328 & 1) != 0)
  {
    v329 = OUTLINED_FUNCTION_9(v328, sel_uiControl);
    OUTLINED_FUNCTION_98((uint64_t)v329, &lazy cache variable for type metadata for CAFUIControl);
    OUTLINED_FUNCTION_30_1();
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_2_2();
    v365 = v203;
  }
  else
  {
    OUTLINED_FUNCTION_2_2();
    v365 = v217;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFUIControl]);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_7_1();
  v330 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v332 = (uint64_t)OUTLINED_FUNCTION_8_2(v330, v331);
  if ((v332 & 1) != 0)
  {
    v333 = OUTLINED_FUNCTION_9(v332, sel_vehicleMotion);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_24_2(v363[0]);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v334 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v336 = (uint64_t)OUTLINED_FUNCTION_8_2(v334, v335);
  if ((v336 & 1) != 0)
  {
    v337 = OUTLINED_FUNCTION_9(v336, sel_vehicleResources);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    v338 = OUTLINED_FUNCTION_12_1();
    OUTLINED_FUNCTION_21_1(v338, v339);
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }
  v340 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v342 = (uint64_t)OUTLINED_FUNCTION_8_2(v340, v341);
  if ((v342 & 1) != 0)
  {
    v343 = OUTLINED_FUNCTION_9(v342, sel_vehicleUnits);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_21_1(v203, *(uint64_t (**)(uint64_t, _QWORD))(v353 + 8));
    OUTLINED_FUNCTION_5_2();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_7_1();
  }

  v344 = (objc_class *)type metadata accessor for CAFCarObservable();
  v364.receiver = v121;
  v364.super_class = v344;
  v345 = objc_msgSendSuper2(&v364, sel_init);

  return v345;
}

id CAFCarObservable.__deallocating_deinit()
{
  void *v0;
  os_log_type_t v1;
  objc_super v3;

  v1 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v1, 0xD000000000000019, 0x80000002374DF760, 0x74696E696564, 0xE600000000000000);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFCarObservable();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id CAFCarObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFCarObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCarObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFCarObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCarObservable(void **a1)
{
  return CAFCarObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFCarObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCarObservable.carDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  void *v2;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  OUTLINED_FUNCTION_50_0();
  _StringGuts.grow(_:)(59);
  v4._countAndFlagsBits = 0xD000000000000030;
  v4._object = (void *)0x80000002374DF7A0;
  String.append(_:)(v4);
  if ((a2 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  OUTLINED_FUNCTION_56();
  v8._countAndFlagsBits = 0x3D72616320202ELL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v10 = OUTLINED_FUNCTION_152(v9, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_44_1();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_46_1();
  static CAFCombineLogger.log(_:message:function:file:line:)(v11, v12, v13, 0xD000000000000022, v14);
  OUTLINED_FUNCTION_56();
  objc_msgSend(v2, sel_receivedAllValues);
  return CAFCarObservable.receivedAllValues.setter();
}

void CAFCarObservable.carDidUpdateAccessories(_:)()
{
  uint64_t v0;
  id v1;
  os_log_type_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;

  OUTLINED_FUNCTION_50_0();
  _StringGuts.grow(_:)(46);
  v0 = swift_bridgeObjectRelease();
  v1 = OUTLINED_FUNCTION_152(v0, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_44_1();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_46_1();
  static CAFCombineLogger.log(_:message:function:file:line:)(v2, v3, v4, 0xD00000000000001BLL, v5);
  OUTLINED_FUNCTION_56();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = (uint64_t)OUTLINED_FUNCTION_10_2(v6, v7);
  if ((v8 & 1) != 0)
  {
    v9 = OUTLINED_FUNCTION_152(v8, sel_audioSettings);
    CAFCarObservable.audioSettings.setter();
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = (uint64_t)OUTLINED_FUNCTION_10_2(v10, v11);
  if ((v12 & 1) != 0)
  {
    v13 = OUTLINED_FUNCTION_152(v12, sel_automakerExteriorCamera);
    CAFCarObservable.automakerExteriorCamera.setter();
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = (uint64_t)OUTLINED_FUNCTION_10_2(v14, v15);
  if ((v16 & 1) != 0)
  {
    v17 = OUTLINED_FUNCTION_152(v16, sel_automakerInputStreams);
    OUTLINED_FUNCTION_98((uint64_t)v17, &lazy cache variable for type metadata for CAFAutomakerInputStreams);
    OUTLINED_FUNCTION_29_2();
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_43_0();
    CAFCarObservable.automakerInputStreams.setter();
  }
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = (uint64_t)OUTLINED_FUNCTION_10_2(v18, v19);
  if ((v20 & 1) != 0)
  {
    v21 = OUTLINED_FUNCTION_152(v20, sel_automakerNotificationHistory);
    CAFCarObservable.automakerNotificationHistory.setter();
  }
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = (uint64_t)OUTLINED_FUNCTION_10_2(v22, v23);
  if ((v24 & 1) != 0)
  {
    v25 = OUTLINED_FUNCTION_152(v24, sel_automakerNotifications);
    OUTLINED_FUNCTION_98((uint64_t)v25, &lazy cache variable for type metadata for CAFAutomakerNotifications);
    OUTLINED_FUNCTION_29_2();
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_43_0();
    CAFCarObservable.automakerNotifications.setter();
  }
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = (uint64_t)OUTLINED_FUNCTION_10_2(v26, v27);
  if ((v28 & 1) != 0)
  {
    v29 = OUTLINED_FUNCTION_152(v28, sel_automakerRequestContent);
    OUTLINED_FUNCTION_98((uint64_t)v29, &lazy cache variable for type metadata for CAFAutomakerRequestContent);
    OUTLINED_FUNCTION_29_2();
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_43_0();
    CAFCarObservable.automakerRequestContent.setter();
  }
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = (uint64_t)OUTLINED_FUNCTION_10_2(v30, v31);
  if ((v32 & 1) != 0)
  {
    v33 = OUTLINED_FUNCTION_152(v32, sel_automakerSettings);
    CAFCarObservable.automakerSettings.setter();
  }
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = (uint64_t)OUTLINED_FUNCTION_10_2(v34, v35);
  if ((v36 & 1) != 0)
  {
    v37 = OUTLINED_FUNCTION_152(v36, sel_charging);
    CAFCarObservable.charging.setter();
  }
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = (uint64_t)OUTLINED_FUNCTION_10_2(v38, v39);
  if ((v40 & 1) != 0)
  {
    v41 = OUTLINED_FUNCTION_152(v40, sel_climate);
    CAFCarObservable.climate.setter();
  }
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = (uint64_t)OUTLINED_FUNCTION_10_2(v42, v43);
  if ((v44 & 1) != 0)
  {
    v45 = OUTLINED_FUNCTION_152(v44, sel_closure);
    CAFCarObservable.closure.setter();
  }
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = (uint64_t)OUTLINED_FUNCTION_10_2(v46, v47);
  if ((v48 & 1) != 0)
  {
    v49 = OUTLINED_FUNCTION_152(v48, sel_driveState);
    CAFCarObservable.driveState.setter();
  }
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v52 = (uint64_t)OUTLINED_FUNCTION_10_2(v50, v51);
  if ((v52 & 1) != 0)
  {
    v53 = OUTLINED_FUNCTION_152(v52, sel_driverAssistance);
    CAFCarObservable.driverAssistance.setter();
  }
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v56 = (uint64_t)OUTLINED_FUNCTION_10_2(v54, v55);
  if ((v56 & 1) != 0)
  {
    v57 = OUTLINED_FUNCTION_152(v56, sel_electricEngine);
    CAFCarObservable.electricEngine.setter();
  }
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v60 = (uint64_t)OUTLINED_FUNCTION_10_2(v58, v59);
  if ((v60 & 1) != 0)
  {
    v61 = OUTLINED_FUNCTION_152(v60, sel_environmentalConditions);
    CAFCarObservable.environmentalConditions.setter();
  }
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v64 = (uint64_t)OUTLINED_FUNCTION_10_2(v62, v63);
  if ((v64 & 1) != 0)
  {
    v65 = OUTLINED_FUNCTION_152(v64, sel_fuel);
    CAFCarObservable.fuel.setter();
  }
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v68 = (uint64_t)OUTLINED_FUNCTION_10_2(v66, v67);
  if ((v68 & 1) != 0)
  {
    v69 = OUTLINED_FUNCTION_152(v68, sel_highVoltageBattery);
    CAFCarObservable.highVoltageBattery.setter();
  }
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v72 = (uint64_t)OUTLINED_FUNCTION_10_2(v70, v71);
  if ((v72 & 1) != 0)
  {
    v73 = OUTLINED_FUNCTION_152(v72, sel_internalCombustionEngine);
    CAFCarObservable.internalCombustionEngine.setter();
  }
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v76 = (uint64_t)OUTLINED_FUNCTION_10_2(v74, v75);
  if ((v76 & 1) != 0)
  {
    v77 = OUTLINED_FUNCTION_152(v76, sel_media);
    CAFCarObservable.media.setter();
  }
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v80 = (uint64_t)OUTLINED_FUNCTION_10_2(v78, v79);
  if ((v80 & 1) != 0)
  {
    v81 = OUTLINED_FUNCTION_152(v80, sel_nowPlayingInformation);
    CAFCarObservable.nowPlayingInformation.setter();
  }
  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v84 = (uint64_t)OUTLINED_FUNCTION_10_2(v82, v83);
  if ((v84 & 1) != 0)
  {
    v85 = OUTLINED_FUNCTION_152(v84, sel_pairedDevices);
    CAFCarObservable.pairedDevices.setter();
  }
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v88 = (uint64_t)OUTLINED_FUNCTION_10_2(v86, v87);
  if ((v88 & 1) != 0)
  {
    v89 = OUTLINED_FUNCTION_152(v88, sel_seat);
    CAFCarObservable.seat.setter();
  }
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v92 = (uint64_t)OUTLINED_FUNCTION_10_2(v90, v91);
  if ((v92 & 1) != 0)
  {
    v93 = OUTLINED_FUNCTION_152(v92, sel_testingUseOnly);
    OUTLINED_FUNCTION_98((uint64_t)v93, &lazy cache variable for type metadata for CAFTestingUseOnly);
    OUTLINED_FUNCTION_29_2();
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_43_0();
    CAFCarObservable.testingUseOnly.setter();
  }
  v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v96 = (uint64_t)OUTLINED_FUNCTION_10_2(v94, v95);
  if ((v96 & 1) != 0)
  {
    v97 = OUTLINED_FUNCTION_152(v96, sel_tire);
    CAFCarObservable.tire.setter();
  }
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v100 = (uint64_t)OUTLINED_FUNCTION_10_2(v98, v99);
  if ((v100 & 1) != 0)
  {
    v101 = OUTLINED_FUNCTION_152(v100, sel_tripComputer);
    CAFCarObservable.tripComputer.setter();
  }
  v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v104 = (uint64_t)OUTLINED_FUNCTION_10_2(v102, v103);
  if ((v104 & 1) != 0)
  {
    v105 = OUTLINED_FUNCTION_152(v104, sel_uiControl);
    OUTLINED_FUNCTION_98((uint64_t)v105, &lazy cache variable for type metadata for CAFUIControl);
    OUTLINED_FUNCTION_29_2();
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_43_0();
    CAFCarObservable.uiControl.setter();
  }
  v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v108 = (uint64_t)OUTLINED_FUNCTION_10_2(v106, v107);
  if ((v108 & 1) != 0)
  {
    v109 = OUTLINED_FUNCTION_152(v108, sel_vehicleMotion);
    CAFCarObservable.vehicleMotion.setter();
  }
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v112 = (uint64_t)OUTLINED_FUNCTION_10_2(v110, v111);
  if ((v112 & 1) != 0)
  {
    v113 = OUTLINED_FUNCTION_152(v112, sel_vehicleResources);
    CAFCarObservable.vehicleResources.setter();
  }
  v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v116 = (uint64_t)OUTLINED_FUNCTION_10_2(v114, v115);
  if ((v116 & 1) != 0)
  {
    v117 = OUTLINED_FUNCTION_152(v116, sel_vehicleUnits);
    CAFCarObservable.vehicleUnits.setter();
  }
  else
  {
    OUTLINED_FUNCTION_32_1();
  }
}

id outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v4 = (void *)MEMORY[0x23B811BC4]();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(a3, sel_registeredForAccessory_, v4);

  return v5;
}

uint64_t type metadata accessor for CAFCarObservable()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFCarObservable;
  if (!type metadata singleton initialization cache for CAFCarObservable)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCar()
{
  return lazy protocol witness table accessor for type CAFCarObservable and conformance CAFCarObservable(&lazy protocol witness table cache variable for type CAFCarObservable and conformance CAFCarObservable, (uint64_t)&protocol conformance descriptor for CAFCarObservable);
}

unint64_t lazy protocol witness table accessor for type CAFCar and conformance CAFCar()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFCar and conformance CAFCar;
  if (!lazy protocol witness table cache variable for type CAFCar and conformance CAFCar)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFCar);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFCar, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFCar and conformance CAFCar);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCarObservable(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFCarObservable and conformance CAFCarObservable(&lazy protocol witness table cache variable for type CAFCarObservable and conformance CAFCarObservable, (uint64_t)&protocol conformance descriptor for CAFCarObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCarObservable and conformance CAFCarObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CAFCarObservable();
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23744CB3C()
{
  CAFCarObservable.$receivedAllValues.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>.Publisher, CAFCarObservable.$receivedAllValues.setter);
}

void sub_23744CB7C()
{
  CAFCarObservable.$audioSettings.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAudioSettings?>.Publisher, CAFCarObservable.$audioSettings.setter);
}

void sub_23744CBBC()
{
  CAFCarObservable.$automakerExteriorCamera.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>.Publisher, CAFCarObservable.$automakerExteriorCamera.setter);
}

void sub_23744CBFC()
{
  CAFCarObservable.$automakerInputStreams.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>.Publisher, CAFCarObservable.$automakerInputStreams.setter);
}

void sub_23744CC3C()
{
  CAFCarObservable.$automakerNotificationHistory.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>.Publisher, CAFCarObservable.$automakerNotificationHistory.setter);
}

void sub_23744CC7C()
{
  CAFCarObservable.$automakerNotifications.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>.Publisher, CAFCarObservable.$automakerNotifications.setter);
}

void sub_23744CCBC()
{
  CAFCarObservable.$automakerRequestContent.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>.Publisher, CAFCarObservable.$automakerRequestContent.setter);
}

void sub_23744CCFC()
{
  CAFCarObservable.$automakerSettings.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>.Publisher, CAFCarObservable.$automakerSettings.setter);
}

void sub_23744CD3C()
{
  CAFCarObservable.$charging.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFCharging?>.Publisher, CAFCarObservable.$charging.setter);
}

void sub_23744CD7C()
{
  CAFCarObservable.$climate.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFClimate?>.Publisher, CAFCarObservable.$climate.setter);
}

void sub_23744CDBC()
{
  CAFCarObservable.$closure.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFClosure?>.Publisher, CAFCarObservable.$closure.setter);
}

void sub_23744CDFC()
{
  CAFCarObservable.$driveState.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFDriveState?>.Publisher, CAFCarObservable.$driveState.setter);
}

void sub_23744CE3C()
{
  CAFCarObservable.$driverAssistance.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>.Publisher, CAFCarObservable.$driverAssistance.setter);
}

void sub_23744CE7C()
{
  CAFCarObservable.$electricEngine.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFElectricEngine?>.Publisher, CAFCarObservable.$electricEngine.setter);
}

void sub_23744CEBC()
{
  CAFCarObservable.$environmentalConditions.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>.Publisher, CAFCarObservable.$environmentalConditions.setter);
}

void sub_23744CEFC()
{
  CAFCarObservable.$fuel.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFFuel?>.Publisher, CAFCarObservable.$fuel.setter);
}

void sub_23744CF3C()
{
  CAFCarObservable.$highVoltageBattery.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>.Publisher, CAFCarObservable.$highVoltageBattery.setter);
}

void sub_23744CF7C()
{
  CAFCarObservable.$internalCombustionEngine.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>.Publisher, CAFCarObservable.$internalCombustionEngine.setter);
}

void sub_23744CFBC()
{
  CAFCarObservable.$media.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744CFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFMedia?>.Publisher, CAFCarObservable.$media.setter);
}

void sub_23744CFFC()
{
  CAFCarObservable.$nowPlayingInformation.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>.Publisher, CAFCarObservable.$nowPlayingInformation.setter);
}

void sub_23744D03C()
{
  CAFCarObservable.$pairedDevices.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFPairedDevices?>.Publisher, CAFCarObservable.$pairedDevices.setter);
}

void sub_23744D07C()
{
  CAFCarObservable.$seat.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFSeat?>.Publisher, CAFCarObservable.$seat.setter);
}

void sub_23744D0BC()
{
  CAFCarObservable.$testingUseOnly.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>.Publisher, CAFCarObservable.$testingUseOnly.setter);
}

void sub_23744D0FC()
{
  CAFCarObservable.$tire.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFTire?>.Publisher, CAFCarObservable.$tire.setter);
}

void sub_23744D13C()
{
  CAFCarObservable.$tripComputer.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFTripComputer?>.Publisher, CAFCarObservable.$tripComputer.setter);
}

void sub_23744D17C()
{
  CAFCarObservable.$uiControl.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFUIControl]>.Publisher, CAFCarObservable.$uiControl.setter);
}

void sub_23744D1BC()
{
  CAFCarObservable.$vehicleMotion.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>.Publisher, CAFCarObservable.$vehicleMotion.setter);
}

void sub_23744D1FC()
{
  CAFCarObservable.$vehicleResources.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFVehicleResources?>.Publisher, CAFCarObservable.$vehicleResources.setter);
}

void sub_23744D23C()
{
  CAFCarObservable.$vehicleUnits.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t sub_23744D258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>.Publisher, CAFCarObservable.$vehicleUnits.setter);
}

uint64_t ObjC metadata update function for CAFCarObservable()
{
  return type metadata accessor for CAFCarObservable();
}

void type metadata completion function for CAFCarObservable()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAudioSettings?>, &demangling cache variable for type metadata for CAFAudioSettings?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>, &demangling cache variable for type metadata for CAFAutomakerExteriorCamera?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFAutomakerInputStreams]>, &demangling cache variable for type metadata for [CAFAutomakerInputStreams]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>, &demangling cache variable for type metadata for CAFAutomakerNotificationHistory?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFAutomakerNotifications]>, &demangling cache variable for type metadata for [CAFAutomakerNotifications]);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFAutomakerRequestContent]>, &demangling cache variable for type metadata for [CAFAutomakerRequestContent]);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAutomakerSettings?>, &demangling cache variable for type metadata for CAFAutomakerSettings?);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFCharging?>, &demangling cache variable for type metadata for CAFCharging?);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFClimate?>, &demangling cache variable for type metadata for CAFClimate?);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFClosure?>, &demangling cache variable for type metadata for CAFClosure?);
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFDriveState?>, &demangling cache variable for type metadata for CAFDriveState?);
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFDriverAssistance?>, &demangling cache variable for type metadata for CAFDriverAssistance?);
                          if (v12 <= 0x3F)
                          {
                            type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFElectricEngine?>, &demangling cache variable for type metadata for CAFElectricEngine?);
                            if (v13 <= 0x3F)
                            {
                              type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFEnvironmentalConditions?>, &demangling cache variable for type metadata for CAFEnvironmentalConditions?);
                              if (v14 <= 0x3F)
                              {
                                type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFFuel?>, &demangling cache variable for type metadata for CAFFuel?);
                                if (v15 <= 0x3F)
                                {
                                  type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFHighVoltageBattery?>, &demangling cache variable for type metadata for CAFHighVoltageBattery?);
                                  if (v16 <= 0x3F)
                                  {
                                    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFInternalCombustionEngine?>, &demangling cache variable for type metadata for CAFInternalCombustionEngine?);
                                    if (v17 <= 0x3F)
                                    {
                                      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFMedia?>, &demangling cache variable for type metadata for CAFMedia?);
                                      if (v18 <= 0x3F)
                                      {
                                        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFNowPlayingInformation?>, &demangling cache variable for type metadata for CAFNowPlayingInformation?);
                                        if (v19 <= 0x3F)
                                        {
                                          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFPairedDevices?>, &demangling cache variable for type metadata for CAFPairedDevices?);
                                          if (v20 <= 0x3F)
                                          {
                                            type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFSeat?>, &demangling cache variable for type metadata for CAFSeat?);
                                            if (v21 <= 0x3F)
                                            {
                                              type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFTestingUseOnly]>, &demangling cache variable for type metadata for [CAFTestingUseOnly]);
                                              if (v22 <= 0x3F)
                                              {
                                                type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFTire?>, &demangling cache variable for type metadata for CAFTire?);
                                                if (v23 <= 0x3F)
                                                {
                                                  type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFTripComputer?>, &demangling cache variable for type metadata for CAFTripComputer?);
                                                  if (v24 <= 0x3F)
                                                  {
                                                    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFUIControl]>, &demangling cache variable for type metadata for [CAFUIControl]);
                                                    if (v25 <= 0x3F)
                                                    {
                                                      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFVehicleMotion?>, &demangling cache variable for type metadata for CAFVehicleMotion?);
                                                      if (v26 <= 0x3F)
                                                      {
                                                        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFVehicleResources?>, &demangling cache variable for type metadata for CAFVehicleResources?);
                                                        if (v27 <= 0x3F)
                                                        {
                                                          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFVehicleUnits?>, &demangling cache variable for type metadata for CAFVehicleUnits?);
                                                          if (v28 <= 0x3F)
                                                            swift_updateClassMetadata2();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for CAFCarObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFCarObservable.receivedAllValues.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFCarObservable.$receivedAllValues.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFCarObservable.audioSettings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFCarObservable.$audioSettings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerExteriorCamera.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerExteriorCamera.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerInputStreams.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerInputStreams.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerNotificationHistory.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerNotificationHistory.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerNotifications.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerNotifications.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerRequestContent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerRequestContent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerSettings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerSettings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAFCarObservable.charging.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of CAFCarObservable.$charging.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CAFCarObservable.climate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CAFCarObservable.$climate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CAFCarObservable.closure.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of CAFCarObservable.$closure.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of CAFCarObservable.driveState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of CAFCarObservable.$driveState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of CAFCarObservable.driverAssistance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of CAFCarObservable.$driverAssistance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of CAFCarObservable.electricEngine.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of CAFCarObservable.$electricEngine.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of CAFCarObservable.environmentalConditions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CAFCarObservable.$environmentalConditions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of CAFCarObservable.fuel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of CAFCarObservable.$fuel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CAFCarObservable.highVoltageBattery.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of CAFCarObservable.$highVoltageBattery.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x458))();
}

uint64_t dispatch thunk of CAFCarObservable.internalCombustionEngine.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of CAFCarObservable.$internalCombustionEngine.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of CAFCarObservable.media.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of CAFCarObservable.$media.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of CAFCarObservable.nowPlayingInformation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of CAFCarObservable.$nowPlayingInformation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of CAFCarObservable.pairedDevices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x500))();
}

uint64_t dispatch thunk of CAFCarObservable.$pairedDevices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x518))();
}

uint64_t dispatch thunk of CAFCarObservable.seat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x530))();
}

uint64_t dispatch thunk of CAFCarObservable.$seat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x548))();
}

uint64_t dispatch thunk of CAFCarObservable.testingUseOnly.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x560))();
}

uint64_t dispatch thunk of CAFCarObservable.$testingUseOnly.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x578))();
}

uint64_t dispatch thunk of CAFCarObservable.tire.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x590))();
}

uint64_t dispatch thunk of CAFCarObservable.$tire.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of CAFCarObservable.tripComputer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of CAFCarObservable.$tripComputer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of CAFCarObservable.uiControl.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x5F0))();
}

uint64_t dispatch thunk of CAFCarObservable.$uiControl.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x608))();
}

uint64_t dispatch thunk of CAFCarObservable.vehicleMotion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x620))();
}

uint64_t dispatch thunk of CAFCarObservable.$vehicleMotion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x638))();
}

uint64_t dispatch thunk of CAFCarObservable.vehicleResources.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x650))();
}

uint64_t dispatch thunk of CAFCarObservable.$vehicleResources.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x668))();
}

uint64_t dispatch thunk of CAFCarObservable.vehicleUnits.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x680))();
}

uint64_t dispatch thunk of CAFCarObservable.$vehicleUnits.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x698))();
}

uint64_t dispatch thunk of CAFCarObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1712))();
}

void type metadata accessor for Published<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
  }
}

void type metadata accessor for Published<CAFAudioSettings?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = type metadata accessor for Published();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  return v1 - 120;
}

uint64_t OUTLINED_FUNCTION_7_1()
{
  return swift_endAccess();
}

id OUTLINED_FUNCTION_8_2(uint64_t a1, uint64_t a2)
{
  void *v2;

  return outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(a1, a2, v2);
}

id OUTLINED_FUNCTION_10_2(uint64_t a1, uint64_t a2)
{
  void *v2;

  return outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_14_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 256) = a2;
  return Published.init(initialValue:)();
}

void OUTLINED_FUNCTION_15_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  uint64_t v0;

  return v0 - 112;
}

void OUTLINED_FUNCTION_18_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 - 256) = v1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_21_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

uint64_t OUTLINED_FUNCTION_22_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 - 256) = v1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_24_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_26_3@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_2()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

void OUTLINED_FUNCTION_33_2()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
}

void OUTLINED_FUNCTION_35_2()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return static Published.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return static Published.subscript.setter();
}

void OUTLINED_FUNCTION_39_1()
{
  void *v0;

}

void OUTLINED_FUNCTION_40_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_41_1()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_44_1()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_47_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_52_1()
{
  return swift_getKeyPath();
}

void CAFVent.combinationsBridged.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, sel_combinations);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_11;
LABEL_3:
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_unsignedLongLongValue);

      v9 = *(_QWORD *)(v10 + 16);
      v8 = *(_QWORD *)(v10 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v10 + 16) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9 + 32) = v7;
    }
    goto LABEL_11;
  }
  __break(1u);
}

id CAFVentObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
}

uint64_t CAFVentObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFVentObservable.combinations.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFVentObservable.$combinations.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__combinations, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void key path getter for CAFVentObservable.currentIndex : CAFVentObservable(_DWORD *a1@<X8>)
{
  int v2;

  CAFVentObservable.currentIndex.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFVentObservable.currentIndex : CAFVentObservable()
{
  return CAFVentObservable.currentIndex.setter();
}

void CAFVentObservable.currentIndex.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_15_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_14_0((uint64_t)&v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_13_0();
}

uint64_t CAFVentObservable.currentIndex.setter()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_25_1();
  return specialized static SafePublished.subscript.setter(v2);
}

void CAFVentObservable.currentIndex.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  _DWORD *v6;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  LODWORD(v3) = *v6;
  OUTLINED_FUNCTION_14_0(v0, v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_DWORD *)(v0 + 88) = (_DWORD)v3;
  OUTLINED_FUNCTION_81();
}

void CAFVentObservable.currentIndex.modify(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(id *)(*(_QWORD *)a1 + 64);
  v3 = OUTLINED_FUNCTION_26_1();
  specialized static SafePublished.subscript.setter(v3);
  OUTLINED_FUNCTION_8_1(v1);
}

uint64_t CAFVentObservable.$currentIndex.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__currentIndex, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.autoMode.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFVentObservable.$autoMode.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__autoMode, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFVentObservable.on : CAFVentObservable(_BYTE *a1@<X8>)
{
  char v2;

  CAFVentObservable.on.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFVentObservable.on : CAFVentObservable()
{
  return CAFVentObservable.on.setter();
}

void CAFVentObservable.on.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_15_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_14_0((uint64_t)&v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_13_0();
}

uint64_t CAFVentObservable.on.setter()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_25_1();
  return specialized static SafePublished.subscript.setter(v2);
}

void CAFVentObservable.on.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  _BYTE *v6;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  LOBYTE(v3) = *v6;
  OUTLINED_FUNCTION_14_0(v0, v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFVentObservable.on.modify(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(id *)(*(_QWORD *)a1 + 64);
  v3 = OUTLINED_FUNCTION_26_1();
  specialized static SafePublished.subscript.setter(v3);
  OUTLINED_FUNCTION_8_1(v1);
}

uint64_t CAFVentObservable.$on.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.vehicleLayoutKey.getter()
{
  return CAFVentObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFVentObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.name.getter()
{
  return CAFVentObservable.vehicleLayoutKey.getter();
}

void CAFVentObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable._description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v32;
  uint64_t v33;

  HIBYTE(v32._object) = -18;
  strcpy((char *)&v32, "<unregistered>");
  v1 = (uint64_t)OUTLINED_FUNCTION_152(a1, sel_registeredForVentCombinations);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    v4 = CAFVentObservable.combinations.getter();
    type metadata accessor for CAFVentTypes(0);
    v2 = MEMORY[0x23B811C3C](v4, v5);
    v3 = v6;
    v1 = OUTLINED_FUNCTION_26_4();
  }
  v7 = (uint64_t)OUTLINED_FUNCTION_152(v1, sel_registeredForCurrentIndex);
  v8 = 0x73696765726E753CLL;
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFVentObservable.currentIndex.getter();
    LODWORD(v33) = v10;
    v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v8 = v7;
    v9 = v11;
  }
  v12 = (uint64_t)OUTLINED_FUNCTION_152(v7, sel_registeredForAutoMode);
  v13 = 0x73696765726E753CLL;
  v14 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    LOBYTE(v33) = CAFVentObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v12 = OUTLINED_FUNCTION_28_1();
    v13 = v12;
    v14 = v15;
  }
  v16 = (uint64_t)OUTLINED_FUNCTION_152(v12, sel_registeredForOn);
  v17 = 0x73696765726E753CLL;
  v18 = (void *)0xEE003E6465726574;
  if ((_DWORD)v16)
  {
    CAFVentObservable.on.getter();
    LOBYTE(v33) = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v16 = OUTLINED_FUNCTION_28_1();
    v17 = v16;
    v18 = v20;
  }
  if (OUTLINED_FUNCTION_152(v16, sel_registeredForVehicleLayoutKey))
  {
    v32._countAndFlagsBits = CAFVentObservable.vehicleLayoutKey.getter();
    v32._object = v21;
  }
  _StringGuts.grow(_:)(106);
  OUTLINED_FUNCTION_16_3(v22, 0x80000002374E0290);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_21_2(0xD000000000000011, (uint64_t)" { combinations: ");
  v23._countAndFlagsBits = v2;
  v23._object = v3;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_2(0xD000000000000010, (uint64_t)", currentIndex: ");
  v24._countAndFlagsBits = v8;
  v24._object = v9;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v25._object = (void *)0xEC000000203A6564;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v13;
  v26._object = v14;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x203A6E6F202CLL;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v17;
  v28._object = v18;
  String.append(_:)(v28);
  v29 = OUTLINED_FUNCTION_26_4();
  OUTLINED_FUNCTION_16_3(v29, 0x80000002374DF1B0);
  String.append(_:)(v32);
  OUTLINED_FUNCTION_26_4();
  v30._countAndFlagsBits = 4095264;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  return 0;
}

uint64_t CAFVentObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFVentObservable._description.getter(v3);
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFVentObservable.cachedDescription.setter(v4, v7);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v5 + 4);
  OUTLINED_FUNCTION_25();
  return v4;
}

void CAFVentObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFVentObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFVentObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_super v21;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__combinations;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVentObservable, [CAFVentTypes]>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__currentIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFVentObservable, UInt32>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__autoMode;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVentObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v13 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  v14 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__on;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFVentObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v15 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  v16 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVentObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v16] = OUTLINED_FUNCTION_19_1();
  v17 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v8[v17] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed] = a1;
  v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFVentObservable();
  v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFVentObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFVentObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFVentObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFVentObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFVentObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFVentObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFVentObservable(id *a1@<X8>)
{
  *a1 = CAFVentObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFVentObservable(void **a1)
{
  CAFVentObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFVentObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFVentObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFVentObservable.ventService(_:didUpdateCombinations:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__combinations);
  if (a2 >> 62)
  {
    OUTLINED_FUNCTION_40();
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_40();
  }
  if (!v5)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    specialized SafeReadOnlyPublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v13 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v12 = v4;
    for (i = 0; i != v5; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x23B811D2C](i, a2);
      else
        v7 = *(id *)(a2 + 8 * i + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_unsignedLongLongValue, v12);

      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFVentObservable.ventService(_:didUpdateCurrentIndex:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFVentObservable.ventService(_:didUpdateAutoMode:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFVentObservable.ventService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFVentObservable.ventService(_:didUpdateName:)()
{
  return CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)();
}

void CAFVentObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFVentObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFVentObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23744F714()
{
  _DWORD *v0;
  int v1;

  OUTLINED_FUNCTION_20_0();
  CAFVentObservable.currentIndex.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_23744F734()
{
  CAFVentObservable.currentIndex.setter();
  OUTLINED_FUNCTION_11();
}

void sub_23744F754()
{
  _BYTE *v0;
  char v1;

  OUTLINED_FUNCTION_20_0();
  CAFVentObservable.on.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_23744F774()
{
  CAFVentObservable.on.setter();
  OUTLINED_FUNCTION_11();
}

void sub_23744F794()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFVent.combinationsBridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_currentIndex()
{
  return sel_currentIndex;
}

void sub_23744F7C0(id *a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_currentIndex);
  OUTLINED_FUNCTION_11();
}

id sub_23744F7EC(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCurrentIndex_, *a1);
}

void sub_23744F800()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.autoModeBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23744F820()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.onBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23744F840(char *a1)
{
  CAFSeatHeatingCooling.onBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23744F860(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void sub_23744F87C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFVentObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFVent()
{
  lazy protocol witness table accessor for type CAFVentObservable and conformance CAFVentObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable, (uint64_t)&protocol conformance descriptor for CAFVentObservable);
}

unint64_t lazy protocol witness table accessor for type CAFVent and conformance CAFVent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFVent and conformance CAFVent;
  if (!lazy protocol witness table cache variable for type CAFVent and conformance CAFVent)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFVent);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFVent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFVent and conformance CAFVent);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFVentObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFVentObservable and conformance CAFVentObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable, (uint64_t)&protocol conformance descriptor for CAFVentObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFVentObservable and conformance CAFVentObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFVentObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFVentObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFVentObservable.combinations.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFVentObservable.$combinations.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFVentObservable.currentIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFVentObservable.currentIndex.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFVentObservable.currentIndex.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFVentObservable.$currentIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFVentObservable.autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFVentObservable.$autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFVentObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFVentObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFVentObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFVentObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFVentObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFVentObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFVentObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFVentObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFVentObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t partial apply for closure #1 in CAFVentObservable.resetCachedDescription()()
{
  return CAFVentObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_16_3(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD000000000000014;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void OUTLINED_FUNCTION_21_2(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return String.init<A>(describing:)();
}

id CAFPositionManager.driverSeat.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = type metadata accessor for CAUVehicleLayoutKey();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)&v26 - v8;
  CAFPositionManager.layoutKeys.getter();
  v33 = v9;
  result = objc_msgSend(v1, sel_car);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v11 = result;
  objc_msgSend(result, sel_rightHandDrive);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAUVehicleLayoutKey>);
  v12 = *(_QWORD *)(v4 + 72);
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2374C9C40;
  v29 = v4;
  v15 = *(void (**)(void))(v4 + 104);
  v34 = v14 + v13;
  v15();
  result = (id)((uint64_t (*)(unint64_t, _QWORD, uint64_t))v15)(v14 + v13 + v12, *MEMORY[0x24BE15120], v3);
  v32 = *(_QWORD *)(v14 + 16);
  if (!v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = 1;
    return (id)__swift_storeEnumTagSinglePayload(a1, v25, 1, v3);
  }
  v16 = 0;
  v17 = *(_QWORD *)(v33 + 16);
  v36 = v12;
  v37 = v17;
  v30 = v14;
  v31 = v33 + v13;
  v27 = a1;
  v28 = v33 + v12 + v13;
  v18 = v29;
  v19 = (uint64_t)v35;
  while (1)
  {
    if (v16 >= *(_QWORD *)(v14 + 16))
      goto LABEL_24;
    OUTLINED_FUNCTION_14_2(v19, v34 + v12 * v16);
    if (!v37)
      goto LABEL_16;
    OUTLINED_FUNCTION_14_2((uint64_t)v7, v31);
    lazy protocol witness table accessor for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey();
    swift_bridgeObjectRetain();
    v20 = OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_13_3((uint64_t)v7);
    if ((v20 & 1) != 0)
      break;
    if (v37 != 1)
    {
      v21 = v28;
      v22 = 1;
      while (1)
      {
        result = (id)OUTLINED_FUNCTION_14_2((uint64_t)v7, v21);
        v23 = v22 + 1;
        if (__OFADD__(v22, 1))
          break;
        v24 = OUTLINED_FUNCTION_8_3();
        OUTLINED_FUNCTION_13_3((uint64_t)v7);
        if ((v24 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v18 = v29;
          goto LABEL_19;
        }
        ++v22;
        v21 += v36;
        if (v23 == v37)
        {
          OUTLINED_FUNCTION_26_4();
          v18 = v29;
          v19 = (uint64_t)v35;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    OUTLINED_FUNCTION_26_4();
LABEL_15:
    v14 = v30;
LABEL_16:
    ++v16;
    result = (id)OUTLINED_FUNCTION_13_3(v19);
    v12 = v36;
    if (v16 == v32)
    {
      OUTLINED_FUNCTION_26_4();
      swift_bridgeObjectRelease();
      v25 = 1;
      a1 = v27;
      return (id)__swift_storeEnumTagSinglePayload(a1, v25, 1, v3);
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease_n();
  a1 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v27, v35, v3);
  v25 = 0;
  return (id)__swift_storeEnumTagSinglePayload(a1, v25, 1, v3);
}

unint64_t CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(uint64_t a1, char a2, char a3, uint64_t a4)
{
  void *v4;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v8 = CAUVehicleLayoutKey.rawValue.getter();
  v9 = (void *)MEMORY[0x23B811BC4](v8);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v4, sel_servicesForVehicleLayoutKey_, v9);

  type metadata accessor for CAFService();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = v11;
  if (a4)
  {
    v11 = OUTLINED_FUNCTION_11_2(v11);
    v15 = v11;
  }
  if ((a2 & 1) != 0)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v14)
      {
LABEL_6:
        if ((a3 & 1) != 0)
          return v11;
      }
    }
    else if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    v12 = CAFPositionManager.sharedServices(for:)();
    if (a4)
      v12 = OUTLINED_FUNCTION_11_2(v12);
    specialized Array.append<A>(contentsOf:)(v12);
    return v15;
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13CarAssetUtils19CAUVehicleLayoutKeyOG_SaySo10CAFServiceCGs5NeverOTg5065_sSo18CAFPositionManagerC10CAFCombineE14sharedServices3forSaySo10j4CG13de7Utils19ghI12O_tFAhKXEfU_So0nO0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = v13;
    v6 = *(_QWORD *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    do
    {
      v9 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(v7, 1, 0, 0, 0);
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      v7 += v8;
      --v3;
    }
    while (v3);

  }
  else
  {

    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t (*a2)(id), uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = a1;
  v18 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v16 = v6 & 0xFFFFFFFFFFFFFF8;
      v17 = v6 & 0xC000000000000001;
      v15 = v6;
      while (v17)
      {
        v9 = (id)MEMORY[0x23B811D2C](v8, v6);
LABEL_7:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v12 = a3;
        v13 = a2(v9);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v6 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v18;
          goto LABEL_20;
        }
      }
      if (v8 < *(_QWORD *)(v16 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_19;
    }
    v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_19:
  v12 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t CAFPositionManager.sharedServices(for:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = CAUVehicleLayoutKey.sharedKeys.getter();
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13CarAssetUtils19CAUVehicleLayoutKeyOG_SaySo10CAFServiceCGs5NeverOTg5065_sSo18CAFPositionManagerC10CAFCombineE14sharedServices3forSaySo10j4CG13de7Utils19ghI12O_tFAhKXEfU_So0nO0CTf1cn_n(v2, v1);
  swift_bridgeObjectRelease();
  v4 = specialized FlattenSequence<>.startIndex.getter(v3);
  v7 = specialized FlattenSequence<>.distance(from:to:)(v4, v6, v5 & 1, *(_QWORD *)(v3 + 16), 0, 1, v3);
  if (v7)
  {
    v8 = v7;
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    result = specialized FlattenSequence<>.startIndex.getter(v3);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v12 = result;
      v13 = v10;
      while ((v12 & 0x8000000000000000) == 0)
      {
        if (v12 >= *(_QWORD *)(v3 + 16))
          goto LABEL_17;
        if ((v11 & 1) != 0)
          goto LABEL_21;
        v14 = *(_QWORD *)(v3 + 32 + 8 * v12);
        if ((v14 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          MEMORY[0x23B811D2C](v13, v14);
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
            goto LABEL_18;
          if (v13 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_19;
          v15 = *(id *)(v14 + 8 * v13 + 32);
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        result = specialized FlattenSequence<>._index(after:)(v12, v13, 0, v3);
        v12 = result;
        v13 = v16;
        if (!--v8)
        {
          v17 = v18;
          OUTLINED_FUNCTION_26_4();
          return v17;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_26_4();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x23B811D38](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_20;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_20:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

void CAFPositionManager.layoutKeys.getter()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)v11 - v3;
  v5 = objc_msgSend(v1, sel_vehicleLayoutKeys);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v11[0] = v6;
    v8 = v6 + 40;
    v9 = MEMORY[0x24BEE4AF8];
    v11[1] = v2;
    do
    {
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_7_2();
      if (__swift_getEnumTagSinglePayload(v0, 1, (uint64_t)v1) == 1)
      {
        outlined destroy of CAUVehicleLayoutKey?(v0);
      }
      else
      {
        OUTLINED_FUNCTION_4_3((uint64_t)v4, v0);
        OUTLINED_FUNCTION_4_3(v2, (uint64_t)v4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = OUTLINED_FUNCTION_2_3(0, *(_QWORD *)(v9 + 16) + 1);
        v2 = *(_QWORD *)(v9 + 16);
        v10 = *(_QWORD *)(v9 + 24);
        if (v2 >= v10 >> 1)
          v9 = OUTLINED_FUNCTION_2_3(v10 > 1, v2 + 1);
        OUTLINED_FUNCTION_0_4();
      }
      v8 += 16;
      --v7;
    }
    while (v7);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_5();
}

unint64_t lazy protocol witness table accessor for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey;
  if (!lazy protocol witness table cache variable for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey)
  {
    v1 = type metadata accessor for CAUVehicleLayoutKey();
    result = MEMORY[0x23B812308](MEMORY[0x24BE15160], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey);
  }
  return result;
}

unint64_t type metadata accessor for CAFService()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFService;
  if (!lazy cache variable for type metadata for CAFService)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFService);
  }
  return result;
}

void CAFPositionManager.vehicleLayoutKeys(for:)()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - v6;
  v8 = objc_msgSend(v1, sel_vehicleLayoutKeysFor_, swift_getObjCClassFromMetadata());
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v14[0] = v9;
    v11 = v9 + 40;
    v12 = MEMORY[0x24BEE4AF8];
    v14[1] = v2;
    do
    {
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_7_2();
      if (__swift_getEnumTagSinglePayload(v0, 1, (uint64_t)v1) == 1)
      {
        outlined destroy of CAUVehicleLayoutKey?(v0);
      }
      else
      {
        OUTLINED_FUNCTION_4_3((uint64_t)v7, v0);
        OUTLINED_FUNCTION_4_3(v2, (uint64_t)v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = OUTLINED_FUNCTION_2_3(0, *(_QWORD *)(v12 + 16) + 1);
        v2 = *(_QWORD *)(v12 + 16);
        v13 = *(_QWORD *)(v12 + 24);
        if (v2 >= v13 >> 1)
          v12 = OUTLINED_FUNCTION_2_3(v13 > 1, v2 + 1);
        OUTLINED_FUNCTION_0_4();
      }
      v11 += 16;
      --v10;
    }
    while (v10);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_5();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAUVehicleLayoutKey>);
  v10 = *(_QWORD *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_24:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CAUVehicleLayoutKey() - 8) + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v17, v8, v18);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  return (uint64_t)v13;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *, _QWORD);
  void (*v11)(_QWORD *, _QWORD);
  id *v12;
  id v13;
  _QWORD v14[4];

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [[CAFService]] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [CAFService] and conformance [A], &demangling cache variable for type metadata for [CAFService]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFService]);
            specialized protocol witness for Collection.subscript.read in conformance [A](v14, i, a3);
            v11 = v10;
            v13 = *v12;
            v11(v14, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void specialized protocol witness for Collection.subscript.read in conformance [A](_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  specialized Array.subscript.read(v6, a2, a3);
  v6[4] = v7;
  OUTLINED_FUNCTION_24_1();
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    *(_QWORD *)result = *(_QWORD *)(a3 + 8 * a2 + 32);
    swift_bridgeObjectRetain();
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_bridgeObjectRelease();
}

void specialized Array.subscript.read(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = (id)MEMORY[0x23B811D2C](a2, a3);
  else
    v7 = *(id *)(a3 + 8 * a2 + 32);
  *a1 = v7;
  OUTLINED_FUNCTION_24_1();
}

void Array.subscript.readspecialized (id *a1)
{

}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized FlattenSequence<>.startIndex.getter(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return v1;
  v2 = result;
  v3 = *(_QWORD *)(result + 32);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v4)
      return 0;
  }
  else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  if (v1 == 1)
    return v1;
  v5 = 0;
  v6 = v2 + 40;
  while (v5 + 1 < v1)
  {
    v7 = *(_QWORD *)(v6 + 8 * v5);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v8)
      return v5 + 1;
    if (v1 - 1 == ++v5)
      return v1;
  }
  __break(1u);
  return result;
}

uint64_t specialized FlattenSequence<>.distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  if (a4 != result)
  {
    v8 = result;
    if (a4 < result)
    {
      v7 = a3 & 1;
      v11 = result;
      v10 = a4;
      v9 = a5;
      a5 = a2;
      if ((a6 & 1) != 0)
      {
LABEL_20:
        v17 = 0;
        v14 = 0;
        goto LABEL_21;
      }
LABEL_7:
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_40;
      if (v10 >= *(_QWORD *)(a7 + 16))
        goto LABEL_42;
      v15 = *(_QWORD *)(a7 + 8 * v10 + 32);
      if (v15 >> 62)
        goto LABEL_44;
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
LABEL_19:
    v7 = a6 & 1;
    v11 = a4;
    v10 = v8;
    v9 = a2;
    if ((a3 & 1) != 0)
      goto LABEL_20;
    goto LABEL_7;
  }
  if ((a6 & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return 0;
    while (1)
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      v21 = a5;
      v22 = v7;
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      v7 = v22;
      a5 = v21;
LABEL_11:
      v17 = v16 - v9;
      if (__OFSUB__(v16, v9))
      {
        __break(1u);
        goto LABEL_46;
      }
      ++v10;
      v14 = v16 - v9;
LABEL_21:
      if ((uint64_t)v10 >= v11)
        break;
      v18 = *(_QWORD *)(a7 + 16);
      v14 = v17;
      while (v10 < v18)
      {
        v19 = *(_QWORD *)(a7 + 32 + 8 * v10);
        if (v19 >> 62)
        {
          v24 = a5;
          v23 = v7;
          swift_bridgeObjectRetain();
          v9 = _CocoaArrayWrapper.endIndex.getter();
          result = swift_bridgeObjectRelease();
          v7 = v23;
          a5 = v24;
        }
        else
        {
          v9 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v20 = __OFADD__(v14, v9);
        v14 += v9;
        if (v20)
          goto LABEL_38;
        if ((uint64_t)++v10 >= v11)
          goto LABEL_30;
      }
      __break(1u);
LABEL_38:
      __break(1u);
    }
LABEL_30:
    if ((v7 & 1) == 0)
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        if (v10 < *(_QWORD *)(a7 + 16))
        {
          v20 = __OFADD__(v14, a5);
          v14 += a5;
          if (!v20)
            goto LABEL_34;
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_34:
    if (a4 < v8)
    {
      v20 = __OFSUB__(0, v14);
      v14 = -v14;
      if (v20)
        goto LABEL_48;
    }
    return v14;
  }
  if ((a3 & 1) == 0)
  {
    if (a4 < 0)
      goto LABEL_41;
    if (*(_QWORD *)(a7 + 16) <= (unint64_t)a4)
      goto LABEL_43;
    v14 = a5 - a2;
    if (!__OFSUB__(a5, a2))
      return v14;
    __break(1u);
    goto LABEL_19;
  }
LABEL_50:
  __break(1u);
  return result;
}

unint64_t specialized FlattenSequence<>._index(after:)(unint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15[4])();

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = a4;
  v4 = result;
  v7 = *(_QWORD *)(a4 + 16);
  if (v7 <= result)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v6 = a2 + 1;
  if (__OFADD__(a2, 1))
    goto LABEL_11;
  v8 = *(_QWORD *)(a4 + 8 * result + 32);
  if (v8 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  if (v6 == v9)
  {
    if (++v4 == v7)
    {
      return v7;
    }
    else
    {
      while (1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[CAFService]]);
        lazy protocol witness table accessor for type [[CAFService]] and conformance [A](&lazy protocol witness table cache variable for type [[CAFService]] and conformance [A], &demangling cache variable for type metadata for [[CAFService]]);
        v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v15, v4, v5);
        v12 = *v11;
        swift_bridgeObjectRetain();
        ((void (*)(uint64_t (**)(), _QWORD))v10)(v15, 0);
        swift_bridgeObjectRelease();
        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          v13 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        result = swift_bridgeObjectRelease();
        if (v13)
          break;
        v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
        ++v4;
        if (v14 == v7)
          return v7;
      }
    }
  }
  return v4;
}

uint64_t lazy protocol witness table accessor for type [[CAFService]] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(unint64_t, _QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v3;
  return v4(v2+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v1, *(_QWORD *)(v6 - 88), v0);
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  return type metadata accessor for CAUVehicleLayoutKey();
}

uint64_t OUTLINED_FUNCTION_2_3(char a1, int64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_4_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return CAUVehicleLayoutKey.init(rawValue:)();
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_11_2(unint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(id);

  return specialized _ArrayProtocol.filter(_:)(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_13_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_14_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

id CAFButtonSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
}

uint64_t CAFButtonSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFButtonSettingObservable.userVisibleLabel.getter()
{
  CAFButtonSettingObservable.sectionIdentifier.getter();
}

void CAFButtonSettingObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.sectionIdentifier.getter()
{
  CAFButtonSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFButtonSettingObservable.$sectionIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFButtonSettingObservable.$sortOrder.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFButtonSettingObservable.$category.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFButtonSettingObservable.identifier.getter()
{
  CAFButtonSettingObservable.sectionIdentifier.getter();
}

void CAFButtonSettingObservable.$identifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.disabled.getter()
{
  CAFButtonSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFButtonSettingObservable.$disabled.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.limitableUIElement.getter()
{
  CAFButtonSettingObservable.disabled.getter();
}

void CAFButtonSettingObservable.$limitableUIElement.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.hidden.getter()
{
  CAFButtonSettingObservable.disabled.getter();
}

void CAFButtonSettingObservable.$hidden.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.showAudioBrandLogo.getter()
{
  CAFButtonSettingObservable.disabled.getter();
}

void CAFButtonSettingObservable.$showAudioBrandLogo.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.vehicleLayoutKey.getter()
{
  CAFButtonSettingObservable.sectionIdentifier.getter();
}

void CAFButtonSettingObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable.symbolName.getter()
{
  CAFButtonSettingObservable.sectionIdentifier.getter();
}

void CAFButtonSettingObservable.$symbolName.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFButtonSettingObservable.$prominenceInfo.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFButtonSettingObservable.buttonAction : CAFButtonSettingObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFButtonSettingObservable.buttonAction.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFButtonSettingObservable.buttonAction : CAFButtonSettingObservable(unsigned __int8 *a1)
{
  return CAFButtonSettingObservable.buttonAction.setter(*a1);
}

uint64_t CAFButtonSettingObservable.buttonAction.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFButtonSettingObservable.buttonAction.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFButtonSettingObservable.buttonAction.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFButtonSettingObservable.buttonAction.modify;
}

void CAFButtonSettingObservable.buttonAction.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFButtonSettingObservable.$buttonAction.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFButtonSettingObservable.name.getter()
{
  CAFButtonSettingObservable.sectionIdentifier.getter();
}

void CAFButtonSettingObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFButtonSettingObservable._description.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed), sel_registeredForButtonAction))
  {
    CAFButtonSettingObservable.buttonAction.getter();
    v1 = (id)NSStringFromButtonAction();
    if (v1)
    {
      v2 = v1;
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v5 = v4;

    }
    else
    {
      v5 = (void *)0xE900000000000029;
      v3 = 0x6E776F6E6B6E7528;
    }
  }
  else
  {
    v5 = (void *)0xEE003E6465726574;
    v3 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(53);
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  v6._object = (void *)0x80000002374E03C0;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x80000002374E03E0;
  v7._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v3;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFButtonSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFButtonSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFButtonSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFButtonSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFButtonSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFButtonSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  objc_super v30;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__buttonAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFButtonSettingObservable, CAFButtonAction>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v26] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed] = a1;
  v27 = a1;

  v30.receiver = v9;
  v30.super_class = (Class)type metadata accessor for CAFButtonSettingObservable();
  v28 = objc_msgSendSuper2(&v30, sel_init);
  objc_msgSend(v27, sel_registerObserver_, v28);

  return v28;
}

uint64_t CAFButtonSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFButtonSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFButtonSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFButtonSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFButtonSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFButtonSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFButtonSettingObservable(id *a1@<X8>)
{
  *a1 = CAFButtonSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFButtonSettingObservable(void **a1)
{
  CAFButtonSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFButtonSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFButtonSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v8;
  id v9;

  if (a4)
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = a3;
  v9 = a1;
  a5();

  return OUTLINED_FUNCTION_5_1();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFButtonSettingObservable.buttonSettingService(_:didUpdateButtonAction:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFButtonSettingObservable.buttonSettingService(_:didUpdateName:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFButtonSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFButtonSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFButtonSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237452BFC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFButtonSettingObservable.buttonAction.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237452C1C(unsigned __int8 *a1)
{
  CAFButtonSettingObservable.buttonAction.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_237452C3C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_237452C58(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_237452C78(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_237452CA4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_237452CC0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237452CE0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237452D00()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237452D20()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237452D40(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  *v4 = v7;
  v4[1] = v9;
  OUTLINED_FUNCTION_24_1();
}

void sub_237452DA8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

char *keypath_get_selector_buttonAction()
{
  return sel_buttonAction;
}

void sub_237452DD4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_buttonAction);
  OUTLINED_FUNCTION_11();
}

id sub_237452E00(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setButtonAction_, *a1);
}

void key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  *v4 = v6;
  v4[1] = v8;
  OUTLINED_FUNCTION_24_1();
}

void sub_237452E50(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFButtonSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFButtonSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable, (uint64_t)&protocol conformance descriptor for CAFButtonSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFButtonSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFButtonSetting and conformance CAFButtonSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFButtonSetting, (uint64_t)&protocol conformance descriptor for CAFButtonSetting);
}

unint64_t type metadata accessor for CAFButtonSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFButtonSetting;
  if (!lazy cache variable for type metadata for CAFButtonSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFButtonSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFButtonSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable, (uint64_t)&protocol conformance descriptor for CAFButtonSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFButtonSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))() & 0x1FF;
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.buttonAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.buttonAction.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.buttonAction.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$buttonAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t partial apply for closure #1 in CAFButtonSettingObservable.resetCachedDescription()()
{
  return CAFButtonSettingObservable.cachedDescription.setter(0, 0);
}

id OUTLINED_FUNCTION_25_4(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  return objc_msgSend(*a1, *a4);
}

uint64_t CAFTrip.tripResetBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasTripReset, (SEL *)&selRef_tripReset);
}

id CAFTrip.tripResetBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setTripReset_, a1 & 1);
}

uint64_t CAFTrip.showOdometerBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasShowOdometer, (SEL *)&selRef_showOdometer);
}

id CAFTrip.showOdometerBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setShowOdometer_, a1 & 1);
}

id CAFTripObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
}

uint64_t CAFTripObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFTripObservable.userVisibleLabel.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFTripObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTripObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTripObservable.$sortOrder.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTripObservable.tripReset : CAFTripObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFTripObservable.tripReset.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTripObservable.tripReset : CAFTripObservable(unsigned __int8 *a1)
{
  return CAFTripObservable.tripReset.setter(*a1);
}

uint64_t CAFTripObservable.tripReset.getter()
{
  return CAFTripObservable.tripReset.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFTripObservable.tripReset.setter(uint64_t a1)
{
  return CAFTripObservable.tripReset.setter(a1);
}

{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFTripObservable.tripReset.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v5);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

uint64_t CAFTripObservable.$tripReset.getter()
{
  return CAFTripObservable.$tripReset.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFTripObservable.averageSpeed.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_37();
  return OUTLINED_FUNCTION_112();
}

void CAFTripObservable.$averageSpeed.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__averageSpeed, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.distance.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

void CAFTripObservable.$distance.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__distance, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.duration.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

void CAFTripObservable.$duration.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__duration, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.energy.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

void CAFTripObservable.$energy.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energy, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.energyEfficiency.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

void CAFTripObservable.$energyEfficiency.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energyEfficiency, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.fuelEfficiency.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

void CAFTripObservable.$fuelEfficiency.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__fuelEfficiency, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFTripObservable.showOdometer : CAFTripObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFTripObservable.showOdometer.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTripObservable.showOdometer : CAFTripObservable(unsigned __int8 *a1)
{
  return CAFTripObservable.showOdometer.setter(*a1);
}

uint64_t CAFTripObservable.showOdometer.getter()
{
  return CAFTripObservable.tripReset.getter();
}

uint64_t CAFTripObservable.showOdometer.setter(uint64_t a1)
{
  return CAFTripObservable.tripReset.setter(a1);
}

void CAFTripObservable.showOdometer.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v5);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFTripObservable.tripReset.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFTripObservable.$showOdometer.getter()
{
  return CAFTripObservable.$tripReset.getter();
}

void CAFTripObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFTripObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTripObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;

  v63 = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v64 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_4_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_4_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_4_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_143();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_143();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  OUTLINED_FUNCTION_111();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_7_3(v7, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v8)
  {
    CAFTripObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v8 = OUTLINED_FUNCTION_19_4();
    v9 = v8;
  }
  v62 = v9;
  OUTLINED_FUNCTION_7_3(v8, sel_registeredForSortOrder);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v10)
  {
    CAFTripObservable.sortOrder.getter();
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v11 = v10;
  }
  v61 = v11;
  OUTLINED_FUNCTION_7_3(v10, sel_registeredForTripReset);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v12)
  {
    CAFTripObservable.tripReset.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v12 = OUTLINED_FUNCTION_19_4();
    v13 = v12;
  }
  v60 = v13;
  OUTLINED_FUNCTION_7_3(v12, sel_registeredForAverageSpeed);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v14)
  {
    CAFTripObservable.averageSpeed.getter();
    v14 = String.init<A>(describing:)();
    v16 = v14;
  }
  v53 = v15;
  v59 = v16;
  OUTLINED_FUNCTION_7_3(v14, sel_registeredForDistance);
  OUTLINED_FUNCTION_2_4();
  v19 = (void *)0xEE003E6465726574;
  if ((_DWORD)v17)
  {
    CAFTripObservable.distance.getter();
    v17 = String.init<A>(describing:)();
    v18 = v17;
    v19 = v20;
  }
  v58 = v18;
  OUTLINED_FUNCTION_7_3(v17, sel_registeredForDuration);
  OUTLINED_FUNCTION_2_4();
  v23 = (void *)0xEE003E6465726574;
  if ((_DWORD)v21)
  {
    CAFTripObservable.duration.getter();
    v21 = String.init<A>(describing:)();
    v22 = v21;
    v23 = v24;
  }
  v57 = v22;
  OUTLINED_FUNCTION_7_3(v21, sel_registeredForEnergy);
  OUTLINED_FUNCTION_2_4();
  v27 = (void *)0xEE003E6465726574;
  if ((_DWORD)v25)
  {
    CAFTripObservable.energy.getter();
    v25 = String.init<A>(describing:)();
    v26 = v25;
    v27 = v28;
  }
  v56 = v26;
  OUTLINED_FUNCTION_7_3(v25, sel_registeredForEnergyEfficiency);
  OUTLINED_FUNCTION_2_4();
  v31 = (void *)0xEE003E6465726574;
  if ((_DWORD)v29)
  {
    CAFTripObservable.energyEfficiency.getter();
    v29 = String.init<A>(describing:)();
    v30 = v29;
    v31 = v32;
  }
  v55 = v30;
  OUTLINED_FUNCTION_7_3(v29, sel_registeredForFuelEfficiency);
  OUTLINED_FUNCTION_2_4();
  v35 = (void *)0xEE003E6465726574;
  if ((_DWORD)v33)
  {
    CAFTripObservable.fuelEfficiency.getter();
    v33 = String.init<A>(describing:)();
    v34 = v33;
    v35 = v36;
  }
  v54 = v34;
  if (OUTLINED_FUNCTION_7_3(v33, sel_registeredForShowOdometer))
  {
    CAFTripObservable.showOdometer.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v37 = OUTLINED_FUNCTION_19_4();
    v63 = v38;
    v64 = v37;
  }
  v65 = static String._createEmpty(withInitialCapacity:)(196);
  v39._object = (void *)0x80000002374E04D0;
  v39._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000015, (uint64_t)" { userVisibleLabel: ");
  OUTLINED_FUNCTION_28_3(v62);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_34_1(0x724F74726F73202CLL, 0x3A726564u);
  OUTLINED_FUNCTION_28_3(v61);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_34_1(0x655270697274202CLL, 0x3A746573u);
  OUTLINED_FUNCTION_28_3(v60);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_16_4((uint64_t)", averageSpeed: ");
  v40._countAndFlagsBits = v59;
  v40._object = v53;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x6E6174736964202CLL;
  v41._object = (void *)0xEC000000203A6563;
  String.append(_:)(v41);
  v42._countAndFlagsBits = v58;
  v42._object = v19;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0xEC000000203A6E6FLL;
  v43._countAndFlagsBits = 0x697461727564202CLL;
  String.append(_:)(v43);
  v44._countAndFlagsBits = v57;
  v44._object = v23;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = 0x796772656E65202CLL;
  v45._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v45);
  v46._countAndFlagsBits = v56;
  v46._object = v27;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._object = (void *)0x80000002374E0530;
  v47._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v47);
  v48._countAndFlagsBits = v55;
  v48._object = v31;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000012, (uint64_t)", fuelEfficiency: ");
  v49._countAndFlagsBits = v54;
  v49._object = v35;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_4((uint64_t)", showOdometer: ");
  v50._countAndFlagsBits = v64;
  v50._object = v63;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 4095264;
  v51._object = (void *)0xE300000000000000;
  String.append(_:)(v51);
  return v65;
}

uint64_t CAFTripObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTripObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFTripObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFTripObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFTripObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFTripObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  objc_super v31;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, String?>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__tripReset;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTripObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v12] = OUTLINED_FUNCTION_17_0();
  v13 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__averageSpeed;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__distance;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitLength>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v15] = v16;
  v17 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__duration;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v17] = v18;
  v19 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energy;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitEnergy>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v19] = v20;
  v21 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energyEfficiency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<CAFUnitEnergyEfficiency>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v21] = v22;
  v23 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__fuelEfficiency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitFuelEfficiency>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v23] = v24;
  v25 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__showOdometer;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v25] = OUTLINED_FUNCTION_17_0();
  v26 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, String>);
  OUTLINED_FUNCTION_127();
  v27 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v26] = specialized SafePublished.init(observedValuekeypath:)(v27);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed] = a1;
  v28 = a1;

  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for CAFTripObservable();
  v29 = objc_msgSendSuper2(&v31, sel_init);
  objc_msgSend(v28, sel_registerObserver_, v29);

  return v29;
}

uint64_t CAFTripObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTripObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFTripObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTripObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTripObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTripObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFTripObservable(id *a1@<X8>)
{
  *a1 = CAFTripObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTripObservable(void **a1)
{
  CAFTripObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTripObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTripObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTripObservable.tripService(_:didUpdateUserVisibleLabel:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFTripObservable.tripService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFTripObservable.tripService(_:didUpdateTripReset:)()
{
  return CAFTripObservable.tripService(_:didUpdateTripReset:)();
}

{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__averageSpeed, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateDistance:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__distance, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateDuration:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__duration, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateEnergy:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energy, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateEnergyEfficiency:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energyEfficiency, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateFuelEfficiency:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__fuelEfficiency, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_32();
  a4(a2);
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFTripObservable.tripService(_:didUpdateShowOdometer:)()
{
  return CAFTripObservable.tripService(_:didUpdateTripReset:)();
}

uint64_t CAFTripObservable.tripService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void CAFTripObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFTripObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFTripObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374551C8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTripObservable.tripReset.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374551E8(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFTripObservable.tripReset.setter(v1);
  OUTLINED_FUNCTION_11();
}

void sub_237455204()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTripObservable.showOdometer.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237455224(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFTripObservable.showOdometer.setter(v1);
  OUTLINED_FUNCTION_11();
}

void key path getter for CAFTrip.userVisibleLabel : CAFTrip(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_userVisibleLabel);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

char *keypath_get_selector_sortOrder()
{
  return sel_sortOrder;
}

void sub_2374552B4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_sortOrder);
  OUTLINED_FUNCTION_11();
}

void sub_2374552E0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTrip.tripResetBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237455300(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFTrip.tripResetBridged.setter(v1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_averageSpeed()
{
  return sel_averageSpeed;
}

uint64_t sub_237455328@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_averageSpeed, (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>, a2);
}

char *keypath_get_selector_distance()
{
  return sel_distance;
}

uint64_t key path getter for CAFTrip.averageSpeed : CAFTrip@<X0>(id *a1@<X0>, SEL *a2@<X3>, unint64_t *a3@<X4>, uint64_t *a4@<X6>, uint64_t a5@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = objc_msgSend(*a1, *a2);
  if (v8)
  {
    v9 = v8;
    type metadata accessor for CAFTemperature(0, a3);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return __swift_storeEnumTagSinglePayload(a5, v10, 1, v11);
}

uint64_t sub_237455404@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_distance, &lazy cache variable for type metadata for NSUnitLength, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>, a2);
}

char *keypath_get_selector_duration()
{
  return sel_duration;
}

uint64_t sub_237455444@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_duration, &lazy cache variable for type metadata for NSUnitDuration, &demangling cache variable for type metadata for Measurement<NSUnitDuration>, a2);
}

char *keypath_get_selector_energy()
{
  return sel_energy;
}

uint64_t sub_237455484@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_energy, (unint64_t *)&lazy cache variable for type metadata for NSUnitEnergy, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>, a2);
}

char *keypath_get_selector_energyEfficiency()
{
  return sel_energyEfficiency;
}

uint64_t sub_2374554C4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_energyEfficiency, (unint64_t *)&lazy cache variable for type metadata for CAFUnitEnergyEfficiency, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>, a2);
}

char *keypath_get_selector_fuelEfficiency()
{
  return sel_fuelEfficiency;
}

uint64_t sub_237455504@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_fuelEfficiency, (unint64_t *)&lazy cache variable for type metadata for NSUnitFuelEfficiency, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>, a2);
}

void sub_237455538()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTrip.showOdometerBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237455558(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFTrip.showOdometerBridged.setter(v1);
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFTripObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTrip()
{
  lazy protocol witness table accessor for type CAFTripObservable and conformance CAFTripObservable(lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, (uint64_t)&protocol conformance descriptor for CAFTripObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTrip and conformance CAFTrip()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFTrip and conformance CAFTrip;
  if (!lazy protocol witness table cache variable for type CAFTrip and conformance CAFTrip)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTrip);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFTrip, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTrip and conformance CAFTrip);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTripObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFTripObservable and conformance CAFTripObservable(&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, (uint64_t)&protocol conformance descriptor for CAFTripObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFTripObservable and conformance CAFTripObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFTripObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFTripObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTripObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTripObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFTripObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFTripObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFTripObservable.tripReset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFTripObservable.tripReset.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFTripObservable.tripReset.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFTripObservable.$tripReset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFTripObservable.averageSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFTripObservable.$averageSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFTripObservable.distance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFTripObservable.$distance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFTripObservable.duration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFTripObservable.$duration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFTripObservable.energy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFTripObservable.$energy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFTripObservable.energyEfficiency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFTripObservable.$energyEfficiency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFTripObservable.fuelEfficiency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFTripObservable.$fuelEfficiency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFTripObservable.showOdometer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFTripObservable.showOdometer.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFTripObservable.showOdometer.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFTripObservable.$showOdometer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFTripObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFTripObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFTripObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 456))();
}

uint64_t partial apply for closure #1 in CAFTripObservable.resetCachedDescription()()
{
  return CAFTripObservable.cachedDescription.setter(0, 0);
}

id OUTLINED_FUNCTION_7_3(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_16_4(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_18_3(uint64_t (*a1)(uint64_t, _QWORD))
{
  uint64_t v1;

  return a1(v1, 0);
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_28_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_34_1(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  v2 = a2 | 0xED00002000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_37_3(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t Measurement<>.localeStep(_:by:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  _QWORD v30[2];
  int v31;
  uint64_t v32;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v32 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v30 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v30 - v14;
  v16 = *a1;
  OUTLINED_FUNCTION_98(v13, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  v31 = v16;
  v30[1] = a2;
  if ((v16 & 1) != 0)
    static Measurement<>.- infix(_:_:)();
  else
    static Measurement<>.+ infix(_:_:)();
  OUTLINED_FUNCTION_0_6(a3, (uint64_t)v15);
  v17 = Measurement<>.readableString.getter();
  v19 = v18;
  if (v17 == Measurement<>.readableString.getter() && v19 == v20)
  {
    result = swift_bridgeObjectRelease_n();
  }
  else
  {
    v22 = OUTLINED_FUNCTION_3_3();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      return result;
  }
  OUTLINED_FUNCTION_98(result, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  do
  {
    while (1)
    {
      if ((v31 & 1) != 0)
      {
        OUTLINED_FUNCTION_2_5();
        static Measurement<>.- infix(_:_:)();
      }
      else
      {
        OUTLINED_FUNCTION_2_5();
        static Measurement<>.+ infix(_:_:)();
      }
      OUTLINED_FUNCTION_0_6((uint64_t)v12, (uint64_t)v9);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a3, v6);
      OUTLINED_FUNCTION_0_6(a3, (uint64_t)v12);
      v24 = Measurement<>.readableString.getter();
      v26 = v25;
      if (v24 != Measurement<>.readableString.getter() || v26 != v27)
        break;
      swift_bridgeObjectRelease_n();
    }
    v29 = OUTLINED_FUNCTION_3_3();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  while ((v29 & 1) != 0);
  return result;
}

uint64_t Measurement<>.step(_:by:)(char *a1)
{
  char v1;

  v1 = *a1;
  OUTLINED_FUNCTION_98((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  if ((v1 & 1) != 0)
    return static Measurement<>.- infix(_:_:)();
  else
    return static Measurement<>.+ infix(_:_:)();
}

uint64_t Measurement<>.readableString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v1 = type metadata accessor for Locale();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  if ((Measurement<>.isFahrenheitUI.getter() & 1) != 0)
  {
    v12 = objc_msgSend((id)objc_opt_self(), sel_fahrenheit);
    Measurement<>.converted(to:)();

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v0, v5);
  }
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  static Locale.autoupdatingCurrent.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  objc_msgSend(v13, sel_setLocale_, isa);

  objc_msgSend(v13, sel_setNumberStyle_, 1);
  objc_msgSend(v13, sel_setRoundingMode_, 6);
  objc_msgSend(v13, sel_setMinimumFractionDigits_, (Measurement<>.isFahrenheitUI.getter() & 1) == 0);
  objc_msgSend(v13, sel_setMaximumFractionDigits_, (Measurement<>.isFahrenheitUI.getter() & 1) == 0);
  v15 = Measurement.value.getter();
  v16 = (void *)MEMORY[0x23B811C84](v15);
  v17 = objc_msgSend(v13, sel_stringFromNumber_, v16);

  if (v17)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (!v20)
  {
    Measurement.value.getter();
    v18 = Double.description.getter();
  }

  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  v21(v11, v5);
  return v18;
}

uint64_t Measurement<>.readableString(in:)(void *a1)
{
  double v2;
  double v3;
  double v4;
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  Measurement.value.getter();
  *(float *)&v2 = v2;
  if (!objc_msgSend(a1, sel_valueIsInRange_, v2))
    return 0;
  Measurement.value.getter();
  v4 = v3;
  v5 = objc_msgSend(a1, sel_maximum);
  objc_msgSend(v5, sel_doubleValue);
  v7 = v6;

  if (v7 <= v4)
    return 18760;
  Measurement.value.getter();
  v9 = v8;
  v10 = objc_msgSend(a1, sel_minimum);
  objc_msgSend(v10, sel_doubleValue);
  v12 = v11;

  if (v9 <= v12)
    return 20300;
  else
    return Measurement<>.readableString.getter();
}

uint64_t Measurement<>.isFahrenheitUI.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;

  v0 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSObject);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Locale.current.getter();
  v1 = (void *)NSDimension.init(forLocale:)();
  v2 = objc_msgSend((id)objc_opt_self(), sel_fahrenheit);
  v3 = static NSObject.== infix(_:_:)();

  return v3 & 1;
}

uint64_t Measurement<>.invalidString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];

  v0 = type metadata accessor for Locale();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Measurement<>.isFahrenheitUI.getter() & 1) != 0)
    return 11565;
  static Locale.autoupdatingCurrent.getter();
  v4 = Locale.decimalSeparator.getter();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (!v6)
    return 11565;
  v10[0] = 11565;
  v10[1] = 0xE200000000000000;
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 45;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t OUTLINED_FUNCTION_0_6(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t CAFTypeTestIndexByUnit.testInt32Bridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_hasTestInt32);
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v0, sel_testInt32);
  else
    v3 = 0;
  return v3 | ((unint64_t)(v2 ^ 1u) << 32);
}

id CAFTypeTestIndexByUnit.testInt32Bridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  if ((a1 & 0x100000000) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestInt32_, v2);
}

id CAFTypeTestIndexByUnitObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
}

uint64_t CAFTypeTestIndexByUnitObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTypeTestIndexByUnitObservable.distanceUnitRawValue.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int16 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__distanceUnitRawValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestIndexByUnitObservable.testInt32.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(a1, a2, a3, a4, CAFTypeTestIndexByUnitObservable.testInt32.setter);
}

unint64_t CAFTypeTestIndexByUnitObservable.testInt32.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(_BYTE *, _QWORD);
  unsigned int *v3;
  uint64_t v4;
  unsigned __int8 v5;
  _BYTE v7[32];
  id v8;

  OUTLINED_FUNCTION_15_0();
  v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v8;
  v2 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v5 = *((_BYTE *)v3 + 4);
  v2(v7, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4 | ((unint64_t)v5 << 32);
}

uint64_t CAFTypeTestIndexByUnitObservable.testInt32.setter(unint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), v1, KeyPath, v4);
}

void (*CAFTypeTestIndexByUnitObservable.testInt32.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  uint64_t v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LODWORD(v4) = *(_DWORD *)v7;
  v8 = *(_BYTE *)(v7 + 4);
  v6(v3, 0);
  swift_release();
  OUTLINED_FUNCTION_37();

  *((_DWORD *)v3 + 22) = (_DWORD)v4;
  *((_BYTE *)v3 + 92) = v8;
  return CAFTypeTestIndexByUnitObservable.testInt32.modify;
}

void CAFTypeTestIndexByUnitObservable.testInt32.modify(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned int *)(*(_QWORD *)a1 + 88) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 92) << 32), *(id *)(*(_QWORD *)a1 + 64), v1[9], v1[10]);
  free(v1);
}

uint64_t CAFTypeTestIndexByUnitObservable.$testInt32.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFTypeTestIndexByUnitObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTypeTestIndexByUnitObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestIndexByUnitObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForDistanceUnit))
  {
    CAFTypeTestIndexByUnitObservable.distanceUnitRawValue.getter();
    type metadata accessor for CAFUnitType(0);
    v2 = OUTLINED_FUNCTION_24_0();
    v3 = v4;
  }
  if (objc_msgSend(v1, sel_registeredForTestInt32))
  {
    CAFTypeTestIndexByUnitObservable.testInt32.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
    OUTLINED_FUNCTION_24_0();
  }
  _StringGuts.grow(_:)(82);
  v5._countAndFlagsBits = 0xD000000000000023;
  v5._object = (void *)0x80000002374E0630;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x80000002374E0660;
  v6._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6E4974736574202CLL;
  v8._object = (void *)0xED0000203A323374;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFTypeTestIndexByUnitObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTypeTestIndexByUnitObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFTypeTestIndexByUnitObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFTypeTestIndexByUnitObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFTypeTestIndexByUnitObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFTypeTestIndexByUnitObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__distanceUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestIndexByUnitObservable, CAFUnitType>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestIndexByUnitObservable, Int32?>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__name;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestIndexByUnitObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFTypeTestIndexByUnitObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFTypeTestIndexByUnitObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTypeTestIndexByUnitObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFTypeTestIndexByUnitObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTypeTestIndexByUnitObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTypeTestIndexByUnitObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTypeTestIndexByUnitObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFTypeTestIndexByUnitObservable(id *a1@<X8>)
{
  *a1 = CAFTypeTestIndexByUnitObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTypeTestIndexByUnitObservable(void **a1)
{
  CAFTypeTestIndexByUnitObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTypeTestIndexByUnitObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTypeTestIndexByUnitObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTypeTestIndexByUnitObservable.typeTestIndexByUnitService(_:didUpdateDistanceUnitRawValue:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFTypeTestIndexByUnitObservable.typeTestIndexByUnitService(_:didUpdateTestInt32:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFTypeTestIndexByUnitObservable.typeTestIndexByUnitService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

void CAFTypeTestIndexByUnitObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFTypeTestIndexByUnitObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFTypeTestIndexByUnitObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_distanceUnitRawValue()
{
  return sel_distanceUnitRawValue;
}

void sub_2374570EC(id *a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = (unsigned __int16)objc_msgSend(*a1, sel_distanceUnitRawValue);
  OUTLINED_FUNCTION_11();
}

unint64_t key path getter for CAFTypeTestIndexByUnit.testInt32Bridged : CAFTypeTestIndexByUnit@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestIndexByUnit.testInt32Bridged.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_237457188(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestIndexByUnit.testInt32Bridged.setter);
}

uint64_t type metadata accessor for CAFTypeTestIndexByUnitObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTypeTestIndexByUnit(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable, (uint64_t)&protocol conformance descriptor for CAFTypeTestIndexByUnitObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTypeTestIndexByUnitObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnit and conformance CAFTypeTestIndexByUnit, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnit, (uint64_t)&protocol conformance descriptor for CAFTypeTestIndexByUnit);
}

unint64_t type metadata accessor for CAFTypeTestIndexByUnit()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFTypeTestIndexByUnit;
  if (!lazy cache variable for type metadata for CAFTypeTestIndexByUnit)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTypeTestIndexByUnit);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTypeTestIndexByUnitObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable, (uint64_t)&protocol conformance descriptor for CAFTypeTestIndexByUnitObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFTypeTestIndexByUnitObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.distanceUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.testInt32.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.testInt32.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xC8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.testInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.$testInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t partial apply for closure #1 in CAFTypeTestIndexByUnitObservable.resetCachedDescription()()
{
  return CAFTypeTestIndexByUnitObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFSteeringWheelHeatingCooling.autoModeBridged.getter()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasAutoMode))
    return (uint64_t)objc_msgSend(v0, sel_autoMode);
  else
    return 2;
}

id CAFSteeringWheelHeatingCoolingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel : CAFSteeringWheelHeatingCoolingObservable@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel : CAFSteeringWheelHeatingCoolingObservable(unsigned int *a1)
{
  return CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter(*a1);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _DWORD *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LODWORD(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_DWORD *)v3 + 22) = (_DWORD)v4;
  return CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify;
}

void CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned int *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.autoMode.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSteeringWheelHeatingCoolingObservable.$autoMode.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFSteeringWheelHeatingCoolingObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = (void *)0xEE003E6465726574;
  v2 = 0x73696765726E753CLL;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForHeatingCoolingLevel))
  {
    CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter();
    v4 = dispatch thunk of CustomStringConvertible.description.getter();
    v5 = v6;
  }
  if (objc_msgSend(v3, sel_registeredForAutoMode))
  {
    CAFSteeringWheelHeatingCoolingObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v2 = String.init<A>(describing:)();
    v1 = v7;
  }
  _StringGuts.grow(_:)(88);
  v8._countAndFlagsBits = 0xD00000000000002BLL;
  v8._object = (void *)0x80000002374E0700;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._object = (void *)0x80000002374E0730;
  v9._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v11._object = (void *)0xEC000000203A6564;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFSteeringWheelHeatingCoolingObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFSteeringWheelHeatingCoolingObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

void CAFSteeringWheelHeatingCoolingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFSteeringWheelHeatingCoolingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFSteeringWheelHeatingCoolingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable__heatingCoolingLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSteeringWheelHeatingCoolingObservable, Int32>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable__autoMode;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSteeringWheelHeatingCoolingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFSteeringWheelHeatingCoolingObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSteeringWheelHeatingCoolingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSteeringWheelHeatingCoolingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSteeringWheelHeatingCoolingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSteeringWheelHeatingCoolingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFSteeringWheelHeatingCoolingObservable(id *a1@<X8>)
{
  *a1 = CAFSteeringWheelHeatingCoolingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237457DFC(_DWORD *a1@<X8>)
{
  *a1 = CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237457E20(unsigned int *a1)
{
  CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFSteeringWheelHeatingCoolingObservable(void **a1)
{
  CAFSteeringWheelHeatingCoolingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSteeringWheelHeatingCoolingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSteeringWheelHeatingCoolingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.steeringWheelHeatingCoolingService(_:didUpdateHeatingCoolingLevel:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.steeringWheelHeatingCoolingService(_:didUpdateAutoMode:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFSteeringWheelHeatingCoolingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237458100(id *a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_heatingCoolingLevel);
  OUTLINED_FUNCTION_11();
}

id sub_23745812C(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHeatingCoolingLevel_, *a1);
}

void sub_237458140(_BYTE *a1@<X8>)
{
  *a1 = CAFSteeringWheelHeatingCooling.autoModeBridged.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFSteeringWheelHeatingCoolingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSteeringWheelHeatingCooling(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSteeringWheelHeatingCoolingObservable, (uint64_t)&protocol conformance descriptor for CAFSteeringWheelHeatingCoolingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSteeringWheelHeatingCoolingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSteeringWheelHeatingCooling and conformance CAFSteeringWheelHeatingCooling, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSteeringWheelHeatingCooling, (uint64_t)&protocol conformance descriptor for CAFSteeringWheelHeatingCooling);
}

unint64_t type metadata accessor for CAFSteeringWheelHeatingCooling()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSteeringWheelHeatingCooling;
  if (!lazy cache variable for type metadata for CAFSteeringWheelHeatingCooling)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSteeringWheelHeatingCooling);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFSteeringWheelHeatingCoolingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSteeringWheelHeatingCoolingObservable, (uint64_t)&protocol conformance descriptor for CAFSteeringWheelHeatingCoolingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFSteeringWheelHeatingCoolingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.$autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t partial apply for closure #1 in CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription()()
{
  return CAFSteeringWheelHeatingCoolingObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFDeviceAction.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFDeviceAction.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFDeviceAction.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFDeviceAction.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFDeviceAction.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromDeviceAction();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFDeviceAction(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFDeviceAction and conformance CAFDeviceAction(&lazy protocol witness table cache variable for type CAFDeviceAction and conformance CAFDeviceAction, (uint64_t)&protocol conformance descriptor for CAFDeviceAction);
  a1[2] = lazy protocol witness table accessor for type CAFDeviceAction and conformance CAFDeviceAction(&lazy protocol witness table cache variable for type CAFDeviceAction and conformance CAFDeviceAction, (uint64_t)&protocol conformance descriptor for CAFDeviceAction);
  result = lazy protocol witness table accessor for type CAFDeviceAction and conformance CAFDeviceAction(&lazy protocol witness table cache variable for type CAFDeviceAction and conformance CAFDeviceAction, (uint64_t)&protocol conformance descriptor for CAFDeviceAction);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFDeviceAction and conformance CAFDeviceAction(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFDeviceAction(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFDeviceAction()
{
  return CAFDeviceAction.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFDeviceAction] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFDeviceAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFDeviceAction] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFDeviceAction]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFDeviceAction] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFDeviceAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFDeviceAction.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFDeviceAction(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFInteriorConditionsObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed);
}

uint64_t CAFInteriorConditionsObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFInteriorConditionsObservable.aqi.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFInteriorConditionsObservable.$aqi.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

void CAFInteriorConditionsObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  MEMORY[0x24BDAC7A8](v1);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed), sel_registeredForAQI))
  {
    CAFInteriorConditionsObservable.aqi.getter();
    v2 = String.init<A>(describing:)();
    v4 = v3;
  }
  else
  {
    v4 = (void *)0xEE003E6465726574;
    v2 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(49);
  v5._object = (void *)0x80000002374E07C0;
  v5._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x203A697161207B20;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 4095264;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  OUTLINED_FUNCTION_24_1();
}

void CAFInteriorConditionsObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFInteriorConditionsObservable._description.getter();
    v5 = v4;
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFInteriorConditionsObservable.cachedDescription.setter(v5, v7);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  OUTLINED_FUNCTION_24_1();
}

void CAFInteriorConditionsObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFInteriorConditionsObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFInteriorConditionsObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable__aqi;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFInteriorConditionsObservable, Measurement<CAFUnitAirQuality>?>);
  swift_allocObject();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFInteriorConditionsObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFInteriorConditionsObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFInteriorConditionsObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFInteriorConditionsObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFInteriorConditionsObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFInteriorConditionsObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFInteriorConditionsObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFInteriorConditionsObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFInteriorConditionsObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFInteriorConditionsObservable(void **a1)
{
  CAFInteriorConditionsObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFInteriorConditionsObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFInteriorConditionsObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFInteriorConditionsObservable.interiorConditionsService(_:didUpdateAqi:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFInteriorConditionsObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFInteriorConditionsObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFInteriorConditionsObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_aqi()
{
  return sel_aqi;
}

uint64_t key path getter for CAFInteriorConditions.aqi : CAFInteriorConditions@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_aqi);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFUnitAirQuality);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>);
  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

uint64_t type metadata accessor for CAFInteriorConditionsObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFInteriorConditions()
{
  lazy protocol witness table accessor for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable(lazy protocol witness table cache variable for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable, (uint64_t)&protocol conformance descriptor for CAFInteriorConditionsObservable);
}

unint64_t lazy protocol witness table accessor for type CAFInteriorConditions and conformance CAFInteriorConditions()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFInteriorConditions and conformance CAFInteriorConditions;
  if (!lazy protocol witness table cache variable for type CAFInteriorConditions and conformance CAFInteriorConditions)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFInteriorConditions);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFInteriorConditions, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFInteriorConditions and conformance CAFInteriorConditions);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFInteriorConditionsObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable(&lazy protocol witness table cache variable for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable, (uint64_t)&protocol conformance descriptor for CAFInteriorConditionsObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFInteriorConditionsObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFInteriorConditionsObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFInteriorConditionsObservable.aqi.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFInteriorConditionsObservable.$aqi.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFInteriorConditionsObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t outlined destroy of Measurement<CAFUnitAirQuality>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFInteriorConditionsObservable.resetCachedDescription()()
{
  return CAFInteriorConditionsObservable.cachedDescription.setter(0, 0);
}

id CAFEngineTemperatureObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
}

uint64_t CAFEngineTemperatureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEngineTemperatureObservable.temperature.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFEngineTemperatureObservable.$temperature.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureState.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFEngineTemperatureObservable.$temperatureState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMin.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

void CAFEngineTemperatureObservable.$temperatureMin.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMax.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

void CAFEngineTemperatureObservable.$temperatureMax.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMarkerCold.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

void CAFEngineTemperatureObservable.$temperatureMarkerCold.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerCold, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMarkerHot.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

void CAFEngineTemperatureObservable.$temperatureMarkerHot.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerHot, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFEngineTemperatureObservable.$temperature.getter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_15_1();
  a2(v3);
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFEngineTemperatureObservable._description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;

  v32 = 0x73696765726E753CLL;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_143();
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_152(v3, sel_registeredForTemperature);
  v4 = 0x73696765726E753CLL;
  OUTLINED_FUNCTION_18_4();
  if ((_DWORD)v5)
  {
    CAFEngineTemperatureObservable.temperature.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v4 = OUTLINED_FUNCTION_3_4();
    v0 = v6;
    v5 = OUTLINED_FUNCTION_2_6();
  }
  v31._object = v0;
  OUTLINED_FUNCTION_152(v5, sel_registeredForTemperatureState);
  OUTLINED_FUNCTION_7_4();
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFEngineTemperatureObservable.temperatureState.getter();
    v7 = (id)NSStringFromTemperatureState();
    if (v7)
    {
      v0 = v7;
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v9;

    }
    else
    {
      v8 = (void *)0xE900000000000029;
      v1 = 0x6E776F6E6B6E7528;
    }
  }
  v29 = v1;
  v31._countAndFlagsBits = v4;
  OUTLINED_FUNCTION_152((uint64_t)v7, sel_registeredForTemperatureMin);
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_18_4();
  if ((_DWORD)v10)
  {
    CAFEngineTemperatureObservable.temperatureMin.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v1 = OUTLINED_FUNCTION_3_4();
    v0 = v11;
    v10 = OUTLINED_FUNCTION_2_6();
  }
  v28 = v1;
  OUTLINED_FUNCTION_152(v10, sel_registeredForTemperatureMax);
  OUTLINED_FUNCTION_7_4();
  v13 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    CAFEngineTemperatureObservable.temperatureMax.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v1 = OUTLINED_FUNCTION_3_4();
    v13 = v14;
    v12 = OUTLINED_FUNCTION_2_6();
  }
  v15 = (uint64_t)OUTLINED_FUNCTION_152(v12, sel_registeredForTemperatureMarkerCold);
  v16 = 0x73696765726E753CLL;
  v17 = (void *)0xEE003E6465726574;
  if ((_DWORD)v15)
  {
    CAFEngineTemperatureObservable.temperatureMarkerCold.getter();
    v15 = OUTLINED_FUNCTION_17_2();
    v16 = v15;
    v17 = v18;
  }
  v19 = (void *)0xEE003E6465726574;
  if (OUTLINED_FUNCTION_152(v15, sel_registeredForTemperatureMarkerHot))
  {
    CAFEngineTemperatureObservable.temperatureMarkerHot.getter();
    v32 = OUTLINED_FUNCTION_17_2();
    v19 = v20;
  }
  _StringGuts.grow(_:)(171);
  OUTLINED_FUNCTION_128(0xD000000000000021, (uint64_t)"<CAFEngineTemperatureObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000010, (uint64_t)" { temperature: ");
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000014, (uint64_t)", temperatureState: ");
  v21._countAndFlagsBits = v29;
  v21._object = v8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_4((uint64_t)", temperatureMin: ");
  v22._countAndFlagsBits = v28;
  v22._object = v0;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_4((uint64_t)", temperatureMax: ");
  v23._countAndFlagsBits = v1;
  v23._object = v13;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000019, (uint64_t)", temperatureMarkerCold: ");
  v24._countAndFlagsBits = v16;
  v24._object = v17;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", temperatureMarkerHot: ");
  v25._countAndFlagsBits = v32;
  v25._object = v19;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 4095264;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  return 0;
}

uint64_t CAFEngineTemperatureObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFEngineTemperatureObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFEngineTemperatureObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFEngineTemperatureObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFEngineTemperatureObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFEngineTemperatureObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  objc_super v23;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineTemperatureObservable, Measurement<NSUnitTemperature>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineTemperatureObservable, CAFTemperatureState>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMin;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_12_2();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMax;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_12_2();
  *(_QWORD *)&v8[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerCold;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineTemperatureObservable, Measurement<NSUnitTemperature>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_11_3();
  *(_QWORD *)&v8[v16] = v17;
  v18 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerHot;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_11_3();
  *(_QWORD *)&v8[v18] = v19;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed] = a1;
  v20 = a1;

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for CAFEngineTemperatureObservable();
  v21 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v20, sel_registerObserver_, v21);

  return v21;
}

uint64_t CAFEngineTemperatureObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFEngineTemperatureObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFEngineTemperatureObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEngineTemperatureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEngineTemperatureObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFEngineTemperatureObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEngineTemperatureObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFEngineTemperatureObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFEngineTemperatureObservable(void **a1)
{
  CAFEngineTemperatureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEngineTemperatureObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFEngineTemperatureObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperature, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureState:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMin, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_143();
  v12 = v11 - v10;
  OUTLINED_FUNCTION_98(v13, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = a3;
  v15 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMax, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMarkerCold:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerCold, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMarkerHot:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerHot, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_15_1();
  a4(a2);
  return swift_release();
}

uint64_t @objc CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMarkerCold:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_143();
  v13 = v12 - v11;
  if (a4)
  {
    OUTLINED_FUNCTION_98(v10, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    v15 = v13;
    v16 = 0;
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    v15 = v13;
    v16 = 1;
  }
  __swift_storeEnumTagSinglePayload(v15, v16, 1, v14);
  v17 = a3;
  v18 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitTemperature>?(v13);
}

uint64_t CAFEngineTemperatureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFEngineTemperatureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFEngineTemperatureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_temperature()
{
  return sel_temperature;
}

void sub_23745A14C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperature);
}

char *keypath_get_selector_temperatureState()
{
  return sel_temperatureState;
}

id sub_23745A174@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_temperatureState);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_temperatureMin()
{
  return sel_temperatureMin;
}

void key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  OUTLINED_FUNCTION_98((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_23745A208(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMin);
}

char *keypath_get_selector_temperatureMax()
{
  return sel_temperatureMax;
}

void sub_23745A230(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMax);
}

char *keypath_get_selector_temperatureMarkerCold()
{
  return sel_temperatureMarkerCold;
}

uint64_t sub_23745A258(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMarkerCold);
}

char *keypath_get_selector_temperatureMarkerHot()
{
  return sel_temperatureMarkerHot;
}

uint64_t key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    OUTLINED_FUNCTION_98((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  return __swift_storeEnumTagSinglePayload(v4, v7, 1, v8);
}

uint64_t sub_23745A2FC(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMarkerHot);
}

uint64_t type metadata accessor for CAFEngineTemperatureObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEngineTemperature()
{
  lazy protocol witness table accessor for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, (uint64_t)&protocol conformance descriptor for CAFEngineTemperatureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFEngineTemperature and conformance CAFEngineTemperature()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFEngineTemperature and conformance CAFEngineTemperature;
  if (!lazy protocol witness table cache variable for type CAFEngineTemperature and conformance CAFEngineTemperature)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFEngineTemperature);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFEngineTemperature, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEngineTemperature and conformance CAFEngineTemperature);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFEngineTemperatureObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, (uint64_t)&protocol conformance descriptor for CAFEngineTemperatureObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFEngineTemperatureObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFEngineTemperatureObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMarkerCold.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMarkerCold.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMarkerHot.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMarkerHot.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t outlined destroy of Measurement<NSUnitTemperature>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFEngineTemperatureObservable.resetCachedDescription()()
{
  return CAFEngineTemperatureObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_10_4(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_11_3()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

void OUTLINED_FUNCTION_12_2()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  return String.init<A>(describing:)();
}

id CAFLocalNotificationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed);
}

uint64_t CAFLocalNotificationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFLocalNotificationObservable.identifier.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFLocalNotificationObservable.$identifier.getter()
{
  CAFLocalNotificationObservable.$identifier.getter();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafePublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFLocalNotificationObservable.displayPanelIdentifier.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

void CAFLocalNotificationObservable.$displayPanelIdentifier.getter()
{
  CAFLocalNotificationObservable.$identifier.getter();
}

uint64_t CAFLocalNotificationObservable.displayZoneIdentifier.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

void CAFLocalNotificationObservable.$displayZoneIdentifier.getter()
{
  CAFLocalNotificationObservable.$identifier.getter();
}

uint64_t CAFLocalNotificationObservable.name.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

void CAFLocalNotificationObservable.$name.getter()
{
  CAFLocalNotificationObservable.$identifier.getter();
}

uint64_t CAFLocalNotificationObservable._description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v1 = (uint64_t)OUTLINED_FUNCTION_67(a1, sel_registeredForIdentifier);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    v1 = CAFLocalNotificationObservable.identifier.getter();
    v2 = v1;
    v3 = v4;
  }
  v5 = (uint64_t)OUTLINED_FUNCTION_67(v1, sel_registeredForDisplayPanelIdentifier);
  v6 = 0x73696765726E753CLL;
  v7 = (void *)0xEE003E6465726574;
  if ((_DWORD)v5)
  {
    v5 = CAFLocalNotificationObservable.displayPanelIdentifier.getter();
    v6 = v5;
    v7 = v8;
  }
  if (OUTLINED_FUNCTION_67(v5, sel_registeredForDisplayZoneIdentifier))
    CAFLocalNotificationObservable.displayZoneIdentifier.getter();
  _StringGuts.grow(_:)(110);
  OUTLINED_FUNCTION_12_0(0xD000000000000021, (uint64_t)"<CAFLocalNotificationObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x746E656469207B20;
  v9._object = (void *)0xEF203A7265696669;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v2;
  v10._object = v3;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD00000000000001ALL, (uint64_t)", displayPanelIdentifier: ");
  v11._countAndFlagsBits = v6;
  v11._object = v7;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x80000002374E0AE0;
  v12._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v12);
  v13._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 4095264;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  return 0;
}

uint64_t CAFLocalNotificationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFLocalNotificationObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFLocalNotificationObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFLocalNotificationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFLocalNotificationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFLocalNotificationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  objc_super v16;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__identifier;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFLocalNotificationObservable, String>);
  swift_allocObject();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_19_1();
  v11 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v11] = OUTLINED_FUNCTION_19_1();
  v12 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v12] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed] = a1;
  v13 = a1;

  v16.receiver = v9;
  v16.super_class = (Class)type metadata accessor for CAFLocalNotificationObservable();
  v14 = objc_msgSendSuper2(&v16, sel_init);
  objc_msgSend(v13, sel_registerObserver_, v14);

  return v14;
}

uint64_t CAFLocalNotificationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFLocalNotificationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFLocalNotificationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFLocalNotificationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFLocalNotificationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFLocalNotificationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFLocalNotificationObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFLocalNotificationObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFLocalNotificationObservable(void **a1)
{
  CAFLocalNotificationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFLocalNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFLocalNotificationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateName:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

uint64_t CAFLocalNotificationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFLocalNotificationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFLocalNotificationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23745B0BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_identifier, a2);
}

char *keypath_get_selector_displayPanelIdentifier()
{
  return sel_displayPanelIdentifier;
}

void sub_23745B0E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayPanelIdentifier, a2);
}

char *keypath_get_selector_displayZoneIdentifier()
{
  return sel_displayZoneIdentifier;
}

void sub_23745B10C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayZoneIdentifier, a2);
}

void sub_23745B128(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFLocalNotificationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFLocalNotification(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFLocalNotificationObservable, (uint64_t)&protocol conformance descriptor for CAFLocalNotificationObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFLocalNotificationObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFLocalNotification and conformance CAFLocalNotification, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFLocalNotification, (uint64_t)&protocol conformance descriptor for CAFLocalNotification);
}

unint64_t type metadata accessor for CAFLocalNotification()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFLocalNotification;
  if (!lazy cache variable for type metadata for CAFLocalNotification)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFLocalNotification);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFLocalNotificationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFLocalNotificationObservable, (uint64_t)&protocol conformance descriptor for CAFLocalNotificationObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFLocalNotificationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t partial apply for closure #1 in CAFLocalNotificationObservable.resetCachedDescription()()
{
  return CAFLocalNotificationObservable.cachedDescription.setter(0, 0);
}

id CAFUIInputDeviceButtonObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed);
}

uint64_t CAFUIInputDeviceButtonObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter()
{
  return CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDevicePurpose, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDeviceButtonEvent.getter()
{
  return CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter();
}

void CAFUIInputDeviceButtonObservable.$uiInputDeviceButtonEvent.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDeviceButtonEvent, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFUIInputDeviceButtonObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v2;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  OUTLINED_FUNCTION_33_0();
}

void CAFUIInputDeviceButtonObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFUIInputDeviceButtonObservable._description.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed), sel_registeredForUIInputDeviceButtonEvent))
  {
    CAFUIInputDeviceButtonObservable.uiInputDeviceButtonEvent.getter();
    v1 = (id)NSStringFromUIInputDeviceButtonEvent();
    if (v1)
    {
      v2 = v1;
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v5 = v4;

    }
    else
    {
      v5 = (void *)0xE900000000000029;
      v3 = 0x6E776F6E6B6E7528;
    }
  }
  else
  {
    v5 = (void *)0xEE003E6465726574;
    v3 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(71);
  v6._countAndFlagsBits = 0xD000000000000023;
  v6._object = (void *)0x80000002374E0BC0;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x80000002374E0BF0;
  v7._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v3;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFUIInputDeviceButtonObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFUIInputDeviceButtonObservable._description.getter();
    v3 = v5;
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFUIInputDeviceButtonObservable.cachedDescription.setter(v3, v7);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFUIInputDeviceButtonObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFUIInputDeviceButtonObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFUIInputDeviceButtonObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDevicePurpose;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFUIInputDeviceButtonObservable, CAFUIInputDevicePurpose>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDeviceButtonEvent;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFUIInputDeviceButtonObservable, CAFUIInputDeviceButtonEvent>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__name;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFUIInputDeviceButtonObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFUIInputDeviceButtonObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFUIInputDeviceButtonObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFUIInputDeviceButtonObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFUIInputDeviceButtonObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIInputDeviceButtonObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFUIInputDeviceButtonObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFUIInputDeviceButtonObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFUIInputDeviceButtonObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFUIInputDeviceButtonObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFUIInputDeviceButtonObservable(void **a1)
{
  CAFUIInputDeviceButtonObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFUIInputDeviceButtonObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFUIInputDeviceButtonObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDevicePurpose, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDeviceButtonService(_:didUpdateUiInputDeviceButtonEvent:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDeviceButtonEvent, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(_QWORD))
{
  OUTLINED_FUNCTION_15_1();
  a4(a2);
  return swift_release();
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDeviceButtonService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

void CAFUIInputDeviceButtonObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFUIInputDeviceButtonObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFUIInputDeviceButtonObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_uiInputDevicePurpose()
{
  return sel_uiInputDevicePurpose;
}

void sub_23745BDFC(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_uiInputDevicePurpose);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_uiInputDeviceButtonEvent()
{
  return sel_uiInputDeviceButtonEvent;
}

void sub_23745BE34(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_uiInputDeviceButtonEvent);
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFUIInputDeviceButtonObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFUIInputDeviceButton(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable, (uint64_t)&protocol conformance descriptor for CAFUIInputDeviceButtonObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFUIInputDeviceButtonObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButton and conformance CAFUIInputDeviceButton, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButton, (uint64_t)&protocol conformance descriptor for CAFUIInputDeviceButton);
}

unint64_t type metadata accessor for CAFUIInputDeviceButton()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFUIInputDeviceButton;
  if (!lazy cache variable for type metadata for CAFUIInputDeviceButton)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFUIInputDeviceButton);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFUIInputDeviceButtonObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable, (uint64_t)&protocol conformance descriptor for CAFUIInputDeviceButtonObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFUIInputDeviceButtonObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.uiInputDeviceButtonEvent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.$uiInputDeviceButtonEvent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFUIInputDeviceButtonObservable.resetCachedDescription()()
{
  return CAFUIInputDeviceButtonObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFAutoClimateControl.levelBridged.getter()
{
  return CAFAutoClimateControl.levelBridged.getter((SEL *)&selRef_hasLevel, (SEL *)&selRef_level);
}

id CAFAutoClimateControl.levelBridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setLevel_, v2);
}

uint64_t CAFAutoClimateControl.intensityBridged.getter()
{
  return CAFAutoClimateControl.levelBridged.getter((SEL *)&selRef_hasIntensity, (SEL *)&selRef_intensity);
}

uint64_t CAFAutoClimateControl.levelBridged.getter(SEL *a1, SEL *a2)
{
  void *v2;
  unsigned int v4;
  unsigned int v5;

  v4 = objc_msgSend(v2, *a1);
  v5 = v4;
  if (v4)
    v4 = objc_msgSend(v2, *a2);
  return v4 | ((v5 ^ 1) << 8);
}

id CAFAutoClimateControl.intensityBridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setIntensity_, v2);
}

id CAFAutoClimateControlObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
}

uint64_t CAFAutoClimateControlObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFAutoClimateControlObservable.level.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFAutoClimateControlObservable.level.setter);
}

uint64_t CAFAutoClimateControlObservable.level.getter()
{
  return CAFAutoClimateControlObservable.level.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(_BYTE *, _QWORD);
  unsigned __int8 *v3;
  int v4;
  int v5;
  _BYTE v7[32];
  id v8;

  OUTLINED_FUNCTION_15_0();
  v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v8;
  v2 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v5 = v3[1];
  v2(v7, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4 | (v5 << 8);
}

uint64_t CAFAutoClimateControlObservable.level.setter(__int16 a1)
{
  return CAFAutoClimateControlObservable.level.setter(a1, (uint64_t)&unk_2374CAEA0, (uint64_t)&unk_2374CAEC8, (uint64_t (*)(_QWORD, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFAutoClimateControlObservable.level.modify()
{
  uint64_t v0;
  id *v1;
  void *v2;
  char v3;
  void *v4;
  id v5;
  uint64_t (*v6)(uint64_t, _QWORD);

  v4 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v4);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  v5 = v2;
  v6 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_4_4(v6);
  swift_release();
  OUTLINED_FUNCTION_37();

  *(_BYTE *)(v0 + 88) = (_BYTE)v2;
  *(_BYTE *)(v0 + 89) = v3;
  OUTLINED_FUNCTION_81();
}

void CAFAutoClimateControlObservable.level.modify(uint64_t a1, uint64_t a2)
{
  CAFAutoClimateControlObservable.level.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFAutoClimateControlObservable.$level.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__level, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFAutoClimateControlObservable.intensity : CAFAutoClimateControlObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFAutoClimateControlObservable.intensity.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFAutoClimateControlObservable.intensity : CAFAutoClimateControlObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFAutoClimateControlObservable.intensity.setter);
}

uint64_t key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t CAFAutoClimateControlObservable.intensity.getter()
{
  return CAFAutoClimateControlObservable.level.getter();
}

uint64_t CAFAutoClimateControlObservable.intensity.setter(__int16 a1)
{
  return CAFAutoClimateControlObservable.level.setter(a1, (uint64_t)&unk_2374CAEE8, (uint64_t)&unk_2374CAF10, (uint64_t (*)(_QWORD, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFAutoClimateControlObservable.level.setter(__int16 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, uint64_t, uint64_t))
{
  void *v4;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  return a4(a1 & 0x1FF, v4, KeyPath, v7);
}

void CAFAutoClimateControlObservable.intensity.modify()
{
  uint64_t v0;
  id *v1;
  void *v2;
  char v3;
  void *v4;
  id v5;
  uint64_t (*v6)(uint64_t, _QWORD);

  v4 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v4);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  v5 = v2;
  v6 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_4_4(v6);
  swift_release();
  OUTLINED_FUNCTION_37();

  *(_BYTE *)(v0 + 88) = (_BYTE)v2;
  *(_BYTE *)(v0 + 89) = v3;
  OUTLINED_FUNCTION_81();
}

void CAFAutoClimateControlObservable.intensity.modify(uint64_t a1, uint64_t a2)
{
  CAFAutoClimateControlObservable.level.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

void CAFAutoClimateControlObservable.level.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, id, _QWORD, _QWORD))
{
  _QWORD *v3;

  v3 = *(_QWORD **)a1;
  a3(*(unsigned __int8 *)(*(_QWORD *)a1 + 88) | (*(unsigned __int8 *)(*(_QWORD *)a1 + 89) << 8), *(id *)(*(_QWORD *)a1 + 64), v3[9], v3[10]);
  free(v3);
}

uint64_t CAFAutoClimateControlObservable.$intensity.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__intensity, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFAutoClimateControlObservable.vehicleLayoutKey.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFAutoClimateControlObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFAutoClimateControlObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFAutoClimateControlObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFAutoClimateControlObservable._description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  v1 = (uint64_t)OUTLINED_FUNCTION_67(a1, sel_registeredForAutoModeLevel);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    CAFAutoClimateControlObservable.level.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v1 = OUTLINED_FUNCTION_24_0();
    v2 = v1;
    v3 = v4;
  }
  v5 = (uint64_t)OUTLINED_FUNCTION_67(v1, sel_registeredForAutoModeIntensity);
  v6 = 0x73696765726E753CLL;
  v7 = (void *)0xEE003E6465726574;
  if ((_DWORD)v5)
  {
    CAFAutoClimateControlObservable.intensity.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFAutoModeIntensity?);
    v5 = OUTLINED_FUNCTION_24_0();
    v6 = v5;
    v7 = v8;
  }
  if (OUTLINED_FUNCTION_67(v5, sel_registeredForVehicleLayoutKey))
  {
    CAFAutoClimateControlObservable.vehicleLayoutKey.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    OUTLINED_FUNCTION_24_0();
  }
  _StringGuts.grow(_:)(88);
  v9._countAndFlagsBits = 0xD000000000000022;
  v9._object = (void *)0x80000002374E0C90;
  String.append(_:)(v9);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0x6C6576656C207B20;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v2;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x736E65746E69202CLL;
  v12._object = (void *)0xED0000203A797469;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v6;
  v13._object = v7;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x80000002374DF1B0;
  v14._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v14);
  v15._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4095264;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t CAFAutoClimateControlObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFAutoClimateControlObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFAutoClimateControlObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFAutoClimateControlObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFAutoClimateControlObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFAutoClimateControlObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__level;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFAutoClimateControlObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__intensity;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFAutoClimateControlObservable, CAFAutoModeIntensity?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFAutoClimateControlObservable, String?>);
  OUTLINED_FUNCTION_127();
  v13 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  v14 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFAutoClimateControlObservable, String>);
  OUTLINED_FUNCTION_127();
  v15 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFAutoClimateControlObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

void CAFAutoClimateControlObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFAutoClimateControlObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFAutoClimateControlObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFAutoClimateControlObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFAutoClimateControlObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFAutoClimateControlObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFAutoClimateControlObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFAutoClimateControlObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFAutoClimateControlObservable(void **a1)
{
  CAFAutoClimateControlObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFAutoClimateControlObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFAutoClimateControlObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__level, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateIntensity:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__intensity, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(_QWORD))
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  a4(a2);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateVehicleLayoutKey:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void CAFAutoClimateControlObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFAutoClimateControlObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFAutoClimateControlObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t key path getter for CAFAutoClimateControl.levelBridged : CAFAutoClimateControl@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFAutoClimateControl.levelBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_23745D150(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFAutoClimateControl.levelBridged.setter);
}

uint64_t key path getter for CAFAutoClimateControl.intensityBridged : CAFAutoClimateControl@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFAutoClimateControl.intensityBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_23745D1A0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFAutoClimateControl.intensityBridged.setter);
}

uint64_t type metadata accessor for CAFAutoClimateControlObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFAutoClimateControl(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable, (uint64_t)&protocol conformance descriptor for CAFAutoClimateControlObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFAutoClimateControlObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControl and conformance CAFAutoClimateControl, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFAutoClimateControl, (uint64_t)&protocol conformance descriptor for CAFAutoClimateControl);
}

unint64_t type metadata accessor for CAFAutoClimateControl()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFAutoClimateControl;
  if (!lazy cache variable for type metadata for CAFAutoClimateControl)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFAutoClimateControl);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFAutoClimateControlObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable, (uint64_t)&protocol conformance descriptor for CAFAutoClimateControlObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFAutoClimateControlObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.level.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.level.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_3_5(a1, *(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0xC0));
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.level.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$level.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.intensity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.intensity.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_3_5(a1, *(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE0));
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.intensity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$intensity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t partial apply for closure #1 in CAFAutoClimateControlObservable.resetCachedDescription()()
{
  return CAFAutoClimateControlObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_3_5(__int16 a1, uint64_t (*a2)(_QWORD))
{
  return a2(a1 & 0x1FF);
}

uint64_t OUTLINED_FUNCTION_4_4(uint64_t (*a1)(uint64_t, _QWORD))
{
  uint64_t v1;

  return a1(v1, 0);
}

uint64_t OUTLINED_FUNCTION_6_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = *(_QWORD *)(v2 + a1);
  return swift_retain();
}

uint64_t static CAFPlaybackState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFPlaybackState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFPlaybackState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFPlaybackState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFPlaybackState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromPlaybackState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFPlaybackState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(&lazy protocol witness table cache variable for type CAFPlaybackState and conformance CAFPlaybackState, (uint64_t)&protocol conformance descriptor for CAFPlaybackState);
  a1[2] = lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(&lazy protocol witness table cache variable for type CAFPlaybackState and conformance CAFPlaybackState, (uint64_t)&protocol conformance descriptor for CAFPlaybackState);
  result = lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(&lazy protocol witness table cache variable for type CAFPlaybackState and conformance CAFPlaybackState, (uint64_t)&protocol conformance descriptor for CAFPlaybackState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFPlaybackState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFPlaybackState()
{
  return CAFPlaybackState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFPlaybackState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFPlaybackState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFPlaybackState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFPlaybackState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFPlaybackState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFPlaybackState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFPlaybackState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFPlaybackState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTestControlAsync()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTestControlAsyncObservable, (uint64_t (*)(void))CAFTestControlAsyncObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

uint64_t specialized CAFObserved<>.observable.getter(void (*a1)(_QWORD), uint64_t (*a2)(void))
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  v5 = objc_msgSend(v2, sel_observableCache);
  if (v5)
  {
    OUTLINED_FUNCTION_3_6();
    v5 = (id)swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_5_4((uint64_t)v5, v6);
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)v11);
    goto LABEL_7;
  }
  a1(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    objc_allocWithZone((Class)((uint64_t (*)(_QWORD))a1)(0));
    v8 = v2;
    v7 = a2();
    objc_msgSend(v8, sel_setObservableCache_, v7);
    return v7;
  }
  return v10;
}

uint64_t CAFObserved<>.observable.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD v10[4];

  v1 = v0;
  v2 = objc_msgSend(v0, sel_observableCache);
  if (v2)
  {
    OUTLINED_FUNCTION_3_6();
    v2 = (id)swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_5_4((uint64_t)v2, v3);
  if (!v10[3])
  {
    outlined destroy of Any?((uint64_t)v10);
    v4 = OUTLINED_FUNCTION_1_4();
    goto LABEL_7;
  }
  v4 = OUTLINED_FUNCTION_1_4();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v10[0] = v0;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
    swift_unknownObjectRetain();
    v5 = v7(v10, v4, AssociatedConformanceWitness);
    objc_msgSend(v1, sel_setObservableCache_, v5);
    return v5;
  }
  return v9;
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTemperature()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTemperatureObservable, (uint64_t (*)(void))CAFTemperatureObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFClimateControlsLocked()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFClimateControlsLockedObservable, (uint64_t (*)(void))CAFClimateControlsLockedObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFZonesSynced()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFZonesSyncedObservable, (uint64_t (*)(void))CAFZonesSyncedObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSeatHeatingCooling()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSeatHeatingCoolingObservable, (uint64_t (*)(void))CAFSeatHeatingCoolingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFMultipleSelectImageSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFMultipleSelectImageSettingObservable, (uint64_t (*)(void))CAFMultipleSelectImageSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFCar()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFCarObservable, (uint64_t (*)(void))CAFCarObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFVent()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFVentObservable, (uint64_t (*)(void))CAFVentObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFButtonSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFButtonSettingObservable, (uint64_t (*)(void))CAFButtonSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTrip()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTripObservable, (uint64_t (*)(void))CAFTripObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestIndexByUnit()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTypeTestIndexByUnitObservable, (uint64_t (*)(void))CAFTypeTestIndexByUnitObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSteeringWheelHeatingCooling()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSteeringWheelHeatingCoolingObservable, (uint64_t (*)(void))CAFSteeringWheelHeatingCoolingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFInteriorConditions()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFInteriorConditionsObservable, (uint64_t (*)(void))CAFInteriorConditionsObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFEngineTemperature()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFEngineTemperatureObservable, (uint64_t (*)(void))CAFEngineTemperatureObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFLocalNotification()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFLocalNotificationObservable, (uint64_t (*)(void))CAFLocalNotificationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFUIInputDeviceButton()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFUIInputDeviceButtonObservable, (uint64_t (*)(void))CAFUIInputDeviceButtonObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFAutoClimateControl()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFAutoClimateControlObservable, (uint64_t (*)(void))CAFAutoClimateControlObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void CAFObservable.objectDidChange.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[2];

  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<(), Never>);
  lazy protocol witness table accessor for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(), Never>, MEMORY[0x24BDB9AF8]);
  v6 = type metadata accessor for Publishers.CompactMap();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - v8;
  v12[1] = closure #1 in CAFObservable.objectDidChange.getter(v3);
  v10 = OUTLINED_FUNCTION_4_5();
  swift_unknownObjectWeakInit();
  v11 = (_QWORD *)OUTLINED_FUNCTION_4_5();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v10;
  Publisher.compactMap<A>(_:)();
  swift_release();
  MEMORY[0x23B812308](MEMORY[0x24BDB94C8], v6);
  Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  OUTLINED_FUNCTION_5();
}

uint64_t closure #1 in CAFObservable.objectDidChange.getter(void *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  _OWORD v7[2];
  _QWORD v8[4];

  swift_beginAccess();
  v2 = objc_getAssociatedObject(a1, &static AssociatedKeys.objectDidChange);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (!v8[3])
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    swift_allocObject();
    v4 = (void *)PassthroughSubject.init()();
    swift_beginAccess();
    objc_setAssociatedObject(a1, &static AssociatedKeys.objectDidChange, v4, (void *)0x301);
    swift_endAccess();
    v8[0] = v4;
    lazy protocol witness table accessor for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>, MEMORY[0x24BDB9CB0]);
    v3 = Publisher.eraseToAnyPublisher()();
    goto LABEL_9;
  }
  v8[0] = v6;
  lazy protocol witness table accessor for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>, MEMORY[0x24BDB9CB0]);
  v3 = Publisher.eraseToAnyPublisher()();
LABEL_9:
  swift_release();
  return v3;
}

uint64_t closure #2 in CAFObservable.objectDidChange.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B8123EC](v3);
  *a2 = result;
  return result;
}

void CAFObservable.publisher.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v19 = a2;
  v5 = type metadata accessor for Array();
  MEMORY[0x23B812308](MEMORY[0x24BEE12C8], v5);
  v6 = type metadata accessor for Publishers.Sequence();
  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x23B812308](MEMORY[0x24BDB9970], v6);
  v20 = MEMORY[0x23B812308](MEMORY[0x24BDB9AF8], v7);
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v26 = v20;
  v9 = type metadata accessor for Publishers.Concatenate();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - v10;
  MEMORY[0x23B812308](MEMORY[0x24BDB9530], v9);
  v12 = type metadata accessor for Publishers.Filter();
  v21 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - v13;
  CAFObservable.objectDidChange.getter(a1, a2);
  v23 = v15;
  getContiguousArrayStorageType<A>(for:)(a1, a1);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  *v16 = v2;
  type metadata accessor for Array();
  swift_unknownObjectRetain();
  Publisher.prepend(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v17 = OUTLINED_FUNCTION_4_5();
  v18 = v19;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = v18;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  MEMORY[0x23B812308](MEMORY[0x24BDB97F8], v12);
  Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v12);
  OUTLINED_FUNCTION_5();
}

uint64_t closure #1 in CAFObservable.publisher.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  id v6;
  void *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  type metadata accessor for CAFService();
  if ((swift_dynamicCast() & 1) == 0)
    return 1;
  v6 = objc_msgSend(v8, sel_receivedAllValues);

  return (uint64_t)v6;
}

id specialized CAFObserved<>.observable.getter()
{
  void *v0;
  id v1;

  v1 = objc_allocWithZone((Class)type metadata accessor for CAFPositionManagerObservable());
  return CAFPositionManagerObservable.init(_:)(v0);
}

uint64_t CAFObserved<>.observable.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v5, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void protocol witness for CAFObserved.observable.getter in conformance CAFChargingTime()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFChargingTimeObservable, (uint64_t (*)(void))CAFChargingTimeObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFStaticSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFStaticSettingObservable, (uint64_t (*)(void))CAFStaticSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFClosureState()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFClosureStateObservable, (uint64_t (*)(void))CAFClosureStateObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTestControlSync()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTestControlSyncObservable, (uint64_t (*)(void))CAFTestControlSyncObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFPairedDevicesInformation()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFPairedDevicesInformationObservable, (uint64_t (*)(void))CAFPairedDevicesInformationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFRecirculation()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFRecirculationObservable, (uint64_t (*)(void))CAFRecirculationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFPositionManager()
{
  specialized CAFObserved<>.observable.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSingleSelectImageSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSingleSelectImageSettingObservable, (uint64_t (*)(void))CAFSingleSelectImageSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFCriticalInputStream()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFCriticalInputStreamObservable, (uint64_t (*)(void))CAFCriticalInputStreamObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFExteriorConditions()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFExteriorConditionsObservable, (uint64_t (*)(void))CAFExteriorConditionsObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFProtocolPerfTest()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFProtocolPerfTestObservable, (uint64_t (*)(void))CAFProtocolPerfTestObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFCameraGeneral()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFCameraGeneralObservable, (uint64_t (*)(void))CAFCameraGeneralObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFGearRecommendation()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFGearRecommendationObservable, (uint64_t (*)(void))CAFGearRecommendationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFHistoricalNotification()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFHistoricalNotificationObservable, (uint64_t (*)(void))CAFHistoricalNotificationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFCameraButton()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFCameraButtonObservable, (uint64_t (*)(void))CAFCameraButtonObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestMulti()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTypeTestMultiObservable, (uint64_t (*)(void))CAFTypeTestMultiObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFRequestContent()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFRequestContentObservable, (uint64_t (*)(void))CAFRequestContentObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFMultipleSelectSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFMultipleSelectSettingObservable, (uint64_t (*)(void))CAFMultipleSelectSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFVehicleInformation()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFVehicleInformationObservable, (uint64_t (*)(void))CAFVehicleInformationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFEnginePower()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFEnginePowerObservable, (uint64_t (*)(void))CAFEnginePowerObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFVolume()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFVolumeObservable, (uint64_t (*)(void))CAFVolumeObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFFuelConsumption()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFFuelConsumptionObservable, (uint64_t (*)(void))CAFFuelConsumptionObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFDriveMode()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFDriveModeObservable, (uint64_t (*)(void))CAFDriveModeObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFPairedDevicesAction()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFPairedDevicesActionObservable, (uint64_t (*)(void))CAFPairedDevicesActionObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFEqualizer()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFEqualizerObservable, (uint64_t (*)(void))CAFEqualizerObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFBooleanSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFBooleanSettingObservable, (uint64_t (*)(void))CAFBooleanSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFMediaSource()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFMediaSourceObservable, (uint64_t (*)(void))CAFMediaSourceObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFFan()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFFanObservable, (uint64_t (*)(void))CAFFanObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFRemainingRange()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFRemainingRangeObservable, (uint64_t (*)(void))CAFRemainingRangeObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFOdometer()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFOdometerObservable, (uint64_t (*)(void))CAFOdometerObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFDefrost()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFDefrostObservable, (uint64_t (*)(void))CAFDefrostObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFPicker()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFPickerObservable, (uint64_t (*)(void))CAFPickerObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTestControlEvent()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTestControlEventObservable, (uint64_t (*)(void))CAFTestControlEventObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTargetSpeed()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTargetSpeedObservable, (uint64_t (*)(void))CAFTargetSpeedObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFCabin()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFCabinObservable, (uint64_t (*)(void))CAFCabinObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFBatteryTemperature()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFBatteryTemperatureObservable, (uint64_t (*)(void))CAFBatteryTemperatureObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFCarManager()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFCarManagerObservable, (uint64_t (*)(void))CAFCarManagerObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTirePressure()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTirePressureObservable, (uint64_t (*)(void))CAFTirePressureObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFEngineRPM()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFEngineRPMObservable, (uint64_t (*)(void))CAFEngineRPMObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSeatFan()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSeatFanObservable, (uint64_t (*)(void))CAFSeatFanObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSoundDistribution()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSoundDistributionObservable, (uint64_t (*)(void))CAFSoundDistributionObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSingleSelectSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSingleSelectSettingObservable, (uint64_t (*)(void))CAFSingleSelectSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTirePressureMonitoringSystem()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTirePressureMonitoringSystemObservable, (uint64_t (*)(void))CAFTirePressureMonitoringSystemObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFDisplayUnits()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFDisplayUnitsObservable, (uint64_t (*)(void))CAFDisplayUnitsObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFIntegerSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFIntegerSettingObservable, (uint64_t (*)(void))CAFIntegerSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFNowPlaying()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFNowPlayingObservable, (uint64_t (*)(void))CAFNowPlayingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFRemoteNotification()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFRemoteNotificationObservable, (uint64_t (*)(void))CAFRemoteNotificationObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSettingsSection()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSettingsSectionObservable, (uint64_t (*)(void))CAFSettingsSectionObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFChargingRate()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFChargingRateObservable, (uint64_t (*)(void))CAFChargingRateObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestWithStates()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTypeTestWithStatesObservable, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFDeepLinkSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFDeepLinkSettingObservable, (uint64_t (*)(void))CAFDeepLinkSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFDimensionManager()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFDimensionObservable, (uint64_t (*)(void))CAFDimensionObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFSeatBelt()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFSeatBeltObservable, (uint64_t (*)(void))CAFSeatBeltObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFBatteryLevel()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFBatteryLevelObservable, (uint64_t (*)(void))CAFBatteryLevelObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTypeTest()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTypeTestObservable, (uint64_t (*)(void))CAFTypeTestObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestIndexByPosition()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTypeTestIndexByPositionObservable, (uint64_t (*)(void))CAFTypeTestIndexByPositionObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFTransmissionStatus()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFTransmissionStatusObservable, (uint64_t (*)(void))CAFTransmissionStatusObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFVehicleVariant()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFVehicleVariantObservable, (uint64_t (*)(void))CAFVehicleVariantObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFDisplayedSpeed()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFDisplayedSpeedObservable, (uint64_t (*)(void))CAFDisplayedSpeedObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFChargingStatus()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFChargingStatusObservable, (uint64_t (*)(void))CAFChargingStatusObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFUIState()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFUIStateObservable, (uint64_t (*)(void))CAFUIStateObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFFuelLevel()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFFuelLevelObservable, (uint64_t (*)(void))CAFFuelLevelObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObserved.observable.getter in conformance CAFFloatSetting()
{
  specialized CAFObserved<>.observable.getter((void (*)(_QWORD))type metadata accessor for CAFFloatSettingObservable, (uint64_t (*)(void))CAFFloatSettingObservable.init(_:));
  OUTLINED_FUNCTION_11();
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (dynamic_cast_existential_0_class_conditional(a2))
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  else
    return type metadata accessor for _ContiguousArrayStorage();
}

uint64_t sub_23745EF94()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFObservable.publisher.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CAFObservable.publisher.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t dispatch thunk of CAFObserved.observable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CAFObservable.observed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CAFObservable.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dynamic_cast_existential_0_class_conditional(uint64_t a1)
{
  if (swift_isClassType())
    return a1;
  else
    return 0;
}

uint64_t sub_23745EFF0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23745F014()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CAFObservable.objectDidChange.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in CAFObservable.objectDidChange.getter(*(_QWORD *)(v1 + 32), a1);
}

void lazy protocol witness table accessor for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x23B812308](a3, v5), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5_4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  return outlined init with take of Any?((uint64_t)va, (uint64_t)va1);
}

id CAFChargingTimeObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed);
}

uint64_t CAFChargingTimeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFChargingTimeObservable.remainingTime.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFChargingTimeObservable.$remainingTime.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFChargingTimeObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed), sel_registeredForRemainingTime))
  {
    CAFChargingTimeObservable.remainingTime.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitDuration> and conformance Measurement<A>();
    v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v7 = (void *)0xEE003E6465726574;
    v5 = 0x73696765726E753CLL;
  }
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v8._countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x80000002374E0D40;
  String.append(_:)(v8);
  v13[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v9._object = (void *)0x80000002374E0D60;
  v9._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v5;
  v10._object = v7;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 4095264;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  return v14;
}

uint64_t CAFChargingTimeObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFChargingTimeObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFChargingTimeObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFChargingTimeObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFChargingTimeObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFChargingTimeObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable__remainingTime;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFChargingTimeObservable, Measurement<NSUnitDuration>>);
  swift_allocObject();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFChargingTimeObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFChargingTimeObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFChargingTimeObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFChargingTimeObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFChargingTimeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFChargingTimeObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFChargingTimeObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFChargingTimeObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFChargingTimeObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFChargingTimeObservable(void **a1)
{
  CAFChargingTimeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFChargingTimeObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFChargingTimeObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFChargingTimeObservable.chargingTimeService(_:didUpdateRemainingTime:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFChargingTimeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFChargingTimeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFChargingTimeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_remainingTime()
{
  return sel_remainingTime;
}

void key path getter for CAFChargingTime.remainingTime : CAFChargingTime(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_remainingTime);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitDuration);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

uint64_t type metadata accessor for CAFChargingTimeObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFChargingTime()
{
  lazy protocol witness table accessor for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable(&lazy protocol witness table cache variable for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable, (uint64_t)&protocol conformance descriptor for CAFChargingTimeObservable);
}

unint64_t lazy protocol witness table accessor for type CAFChargingTime and conformance CAFChargingTime()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFChargingTime and conformance CAFChargingTime;
  if (!lazy protocol witness table cache variable for type CAFChargingTime and conformance CAFChargingTime)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFChargingTime);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFChargingTime, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFChargingTime and conformance CAFChargingTime);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFChargingTimeObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable(&lazy protocol witness table cache variable for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable, (uint64_t)&protocol conformance descriptor for CAFChargingTimeObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFChargingTimeObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFChargingTimeObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFChargingTimeObservable.remainingTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFChargingTimeObservable.$remainingTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFChargingTimeObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFChargingTimeObservable.resetCachedDescription()()
{
  return CAFChargingTimeObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitDuration> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<NSUnitDuration> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitDuration> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitDuration> and conformance Measurement<A>);
  }
  return result;
}

uint64_t static CAFUIInputDeviceButtonEvent.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFUIInputDeviceButtonEvent.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFUIInputDeviceButtonEvent.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFUIInputDeviceButtonEvent.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFUIInputDeviceButtonEvent.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromUIInputDeviceButtonEvent();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFUIInputDeviceButtonEvent(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent, (uint64_t)&protocol conformance descriptor for CAFUIInputDeviceButtonEvent);
  a1[2] = lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent, (uint64_t)&protocol conformance descriptor for CAFUIInputDeviceButtonEvent);
  result = lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent, (uint64_t)&protocol conformance descriptor for CAFUIInputDeviceButtonEvent);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFUIInputDeviceButtonEvent(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFUIInputDeviceButtonEvent()
{
  return CAFUIInputDeviceButtonEvent.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFUIInputDeviceButtonEvent] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFUIInputDeviceButtonEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFUIInputDeviceButtonEvent] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFUIInputDeviceButtonEvent]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFUIInputDeviceButtonEvent] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFUIInputDeviceButtonEvent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFUIInputDeviceButtonEvent.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFUIInputDeviceButtonEvent(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFStaticSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
}

uint64_t CAFStaticSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFStaticSettingObservable.userVisibleLabel.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

void CAFStaticSettingObservable.$userVisibleLabel.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.sectionIdentifier.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_40_0();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFStaticSettingObservable.$sectionIdentifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFStaticSettingObservable.$sortOrder.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFStaticSettingObservable.$category.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFStaticSettingObservable.identifier.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

void CAFStaticSettingObservable.$identifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.disabled.getter()
{
  CAFStaticSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_40_0();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFStaticSettingObservable.$disabled.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.limitableUIElement.getter()
{
  CAFStaticSettingObservable.disabled.getter();
}

void CAFStaticSettingObservable.$limitableUIElement.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.hidden.getter()
{
  CAFStaticSettingObservable.disabled.getter();
}

void CAFStaticSettingObservable.$hidden.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.showAudioBrandLogo.getter()
{
  CAFStaticSettingObservable.disabled.getter();
}

void CAFStaticSettingObservable.$showAudioBrandLogo.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.vehicleLayoutKey.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

void CAFStaticSettingObservable.$vehicleLayoutKey.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.symbolName.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

void CAFStaticSettingObservable.$symbolName.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.prominenceInfo.getter()
{
  return CAFStaticSettingObservable.prominenceInfo.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_40_0();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFStaticSettingObservable.$prominenceInfo.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFStaticSettingObservable.userVisibleValue.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

void CAFStaticSettingObservable.$userVisibleValue.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleValue, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.childrenSettingsIdentifiers.getter()
{
  return CAFStaticSettingObservable.prominenceInfo.getter();
}

void CAFStaticSettingObservable.$childrenSettingsIdentifiers.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__childrenSettingsIdentifiers, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFStaticSettingObservable.name.getter()
{
  CAFStaticSettingObservable.sectionIdentifier.getter();
}

void CAFStaticSettingObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForUserVisibleValue))
  {
    CAFStaticSettingObservable.userVisibleValue.getter();
    v2 = v4;
    v3 = v5;
  }
  if (objc_msgSend(v1, sel_registeredForChildrenSettingsIdentifiers))
  {
    CAFStaticSettingObservable.childrenSettingsIdentifiers.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(90);
  OUTLINED_FUNCTION_12_0(0xD00000000000001DLL, (uint64_t)"<CAFStaticSettingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x80000002374E0E40;
  v6._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD00000000000001FLL, (uint64_t)", childrenSettingsIdentifiers: ");
  v8._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t CAFStaticSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFStaticSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFStaticSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFStaticSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFStaticSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFStaticSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  objc_super v31;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v24] = OUTLINED_FUNCTION_19_1();
  v25 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__childrenSettingsIdentifiers;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, [String]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v25] = v26;
  v27 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v27] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed] = a1;
  v28 = a1;

  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for CAFStaticSettingObservable();
  v29 = objc_msgSendSuper2(&v31, sel_init);
  objc_msgSend(v28, sel_registerObserver_, v29);

  return v29;
}

uint64_t CAFStaticSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFStaticSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFStaticSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFStaticSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFStaticSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFStaticSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFStaticSettingObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFStaticSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFStaticSettingObservable(void **a1)
{
  CAFStaticSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFStaticSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFStaticSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFStaticSettingObservable.staticSettingService(_:didUpdateUserVisibleValue:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFStaticSettingObservable.staticSettingService(_:didUpdateChildrenSettingsIdentifiers:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFStaticSettingObservable.staticSettingService(_:didUpdateName:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFStaticSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFStaticSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFStaticSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237461228(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_237461244(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_237461264(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_237461290(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_2374612AC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374612CC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374612EC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23746130C()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23746132C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void sub_237461348(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

char *keypath_get_selector_userVisibleValue()
{
  return sel_userVisibleValue;
}

void sub_237461374(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleValue);
}

char *keypath_get_selector_childrenSettingsIdentifiers()
{
  return sel_childrenSettingsIdentifiers;
}

void key path getter for CAFStaticSetting.childrenSettingsIdentifiers : CAFStaticSetting(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, sel_childrenSettingsIdentifiers);
  if (v3)
  {
    v4 = v3;
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void sub_237461404(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFStaticSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFStaticSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable, (uint64_t)&protocol conformance descriptor for CAFStaticSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFStaticSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFStaticSetting and conformance CAFStaticSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFStaticSetting, (uint64_t)&protocol conformance descriptor for CAFStaticSetting);
}

unint64_t type metadata accessor for CAFStaticSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFStaticSetting;
  if (!lazy cache variable for type metadata for CAFStaticSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFStaticSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFStaticSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable, (uint64_t)&protocol conformance descriptor for CAFStaticSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFStaticSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.userVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$userVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.childrenSettingsIdentifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$childrenSettingsIdentifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t partial apply for closure #1 in CAFStaticSettingObservable.resetCachedDescription()()
{
  return CAFStaticSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFButtonAction.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFButtonAction.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFButtonAction.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFButtonAction.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFButtonAction.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromButtonAction();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFButtonAction(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(&lazy protocol witness table cache variable for type CAFButtonAction and conformance CAFButtonAction, (uint64_t)&protocol conformance descriptor for CAFButtonAction);
  a1[2] = lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(&lazy protocol witness table cache variable for type CAFButtonAction and conformance CAFButtonAction, (uint64_t)&protocol conformance descriptor for CAFButtonAction);
  result = lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(&lazy protocol witness table cache variable for type CAFButtonAction and conformance CAFButtonAction, (uint64_t)&protocol conformance descriptor for CAFButtonAction);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFButtonAction(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFButtonAction()
{
  return CAFButtonAction.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFButtonAction] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFButtonAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFButtonAction] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFButtonAction]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFButtonAction] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFButtonAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFButtonAction.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFButtonAction(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFClosureStateObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
}

uint64_t CAFClosureStateObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFClosureStateObservable.latchState.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFClosureStateObservable.$latchState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__latchState, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClosureStateObservable.vehicleLayoutKey.getter()
{
  return CAFClosureStateObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFClosureStateObservable.$vehicleLayoutKey.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClosureStateObservable.name.getter()
{
  return CAFClosureStateObservable.vehicleLayoutKey.getter();
}

void CAFClosureStateObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClosureStateObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  char v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForLatchState))
  {
    v4 = CAFClosureStateObservable.latchState.getter();
    if ((v4 & 1) != 0)
      v2 = 1702195828;
    else
      v2 = 0x65736C6166;
    if ((v4 & 1) != 0)
      v3 = (void *)0xE400000000000000;
    else
      v3 = (void *)0xE500000000000000;
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
    CAFClosureStateObservable.vehicleLayoutKey.getter();
  _StringGuts.grow(_:)(72);
  v5._countAndFlagsBits = 0xD00000000000001CLL;
  v5._object = (void *)0x80000002374E0F00;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x686374616C207B20;
  v6._object = (void *)0xEF203A6574617453;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000002374DF1B0;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFClosureStateObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFClosureStateObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFClosureStateObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFClosureStateObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFClosureStateObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFClosureStateObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__latchState;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClosureStateObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClosureStateObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_19_1();
  v11 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v11] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for CAFClosureStateObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFClosureStateObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFClosureStateObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFClosureStateObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFClosureStateObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFClosureStateObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFClosureStateObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFClosureStateObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFClosureStateObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFClosureStateObservable(void **a1)
{
  CAFClosureStateObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFClosureStateObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFClosureStateObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFClosureStateObservable.closureStateService(_:didUpdateLatchState:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFClosureStateObservable.closureStateService(_:didUpdateName:)()
{
  return CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t CAFClosureStateObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFClosureStateObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFClosureStateObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_latchState()
{
  return sel_latchState;
}

id sub_237462604@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_latchState);
  *a2 = (_BYTE)result;
  return result;
}

void sub_237462634(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void sub_237462650(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFClosureStateObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFClosureState(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClosureStateObservable and conformance CAFClosureStateObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFClosureStateObservable, (uint64_t)&protocol conformance descriptor for CAFClosureStateObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFClosureStateObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClosureState and conformance CAFClosureState, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFClosureState, (uint64_t)&protocol conformance descriptor for CAFClosureState);
}

unint64_t type metadata accessor for CAFClosureState()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFClosureState;
  if (!lazy cache variable for type metadata for CAFClosureState)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFClosureState);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFClosureStateObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClosureStateObservable and conformance CAFClosureStateObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFClosureStateObservable, (uint64_t)&protocol conformance descriptor for CAFClosureStateObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFClosureStateObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFClosureStateObservable.latchState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.$latchState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFClosureStateObservable.resetCachedDescription()()
{
  return CAFClosureStateObservable.cachedDescription.setter(0, 0);
}

id CAFTestControlSyncObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_observed);
}

uint64_t CAFTestControlSyncObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTestControlSyncObservable._description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(39);
  v0._object = (void *)0x80000002374E0F80;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTestControlSyncObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTestControlSyncObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTestControlSyncObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTestControlSyncObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFTestControlSyncObservable.init(_:)(a1);
}

id CAFTestControlSyncObservable.init(_:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)&v1[v4] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTestControlSyncObservable();
  v6 = a1;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFTestControlSyncObservable()
{
  return objc_opt_self();
}

uint64_t CAFTestControlSyncObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTestControlSyncObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTestControlSyncObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTestControlSyncObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTestControlSyncObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTestControlSyncObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTestControlSyncObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTestControlSyncObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTestControlSyncObservable(void **a1)
{
  return CAFTestControlSyncObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTestControlSyncObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTestControlSyncObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTestControlSyncObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFTestControlSyncObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFTestControlSyncObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTestControlSync(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlSyncObservable, (uint64_t)&protocol conformance descriptor for CAFTestControlSyncObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTestControlSyncObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlSync and conformance CAFTestControlSync, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlSync, (uint64_t)&protocol conformance descriptor for CAFTestControlSync);
}

unint64_t type metadata accessor for CAFTestControlSync()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFTestControlSync;
  if (!lazy cache variable for type metadata for CAFTestControlSync)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTestControlSync);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTestControlSyncObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlSyncObservable, (uint64_t)&protocol conformance descriptor for CAFTestControlSyncObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFTestControlSyncObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTestControlSyncObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFTestControlSyncObservable.resetCachedDescription()()
{
  return CAFTestControlSyncObservable.cachedDescription.setter(0, 0);
}

id CAFPairedDevicesInformationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed);
}

uint64_t CAFPairedDevicesInformationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFPairedDevicesInformationObservable.pairedDeviceList.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFPairedDevicesInformationObservable.$pairedDeviceList.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFPairedDevicesInformationObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed), sel_registeredForPairedDeviceList))
  {
    v1 = (void *)CAFPairedDevicesInformationObservable.pairedDeviceList.getter();
    v2 = objc_msgSend(v1, sel_description);
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

  }
  else
  {
    v5 = (void *)0xEE003E6465726574;
    v3 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(68);
  v6._countAndFlagsBits = 0xD000000000000028;
  v6._object = (void *)0x80000002374E1050;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x80000002374E1080;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v3;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t CAFPairedDevicesInformationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFPairedDevicesInformationObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFPairedDevicesInformationObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFPairedDevicesInformationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFPairedDevicesInformationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFPairedDevicesInformationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable__pairedDeviceList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPairedDevicesInformationObservable, CAFPairedDeviceList>);
  swift_allocObject();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFPairedDevicesInformationObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFPairedDevicesInformationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFPairedDevicesInformationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFPairedDevicesInformationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPairedDevicesInformationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPairedDevicesInformationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFPairedDevicesInformationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFPairedDevicesInformationObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFPairedDevicesInformationObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFPairedDevicesInformationObservable(void **a1)
{
  CAFPairedDevicesInformationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPairedDevicesInformationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFPairedDevicesInformationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPairedDevicesInformationObservable.pairedDevicesInformationService(_:didUpdatePairedDeviceList:)(uint64_t a1, void *a2)
{
  id v3;

  OUTLINED_FUNCTION_32();
  v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFPairedDevicesInformationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFPairedDevicesInformationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFPairedDevicesInformationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_pairedDeviceList()
{
  return sel_pairedDeviceList;
}

id key path getter for CAFPairedDevicesInformation.pairedDeviceList : CAFPairedDevicesInformation@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_pairedDeviceList);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CAFPairedDevicesInformationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPairedDevicesInformation(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformationObservable, (uint64_t)&protocol conformance descriptor for CAFPairedDevicesInformationObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPairedDevicesInformationObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesInformation and conformance CAFPairedDevicesInformation, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformation, (uint64_t)&protocol conformance descriptor for CAFPairedDevicesInformation);
}

unint64_t type metadata accessor for CAFPairedDevicesInformation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFPairedDevicesInformation;
  if (!lazy cache variable for type metadata for CAFPairedDevicesInformation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPairedDevicesInformation);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFPairedDevicesInformationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformationObservable, (uint64_t)&protocol conformance descriptor for CAFPairedDevicesInformationObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFPairedDevicesInformationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFPairedDevicesInformationObservable.pairedDeviceList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFPairedDevicesInformationObservable.$pairedDeviceList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFPairedDevicesInformationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFPairedDevicesInformationObservable.resetCachedDescription()()
{
  return CAFPairedDevicesInformationObservable.cachedDescription.setter(0, 0);
}

id CAFRecirculationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
}

uint64_t CAFRecirculationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFRecirculationObservable.on : CAFRecirculationObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFRecirculationObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFRecirculationObservable.on : CAFRecirculationObservable(unsigned __int8 *a1)
{
  return CAFRecirculationObservable.on.setter(*a1);
}

uint64_t CAFRecirculationObservable.on.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFRecirculationObservable.on.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFRecirculationObservable.on.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFRecirculationObservable.on.modify;
}

void CAFRecirculationObservable.on.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFRecirculationObservable.$on.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFRecirculationObservable.autoMode.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFRecirculationObservable.$autoMode.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFRecirculationObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  char v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = (void *)0xEE003E6465726574;
  v2 = 0x73696765726E753CLL;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForOn))
  {
    v6 = CAFRecirculationObservable.on.getter();
    if ((v6 & 1) != 0)
      v4 = 1702195828;
    else
      v4 = 0x65736C6166;
    if ((v6 & 1) != 0)
      v5 = (void *)0xE400000000000000;
    else
      v5 = (void *)0xE500000000000000;
  }
  if (objc_msgSend(v3, sel_registeredForAutoMode))
  {
    CAFRecirculationObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v2 = String.init<A>(describing:)();
    v1 = v7;
  }
  _StringGuts.grow(_:)(57);
  v8._object = (void *)0x80000002374E1100;
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x203A6E6F207B20;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v11._object = (void *)0xEC000000203A6564;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFRecirculationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFRecirculationObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFRecirculationObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

void CAFRecirculationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFRecirculationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFRecirculationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFRecirculationObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable__autoMode;
  v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRecirculationObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for CAFRecirculationObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFRecirculationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFRecirculationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFRecirculationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRecirculationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRecirculationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFRecirculationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFRecirculationObservable(id *a1@<X8>)
{
  *a1 = CAFRecirculationObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237464378(_BYTE *a1@<X8>)
{
  *a1 = CAFRecirculationObservable.on.getter() & 1;
  OUTLINED_FUNCTION_11();
}

void sub_2374643A0(unsigned __int8 *a1)
{
  CAFRecirculationObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFRecirculationObservable(void **a1)
{
  CAFRecirculationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRecirculationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFRecirculationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRecirculationObservable.recirculationService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFRecirculationObservable.recirculationService(_:didUpdateAutoMode:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFRecirculationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFRecirculationObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFRecirculationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237464674(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_on);
  OUTLINED_FUNCTION_11();
}

id sub_2374646A0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

void sub_2374646B4(_BYTE *a1@<X8>)
{
  *a1 = CAFSteeringWheelHeatingCooling.autoModeBridged.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFRecirculationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRecirculation(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRecirculationObservable and conformance CAFRecirculationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFRecirculationObservable, (uint64_t)&protocol conformance descriptor for CAFRecirculationObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFRecirculationObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRecirculation and conformance CAFRecirculation, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFRecirculation, (uint64_t)&protocol conformance descriptor for CAFRecirculation);
}

unint64_t type metadata accessor for CAFRecirculation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFRecirculation;
  if (!lazy cache variable for type metadata for CAFRecirculation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFRecirculation);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFRecirculationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRecirculationObservable and conformance CAFRecirculationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFRecirculationObservable, (uint64_t)&protocol conformance descriptor for CAFRecirculationObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFRecirculationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFRecirculationObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.$autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t partial apply for closure #1 in CAFRecirculationObservable.resetCachedDescription()()
{
  return CAFRecirculationObservable.cachedDescription.setter(0, 0);
}

id CAFPositionManagerObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFPositionManagerObservable_observed);
}

uint64_t key path getter for CAFPositionManagerObservable.state : CAFPositionManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFPositionManagerObservable.state.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFPositionManagerObservable.state : CAFPositionManagerObservable()
{
  return CAFPositionManagerObservable.state.setter();
}

uint64_t CAFPositionManagerObservable.state.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_237464984(uint64_t *a1@<X8>)
{
  *a1 = CAFPositionManagerObservable.state.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374649A8()
{
  CAFPositionManagerObservable.state.setter();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFPositionManagerObservable.state.setter()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  return static Published.subscript.setter();
}

uint64_t key path setter for CAFPositionManagerObservable.$state : CAFPositionManagerObservable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>.Publisher);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return CAFPositionManagerObservable.$state.setter((uint64_t)v4);
}

uint64_t CAFPositionManagerObservable.$state.getter()
{
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t CAFPositionManagerObservable.$state.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

id CAFPositionManagerObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFPositionManagerObservable.init(_:)(a1);
}

id CAFPositionManagerObservable.init(_:)(void *a1)
{
  char *v1;
  char *v3;
  id v4;
  id v5;
  id v6;
  objc_super v8;
  id v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC10CAFCombine28CAFPositionManagerObservable_observed] = a1;
  v3 = v1;
  v4 = a1;
  v5 = objc_msgSend(v4, sel_state);
  OUTLINED_FUNCTION_2_2();
  v9 = v5;
  type metadata accessor for CAFCharacteristicState(0);
  Published.init(initialValue:)();
  swift_endAccess();

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for CAFPositionManagerObservable();
  v6 = objc_msgSendSuper2(&v8, sel_init);
  objc_msgSend(v4, sel_registerObserver_, v6);

  return v6;
}

uint64_t type metadata accessor for CAFPositionManagerObservable()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFPositionManagerObservable;
  if (!type metadata singleton initialization cache for CAFPositionManagerObservable)
    return swift_getSingletonMetadata();
  return result;
}

id CAFPositionManagerObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFPositionManagerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPositionManagerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPositionManagerObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFPositionManagerObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFPositionManagerObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFPositionManagerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFPositionManagerObservable(void **a1)
{
  return CAFPositionManagerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPositionManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFPositionManagerObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPositionManagerObservable.positionManager(_:didUpdate:)(void *a1)
{
  objc_msgSend(a1, sel_state);
  return CAFPositionManagerObservable.state.setter();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPositionManager()
{
  return lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable, (uint64_t (*)(uint64_t))type metadata accessor for CAFPositionManagerObservable, (uint64_t)&protocol conformance descriptor for CAFPositionManagerObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPositionManagerObservable()
{
  return lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFPositionManager and conformance CAFPositionManager, (uint64_t (*)(uint64_t))type metadata accessor for CAFPositionManager, (uint64_t)&protocol conformance descriptor for CAFPositionManager);
}

unint64_t type metadata accessor for CAFPositionManager()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFPositionManager;
  if (!lazy cache variable for type metadata for CAFPositionManager)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPositionManager);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFPositionManagerObservable(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable, (uint64_t (*)(uint64_t))type metadata accessor for CAFPositionManagerObservable, (uint64_t)&protocol conformance descriptor for CAFPositionManagerObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B812308](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_237464FD0()
{
  CAFPositionManagerObservable.$state.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t ObjC metadata update function for CAFPositionManagerObservable()
{
  return type metadata accessor for CAFPositionManagerObservable();
}

void type metadata completion function for CAFPositionManagerObservable()
{
  unint64_t v0;

  type metadata accessor for Published<CAFCharacteristicState>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for CAFPositionManagerObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFPositionManagerObservable.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CAFPositionManagerObservable.$state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CAFPositionManagerObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for Published<CAFCharacteristicState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<CAFCharacteristicState>)
  {
    type metadata accessor for CAFCharacteristicState(255);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CAFCharacteristicState>);
  }
}

id CAFSingleSelectImageSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
}

uint64_t CAFSingleSelectImageSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFSingleSelectImageSettingObservable.userVisibleLabel.getter()
{
  CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.sectionIdentifier.getter()
{
  CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFSingleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFSingleSelectImageSettingObservable.$sortOrder.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectImageSettingObservable.$category.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.identifier.getter()
{
  CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectImageSettingObservable.$identifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.disabled.getter()
{
  CAFSingleSelectImageSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectImageSettingObservable.$disabled.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.limitableUIElement.getter()
{
  CAFSingleSelectImageSettingObservable.disabled.getter();
}

void CAFSingleSelectImageSettingObservable.$limitableUIElement.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.hidden.getter()
{
  CAFSingleSelectImageSettingObservable.disabled.getter();
}

void CAFSingleSelectImageSettingObservable.$hidden.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  CAFSingleSelectImageSettingObservable.disabled.getter();
}

void CAFSingleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.symbolName.getter()
{
  CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectImageSettingObservable.$symbolName.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectImageSettingObservable.$prominenceInfo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFSingleSelectImageSettingObservable.currentUserVisibleValue : CAFSingleSelectImageSettingObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSingleSelectImageSettingObservable.currentUserVisibleValue : CAFSingleSelectImageSettingObservable(unsigned __int8 *a1)
{
  return CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter(*a1);
}

uint64_t CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  id v4;

  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  v4 = OUTLINED_FUNCTION_69_0();
  return specialized static SafePublished.subscript.setter(a1, v4, KeyPath, v1);
}

void (*CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify;
}

void CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFSingleSelectImageSettingObservable.$currentUserVisibleValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__listUserVisibleValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.images.getter()
{
  CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter();
}

void CAFSingleSelectImageSettingObservable.$images.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__images, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFSingleSelectImageSettingObservable.name.getter()
{
  CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectImageSettingObservable.$name.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable._description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v1 = (uint64_t)OUTLINED_FUNCTION_67(a1, sel_registeredForCurrentUserVisibleValue);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter();
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v2 = v1;
    v3 = v4;
  }
  v5 = (uint64_t)OUTLINED_FUNCTION_67(v1, sel_registeredForListUserVisibleValue);
  v6 = 0x73696765726E753CLL;
  v7 = (void *)0xEE003E6465726574;
  if ((_DWORD)v5)
  {
    CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter();
    v6 = MEMORY[0x23B811C3C]();
    v7 = v8;
    v5 = swift_bridgeObjectRelease();
  }
  if (OUTLINED_FUNCTION_67(v5, sel_registeredForImageList))
  {
    CAFSingleSelectImageSettingObservable.images.getter();
    MEMORY[0x23B811C3C]();
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(113);
  OUTLINED_FUNCTION_12_0(0xD000000000000028, (uint64_t)"<CAFSingleSelectImageSettingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_12_0(0xD00000000000001CLL, (uint64_t)" { currentUserVisibleValue: ");
  v9._countAndFlagsBits = v2;
  v9._object = v3;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000002374DF6B0;
  v10._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v6;
  v11._object = v7;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x736567616D69202CLL;
  v12._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 4095264;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  return 0;
}

uint64_t CAFSingleSelectImageSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSingleSelectImageSettingObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFSingleSelectImageSettingObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFSingleSelectImageSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFSingleSelectImageSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFSingleSelectImageSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  objc_super v34;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__currentUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSingleSelectImageSettingObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__listUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, [String]>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v26] = v27;
  v28 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__images;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, [Data]>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v28] = v29;
  v30 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v30] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed] = a1;
  v31 = a1;

  v34.receiver = v9;
  v34.super_class = (Class)type metadata accessor for CAFSingleSelectImageSettingObservable();
  v32 = objc_msgSendSuper2(&v34, sel_init);
  objc_msgSend(v31, sel_registerObserver_, v32);

  return v32;
}

uint64_t CAFSingleSelectImageSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSingleSelectImageSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSingleSelectImageSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSingleSelectImageSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSingleSelectImageSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSingleSelectImageSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFSingleSelectImageSettingObservable(id *a1@<X8>)
{
  *a1 = CAFSingleSelectImageSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFSingleSelectImageSettingObservable(void **a1)
{
  CAFSingleSelectImageSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSingleSelectImageSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSingleSelectImageSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateCurrentUserVisibleValue:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2)
{
  return CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__listUserVisibleValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateImages:)(uint64_t a1, uint64_t a2)
{
  return CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__images, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  OUTLINED_FUNCTION_15_1();
  v5 = swift_bridgeObjectRetain();
  a4(v5);
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateName:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFSingleSelectImageSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFSingleSelectImageSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFSingleSelectImageSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237466900()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237466920(unsigned __int8 *a1)
{
  CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_237466940(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel, a4);
}

void sub_23746695C(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier, a4);
}

void sub_23746697C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_2374669A8(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_identifier, a4);
}

void sub_2374669C4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374669E4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237466A04()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237466A24()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237466A44(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey, a4);
}

void sub_237466A60(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_symbolName, a4);
}

char *keypath_get_selector_currentUserVisibleValue()
{
  return sel_currentUserVisibleValue;
}

void sub_237466A8C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_currentUserVisibleValue);
  OUTLINED_FUNCTION_11();
}

id sub_237466AB8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCurrentUserVisibleValue_, *a1);
}

void sub_237466ACC(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFMultipleSelectImageSetting.listUserVisibleValue : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_listUserVisibleValue, a4);
}

void sub_237466AF0(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFMultipleSelectImageSetting.listUserVisibleValue : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_images, a4);
}

void sub_237466B14(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFMultipleSelectImageSetting(a1, a2, a3, (SEL *)&selRef_name, a4);
}

uint64_t type metadata accessor for CAFSingleSelectImageSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable, (uint64_t)&protocol conformance descriptor for CAFSingleSelectImageSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSingleSelectImageSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSetting and conformance CAFSingleSelectImageSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSetting, (uint64_t)&protocol conformance descriptor for CAFSingleSelectImageSetting);
}

unint64_t type metadata accessor for CAFSingleSelectImageSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSingleSelectImageSetting;
  if (!lazy cache variable for type metadata for CAFSingleSelectImageSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSingleSelectImageSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFSingleSelectImageSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable, (uint64_t)&protocol conformance descriptor for CAFSingleSelectImageSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFSingleSelectImageSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))() & 0x1FF;
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$currentUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.images.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$images.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 560))();
}

uint64_t partial apply for closure #1 in CAFSingleSelectImageSettingObservable.resetCachedDescription()()
{
  return CAFSingleSelectImageSettingObservable.cachedDescription.setter(0, 0);
}

id CAFCriticalInputStreamObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
}

uint64_t CAFCriticalInputStreamObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFCriticalInputStreamObservable.inputStreamUID.getter()
{
  return CAFCriticalInputStreamObservable.inputStreamUID.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFCriticalInputStreamObservable.$inputStreamUID.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__inputStreamUID, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCriticalInputStreamObservable.on.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFCriticalInputStreamObservable.$on.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__on, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCriticalInputStreamObservable.name.getter()
{
  return CAFCriticalInputStreamObservable.inputStreamUID.getter();
}

void CAFCriticalInputStreamObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCriticalInputStreamObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForInputStreamUID))
  {
    v2 = CAFCriticalInputStreamObservable.inputStreamUID.getter();
    v3 = v4;
  }
  if (objc_msgSend(v1, sel_registeredForOn))
    CAFCriticalInputStreamObservable.on.getter();
  _StringGuts.grow(_:)(69);
  v5._countAndFlagsBits = 0xD000000000000023;
  v5._object = (void *)0x80000002374E1310;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x80000002374E1340;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x203A6E6F202CLL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFCriticalInputStreamObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFCriticalInputStreamObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFCriticalInputStreamObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFCriticalInputStreamObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFCriticalInputStreamObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFCriticalInputStreamObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__inputStreamUID;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCriticalInputStreamObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__on;
  v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCriticalInputStreamObservable, Bool>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  v12 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__name;
  v13 = swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for CAFCriticalInputStreamObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFCriticalInputStreamObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFCriticalInputStreamObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFCriticalInputStreamObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCriticalInputStreamObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCriticalInputStreamObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFCriticalInputStreamObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCriticalInputStreamObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFCriticalInputStreamObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFCriticalInputStreamObservable(void **a1)
{
  CAFCriticalInputStreamObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCriticalInputStreamObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFCriticalInputStreamObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)()
{
  return CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateName:)()
{
  return CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)();
}

uint64_t CAFCriticalInputStreamObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFCriticalInputStreamObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFCriticalInputStreamObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_inputStreamUID()
{
  return sel_inputStreamUID;
}

void sub_237467A94(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_inputStreamUID, a2);
}

id sub_237467AB0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

void sub_237467AE0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFCriticalInputStreamObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCriticalInputStream(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCriticalInputStreamObservable, (uint64_t)&protocol conformance descriptor for CAFCriticalInputStreamObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCriticalInputStreamObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCriticalInputStream and conformance CAFCriticalInputStream, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFCriticalInputStream, (uint64_t)&protocol conformance descriptor for CAFCriticalInputStream);
}

unint64_t type metadata accessor for CAFCriticalInputStream()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFCriticalInputStream;
  if (!lazy cache variable for type metadata for CAFCriticalInputStream)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCriticalInputStream);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFCriticalInputStreamObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCriticalInputStreamObservable, (uint64_t)&protocol conformance descriptor for CAFCriticalInputStreamObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFCriticalInputStreamObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.inputStreamUID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.$inputStreamUID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFCriticalInputStreamObservable.resetCachedDescription()()
{
  return CAFCriticalInputStreamObservable.cachedDescription.setter(0, 0);
}

id CAFExteriorConditionsObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed);
}

uint64_t CAFExteriorConditionsObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFExteriorConditionsObservable.temperature.getter()
{
  return CAFExteriorConditionsObservable.temperature.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFExteriorConditionsObservable.$temperature.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__temperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFExteriorConditionsObservable.aqi.getter()
{
  return CAFExteriorConditionsObservable.temperature.getter();
}

void CAFExteriorConditionsObservable.$aqi.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__aqi, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFExteriorConditionsObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD v20[2];
  uint64_t v21;
  unint64_t v22;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  MEMORY[0x24BDAC7A8](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForTemperature))
  {
    CAFExteriorConditionsObservable.temperature.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v8 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v10 = (void *)0xEE003E6465726574;
  v11 = 0x73696765726E753CLL;
  if (objc_msgSend(v6, sel_registeredForAQI))
  {
    CAFExteriorConditionsObservable.aqi.getter();
    v11 = String.init<A>(describing:)();
    v10 = v12;
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v13._countAndFlagsBits = 0xD000000000000022;
  v13._object = (void *)0x80000002374E13D0;
  String.append(_:)(v13);
  v20[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v14._object = (void *)0x80000002374E0920;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v7;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x203A697161202CLL;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v11;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 4095264;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  return v21;
}

uint64_t CAFExteriorConditionsObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFExteriorConditionsObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFExteriorConditionsObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFExteriorConditionsObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFExteriorConditionsObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFExteriorConditionsObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__temperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFExteriorConditionsObservable, Measurement<NSUnitTemperature>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__aqi;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFExteriorConditionsObservable, Measurement<CAFUnitAirQuality>?>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFExteriorConditionsObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFExteriorConditionsObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFExteriorConditionsObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFExteriorConditionsObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFExteriorConditionsObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFExteriorConditionsObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFExteriorConditionsObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFExteriorConditionsObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFExteriorConditionsObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFExteriorConditionsObservable(void **a1)
{
  CAFExteriorConditionsObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFExteriorConditionsObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFExteriorConditionsObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__temperature, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateAqi:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__aqi, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFExteriorConditionsObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFExteriorConditionsObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFExteriorConditionsObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void key path getter for CAFExteriorConditions.temperature : CAFExteriorConditions(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_temperature);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

uint64_t type metadata accessor for CAFExteriorConditionsObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFExteriorConditions()
{
  lazy protocol witness table accessor for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable, (uint64_t)&protocol conformance descriptor for CAFExteriorConditionsObservable);
}

unint64_t lazy protocol witness table accessor for type CAFExteriorConditions and conformance CAFExteriorConditions()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFExteriorConditions and conformance CAFExteriorConditions;
  if (!lazy protocol witness table cache variable for type CAFExteriorConditions and conformance CAFExteriorConditions)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFExteriorConditions);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFExteriorConditions, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFExteriorConditions and conformance CAFExteriorConditions);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFExteriorConditionsObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable, (uint64_t)&protocol conformance descriptor for CAFExteriorConditionsObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFExteriorConditionsObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFExteriorConditionsObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.temperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.$temperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.aqi.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.$aqi.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t partial apply for closure #1 in CAFExteriorConditionsObservable.resetCachedDescription()()
{
  return CAFExteriorConditionsObservable.cachedDescription.setter(0, 0);
}

id CAFProtocolPerfTestObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
}

uint64_t CAFProtocolPerfTestObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFProtocolPerfTestObservable.testInt32.getter()
{
  CAFProtocolPerfTestObservable.testInt32.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFProtocolPerfTestObservable.$testInt32.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt32, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFProtocolPerfTestObservable.testInt16 : CAFProtocolPerfTestObservable@<X0>(_WORD *a1@<X8>)
{
  uint64_t result;

  result = CAFProtocolPerfTestObservable.testInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFProtocolPerfTestObservable.testInt16 : CAFProtocolPerfTestObservable(unsigned __int16 *a1)
{
  return CAFProtocolPerfTestObservable.testInt16.setter(*a1);
}

uint64_t CAFProtocolPerfTestObservable.testInt16.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFProtocolPerfTestObservable.testInt16.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFProtocolPerfTestObservable.testInt16.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _WORD *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOWORD(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_WORD *)v3 + 44) = (_WORD)v4;
  return CAFProtocolPerfTestObservable.testInt16.modify;
}

void CAFProtocolPerfTestObservable.testInt16.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int16 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFProtocolPerfTestObservable.$testInt16.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFProtocolPerfTestObservable.testUInt32.getter()
{
  CAFProtocolPerfTestObservable.testInt32.getter();
}

void CAFProtocolPerfTestObservable.$testUInt32.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt32, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFProtocolPerfTestObservable.testUInt16.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFProtocolPerfTestObservable.$testUInt16.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt16, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.testString.getter()
{
  return CAFProtocolPerfTestObservable.testString.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFProtocolPerfTestObservable.$testString.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFProtocolPerfTestObservable.testString2 : CAFProtocolPerfTestObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CAFProtocolPerfTestObservable.testString2.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t key path setter for CAFProtocolPerfTestObservable.testString2 : CAFProtocolPerfTestObservable()
{
  swift_bridgeObjectRetain();
  return CAFProtocolPerfTestObservable.testString2.setter();
}

void CAFProtocolPerfTestObservable.testString2.getter()
{
  void *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFProtocolPerfTestObservable.testString2.setter()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_31_0();
  return specialized static SafePublished.subscript.setter(v2);
}

void CAFProtocolPerfTestObservable.testString2.modify(_QWORD *a1)
{
  void *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  v3[3] = swift_getKeyPath();
  v3[4] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1);
  *v3 = v4;
  v3[1] = v5;
  OUTLINED_FUNCTION_24_1();
}

void CAFProtocolPerfTestObservable.testString2.modify(uint64_t a1, char a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a1;
  v4 = *(id *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_14_3();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_14_3();
  }
  free(v3);
}

uint64_t CAFProtocolPerfTestObservable.$testString2.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString2, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.$testInt16.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  v3 = OUTLINED_FUNCTION_32();
  v4 = a2(v3);
  OUTLINED_FUNCTION_25();
  return v4;
}

uint64_t CAFProtocolPerfTestObservable.name.getter()
{
  return CAFProtocolPerfTestObservable.testString.getter();
}

void CAFProtocolPerfTestObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable._description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unsigned __int16 v30;
  Swift::String v31;
  uint64_t v32;
  unsigned __int16 v33;
  Swift::String v34;
  uint64_t v35;
  unsigned int v36;
  Swift::String v37;
  Swift::String v38;
  unsigned int v39;
  Swift::String v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;

  v45._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v45._countAndFlagsBits = v1;
  OUTLINED_FUNCTION_7_3(v2, sel_registeredForTestInt32);
  OUTLINED_FUNCTION_2_4();
  v5 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFProtocolPerfTestObservable.testInt32.getter();
    v3 = OUTLINED_FUNCTION_22_3();
    v4 = v3;
    v5 = v6;
  }
  v44 = v4;
  OUTLINED_FUNCTION_7_3(v3, sel_registeredForTestInt16);
  OUTLINED_FUNCTION_2_4();
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFProtocolPerfTestObservable.testInt16.getter();
    v7 = OUTLINED_FUNCTION_22_3();
    v8 = v7;
    v9 = v10;
  }
  v43 = v8;
  OUTLINED_FUNCTION_7_3(v7, sel_registeredForTestUInt32);
  OUTLINED_FUNCTION_2_4();
  v13 = (void *)0xEE003E6465726574;
  if ((_DWORD)v11)
  {
    CAFProtocolPerfTestObservable.testUInt32.getter();
    v11 = OUTLINED_FUNCTION_22_3();
    v12 = v11;
    v13 = v14;
  }
  v42 = v12;
  v15 = (uint64_t)OUTLINED_FUNCTION_7_3(v11, sel_registeredForTestUInt16);
  v16 = 0x73696765726E753CLL;
  v17 = (void *)0xEE003E6465726574;
  if ((_DWORD)v15)
  {
    CAFProtocolPerfTestObservable.testUInt16.getter();
    v15 = OUTLINED_FUNCTION_22_3();
    v16 = v15;
    v17 = v18;
  }
  v19 = (uint64_t)OUTLINED_FUNCTION_7_3(v15, sel_registeredForTestString);
  v20 = 0x73696765726E753CLL;
  v21 = (void *)0xEE003E6465726574;
  if ((_DWORD)v19)
  {
    v19 = CAFProtocolPerfTestObservable.testString.getter();
    v20 = v19;
    v21 = v22;
  }
  if (OUTLINED_FUNCTION_7_3(v19, sel_registeredForTestString2))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    specialized static SafePublished.subscript.getter(v0);
    v45._countAndFlagsBits = v23;
    v45._object = v24;
    OUTLINED_FUNCTION_25();
    swift_release();
  }
  _StringGuts.grow(_:)(133);
  v25._object = (void *)0x80000002374E14B0;
  v25._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_6_2(0x4974736574207B20, 0x3233746Eu);
  v26._countAndFlagsBits = v44;
  v26._object = v5;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x6E4974736574202CLL;
  v27._object = (void *)0xED0000203A363174;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v43;
  v28._object = v9;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_6_2(v29, v30 | 0x32330000);
  v31._countAndFlagsBits = v42;
  v31._object = v13;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32 = OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_6_2(v32, v33 | 0x36310000);
  v34._countAndFlagsBits = v16;
  v34._object = v17;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35 = OUTLINED_FUNCTION_9_3();
  OUTLINED_FUNCTION_6_2(v35, v36);
  v37._countAndFlagsBits = v20;
  v37._object = v21;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = OUTLINED_FUNCTION_9_3();
  v38._object = (void *)(v39 | 0xEF203A3200000000);
  String.append(_:)(v38);
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 4095264;
  v40._object = (void *)0xE300000000000000;
  String.append(_:)(v40);
  return 0;
}

void CAFProtocolPerfTestObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    OUTLINED_FUNCTION_71_0();
  }
  else
  {
    CAFProtocolPerfTestObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFProtocolPerfTestObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_24_1();
}

void CAFProtocolPerfTestObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFProtocolPerfTestObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFProtocolPerfTestObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  objc_super v23;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, Int32>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFProtocolPerfTestObservable, Int16>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, UInt32>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, UInt16>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v16] = OUTLINED_FUNCTION_19_1();
  v17 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString2;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFProtocolPerfTestObservable, String>);
  OUTLINED_FUNCTION_127();
  v18 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v17] = specialized SafePublished.init(observedValuekeypath:)(v18);
  v19 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v8[v19] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed] = a1;
  v20 = a1;

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for CAFProtocolPerfTestObservable();
  v21 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v20, sel_registerObserver_, v21);

  return v21;
}

void CAFProtocolPerfTestObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFProtocolPerfTestObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFProtocolPerfTestObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFProtocolPerfTestObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFProtocolPerfTestObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFProtocolPerfTestObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFProtocolPerfTestObservable(id *a1@<X8>)
{
  *a1 = CAFProtocolPerfTestObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFProtocolPerfTestObservable(void **a1)
{
  CAFProtocolPerfTestObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFProtocolPerfTestObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFProtocolPerfTestObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2)
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt32, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt16:)()
{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2)
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt32, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2, uint64_t a3, void (*a4)(_QWORD))
{
  OUTLINED_FUNCTION_32();
  a4(a2);
  return swift_release();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestUInt16:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)()
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)();
}

{
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

void CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString2:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_71_0();
  v0 = OUTLINED_FUNCTION_31_0();
  specialized SafePublished.value.setter(v0, v1);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateName:)()
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)();
}

void CAFProtocolPerfTestObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFProtocolPerfTestObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFProtocolPerfTestObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237469EA0(_WORD *a1@<X8>)
{
  *a1 = CAFProtocolPerfTestObservable.testInt16.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237469EC4(unsigned __int16 *a1)
{
  CAFProtocolPerfTestObservable.testInt16.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_237469EE4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CAFProtocolPerfTestObservable.testString2.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_testInt32()
{
  return sel_testInt32;
}

void sub_237469F18(uint64_t a1)
{
  _DWORD *v1;

  *v1 = objc_msgSend((id)OUTLINED_FUNCTION_20_3(a1), sel_testInt32);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_testInt16()
{
  return sel_testInt16;
}

void sub_237469F4C(uint64_t a1)
{
  _WORD *v1;

  *v1 = (unsigned __int16)objc_msgSend((id)OUTLINED_FUNCTION_20_3(a1), sel_testInt16);
  OUTLINED_FUNCTION_11();
}

id sub_237469F74(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestInt16_, *a1);
}

char *keypath_get_selector_testUInt32()
{
  return sel_testUInt32;
}

void sub_237469F94(uint64_t a1)
{
  _DWORD *v1;

  *v1 = objc_msgSend((id)OUTLINED_FUNCTION_20_3(a1), sel_testUInt32);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_testUInt16()
{
  return sel_testUInt16;
}

void sub_237469FC8(uint64_t a1)
{
  _WORD *v1;

  *v1 = (unsigned __int16)objc_msgSend((id)OUTLINED_FUNCTION_20_3(a1), sel_testUInt16);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_testString()
{
  return sel_testString;
}

void sub_237469FFC(uint64_t a1)
{
  key path getter for CAFProtocolPerfTest.testString : CAFProtocolPerfTest(a1);
}

char *keypath_get_selector_testString2()
{
  return sel_testString2;
}

void sub_23746A024(uint64_t a1)
{
  key path getter for CAFProtocolPerfTest.testString : CAFProtocolPerfTest(a1);
}

void key path setter for CAFProtocolPerfTest.testString2 : CAFProtocolPerfTest(_QWORD *a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  v3 = (id)MEMORY[0x23B811BC4](*a1, a1[1]);
  objc_msgSend(v2, sel_setTestString2_, v3);

}

void key path getter for CAFProtocolPerfTest.testString : CAFProtocolPerfTest(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  SEL *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (void *)OUTLINED_FUNCTION_20_3(a1);
  v4 = objc_msgSend(v2, *v3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  *v1 = v5;
  v1[1] = v7;
}

void sub_23746A0E0(uint64_t a1)
{
  key path getter for CAFProtocolPerfTest.testString : CAFProtocolPerfTest(a1);
}

uint64_t type metadata accessor for CAFProtocolPerfTestObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFProtocolPerfTest(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable, (uint64_t)&protocol conformance descriptor for CAFProtocolPerfTestObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFProtocolPerfTestObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTest and conformance CAFProtocolPerfTest, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFProtocolPerfTest, (uint64_t)&protocol conformance descriptor for CAFProtocolPerfTest);
}

unint64_t type metadata accessor for CAFProtocolPerfTest()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFProtocolPerfTest;
  if (!lazy cache variable for type metadata for CAFProtocolPerfTest)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFProtocolPerfTest);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFProtocolPerfTestObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable, (uint64_t)&protocol conformance descriptor for CAFProtocolPerfTestObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFProtocolPerfTestObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt16.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString2.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString2.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString2.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testString2.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t partial apply for closure #1 in CAFProtocolPerfTestObservable.resetCachedDescription()()
{
  return CAFProtocolPerfTestObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_6_2(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  v2 = a2 | 0xEE00203A00000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_9_3()
{
  return 0x745374736574202CLL;
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  uint64_t v0;

  return specialized static SafePublished.subscript.setter(v0);
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return 0x495574736574202CLL;
}

uint64_t OUTLINED_FUNCTION_20_3(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t static CAFMediaSourceSemanticType.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFMediaSourceSemanticType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFMediaSourceSemanticType.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFMediaSourceSemanticType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFMediaSourceSemanticType.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromMediaSourceSemanticType();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFMediaSourceSemanticType(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(&lazy protocol witness table cache variable for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType, (uint64_t)&protocol conformance descriptor for CAFMediaSourceSemanticType);
  a1[2] = lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(&lazy protocol witness table cache variable for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType, (uint64_t)&protocol conformance descriptor for CAFMediaSourceSemanticType);
  result = lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(&lazy protocol witness table cache variable for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType, (uint64_t)&protocol conformance descriptor for CAFMediaSourceSemanticType);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFMediaSourceSemanticType(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFMediaSourceSemanticType()
{
  return CAFMediaSourceSemanticType.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFMediaSourceSemanticType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFMediaSourceSemanticType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFMediaSourceSemanticType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFMediaSourceSemanticType]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFMediaSourceSemanticType] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFMediaSourceSemanticType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFMediaSourceSemanticType.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFMediaSourceSemanticType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFCameraGeneralObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
}

uint64_t CAFCameraGeneralObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFCameraGeneralObservable.on : CAFCameraGeneralObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCameraGeneralObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFCameraGeneralObservable.on : CAFCameraGeneralObservable(unsigned __int8 *a1)
{
  return CAFCameraGeneralObservable.on.setter(*a1);
}

uint64_t CAFCameraGeneralObservable.on.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFCameraGeneralObservable.on.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFCameraGeneralObservable.on.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFCameraGeneralObservable.on.modify;
}

void CAFCameraGeneralObservable.on.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFCameraGeneralObservable.$on.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFCameraGeneralObservable.userDismissible.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFCameraGeneralObservable.$userDismissible.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFCameraGeneralObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = (void *)0xEE003E6465726574;
  v2 = 0x73696765726E753CLL;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForOn))
  {
    v6 = CAFCameraGeneralObservable.on.getter();
    if ((v6 & 1) != 0)
      v4 = 1702195828;
    else
      v4 = 0x65736C6166;
    if ((v6 & 1) != 0)
      v5 = (void *)0xE400000000000000;
    else
      v5 = (void *)0xE500000000000000;
  }
  if (objc_msgSend(v3, sel_registeredForUserDismissible))
  {
    v7 = CAFCameraGeneralObservable.userDismissible.getter();
    if ((v7 & 1) != 0)
      v2 = 1702195828;
    else
      v2 = 0x65736C6166;
    if ((v7 & 1) != 0)
      v1 = (void *)0xE400000000000000;
    else
      v1 = (void *)0xE500000000000000;
  }
  _StringGuts.grow(_:)(64);
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  v8._object = (void *)0x80000002374E1560;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x203A6E6F207B20;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000002374E1580;
  v11._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFCameraGeneralObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFCameraGeneralObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFCameraGeneralObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

void CAFCameraGeneralObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFCameraGeneralObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFCameraGeneralObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFCameraGeneralObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable__userDismissible;
  v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraGeneralObservable, Bool>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for CAFCameraGeneralObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFCameraGeneralObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFCameraGeneralObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFCameraGeneralObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCameraGeneralObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCameraGeneralObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFCameraGeneralObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFCameraGeneralObservable(id *a1@<X8>)
{
  *a1 = CAFCameraGeneralObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23746B178(_BYTE *a1@<X8>)
{
  *a1 = CAFCameraGeneralObservable.on.getter() & 1;
  OUTLINED_FUNCTION_11();
}

void sub_23746B1A0(unsigned __int8 *a1)
{
  CAFCameraGeneralObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFCameraGeneralObservable(void **a1)
{
  CAFCameraGeneralObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCameraGeneralObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFCameraGeneralObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCameraGeneralObservable.cameraGeneralService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFCameraGeneralObservable.cameraGeneralService(_:didUpdateUserDismissible:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFCameraGeneralObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFCameraGeneralObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFCameraGeneralObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23746B474(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_on);
  OUTLINED_FUNCTION_11();
}

id sub_23746B4A0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

char *keypath_get_selector_userDismissible()
{
  return sel_userDismissible;
}

void sub_23746B4C0(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_userDismissible);
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFCameraGeneralObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCameraGeneral(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCameraGeneralObservable, (uint64_t)&protocol conformance descriptor for CAFCameraGeneralObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCameraGeneralObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraGeneral and conformance CAFCameraGeneral, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFCameraGeneral, (uint64_t)&protocol conformance descriptor for CAFCameraGeneral);
}

unint64_t type metadata accessor for CAFCameraGeneral()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFCameraGeneral;
  if (!lazy cache variable for type metadata for CAFCameraGeneral)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCameraGeneral);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFCameraGeneralObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCameraGeneralObservable, (uint64_t)&protocol conformance descriptor for CAFCameraGeneralObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFCameraGeneralObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.userDismissible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.$userDismissible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t partial apply for closure #1 in CAFCameraGeneralObservable.resetCachedDescription()()
{
  return CAFCameraGeneralObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFUIInputDevicePurpose.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFUIInputDevicePurpose.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFUIInputDevicePurpose.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFUIInputDevicePurpose.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFUIInputDevicePurpose.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromUIInputDevicePurpose();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFUIInputDevicePurpose(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(&lazy protocol witness table cache variable for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose, (uint64_t)&protocol conformance descriptor for CAFUIInputDevicePurpose);
  a1[2] = lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(&lazy protocol witness table cache variable for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose, (uint64_t)&protocol conformance descriptor for CAFUIInputDevicePurpose);
  result = lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(&lazy protocol witness table cache variable for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose, (uint64_t)&protocol conformance descriptor for CAFUIInputDevicePurpose);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFUIInputDevicePurpose(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFUIInputDevicePurpose()
{
  return CAFUIInputDevicePurpose.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFUIInputDevicePurpose] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFUIInputDevicePurpose] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFUIInputDevicePurpose] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFUIInputDevicePurpose]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFUIInputDevicePurpose] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFUIInputDevicePurpose@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFUIInputDevicePurpose.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFUIInputDevicePurpose(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFGearRecommendationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed);
}

uint64_t CAFGearRecommendationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFGearRecommendationObservable.gearShiftRecommendation.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFGearRecommendationObservable.$gearShiftRecommendation.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFGearRecommendationObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed), sel_registeredForGearShiftRecommendation))
  {
    CAFGearRecommendationObservable.gearShiftRecommendation.getter();
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v3 = v2;
  }
  else
  {
    v3 = (void *)0xEE003E6465726574;
    v1 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(69);
  v4._countAndFlagsBits = 0xD000000000000022;
  v4._object = (void *)0x80000002374E1640;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._object = (void *)0x80000002374E1670;
  v5._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v1;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t CAFGearRecommendationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFGearRecommendationObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFGearRecommendationObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFGearRecommendationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFGearRecommendationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFGearRecommendationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable__gearShiftRecommendation;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFGearRecommendationObservable, Int8>);
  swift_allocObject();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFGearRecommendationObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFGearRecommendationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFGearRecommendationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFGearRecommendationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFGearRecommendationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFGearRecommendationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFGearRecommendationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFGearRecommendationObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFGearRecommendationObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFGearRecommendationObservable(void **a1)
{
  CAFGearRecommendationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFGearRecommendationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFGearRecommendationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFGearRecommendationObservable.gearRecommendationService(_:didUpdateGearShiftRecommendation:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFGearRecommendationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFGearRecommendationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFGearRecommendationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_gearShiftRecommendation()
{
  return sel_gearShiftRecommendation;
}

id sub_23746C21C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_gearShiftRecommendation);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t type metadata accessor for CAFGearRecommendationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFGearRecommendation(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFGearRecommendationObservable, (uint64_t)&protocol conformance descriptor for CAFGearRecommendationObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFGearRecommendationObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFGearRecommendation and conformance CAFGearRecommendation, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFGearRecommendation, (uint64_t)&protocol conformance descriptor for CAFGearRecommendation);
}

unint64_t type metadata accessor for CAFGearRecommendation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFGearRecommendation;
  if (!lazy cache variable for type metadata for CAFGearRecommendation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFGearRecommendation);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFGearRecommendationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFGearRecommendationObservable, (uint64_t)&protocol conformance descriptor for CAFGearRecommendationObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFGearRecommendationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFGearRecommendationObservable.gearShiftRecommendation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFGearRecommendationObservable.$gearShiftRecommendation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFGearRecommendationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFGearRecommendationObservable.resetCachedDescription()()
{
  return CAFGearRecommendationObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFCableState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFCableState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFCableState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFCableState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFCableState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromCableState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFCableState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(&lazy protocol witness table cache variable for type CAFCableState and conformance CAFCableState, (uint64_t)&protocol conformance descriptor for CAFCableState);
  a1[2] = lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(&lazy protocol witness table cache variable for type CAFCableState and conformance CAFCableState, (uint64_t)&protocol conformance descriptor for CAFCableState);
  result = lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(&lazy protocol witness table cache variable for type CAFCableState and conformance CAFCableState, (uint64_t)&protocol conformance descriptor for CAFCableState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFCableState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFCableState()
{
  return CAFCableState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFCableState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFCableState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFCableState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFCableState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFCableState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFCableState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFCableState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFCableState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t CAFHistoricalNotification.userDismissibleBridged.getter()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasUserDismissible))
    return (uint64_t)objc_msgSend(v0, sel_userDismissible);
  else
    return 2;
}

id CAFHistoricalNotification.userDismissibleBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setUserDismissible_, a1 & 1);
}

uint64_t CAFHistoricalNotification.userActionBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = objc_msgSend(v0, sel_hasUserAction);
  v2 = v1;
  if (v1)
    v1 = objc_msgSend(v0, sel_userAction);
  return v1 | ((v2 ^ 1) << 8);
}

id CAFHistoricalNotification.userActionBridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setUserAction_, v2);
}

id CAFHistoricalNotificationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
}

uint64_t CAFHistoricalNotificationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFHistoricalNotificationObservable.userVisibleLabel.getter()
{
  CAFHistoricalNotificationObservable.userVisibleLabel.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFHistoricalNotificationObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFHistoricalNotificationObservable.userVisibleDescription.getter()
{
  CAFHistoricalNotificationObservable.userVisibleLabel.getter();
}

void CAFHistoricalNotificationObservable.$userVisibleDescription.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleDescription, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFHistoricalNotificationObservable.userVisibleFullDescription.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFHistoricalNotificationObservable.$userVisibleFullDescription.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleFullDescription, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.timestamp.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_37();
  return OUTLINED_FUNCTION_112();
}

void CAFHistoricalNotificationObservable.$timestamp.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__timestamp, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void key path getter for CAFHistoricalNotificationObservable.symbolName : CAFHistoricalNotificationObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CAFHistoricalNotificationObservable.symbolName.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.symbolName : CAFHistoricalNotificationObservable()
{
  swift_bridgeObjectRetain();
  return CAFHistoricalNotificationObservable.symbolName.setter();
}

void CAFHistoricalNotificationObservable.symbolName.getter()
{
  void *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFHistoricalNotificationObservable.symbolName.setter()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_31_0();
  return specialized static SafePublished.subscript.setter(v2);
}

void CAFHistoricalNotificationObservable.symbolName.modify(_QWORD *a1)
{
  void *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  v3[3] = swift_getKeyPath();
  v3[4] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1);
  *v3 = v4;
  v3[1] = v5;
  OUTLINED_FUNCTION_24_1();
}

void CAFHistoricalNotificationObservable.symbolName.modify(uint64_t a1, char a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a1;
  v4 = *(id *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_27_2();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_27_2();
  }
  free(v3);
}

uint64_t CAFHistoricalNotificationObservable.$symbolName.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFHistoricalNotificationObservable.notificationSeverity : CAFHistoricalNotificationObservable(_BYTE *a1@<X8>)
{
  char v2;

  CAFHistoricalNotificationObservable.notificationSeverity.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.notificationSeverity : CAFHistoricalNotificationObservable(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(*a1);
}

void CAFHistoricalNotificationObservable.notificationSeverity.getter()
{
  CAFHistoricalNotificationObservable.notificationSeverity.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_15_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_14_0((uint64_t)&v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_13_0();
}

uint64_t CAFHistoricalNotificationObservable.notificationSeverity.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2374CCD48, (uint64_t)&unk_2374CCD70, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFHistoricalNotificationObservable.notificationSeverity.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = (_BYTE)v1;
  OUTLINED_FUNCTION_81();
}

void CAFHistoricalNotificationObservable.notificationSeverity.modify(uint64_t a1, uint64_t a2)
{
  CAFHistoricalNotificationObservable.notificationSeverity.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFHistoricalNotificationObservable.$notificationSeverity.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__notificationSeverity, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationUserActions.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFHistoricalNotificationObservable.$historicalNotificationUserActions.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__historicalNotificationUserActions, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void key path getter for CAFHistoricalNotificationObservable.userDismissible : CAFHistoricalNotificationObservable(_BYTE *a1@<X8>)
{
  char v2;

  CAFHistoricalNotificationObservable.userDismissible.getter();
  *a1 = v2;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.userDismissible : CAFHistoricalNotificationObservable(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.userDismissible.setter(*a1);
}

void CAFHistoricalNotificationObservable.userDismissible.getter()
{
  CAFHistoricalNotificationObservable.notificationSeverity.getter();
}

uint64_t CAFHistoricalNotificationObservable.userDismissible.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2374CCD90, (uint64_t)&unk_2374CCDB8, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFHistoricalNotificationObservable.notificationSeverity.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t, uint64_t))
{
  void *v4;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  return a4(a1, v4, KeyPath, v7);
}

void CAFHistoricalNotificationObservable.userDismissible.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = (_BYTE)v1;
  OUTLINED_FUNCTION_81();
}

void CAFHistoricalNotificationObservable.userDismissible.modify(uint64_t a1, uint64_t a2)
{
  CAFHistoricalNotificationObservable.notificationSeverity.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

void CAFHistoricalNotificationObservable.notificationSeverity.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, id, _QWORD, _QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v3);
}

uint64_t CAFHistoricalNotificationObservable.$userDismissible.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userDismissible, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFHistoricalNotificationObservable.hidden : CAFHistoricalNotificationObservable(_BYTE *a1@<X8>)
{
  char v2;

  CAFHistoricalNotificationObservable.hidden.getter();
  *a1 = v2 & 1;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.hidden : CAFHistoricalNotificationObservable(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.hidden.setter(*a1);
}

void CAFHistoricalNotificationObservable.hidden.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_15_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_14_0((uint64_t)&v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_13_0();
}

uint64_t CAFHistoricalNotificationObservable.hidden.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFHistoricalNotificationObservable.hidden.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = (_BYTE)v1;
  OUTLINED_FUNCTION_81();
}

void CAFHistoricalNotificationObservable.hidden.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFHistoricalNotificationObservable.$hidden.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFHistoricalNotificationObservable.userAction.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFHistoricalNotificationObservable.userAction.setter);
}

uint64_t CAFHistoricalNotificationObservable.userAction.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned __int8 *v3;
  int v4;
  int v5;
  _BYTE v7[32];
  id v8;

  OUTLINED_FUNCTION_15_0();
  v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v8;
  v2 = (uint64_t (*)(uint64_t, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v5 = v3[1];
  OUTLINED_FUNCTION_14_0((uint64_t)v7, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4 | (v5 << 8);
}

uint64_t CAFHistoricalNotificationObservable.userAction.setter(__int16 a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1 & 0x1FF, v1, KeyPath, v4);
}

void CAFHistoricalNotificationObservable.userAction.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_14_0(v0, v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

void CAFHistoricalNotificationObservable.userAction.modify(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88) | (*(unsigned __int8 *)(*(_QWORD *)a1 + 89) << 8), *(id *)(*(_QWORD *)a1 + 64), v1[9], v1[10]);
  free(v1);
}

uint64_t CAFHistoricalNotificationObservable.$userAction.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userAction, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFHistoricalNotificationObservable.name.getter()
{
  CAFHistoricalNotificationObservable.userVisibleLabel.getter();
}

void CAFHistoricalNotificationObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable._description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;

  v53._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v53._countAndFlagsBits = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_4(v4, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v5)
  {
    CAFHistoricalNotificationObservable.userVisibleLabel.getter();
    v6 = v5;
  }
  v52 = v6;
  OUTLINED_FUNCTION_14_4(v5, sel_registeredForUserVisibleDescription);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v7)
  {
    CAFHistoricalNotificationObservable.userVisibleDescription.getter();
    v8 = v7;
  }
  v51 = v8;
  OUTLINED_FUNCTION_14_4(v7, sel_registeredForUserVisibleFullDescription);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v9)
  {
    CAFHistoricalNotificationObservable.userVisibleFullDescription.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v9 = OUTLINED_FUNCTION_22_4();
    v10 = v9;
  }
  v50 = v10;
  v11 = OUTLINED_FUNCTION_14_4(v9, sel_registeredForTimestamp);
  v12 = 0x73696765726E753CLL;
  if ((_DWORD)v11)
  {
    CAFHistoricalNotificationObservable.timestamp.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitDuration> and conformance Measurement<A>();
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = OUTLINED_FUNCTION_31_0();
    v11 = (id)v14(v13);
  }
  v15 = (uint64_t)OUTLINED_FUNCTION_14_4((uint64_t)v11, sel_registeredForSymbolName);
  v16 = 0x73696765726E753CLL;
  v17 = (void *)0xEE003E6465726574;
  if ((_DWORD)v15)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    specialized static SafePublished.subscript.getter(v0);
    v16 = v18;
    v17 = v19;
    OUTLINED_FUNCTION_27();
    v15 = OUTLINED_FUNCTION_25();
  }
  OUTLINED_FUNCTION_14_4(v15, sel_registeredForNotificationSeverity);
  OUTLINED_FUNCTION_46_2();
  v21 = (void *)0xEE003E6465726574;
  if ((_DWORD)v20)
  {
    CAFHistoricalNotificationObservable.notificationSeverity.getter();
    v20 = (id)NSStringFromNotificationSeverity();
    if (v20)
    {
      v22 = v20;
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v23;

    }
    else
    {
      v21 = (void *)0xE900000000000029;
      v3 = 0x6E776F6E6B6E7528;
    }
  }
  v47 = v3;
  v49 = v12;
  OUTLINED_FUNCTION_14_4((uint64_t)v20, sel_registeredForHistoricalNotificationUserActions);
  OUTLINED_FUNCTION_2_4();
  v26 = (void *)0xEE003E6465726574;
  if ((_DWORD)v24)
  {
    CAFHistoricalNotificationObservable.historicalNotificationUserActions.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFHistoricalNotificationUserActions?);
    v24 = OUTLINED_FUNCTION_22_4();
    v25 = v24;
    v26 = v27;
  }
  v46 = v25;
  v48 = v16;
  OUTLINED_FUNCTION_14_4(v24, sel_registeredForUserDismissible);
  OUTLINED_FUNCTION_46_2();
  v29 = (void *)0xEE003E6465726574;
  if ((_DWORD)v28)
  {
    CAFHistoricalNotificationObservable.userDismissible.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v28 = OUTLINED_FUNCTION_22_4();
    v3 = v28;
    v29 = v30;
  }
  v31 = (uint64_t)OUTLINED_FUNCTION_14_4(v28, sel_registeredForHidden);
  v32 = 0x73696765726E753CLL;
  v33 = (void *)0xEE003E6465726574;
  if ((_DWORD)v31)
  {
    CAFHistoricalNotificationObservable.hidden.getter();
    if ((v31 & 1) != 0)
      v32 = 1702195828;
    else
      v32 = 0x65736C6166;
    if ((v31 & 1) != 0)
      v33 = (void *)0xE400000000000000;
    else
      v33 = (void *)0xE500000000000000;
  }
  if (OUTLINED_FUNCTION_14_4(v31, sel_registeredForUserAction))
  {
    CAFHistoricalNotificationObservable.userAction.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v53._countAndFlagsBits = OUTLINED_FUNCTION_22_4();
    v53._object = v34;
  }
  v54 = static String._createEmpty(withInitialCapacity:)(271);
  v35._countAndFlagsBits = 0xD000000000000026;
  v35._object = (void *)0x80000002374E17B0;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000015, (uint64_t)" { userVisibleLabel: ");
  OUTLINED_FUNCTION_28_3(v52);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_128(0xD00000000000001ALL, (uint64_t)", userVisibleDescription: ");
  OUTLINED_FUNCTION_28_3(v51);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_128(0xD00000000000001ELL, (uint64_t)", userVisibleFullDescription: ");
  OUTLINED_FUNCTION_28_3(v50);
  OUTLINED_FUNCTION_56();
  v36._countAndFlagsBits = 0x7473656D6974202CLL;
  v36._object = (void *)0xED0000203A706D61;
  String.append(_:)(v36);
  OUTLINED_FUNCTION_28_3(v49);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_6_2(0x6C6F626D7973202CLL, 0x656D614Eu);
  v37._countAndFlagsBits = v48;
  v37._object = v17;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", notificationSeverity: ");
  v38._countAndFlagsBits = v47;
  v38._object = v21;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000025, (uint64_t)", historicalNotificationUserActions: ");
  v39._countAndFlagsBits = v46;
  v39._object = v26;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._object = (void *)0x80000002374E1580;
  v40._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v40);
  v41._countAndFlagsBits = v3;
  v41._object = v29;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0x6E6564646968202CLL;
  v42._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v42);
  v43._countAndFlagsBits = v32;
  v43._object = v33;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2(0x634172657375202CLL, 0x6E6F6974u);
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 4095264;
  v44._object = (void *)0xE300000000000000;
  String.append(_:)(v44);
  return v54;
}

void CAFHistoricalNotificationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    OUTLINED_FUNCTION_71_0();
  }
  else
  {
    CAFHistoricalNotificationObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFHistoricalNotificationObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_24_1();
}

void CAFHistoricalNotificationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFHistoricalNotificationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFHistoricalNotificationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  objc_super v31;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleDescription;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_19_1();
  v11 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleFullDescription;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, String?>);
  OUTLINED_FUNCTION_127();
  v12 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v11] = specialized SafePublished.init(observedValuekeypath:)(v12);
  v13 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__timestamp;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, Measurement<NSUnitDuration>>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__symbolName;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, String>);
  OUTLINED_FUNCTION_127();
  v16 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v15] = specialized SafePublished.init(observedValuekeypath:)(v16);
  v17 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__notificationSeverity;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, CAFNotificationSeverity>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v17] = v18;
  v19 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__historicalNotificationUserActions;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, CAFHistoricalNotificationUserActions?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v19] = v20;
  v21 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userDismissible;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v22 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v21] = specialized SafePublished.init(observedValuekeypath:)(v22);
  v23 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__hidden;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v24 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v23] = specialized SafePublished.init(observedValuekeypath:)(v24);
  v25 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v25] = v26;
  v27 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v27] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed] = a1;
  v28 = a1;

  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for CAFHistoricalNotificationObservable();
  v29 = objc_msgSendSuper2(&v31, sel_init);
  objc_msgSend(v28, sel_registerObserver_, v29);

  return v29;
}

void CAFHistoricalNotificationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFHistoricalNotificationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFHistoricalNotificationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFHistoricalNotificationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFHistoricalNotificationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFHistoricalNotificationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFHistoricalNotificationObservable(id *a1@<X8>)
{
  *a1 = CAFHistoricalNotificationObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFHistoricalNotificationObservable(void **a1)
{
  CAFHistoricalNotificationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFHistoricalNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFHistoricalNotificationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)()
{
  return CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleDescription:)()
{
  return CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleFullDescription:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateTimestamp:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

void CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateSymbolName:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_71_0();
  v0 = OUTLINED_FUNCTION_31_0();
  specialized SafePublished.value.setter(v0, v1);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

void CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateNotificationSeverity:)()
{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateHistoricalNotificationUserActions:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserDismissible:)()
{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateHidden:)()
{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserAction:)()
{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateName:)()
{
  return CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)();
}

void CAFHistoricalNotificationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFHistoricalNotificationObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFHistoricalNotificationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23746E6A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_20_0();
  CAFHistoricalNotificationObservable.symbolName.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_11();
}

void sub_23746E6CC()
{
  _BYTE *v0;
  char v1;

  OUTLINED_FUNCTION_20_0();
  CAFHistoricalNotificationObservable.notificationSeverity.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_23746E6EC(unsigned __int8 *a1)
{
  CAFHistoricalNotificationObservable.notificationSeverity.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23746E70C()
{
  _BYTE *v0;
  char v1;

  OUTLINED_FUNCTION_20_0();
  CAFHistoricalNotificationObservable.userDismissible.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_23746E72C(unsigned __int8 *a1)
{
  CAFHistoricalNotificationObservable.userDismissible.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23746E74C()
{
  _BYTE *v0;
  char v1;

  OUTLINED_FUNCTION_20_0();
  CAFHistoricalNotificationObservable.hidden.getter();
  *v0 = v1 & 1;
  OUTLINED_FUNCTION_11();
}

void sub_23746E770(unsigned __int8 *a1)
{
  CAFHistoricalNotificationObservable.hidden.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23746E798(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_userVisibleLabel, a2);
}

char *keypath_get_selector_userVisibleDescription()
{
  return sel_userVisibleDescription;
}

void sub_23746E7C0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_userVisibleDescription, a2);
}

char *keypath_get_selector_userVisibleFullDescription()
{
  return sel_userVisibleFullDescription;
}

void key path getter for CAFHistoricalNotification.userVisibleFullDescription : CAFHistoricalNotification(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_userVisibleFullDescription);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

char *keypath_get_selector_timestamp()
{
  return sel_timestamp;
}

void key path getter for CAFHistoricalNotification.timestamp : CAFHistoricalNotification(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_timestamp);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitDuration);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_23746E8CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_symbolName, a2);
}

void key path setter for CAFHistoricalNotification.symbolName : CAFHistoricalNotification(_QWORD *a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  v3 = (id)MEMORY[0x23B811BC4](*a1, a1[1]);
  objc_msgSend(v2, sel_setSymbolName_, v3);

}

char *keypath_get_selector_notificationSeverity()
{
  return sel_notificationSeverity;
}

void sub_23746E948(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_notificationSeverity);
  OUTLINED_FUNCTION_11();
}

id sub_23746E974(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setNotificationSeverity_, *a1);
}

char *keypath_get_selector_historicalNotificationUserActions()
{
  return sel_historicalNotificationUserActions;
}

id key path getter for CAFHistoricalNotification.historicalNotificationUserActions : CAFHistoricalNotification@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_historicalNotificationUserActions);
  *a2 = result;
  return result;
}

void sub_23746E9D0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFHistoricalNotification.userDismissibleBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23746E9F0(char *a1)
{
  CAFHistoricalNotification.userDismissibleBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_hidden()
{
  return sel_hidden;
}

void sub_23746EA1C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_hidden);
  OUTLINED_FUNCTION_11();
}

id sub_23746EA48(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHidden_, *a1);
}

uint64_t key path getter for CAFHistoricalNotification.userActionBridged : CAFHistoricalNotification@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFHistoricalNotification.userActionBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_23746EA90(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFHistoricalNotification.userActionBridged.setter);
}

void sub_23746EAAC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFHistoricalNotificationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFHistoricalNotification()
{
  lazy protocol witness table accessor for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, (uint64_t)&protocol conformance descriptor for CAFHistoricalNotificationObservable);
}

unint64_t lazy protocol witness table accessor for type CAFHistoricalNotification and conformance CAFHistoricalNotification()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFHistoricalNotification and conformance CAFHistoricalNotification;
  if (!lazy protocol witness table cache variable for type CAFHistoricalNotification and conformance CAFHistoricalNotification)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFHistoricalNotification);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFHistoricalNotification, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFHistoricalNotification and conformance CAFHistoricalNotification);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFHistoricalNotificationObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, (uint64_t)&protocol conformance descriptor for CAFHistoricalNotificationObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFHistoricalNotificationObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFHistoricalNotificationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userVisibleDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userVisibleDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userVisibleFullDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userVisibleFullDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.timestamp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$timestamp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.symbolName.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.symbolName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.notificationSeverity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.notificationSeverity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.notificationSeverity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$notificationSeverity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.historicalNotificationUserActions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$historicalNotificationUserActions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userDismissible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userDismissible.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userDismissible.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userDismissible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.hidden.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.hidden.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))() & 0x1FF;
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userAction.setter(__int16 a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1C8))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userAction.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t partial apply for closure #1 in CAFHistoricalNotificationObservable.resetCachedDescription()()
{
  return CAFHistoricalNotificationObservable.cachedDescription.setter(0, 0);
}

id OUTLINED_FUNCTION_14_4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_22_4()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  uint64_t v0;

  return specialized static SafePublished.subscript.setter(v0);
}

void OUTLINED_FUNCTION_41_2()
{
  id *v0;

}

void CAFCameraButton.buttonActionBridged.getter()
{
  CAFCameraButton.buttonActionBridged.getter((const char **)&selRef_hasButtonAction, (const char **)&selRef_buttonAction);
}

id CAFCameraButton.buttonActionBridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setButtonAction_, v2);
}

uint64_t CAFCameraButton.disabledBridged.getter()
{
  return CAFCameraButton.disabledBridged.getter((const char **)&selRef_hasDisabled, (const char **)&selRef_disabled);
}

uint64_t CAFCameraButton.selectedBridged.getter()
{
  return CAFCameraButton.disabledBridged.getter((const char **)&selRef_hasSelected, (const char **)&selRef_selected);
}

uint64_t CAFCameraButton.hiddenBridged.getter()
{
  return CAFCameraButton.disabledBridged.getter((const char **)&selRef_hasHidden, (const char **)&selRef_hidden);
}

uint64_t CAFCameraButton.disabledBridged.getter(const char **a1, const char **a2)
{
  id v3;

  v3 = OUTLINED_FUNCTION_9((uint64_t)a1, *a1);
  if ((_DWORD)v3)
    return (uint64_t)OUTLINED_FUNCTION_9((uint64_t)v3, *a2);
  else
    return 2;
}

void CAFCameraButton.selectedEntryIndexBridged.getter()
{
  CAFCameraButton.buttonActionBridged.getter((const char **)&selRef_hasSelectedEntryIndex, (const char **)&selRef_selectedEntryIndex);
}

void CAFCameraButton.buttonActionBridged.getter(const char **a1, const char **a2)
{
  id v3;

  v3 = OUTLINED_FUNCTION_9((uint64_t)a1, *a1);
  if ((_DWORD)v3)
    OUTLINED_FUNCTION_9((uint64_t)v3, *a2);
  OUTLINED_FUNCTION_56_0();
}

id CAFCameraButton.selectedEntryIndexBridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setSelectedEntryIndex_, v2);
}

id CAFCameraButtonObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
}

uint64_t CAFCameraButtonObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCameraButtonObservable.buttonAction.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFCameraButtonObservable.buttonAction.setter);
}

uint64_t CAFCameraButtonObservable.buttonAction.getter()
{
  return CAFCameraButtonObservable.buttonAction.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(_BYTE *, _QWORD);
  unsigned __int8 *v3;
  int v4;
  int v5;
  _BYTE v7[32];
  id v8;

  OUTLINED_FUNCTION_15_0();
  v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v8;
  v2 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v5 = v3[1];
  v2(v7, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4 | (v5 << 8);
}

uint64_t CAFCameraButtonObservable.buttonAction.setter(__int16 a1)
{
  return CAFAutoClimateControlObservable.level.setter(a1, (uint64_t)&unk_2374CD1C0, (uint64_t)&unk_2374CD1E8, (uint64_t (*)(_QWORD, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFCameraButtonObservable.buttonAction.modify()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t (*v6)(uint64_t, _QWORD);

  v3 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v3);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  *(_QWORD *)(v0 + 56) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_4_4(v6);
  swift_release();
  OUTLINED_FUNCTION_37();

  *(_BYTE *)(v0 + 88) = (_BYTE)v4;
  *(_BYTE *)(v0 + 89) = v2;
  OUTLINED_FUNCTION_81();
}

void CAFCameraButtonObservable.buttonAction.modify(uint64_t a1, uint64_t a2)
{
  CAFAutoClimateControlObservable.level.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFCameraButtonObservable.$buttonAction.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__buttonAction, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.contentURLAction.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFCameraButtonObservable.$contentURLAction.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__contentURLAction, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFCameraButtonObservable.$sortOrder.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.symbolName.getter()
{
  CAFCameraButtonObservable.symbolName.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFCameraButtonObservable.$symbolName.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.disabled.getter()
{
  CAFCameraButtonObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFCameraButtonObservable.$disabled.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.selected.getter()
{
  CAFCameraButtonObservable.disabled.getter();
}

void CAFCameraButtonObservable.$selected.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selected, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.hidden.getter()
{
  CAFCameraButtonObservable.disabled.getter();
}

void CAFCameraButtonObservable.$hidden.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.identifier.getter()
{
  CAFCameraButtonObservable.symbolName.getter();
}

void CAFCameraButtonObservable.$identifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.childrenIdentifiers.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFCameraButtonObservable.$childrenIdentifiers.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__childrenIdentifiers, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFCameraButtonObservable.selectedEntryIndex : CAFCameraButtonObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCameraButtonObservable.selectedEntryIndex.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFCameraButtonObservable.selectedEntryIndex : CAFCameraButtonObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFCameraButtonObservable.selectedEntryIndex.setter);
}

uint64_t CAFCameraButtonObservable.selectedEntryIndex.getter()
{
  return CAFCameraButtonObservable.buttonAction.getter();
}

uint64_t CAFCameraButtonObservable.selectedEntryIndex.setter(__int16 a1)
{
  return CAFAutoClimateControlObservable.level.setter(a1, (uint64_t)&unk_2374CD208, (uint64_t)&unk_2374CD230, (uint64_t (*)(_QWORD, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFCameraButtonObservable.selectedEntryIndex.modify()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t (*v6)(uint64_t, _QWORD);

  v3 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v3);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  *(_QWORD *)(v0 + 56) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_4_4(v6);
  swift_release();
  OUTLINED_FUNCTION_37();

  *(_BYTE *)(v0 + 88) = (_BYTE)v4;
  *(_BYTE *)(v0 + 89) = v2;
  OUTLINED_FUNCTION_81();
}

void CAFCameraButtonObservable.selectedEntryIndex.modify(uint64_t a1, uint64_t a2)
{
  CAFAutoClimateControlObservable.level.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFCameraButtonObservable.$selectedEntryIndex.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selectedEntryIndex, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFCameraButtonObservable.name.getter()
{
  CAFCameraButtonObservable.symbolName.getter();
}

void CAFCameraButtonObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;

  v53._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v53._countAndFlagsBits = v0;
  OUTLINED_FUNCTION_14_4(v1, sel_registeredForButtonAction);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v2)
  {
    CAFCameraButtonObservable.buttonAction.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
    v2 = OUTLINED_FUNCTION_22_4();
    v3 = v2;
  }
  v52 = v3;
  OUTLINED_FUNCTION_14_4(v2, sel_registeredForContentURLAction);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v4)
  {
    CAFCameraButtonObservable.contentURLAction.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v4 = OUTLINED_FUNCTION_22_4();
    v5 = v4;
  }
  v51 = v5;
  OUTLINED_FUNCTION_14_4(v4, sel_registeredForSortOrder);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v6)
  {
    CAFCameraButtonObservable.sortOrder.getter();
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
  }
  v50 = v7;
  OUTLINED_FUNCTION_14_4(v6, sel_registeredForSymbolName);
  OUTLINED_FUNCTION_2_4();
  v10 = (void *)0xEE003E6465726574;
  if ((_DWORD)v8)
  {
    CAFCameraButtonObservable.symbolName.getter();
    v9 = v8;
    v10 = v11;
  }
  v49 = v9;
  OUTLINED_FUNCTION_14_4(v8, sel_registeredForDisabled);
  OUTLINED_FUNCTION_2_4();
  v14 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    CAFCameraButtonObservable.disabled.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v12 = OUTLINED_FUNCTION_22_4();
    v13 = v12;
    v14 = v15;
  }
  v48 = v13;
  OUTLINED_FUNCTION_14_4(v12, sel_registeredForSelected);
  OUTLINED_FUNCTION_2_4();
  v18 = (void *)0xEE003E6465726574;
  if ((_DWORD)v16)
  {
    CAFCameraButtonObservable.selected.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v16 = OUTLINED_FUNCTION_22_4();
    v17 = v16;
    v18 = v19;
  }
  v47 = v17;
  OUTLINED_FUNCTION_14_4(v16, sel_registeredForHidden);
  OUTLINED_FUNCTION_2_4();
  v22 = (void *)0xEE003E6465726574;
  if ((_DWORD)v20)
  {
    CAFCameraButtonObservable.hidden.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v20 = OUTLINED_FUNCTION_22_4();
    v21 = v20;
    v22 = v23;
  }
  v46 = v21;
  OUTLINED_FUNCTION_14_4(v20, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_2_4();
  v26 = (void *)0xEE003E6465726574;
  if ((_DWORD)v24)
  {
    CAFCameraButtonObservable.identifier.getter();
    v25 = v24;
    v26 = v27;
  }
  v45 = v25;
  v28 = (uint64_t)OUTLINED_FUNCTION_14_4(v24, sel_registeredForChildrenIdentifiers);
  v29 = 0x73696765726E753CLL;
  v30 = (void *)0xEE003E6465726574;
  if ((_DWORD)v28)
  {
    CAFCameraButtonObservable.childrenIdentifiers.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    v28 = OUTLINED_FUNCTION_22_4();
    v29 = v28;
    v30 = v31;
  }
  if (OUTLINED_FUNCTION_14_4(v28, sel_registeredForSelectedEntryIndex))
  {
    CAFCameraButtonObservable.selectedEntryIndex.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v53._countAndFlagsBits = OUTLINED_FUNCTION_22_4();
    v53._object = v32;
  }
  v54 = static String._createEmpty(withInitialCapacity:)(210);
  v33._countAndFlagsBits = 0xD00000000000001CLL;
  v33._object = (void *)0x80000002374E1930;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)();
  v34._object = (void *)0x80000002374E03E0;
  v34._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v34);
  OUTLINED_FUNCTION_28_3(v52);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_128(0xD000000000000014, (uint64_t)", contentURLAction: ");
  OUTLINED_FUNCTION_28_3(v51);
  OUTLINED_FUNCTION_56();
  v35._countAndFlagsBits = 0x724F74726F73202CLL;
  v35._object = (void *)0xED0000203A726564;
  String.append(_:)(v35);
  OUTLINED_FUNCTION_28_3(v50);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_6_2(0x6C6F626D7973202CLL, 0x656D614Eu);
  v36._countAndFlagsBits = v49;
  v36._object = v10;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_3(0x6C6261736964202CLL);
  v37._countAndFlagsBits = v48;
  v37._object = v14;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_3(0x7463656C6573202CLL);
  v38._countAndFlagsBits = v47;
  v38._object = v18;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 0x6E6564646968202CLL;
  v39._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v46;
  v40._object = v22;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2(0x69746E656469202CLL, 0x72656966u);
  v41._countAndFlagsBits = v45;
  v41._object = v26;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000017, (uint64_t)", childrenIdentifiers: ");
  v42._countAndFlagsBits = v29;
  v42._object = v30;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000016, (uint64_t)", selectedEntryIndex: ");
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 4095264;
  v43._object = (void *)0xE300000000000000;
  String.append(_:)(v43);
  return v54;
}

uint64_t CAFCameraButtonObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFCameraButtonObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFCameraButtonObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFCameraButtonObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFCameraButtonObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFCameraButtonObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  objc_super v27;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__buttonAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFCameraButtonObservable, CAFButtonAction?>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__contentURLAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, String?>);
  OUTLINED_FUNCTION_127();
  v11 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  v12 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__symbolName;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v15] = OUTLINED_FUNCTION_17_0();
  v16 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selected;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v8[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v8[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v8[v18] = OUTLINED_FUNCTION_19_1();
  v19 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__childrenIdentifiers;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, [String]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v19] = v20;
  v21 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selectedEntryIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFCameraButtonObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v21] = v22;
  v23 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v8[v23] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed] = a1;
  v24 = a1;

  v27.receiver = v8;
  v27.super_class = (Class)type metadata accessor for CAFCameraButtonObservable();
  v25 = objc_msgSendSuper2(&v27, sel_init);
  objc_msgSend(v24, sel_registerObserver_, v25);

  return v25;
}

void CAFCameraButtonObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFCameraButtonObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFCameraButtonObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCameraButtonObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCameraButtonObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFCameraButtonObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFCameraButtonObservable(id *a1@<X8>)
{
  *a1 = CAFCameraButtonObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFCameraButtonObservable(void **a1)
{
  CAFCameraButtonObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCameraButtonObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFCameraButtonObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFCameraButtonObservable.cameraButtonService(_:didUpdateButtonAction:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__buttonAction, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateContentURLAction:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSelected:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateHidden:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateIdentifier:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateChildrenIdentifiers:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFCameraButtonObservable.cameraButtonService(_:didUpdateSelectedEntryIndex:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selectedEntryIndex, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateName:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)();
}

void CAFCameraButtonObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFCameraButtonObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFCameraButtonObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void key path getter for CAFCameraButton.buttonActionBridged : CAFCameraButton(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFCameraButton.buttonActionBridged.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

uint64_t sub_2374708B8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFCameraButton.buttonActionBridged.setter);
}

char *keypath_get_selector_contentURLAction()
{
  return sel_contentURLAction;
}

void key path getter for CAFCameraButton.contentURLAction : CAFCameraButton(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_contentURLAction);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_237470948(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_sortOrder);
  OUTLINED_FUNCTION_11();
}

void sub_237470974(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_symbolName, a2);
}

void sub_237470990(_BYTE *a1@<X8>)
{
  *a1 = CAFCameraButton.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374709B4(_BYTE *a1@<X8>)
{
  *a1 = CAFCameraButton.selectedBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374709D8(_BYTE *a1@<X8>)
{
  *a1 = CAFCameraButton.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374709FC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_identifier, a2);
}

char *keypath_get_selector_childrenIdentifiers()
{
  return sel_childrenIdentifiers;
}

void key path getter for CAFCameraButton.childrenIdentifiers : CAFCameraButton(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, sel_childrenIdentifiers);
  if (v3)
  {
    v4 = v3;
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void key path getter for CAFCameraButton.selectedEntryIndexBridged : CAFCameraButton(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFCameraButton.selectedEntryIndexBridged.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

uint64_t sub_237470AC0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFCameraButton.selectedEntryIndexBridged.setter);
}

void sub_237470ADC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFCameraButtonObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCameraButton(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable, (uint64_t)&protocol conformance descriptor for CAFCameraButtonObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCameraButtonObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraButton and conformance CAFCameraButton, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFCameraButton, (uint64_t)&protocol conformance descriptor for CAFCameraButton);
}

unint64_t type metadata accessor for CAFCameraButton()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFCameraButton;
  if (!lazy cache variable for type metadata for CAFCameraButton)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCameraButton);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFCameraButtonObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable, (uint64_t)&protocol conformance descriptor for CAFCameraButtonObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFCameraButtonObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.buttonAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))() & 0x1FF;
}

uint64_t dispatch thunk of CAFCameraButtonObservable.buttonAction.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_3_5(a1, *(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0xF8));
}

uint64_t dispatch thunk of CAFCameraButtonObservable.buttonAction.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$buttonAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.contentURLAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$contentURLAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selected.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$selected.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.childrenIdentifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$childrenIdentifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selectedEntryIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))() & 0x1FF;
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selectedEntryIndex.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_3_5(a1, *(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0x198));
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selectedEntryIndex.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$selectedEntryIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 456))();
}

uint64_t partial apply for closure #1 in CAFCameraButtonObservable.resetCachedDescription()()
{
  return CAFCameraButtonObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_29_3(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xEC000000203A6465;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t CAFTypeTestMulti.testBoolBridged.getter()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasTestBool))
    return (uint64_t)objc_msgSend(v0, sel_testBool);
  else
    return 2;
}

id CAFTypeTestMulti.testBoolBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setTestBool_, a1 & 1);
}

void CAFTypeTestMulti.testUInt8Bridged.getter()
{
  CAFTypeTestMulti.testUInt8Bridged.getter((SEL *)&selRef_hasTestUInt8);
}

id CAFTypeTestMulti.testUInt8Bridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestUInt8_, v2);
}

void CAFTypeTestMulti.testUInt16Bridged.getter()
{
  CAFTypeTestMulti.testUInt16Bridged.getter((SEL *)&selRef_hasTestUInt16);
}

id CAFTypeTestMulti.testUInt16Bridged.setter(int a1)
{
  void *v1;
  unsigned __int16 v2;

  if ((a1 & 0x10000) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestUInt16_, v2);
}

void CAFTypeTestMulti.testUInt32Bridged.getter()
{
  CAFTypeTestMulti.testUInt32Bridged.getter((SEL *)&selRef_hasTestUInt32);
}

id CAFTypeTestMulti.testUInt32Bridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  if ((a1 & 0x100000000) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestUInt32_, v2);
}

id CAFTypeTestMulti.testUInt64Bridged.getter()
{
  return CAFTypeTestMulti.testUInt64Bridged.getter((SEL *)&selRef_hasTestUInt64);
}

id CAFTypeTestMulti.testUInt64Bridged.setter(uint64_t a1, char a2)
{
  void *v2;

  if ((a2 & 1) != 0)
    a1 = 0;
  return objc_msgSend(v2, sel_setTestUInt64_, a1);
}

uint64_t CAFTypeTestMulti.testInt8Bridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = objc_msgSend(v0, sel_hasTestInt8);
  v2 = v1;
  if (v1)
    LOBYTE(v1) = objc_msgSend(v0, sel_testInt8);
  return v1 | ((v2 ^ 1) << 8);
}

id CAFTypeTestMulti.testInt8Bridged.setter(__int16 a1)
{
  void *v1;
  char v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestInt8_, v2);
}

uint64_t CAFTypeTestMulti.testInt16Bridged.getter()
{
  void *v0;
  unsigned int v1;
  int v2;

  v1 = objc_msgSend(v0, sel_hasTestInt16);
  if (v1)
    v2 = (unsigned __int16)objc_msgSend(v0, sel_testInt16);
  else
    v2 = 0;
  return v2 | ((v1 ^ 1) << 16);
}

id CAFTypeTestMulti.testInt16Bridged.setter(int a1)
{
  void *v1;
  __int16 v2;

  if ((a1 & 0x10000) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestInt16_, v2);
}

void CAFTypeTestMulti.testInt32Bridged.getter()
{
  CAFTypeTestMulti.testUInt32Bridged.getter((SEL *)&selRef_hasTestInt32);
}

void CAFTypeTestMulti.testUInt32Bridged.getter(SEL *a1)
{
  const char **v1;
  id v2;

  v2 = OUTLINED_FUNCTION_57_0(a1);
  if ((_DWORD)v2)
    OUTLINED_FUNCTION_9((uint64_t)v2, *v1);
  OUTLINED_FUNCTION_56_0();
}

id CAFTypeTestMulti.testInt64Bridged.getter()
{
  return CAFTypeTestMulti.testUInt64Bridged.getter((SEL *)&selRef_hasTestInt64);
}

id CAFTypeTestMulti.testUInt64Bridged.getter(SEL *a1)
{
  void *v1;
  SEL *v2;

  if (OUTLINED_FUNCTION_57_0(a1))
    return objc_msgSend(v1, *v2);
  else
    return 0;
}

id CAFTypeTestMulti.testInt64Bridged.setter(uint64_t a1, char a2)
{
  void *v2;

  if ((a2 & 1) != 0)
    a1 = 0;
  return objc_msgSend(v2, sel_setTestInt64_, a1);
}

unint64_t CAFTypeTestMulti.testFloatBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_hasTestFloat);
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v0, sel_testFloat);
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((unint64_t)(v2 ^ 1u) << 32);
}

id CAFTypeTestMulti.testFloatBridged.setter(uint64_t a1, double a2)
{
  void *v2;

  LODWORD(a2) = a1;
  if ((a1 & 0x100000000) != 0)
    *(float *)&a2 = 0.0;
  return objc_msgSend(v2, sel_setTestFloat_, a2);
}

void CAFTypeTestMulti.testEnumBridged.getter()
{
  CAFTypeTestMulti.testUInt8Bridged.getter((SEL *)&selRef_hasTestEnum);
}

void CAFTypeTestMulti.testUInt8Bridged.getter(SEL *a1)
{
  const char **v1;
  id v2;

  v2 = OUTLINED_FUNCTION_57_0(a1);
  if ((_DWORD)v2)
    OUTLINED_FUNCTION_9((uint64_t)v2, *v1);
  OUTLINED_FUNCTION_56_0();
}

id CAFTypeTestMulti.testEnumBridged.setter(__int16 a1)
{
  void *v1;
  unsigned __int8 v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestEnum_, v2);
}

void CAFTypeTestMulti.testDimensionUnitRawValueBridged.getter()
{
  CAFTypeTestMulti.testUInt16Bridged.getter((SEL *)&selRef_hasTestDimensionUnitRawValue);
}

void CAFTypeTestMulti.testUInt16Bridged.getter(SEL *a1)
{
  const char **v1;
  id v2;

  v2 = OUTLINED_FUNCTION_57_0(a1);
  if ((_DWORD)v2)
    OUTLINED_FUNCTION_9((uint64_t)v2, *v1);
  OUTLINED_FUNCTION_56_0();
}

id CAFTypeTestMulti.testDimensionUnitRawValueBridged.setter(int a1)
{
  void *v1;
  unsigned __int16 v2;

  if ((a1 & 0x10000) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setTestDimensionUnitRawValue_, v2);
}

char *CAFTypeTestMulti.testArrayBoolBridged.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayBool);
  if (!v1)
    return 0;
  v2 = v1;
  if (!(v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_4;
    goto LABEL_15;
  }
  v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x24BEE4AF8];
  }
LABEL_4:
  v12 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v12;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x23B811D2C](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_BOOLValue);

      v11 = *(_QWORD *)(v12 + 16);
      v10 = *(_QWORD *)(v12 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      ++v5;
      *(_QWORD *)(v12 + 16) = v11 + 1;
      *(_BYTE *)(v12 + v11 + 32) = v9;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v6;
  }
  __break(1u);
  return result;
}

void CAFTypeTestMulti.testArrayBoolBridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v8 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, *(unsigned __int8 *)(a1 + v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayBool_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayBool_, 0, 0, v8);
  }

}

void CAFTypeTestMulti.testArrayUInt8Bridged.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayUInt8);
  if (!v1)
    return;
  v2 = v1;
  if (v1 >> 62)
  {
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_12;
LABEL_4:
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_unsignedCharValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayUInt8Bridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v8 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedChar_, *(unsigned __int8 *)(a1 + v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayUInt8_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayUInt8_, 0, 0, v8);
  }

}

void CAFTypeTestMulti.testArrayUInt16Bridged.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int16 v7;
  unint64_t v8;
  uint64_t v9;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayUInt16);
  if (!v1)
    return;
  v2 = v1;
  if (v1 >> 62)
  {
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_12;
LABEL_4:
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = (unsigned __int16)objc_msgSend(v5, sel_unsignedShortValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_WORD *)(v9 + 2 * v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayUInt16Bridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v8 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedShort_, *(unsigned __int16 *)(a1 + 2 * v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayUInt16_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayUInt16_, 0, 0, v8);
  }

}

void CAFTypeTestMulti.testArrayUInt32Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CAFTypeTestMulti.testArrayUInt32Bridged.getter((uint64_t)&selRef_testArrayUInt32, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t)&selRef_unsignedIntValue, a4, a5, a6, a7, a8, a9, a10);
}

{
  SEL *v10;
  uint64_t v11;
  SEL *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unsigned int v19;
  unint64_t v20;
  char v21;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_92_0(v12);
  if (!v13)
    goto LABEL_15;
  v14 = v13;
  if (!(v13 >> 62))
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_4;
LABEL_14:
    OUTLINED_FUNCTION_56();
LABEL_15:
    OUTLINED_FUNCTION_64_1();
    return;
  }
  v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15)
    goto LABEL_14;
LABEL_4:
  OUTLINED_FUNCTION_77_0();
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = 0;
    v17 = a10;
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_106_0();
      v18 = OUTLINED_FUNCTION_56_1(v14 + 8 * v16);
      v19 = objc_msgSend(v18, *v10);

      OUTLINED_FUNCTION_135_0();
      if (v21)
      {
        OUTLINED_FUNCTION_108_0(v20 > 1);
        v17 = a10;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v18;
      *(_DWORD *)(v17 + 4 * v11 + 32) = v19;
    }
    while (v15 != v16);
    goto LABEL_14;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayUInt64Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CAFTypeTestMulti.testArrayUInt64Bridged.getter((uint64_t)&selRef_testArrayUInt64, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t)&selRef_unsignedLongLongValue, a4, a5, a6, a7, a8, a9, a10);
}

{
  SEL *v10;
  uint64_t v11;
  SEL *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t v20;
  char v21;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_92_0(v12);
  if (!v13)
    goto LABEL_15;
  v14 = v13;
  if (!(v13 >> 62))
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_4;
LABEL_14:
    OUTLINED_FUNCTION_56();
LABEL_15:
    OUTLINED_FUNCTION_64_1();
    return;
  }
  v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15)
    goto LABEL_14;
LABEL_4:
  OUTLINED_FUNCTION_77_0();
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = 0;
    v17 = a10;
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_106_0();
      v18 = OUTLINED_FUNCTION_56_1(v14 + 8 * v16);
      v19 = objc_msgSend(v18, *v10);

      OUTLINED_FUNCTION_135_0();
      if (v21)
      {
        OUTLINED_FUNCTION_108_0(v20 > 1);
        v17 = a10;
      }
      ++v16;
      *(_QWORD *)(v17 + 16) = v18;
      *(_QWORD *)(v17 + 8 * v11 + 32) = v19;
    }
    while (v15 != v16);
    goto LABEL_14;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayInt8Bridged.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayInt8);
  if (!v1)
    return;
  v2 = v1;
  if (v1 >> 62)
  {
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_12;
LABEL_4:
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_charValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayInt8Bridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v8 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithChar_, *(char *)(a1 + v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayInt8_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayInt8_, 0, 0, v8);
  }

}

void CAFTypeTestMulti.testArrayInt16Bridged.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int16 v7;
  unint64_t v8;
  uint64_t v9;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayInt16);
  if (!v1)
    return;
  v2 = v1;
  if (v1 >> 62)
  {
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_12;
LABEL_4:
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = (unsigned __int16)objc_msgSend(v5, sel_shortValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_WORD *)(v9 + 2 * v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayInt16Bridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v8 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithShort_, *(__int16 *)(a1 + 2 * v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayInt16_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayInt16_, 0, 0, v8);
  }

}

void CAFTypeTestMulti.testArrayInt32Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CAFTypeTestMulti.testArrayUInt32Bridged.getter((uint64_t)&selRef_testArrayInt32, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t)&selRef_intValue, a4, a5, a6, a7, a8, a9, a10);
}

#error "2374722E4: call analysis failed (funcsize=51)"

void CAFTypeTestMulti.testArrayInt64Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CAFTypeTestMulti.testArrayUInt64Bridged.getter((uint64_t)&selRef_testArrayInt64, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t)&selRef_longLongValue, a4, a5, a6, a7, a8, a9, a10);
}

#error "2374724C4: call analysis failed (funcsize=51)"

char *CAFTypeTestMulti.testArrayFloatBridged.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayFloat);
  if (!v1)
    return 0;
  v2 = v1;
  if (!(v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_4;
    goto LABEL_15;
  }
  v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x24BEE4AF8];
  }
LABEL_4:
  v13 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v13;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x23B811D2C](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      objc_msgSend(v7, sel_floatValue);
      v10 = v9;

      v12 = *(_QWORD *)(v13 + 16);
      v11 = *(_QWORD *)(v13 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      ++v5;
      *(_QWORD *)(v13 + 16) = v12 + 1;
      *(_DWORD *)(v13 + 4 * v12 + 32) = v10;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v6;
  }
  __break(1u);
  return result;
}

void CAFTypeTestMulti.testArrayFloatBridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  double v8;
  id v9;
  Class isa;
  uint64_t v11;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v11 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        v6 = *(_DWORD *)(a1 + 4 * v4 + 32);
        v7 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        LODWORD(v8) = v6;
        objc_msgSend(v7, sel_initWithFloat_, v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayFloat_, isa, isa, v11);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayFloat_, 0, 0, v11);
  }

}

id CAFTypeTestMultiObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
}

uint64_t CAFTypeTestMultiObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFTypeTestMultiObservable.userVisibleLabel.getter()
{
  CAFTypeTestMultiObservable.userVisibleLabel.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFTypeTestMultiObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testBool : CAFTypeTestMultiObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testBool : CAFTypeTestMultiObservable(unsigned __int8 *a1)
{
  return CAFTypeTestMultiObservable.testBool.setter(*a1);
}

uint64_t CAFTypeTestMultiObservable.testBool.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];
  void *v15;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v15;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  v4 = *v3;
  OUTLINED_FUNCTION_14_0((uint64_t)v14, v2);
  OUTLINED_FUNCTION_37();
  v5 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_129(v5, v6, v7, v8, v9, v10, v11, v12, v14[0], v14[1], v14[2], v14[3], v15);
  return v4;
}

uint64_t CAFTypeTestMultiObservable.testBool.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFTypeTestMultiObservable.testBool.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestMultiObservable.testBool.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFTypeTestMultiObservable.$testBool.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestMultiObservable.testUInt8.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMultiObservable.testUInt8.setter);
}

void CAFTypeTestMultiObservable.testUInt8.getter()
{
  CAFTypeTestMultiObservable.testUInt8.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  _BYTE v3[32];
  id v4;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_14_0((uint64_t)v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_101_0();
}

uint64_t CAFTypeTestMultiObservable.testUInt8.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_66_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_99_0();
  return OUTLINED_FUNCTION_28_4(v0, v1, v2, v3, v4);
}

void CAFTypeTestMultiObservable.testUInt8.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

{
  void (*v0)(_QWORD, id, _QWORD, _QWORD);
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_115_0();
  v0(*(unsigned __int8 *)(v2 + 88) | (*(unsigned __int8 *)(v1 + 89) << 8), *(id *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  OUTLINED_FUNCTION_37_4((void *)v1);
}

uint64_t CAFTypeTestMultiObservable.$testUInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestMultiObservable.testUInt16.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMultiObservable.testUInt16.setter);
}

void CAFTypeTestMultiObservable.testUInt16.getter()
{
  CAFTypeTestMultiObservable.testUInt16.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  _BYTE v3[32];
  id v4;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_14_0((uint64_t)v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_101_0();
}

uint64_t CAFTypeTestMultiObservable.testUInt16.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_66_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_99_0();
  return OUTLINED_FUNCTION_28_4(v0, v1, v2, v3, v4);
}

void CAFTypeTestMultiObservable.testUInt16.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  __int16 *v5;
  __int16 v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 2);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_WORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

{
  void (*v0)(_QWORD, id, _QWORD, _QWORD);
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_115_0();
  v0(*(unsigned __int16 *)(v2 + 88) | (*(unsigned __int8 *)(v1 + 90) << 16), *(id *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  OUTLINED_FUNCTION_37_4((void *)v1);
}

uint64_t CAFTypeTestMultiObservable.$testUInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestMultiObservable.testUInt32.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMultiObservable.testUInt32.setter);
}

unint64_t CAFTypeTestMultiObservable.testUInt32.getter()
{
  return CAFTypeTestMultiObservable.testUInt32.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned int *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[4];
  void *v16;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v16 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v16;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  v4 = *v3;
  v5 = *((_BYTE *)v3 + 4);
  OUTLINED_FUNCTION_14_0((uint64_t)v15, v2);
  OUTLINED_FUNCTION_37();
  v6 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_129(v6, v7, v8, v9, v10, v11, v12, v13, v15[0], v15[1], v15[2], v15[3], v16);
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t CAFTypeTestMultiObservable.testUInt32.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_66_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_99_0();
  return OUTLINED_FUNCTION_28_4(v0, v1, v2, v3, v4);
}

void CAFTypeTestMultiObservable.testUInt32.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int *v5;
  int v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 4);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_DWORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

{
  void (*v0)(unint64_t, id, _QWORD, _QWORD);
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_115_0();
  v0(*(unsigned int *)(v2 + 88) | ((unint64_t)*(unsigned __int8 *)(v1 + 92) << 32), *(id *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  OUTLINED_FUNCTION_37_4((void *)v1);
}

uint64_t CAFTypeTestMultiObservable.$testUInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testUInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = CAFTypeTestMultiObservable.testUInt64.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt64 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testUInt64.setter();
}

uint64_t CAFTypeTestMultiObservable.testUInt64.getter()
{
  return CAFTypeTestMultiObservable.testUInt64.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];
  void *v15;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v15;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  v4 = *v3;
  OUTLINED_FUNCTION_14_0((uint64_t)v14, v2);
  OUTLINED_FUNCTION_37();
  v5 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_129(v5, v6, v7, v8, v9, v10, v11, v12, v14[0], v14[1], v14[2], v14[3], v15);
  return v4;
}

uint64_t CAFTypeTestMultiObservable.testUInt64.setter()
{
  return CAFTypeTestMultiObservable.testUInt64.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t (*v10)(uint64_t, uint64_t, id, uint64_t, uint64_t);

  OUTLINED_FUNCTION_138_0();
  v10 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6 & 1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_134_0();
  v8 = OUTLINED_FUNCTION_72_0();
  return v10(v5, v7, v8, v0, v3);
}

void CAFTypeTestMultiObservable.testUInt64.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v2 = OUTLINED_FUNCTION_128_0();
  OUTLINED_FUNCTION_127_0((uint64_t)v2);
  *(_QWORD *)(v0 + 88) = swift_getKeyPath();
  *(_QWORD *)(v0 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  *(_QWORD *)(v0 + 72) = v3;
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  OUTLINED_FUNCTION_25_5(v5);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_QWORD *)(v0 + 56) = v7;
  *(_BYTE *)(v0 + 64) = v8;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestMultiObservable.testUInt64.modify(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.testUInt64.modify(a1, a2, (void (*)(_QWORD, _QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFTypeTestMultiObservable.$testUInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testInt8 : CAFTypeTestMultiObservable(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestMultiObservable.testInt8.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void key path setter for CAFTypeTestMultiObservable.testInt8 : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMultiObservable.testInt8.setter);
}

void key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(*a1 | (a1[1] << 8));
  OUTLINED_FUNCTION_89();
}

void CAFTypeTestMultiObservable.testInt8.getter()
{
  CAFTypeTestMultiObservable.testUInt8.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt8.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestMultiObservable.testInt8.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestMultiObservable.$testInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testInt16 : CAFTypeTestMultiObservable(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestMultiObservable.testInt16.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void key path setter for CAFTypeTestMultiObservable.testInt16 : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMultiObservable.testInt16.setter);
}

void key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(*a1 | (*((unsigned __int8 *)a1 + 2) << 16));
  OUTLINED_FUNCTION_89();
}

void CAFTypeTestMultiObservable.testInt16.getter()
{
  CAFTypeTestMultiObservable.testUInt16.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt16.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestMultiObservable.testInt16.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  __int16 *v5;
  __int16 v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 2);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_WORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestMultiObservable.$testInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestMultiObservable.testInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestMultiObservable.testInt32.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void key path setter for CAFTypeTestMultiObservable.testInt32 : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMultiObservable.testInt32.setter);
}

void key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unint64_t))
{
  a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
  OUTLINED_FUNCTION_89();
}

unint64_t CAFTypeTestMultiObservable.testInt32.getter()
{
  return CAFTypeTestMultiObservable.testUInt32.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt32.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestMultiObservable.testInt32.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int *v5;
  int v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 4);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_DWORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestMultiObservable.$testInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = CAFTypeTestMultiObservable.testInt64.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testInt64 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testInt64.setter();
}

uint64_t CAFTypeTestMultiObservable.testInt64.getter()
{
  return CAFTypeTestMultiObservable.testUInt64.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt64.setter()
{
  return CAFTypeTestMultiObservable.testUInt64.setter();
}

void CAFTypeTestMultiObservable.testInt64.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v2 = OUTLINED_FUNCTION_128_0();
  OUTLINED_FUNCTION_127_0((uint64_t)v2);
  *(_QWORD *)(v0 + 88) = swift_getKeyPath();
  *(_QWORD *)(v0 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  *(_QWORD *)(v0 + 72) = v3;
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  OUTLINED_FUNCTION_25_5(v5);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_QWORD *)(v0 + 56) = v7;
  *(_BYTE *)(v0 + 64) = v8;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestMultiObservable.testInt64.modify(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.testUInt64.modify(a1, a2, (void (*)(_QWORD, _QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testUInt64.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, id, _QWORD, _QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(_QWORD *)(*(_QWORD *)a1 + 56), *(unsigned __int8 *)(*(_QWORD *)a1 + 64), *(id *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(*(_QWORD *)a1 + 96));
  OUTLINED_FUNCTION_69_1(v3);
}

uint64_t CAFTypeTestMultiObservable.$testInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestMultiObservable.testFloat : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestMultiObservable.testFloat.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void key path setter for CAFTypeTestMultiObservable.testFloat : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMultiObservable.testFloat.setter);
}

unint64_t CAFTypeTestMultiObservable.testFloat.getter()
{
  return CAFTypeTestMultiObservable.testUInt32.getter();
}

uint64_t CAFTypeTestMultiObservable.testFloat.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestMultiObservable.testFloat.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int *v5;
  int v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 4);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_DWORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestMultiObservable.$testFloat.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testString : CAFTypeTestMultiObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CAFTypeTestMultiObservable.testString.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testString : CAFTypeTestMultiObservable()
{
  swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testString.setter();
}

void CAFTypeTestMultiObservable.testString.getter()
{
  void *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testString.setter()
{
  return CAFTypeTestMultiObservable.testString.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t (*v10)(uint64_t, uint64_t, id, uint64_t, uint64_t);

  OUTLINED_FUNCTION_138_0();
  v10 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  swift_getKeyPath();
  OUTLINED_FUNCTION_134_0();
  v8 = OUTLINED_FUNCTION_72_0();
  return v10(v7, v5, v8, v0, v3);
}

void CAFTypeTestMultiObservable.testString.modify()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_126_0();
  *v0 = v2;
  v2[2] = v1;
  v2[3] = swift_getKeyPath();
  v2[4] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1);
  *v2 = v3;
  v2[1] = v4;
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestMultiObservable.testString.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_78_0((uint64_t)v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_78_0((uint64_t)v3);
  }
  OUTLINED_FUNCTION_69_1(v2);
}

uint64_t CAFTypeTestMultiObservable.$testString.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testData : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CAFTypeTestMultiObservable.testData.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testData : CAFTypeTestMultiObservable(uint64_t a1)
{
  outlined copy of Data?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return CAFTypeTestMultiObservable.testData.setter();
}

uint64_t CAFTypeTestMultiObservable.testData.getter()
{
  void *v0;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0, &v2);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v2;
}

uint64_t CAFTypeTestMultiObservable.testData.setter()
{
  return CAFTypeTestMultiObservable.testString.setter();
}

void CAFTypeTestMultiObservable.testData.modify()
{
  uint64_t **v0;
  void *v1;
  uint64_t *v2;

  v2 = (uint64_t *)OUTLINED_FUNCTION_126_0();
  *v0 = v2;
  v2[2] = (uint64_t)v1;
  v2[3] = swift_getKeyPath();
  v2[4] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1, v2);
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestMultiObservable.testData.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *a1;
  v4 = (*a1)[1];
  v5 = **a1;
  v6 = (id)(*a1)[2];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data?(v5, v4);
    OUTLINED_FUNCTION_81_0();
    outlined consume of Data?(*v3, v3[1]);
  }
  else
  {
    OUTLINED_FUNCTION_81_0();
  }
  free(v3);
}

uint64_t CAFTypeTestMultiObservable.$testData.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFTypeTestMultiObservable.testRawData.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFTypeTestMultiObservable.$testRawData.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testRawData, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testEnum : CAFTypeTestMultiObservable(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestMultiObservable.testEnum.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void key path setter for CAFTypeTestMultiObservable.testEnum : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMultiObservable.testEnum.setter);
}

void CAFTypeTestMultiObservable.testEnum.getter()
{
  CAFTypeTestMultiObservable.testUInt8.getter();
}

uint64_t CAFTypeTestMultiObservable.testEnum.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestMultiObservable.testEnum.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestMultiObservable.$testEnum.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testEnum, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestMultiObservable.testDimensionUnitRawValue : CAFTypeTestMultiObservable(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void key path setter for CAFTypeTestMultiObservable.testDimensionUnitRawValue : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMultiObservable.testDimensionUnitRawValue.setter);
}

void CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter()
{
  CAFTypeTestMultiObservable.testUInt16.getter();
}

uint64_t CAFTypeTestMultiObservable.testDimensionUnitRawValue.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestMultiObservable.testDimensionUnitRawValue.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  __int16 *v5;
  __int16 v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 2);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_WORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestMultiObservable.$testDimensionUnitRawValue.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testDimensionUnitRawValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItem : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testComplexItem.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItem : CAFTypeTestMultiObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestMultiObservable.testComplexItem.setter((uint64_t)v1);
}

uint64_t CAFTypeTestMultiObservable.testComplexItem.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_117_0();
  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = v0(v1, KeyPath, v3);
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_37();
  return v4;
}

uint64_t CAFTypeTestMultiObservable.testComplexItem.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CD920, (uint64_t)&unk_2374CD948, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testComplexItem.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_93_0(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestMultiObservable.testComplexItem.modify(uint64_t a1, char a2)
{
  CAFTypeTestMultiObservable.testComplexItem.modify(a1, a2);
}

{
  void *v2;
  id v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  id v12;

  v2 = *(void **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v12 = *(id *)a1;
    v3 = v2;
    v4 = OUTLINED_FUNCTION_114_0();
    v5(v4);

  }
  else
  {
    v6 = v2;
    v7 = OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_28_4(v7, v8, v9, v10, v11);
  }
}

uint64_t CAFTypeTestMultiObservable.$testComplexItem.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItem, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayBool : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayBool : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayBool.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayBool.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayBool.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CD968, (uint64_t)&unk_2374CD990, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayBool.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayBool.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

{
  void *v2;
  id v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  v2 = *(void **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    v4 = OUTLINED_FUNCTION_113();
    v5(v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v7 = v2;
    v8 = OUTLINED_FUNCTION_113();
    return OUTLINED_FUNCTION_28_4(v8, v9, v10, v11, v12);
  }
}

uint64_t CAFTypeTestMultiObservable.$testArrayBool.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt8 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayUInt8.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt8 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayUInt8.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt8.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt8.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CD9B0, (uint64_t)&unk_2374CD9D8, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayUInt8.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt8.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt16 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayUInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt16 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayUInt16.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt16.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt16.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CD9F8, (uint64_t)&unk_2374CDA20, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayUInt16.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt16.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayUInt32.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt32 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayUInt32.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt32.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt32.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDA40, (uint64_t)&unk_2374CDA68, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayUInt32.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt32.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayUInt64.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt64 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayUInt64.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt64.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt64.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDA88, (uint64_t)&unk_2374CDAB0, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayUInt64.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt64.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt8 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayInt8.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt8 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayInt8.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayInt8.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt8.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDAD0, (uint64_t)&unk_2374CDAF8, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayInt8.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt8.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt16 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt16 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayInt16.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayInt16.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt16.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDB18, (uint64_t)&unk_2374CDB40, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayInt16.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt16.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayInt32.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt32 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayInt32.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayInt32.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt32.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDB60, (uint64_t)&unk_2374CDB88, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayInt32.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt32.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayInt64.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt64 : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayInt64.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayInt64.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt64.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDBA8, (uint64_t)&unk_2374CDBD0, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayInt64.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt64.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayFloat : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayFloat.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayFloat : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayFloat.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayFloat.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayFloat.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDBF0, (uint64_t)&unk_2374CDC18, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayFloat.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayFloat.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayFloat.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayString : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayString.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayString : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayString.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayString.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayString.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDC38, (uint64_t)&unk_2374CDC60, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayString.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayString.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayString.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayData : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testArrayData.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayData : CAFTypeTestMultiObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testArrayData.setter(v0);
}

uint64_t CAFTypeTestMultiObservable.testArrayData.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayData.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDC80, (uint64_t)&unk_2374CDCA8, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testArrayData.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.testArrayData.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayData.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFTypeTestMultiObservable.testArrayRawData.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFTypeTestMultiObservable.$testArrayRawData.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayRawData, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItems : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testComplexItems.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItems : CAFTypeTestMultiObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestMultiObservable.testComplexItems.setter((uint64_t)v1);
}

uint64_t CAFTypeTestMultiObservable.testComplexItems.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItems.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDCC8, (uint64_t)&unk_2374CDCF0, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testComplexItems.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_93_0(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestMultiObservable.testComplexItems.modify(uint64_t a1, char a2)
{
  CAFTypeTestMultiObservable.testComplexItem.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testComplexItems.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItems, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItemValue : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testComplexItemValue.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItemValue : CAFTypeTestMultiObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestMultiObservable.testComplexItemValue.setter((uint64_t)v1);
}

uint64_t CAFTypeTestMultiObservable.testComplexItemValue.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItemValue.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDD10, (uint64_t)&unk_2374CDD38, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestMultiObservable.testComplexItemValue.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_93_0(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.$testComplexItemValue.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItemList : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMultiObservable.testComplexItemList.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItemList : CAFTypeTestMultiObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestMultiObservable.testComplexItemList.setter((uint64_t)v1);
}

uint64_t CAFTypeTestMultiObservable.testComplexItemList.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItemList.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374CDD58, (uint64_t)&unk_2374CDD80, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

uint64_t CAFTypeTestMultiObservable.testComplexItem.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_66_0();
  v7 = OUTLINED_FUNCTION_72_0();
  return OUTLINED_FUNCTION_28_4(v5, (uint64_t)v7, v6, v4, a4);
}

void CAFTypeTestMultiObservable.testComplexItemList.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_93_0(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestMultiObservable.$testComplexItemList.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemList, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFTypeTestMultiObservable.name.getter()
{
  CAFTypeTestMultiObservable.userVisibleLabel.getter();
}

void CAFTypeTestMultiObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestMultiObservable._description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t v108;
  unsigned __int16 v109;
  uint64_t v110;
  unsigned __int16 v111;
  uint64_t v112;
  unsigned __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  Swift::String v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Swift::String v160;
  Swift::String v161;

  v161._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v161._countAndFlagsBits = v1;
  OUTLINED_FUNCTION_12_3(v2, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v3)
  {
    CAFTypeTestMultiObservable.userVisibleLabel.getter();
    v5 = v3;
  }
  v160._countAndFlagsBits = v5;
  v160._object = v4;
  v6 = (uint64_t)OUTLINED_FUNCTION_12_3(v3, sel_registeredForTestBool);
  v7 = 0x73696765726E753CLL;
  if ((_DWORD)v6)
  {
    CAFTypeTestMultiObservable.testBool.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v6 = OUTLINED_FUNCTION_19_4();
    v7 = v6;
  }
  OUTLINED_FUNCTION_12_3(v6, sel_registeredForTestUInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v8)
  {
    CAFTypeTestMultiObservable.testUInt8.getter();
    OUTLINED_FUNCTION_124_0(v10);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v8 = OUTLINED_FUNCTION_19_4();
    v9 = v8;
  }
  v159 = v9;
  OUTLINED_FUNCTION_12_3(v8, sel_registeredForTestUInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v11)
  {
    CAFTypeTestMultiObservable.testUInt16.getter();
    OUTLINED_FUNCTION_122_0(v13);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
    v11 = OUTLINED_FUNCTION_19_4();
    v12 = v11;
  }
  v158 = v12;
  OUTLINED_FUNCTION_12_3(v11, sel_registeredForTestUInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v14)
  {
    v16 = CAFTypeTestMultiObservable.testUInt32.getter();
    OUTLINED_FUNCTION_119_0(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    v14 = OUTLINED_FUNCTION_19_4();
    v15 = v14;
  }
  v157 = v15;
  OUTLINED_FUNCTION_12_3(v14, sel_registeredForTestUInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v17)
  {
    CAFTypeTestMultiObservable.testUInt64.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
    v17 = OUTLINED_FUNCTION_19_4();
    v18 = v17;
  }
  v156 = v18;
  OUTLINED_FUNCTION_12_3(v17, sel_registeredForTestInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v19)
  {
    CAFTypeTestMultiObservable.testInt8.getter();
    OUTLINED_FUNCTION_124_0(v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
    v19 = OUTLINED_FUNCTION_19_4();
    v20 = v19;
  }
  v155 = v20;
  OUTLINED_FUNCTION_12_3(v19, sel_registeredForTestInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v22)
  {
    CAFTypeTestMultiObservable.testInt16.getter();
    OUTLINED_FUNCTION_122_0(v24);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
    v22 = OUTLINED_FUNCTION_19_4();
    v23 = v22;
  }
  v154 = v23;
  OUTLINED_FUNCTION_12_3(v22, sel_registeredForTestInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v25)
  {
    v27 = CAFTypeTestMultiObservable.testInt32.getter();
    OUTLINED_FUNCTION_119_0(v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
    v25 = OUTLINED_FUNCTION_19_4();
    v26 = v25;
  }
  v153 = v26;
  OUTLINED_FUNCTION_12_3(v25, sel_registeredForTestInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v28)
  {
    CAFTypeTestMultiObservable.testInt64.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
    v28 = OUTLINED_FUNCTION_19_4();
    v29 = v28;
  }
  v152 = v29;
  OUTLINED_FUNCTION_12_3(v28, sel_registeredForTestFloat);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v30)
  {
    v32 = CAFTypeTestMultiObservable.testFloat.getter();
    OUTLINED_FUNCTION_119_0(v32);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
    v30 = OUTLINED_FUNCTION_19_4();
    v31 = v30;
  }
  v151 = v31;
  OUTLINED_FUNCTION_12_3(v30, sel_registeredForTestString);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v33)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v35 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v35);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v33 = OUTLINED_FUNCTION_19_4();
    v34 = v33;
  }
  v150 = v34;
  OUTLINED_FUNCTION_12_3(v33, sel_registeredForTestData);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v36)
  {
    CAFTypeTestMultiObservable.testData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    v36 = OUTLINED_FUNCTION_19_4();
    v37 = v36;
  }
  v149 = v37;
  OUTLINED_FUNCTION_12_3(v36, sel_registeredForTestRawData);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v38)
  {
    CAFTypeTestMultiObservable.testRawData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    v38 = OUTLINED_FUNCTION_19_4();
    v39 = v38;
  }
  v148 = v39;
  OUTLINED_FUNCTION_12_3(v38, sel_registeredForTestEnum);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v40)
  {
    CAFTypeTestMultiObservable.testEnum.getter();
    OUTLINED_FUNCTION_124_0(v42);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
    v40 = OUTLINED_FUNCTION_19_4();
    v41 = v40;
  }
  v147 = v41;
  OUTLINED_FUNCTION_12_3(v40, sel_registeredForTestDimensionUnit);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v43)
  {
    CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter();
    OUTLINED_FUNCTION_122_0(v45);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
    v43 = OUTLINED_FUNCTION_19_4();
    v44 = v43;
  }
  v146 = v44;
  OUTLINED_FUNCTION_12_3(v43, sel_registeredForTestComplexItem);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v46)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v48 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v48);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
    v46 = OUTLINED_FUNCTION_19_4();
    v47 = v46;
  }
  v145 = v47;
  OUTLINED_FUNCTION_12_3(v46, sel_registeredForTestArrayBool);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v49)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v51 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v51);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
    v49 = OUTLINED_FUNCTION_19_4();
    v50 = v49;
  }
  v144 = v50;
  OUTLINED_FUNCTION_12_3(v49, sel_registeredForTestArrayUInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v52)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v54 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v54);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
    v52 = OUTLINED_FUNCTION_19_4();
    v53 = v52;
  }
  v143 = v53;
  OUTLINED_FUNCTION_12_3(v52, sel_registeredForTestArrayUInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v55)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v57 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v57);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
    v55 = OUTLINED_FUNCTION_19_4();
    v56 = v55;
  }
  v142 = v56;
  OUTLINED_FUNCTION_12_3(v55, sel_registeredForTestArrayUInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v58)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v60 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v60);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
    v58 = OUTLINED_FUNCTION_19_4();
    v59 = v58;
  }
  v141 = v59;
  OUTLINED_FUNCTION_12_3(v58, sel_registeredForTestArrayUInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v61)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v63 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v63);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
    v61 = OUTLINED_FUNCTION_19_4();
    v62 = v61;
  }
  v140 = v62;
  OUTLINED_FUNCTION_12_3(v61, sel_registeredForTestArrayInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v64)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v66 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v66);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
    v64 = OUTLINED_FUNCTION_19_4();
    v65 = v64;
  }
  v139 = v65;
  OUTLINED_FUNCTION_12_3(v64, sel_registeredForTestArrayInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v67)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v69 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v69);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
    v67 = OUTLINED_FUNCTION_19_4();
    v68 = v67;
  }
  v138 = v68;
  OUTLINED_FUNCTION_12_3(v67, sel_registeredForTestArrayInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v70)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v72 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v72);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
    v70 = OUTLINED_FUNCTION_19_4();
    v71 = v70;
  }
  v137 = v71;
  OUTLINED_FUNCTION_12_3(v70, sel_registeredForTestArrayInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v73)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v75 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v75);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
    v73 = OUTLINED_FUNCTION_19_4();
    v74 = v73;
  }
  v136 = v74;
  OUTLINED_FUNCTION_12_3(v73, sel_registeredForTestArrayFloat);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v76)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v78 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v78);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
    v76 = OUTLINED_FUNCTION_19_4();
    v77 = v76;
  }
  v135 = v77;
  OUTLINED_FUNCTION_12_3(v76, sel_registeredForTestArrayString);
  OUTLINED_FUNCTION_2_4();
  v81 = (void *)0xEE003E6465726574;
  if ((_DWORD)v79)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v82 = (void *)OUTLINED_FUNCTION_7_5();
    specialized static SafePublished.subscript.getter(v82);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    v79 = OUTLINED_FUNCTION_19_4();
    v80 = v79;
    v81 = v83;
  }
  v134 = v80;
  OUTLINED_FUNCTION_12_3(v79, sel_registeredForTestArrayData);
  OUTLINED_FUNCTION_2_4();
  v86 = (void *)0xEE003E6465726574;
  if ((_DWORD)v84)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v87 = (void *)OUTLINED_FUNCTION_73_0();
    specialized static SafePublished.subscript.getter(v87);
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_37();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
    v84 = OUTLINED_FUNCTION_19_4();
    v85 = v84;
    v86 = v88;
  }
  v133 = v85;
  OUTLINED_FUNCTION_12_3(v84, sel_registeredForTestArrayRawData);
  OUTLINED_FUNCTION_2_4();
  v91 = (void *)0xEE003E6465726574;
  if ((_DWORD)v89)
  {
    CAFTypeTestMultiObservable.testArrayRawData.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
    v89 = OUTLINED_FUNCTION_19_4();
    v90 = v89;
    v91 = v92;
  }
  v132 = v90;
  OUTLINED_FUNCTION_12_3(v89, sel_registeredForTestComplexItems);
  OUTLINED_FUNCTION_2_4();
  v95 = (void *)0xEE003E6465726574;
  if ((_DWORD)v93)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v96 = (void *)OUTLINED_FUNCTION_73_0();
    specialized static SafePublished.subscript.getter(v96);
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
    v93 = OUTLINED_FUNCTION_19_4();
    v94 = v93;
    v95 = v97;
  }
  v131 = v94;
  OUTLINED_FUNCTION_12_3(v93, sel_registeredForTestComplexItemValue);
  OUTLINED_FUNCTION_2_4();
  v100 = (void *)0xEE003E6465726574;
  if ((_DWORD)v98)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v101 = (void *)OUTLINED_FUNCTION_73_0();
    specialized static SafePublished.subscript.getter(v101);
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_37();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
    v98 = OUTLINED_FUNCTION_19_4();
    v99 = v98;
    v100 = v102;
  }
  v130 = v99;
  if (OUTLINED_FUNCTION_12_3(v98, sel_registeredForTestComplexItemList))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    specialized static SafePublished.subscript.getter(v0);
    OUTLINED_FUNCTION_25();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
    v161._countAndFlagsBits = OUTLINED_FUNCTION_19_4();
    v161._object = v103;
  }
  static String._createEmpty(withInitialCapacity:)(657);
  v104._object = (void *)0x80000002374E1C40;
  v104._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v104);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000015, (uint64_t)" { userVisibleLabel: ");
  String.append(_:)(v160);
  swift_bridgeObjectRelease();
  v105._countAndFlagsBits = OUTLINED_FUNCTION_53_0() & 0xFFFFFFFFFFFFLL | 0x6F42000000000000;
  String.append(_:)(v105);
  OUTLINED_FUNCTION_22_5(v7);
  OUTLINED_FUNCTION_14_5();
  v106 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_34_1(v106, v107 | 0x3A380000);
  OUTLINED_FUNCTION_22_5(v159);
  OUTLINED_FUNCTION_14_5();
  v108 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_6_2(v108, v109 | 0x36310000);
  OUTLINED_FUNCTION_22_5(v158);
  OUTLINED_FUNCTION_14_5();
  v110 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_6_2(v110, v111 | 0x32330000);
  OUTLINED_FUNCTION_22_5(v157);
  OUTLINED_FUNCTION_14_5();
  v112 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_6_2(v112, v113 | 0x34360000);
  OUTLINED_FUNCTION_22_5(v156);
  OUTLINED_FUNCTION_14_5();
  v114 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_130_0(v114, 14452);
  OUTLINED_FUNCTION_22_5(v155);
  OUTLINED_FUNCTION_14_5();
  v115 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_34_1(v115, 0x3A363174u);
  OUTLINED_FUNCTION_22_5(v154);
  OUTLINED_FUNCTION_14_5();
  v116 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_34_1(v116, 0x3A323374u);
  OUTLINED_FUNCTION_22_5(v153);
  OUTLINED_FUNCTION_14_5();
  v117 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_34_1(v117, 0x3A343674u);
  OUTLINED_FUNCTION_22_5(v152);
  OUTLINED_FUNCTION_14_5();
  v118 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_34_1(v118 & 0xFFFFFFFFFFFFLL | 0x6C46000000000000, 0x3A74616Fu);
  OUTLINED_FUNCTION_22_5(v151);
  OUTLINED_FUNCTION_14_5();
  v119 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_6_2(v119 & 0xFFFFFFFFFFFFLL | 0x7453000000000000, 0x676E6972u);
  OUTLINED_FUNCTION_22_5(v150);
  OUTLINED_FUNCTION_14_5();
  v120 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_130_0(v120 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 24948);
  OUTLINED_FUNCTION_22_5(v149);
  OUTLINED_FUNCTION_14_5();
  v121._countAndFlagsBits = OUTLINED_FUNCTION_53_0() & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
  v121._object = (void *)0xEF203A6174614477;
  String.append(_:)(v121);
  OUTLINED_FUNCTION_22_5(v148);
  OUTLINED_FUNCTION_14_5();
  v122._countAndFlagsBits = OUTLINED_FUNCTION_53_0() & 0xFFFFFFFFFFFFLL | 0x6E45000000000000;
  String.append(_:)(v122);
  OUTLINED_FUNCTION_22_5(v147);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_54_0((uint64_t)", testDimensionUnitRawValue: ");
  OUTLINED_FUNCTION_22_5(v146);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_41_3((uint64_t)", testComplexItem: ");
  OUTLINED_FUNCTION_22_5(v145);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_54_0((uint64_t)", testArrayBool: ");
  OUTLINED_FUNCTION_22_5(v144);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayUInt8: ");
  OUTLINED_FUNCTION_22_5(v143);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_41_3((uint64_t)", testArrayUInt16: ");
  OUTLINED_FUNCTION_22_5(v142);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_41_3((uint64_t)", testArrayUInt32: ");
  OUTLINED_FUNCTION_22_5(v141);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_41_3((uint64_t)", testArrayUInt64: ");
  OUTLINED_FUNCTION_22_5(v140);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_54_0((uint64_t)", testArrayInt8: ");
  OUTLINED_FUNCTION_22_5(v139);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayInt16: ");
  OUTLINED_FUNCTION_22_5(v138);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayInt32: ");
  OUTLINED_FUNCTION_22_5(v137);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayInt64: ");
  OUTLINED_FUNCTION_22_5(v136);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayFloat: ");
  OUTLINED_FUNCTION_22_5(v135);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_41_3((uint64_t)", testArrayString: ");
  v123._countAndFlagsBits = v134;
  v123._object = v81;
  String.append(_:)(v123);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54_0((uint64_t)", testArrayData: ");
  v124._countAndFlagsBits = v133;
  v124._object = v86;
  String.append(_:)(v124);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_104_0((uint64_t)", testArrayRawData: ");
  v125._countAndFlagsBits = v132;
  v125._object = v91;
  String.append(_:)(v125);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_104_0((uint64_t)", testComplexItems: ");
  v126._countAndFlagsBits = v131;
  v126._object = v95;
  String.append(_:)(v126);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", testComplexItemValue: ");
  v127._countAndFlagsBits = v130;
  v127._object = v100;
  String.append(_:)(v127);
  OUTLINED_FUNCTION_39_2();
  OUTLINED_FUNCTION_128(0xD000000000000017, (uint64_t)", testComplexItemList: ");
  String.append(_:)(v161);
  swift_bridgeObjectRelease();
  v128._countAndFlagsBits = 4095264;
  v128._object = (void *)0xE300000000000000;
  String.append(_:)(v128);
  return String.init(stringInterpolation:)();
}

void CAFTypeTestMultiObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    OUTLINED_FUNCTION_71_0();
  }
  else
  {
    CAFTypeTestMultiObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFTypeTestMultiObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestMultiObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFTypeTestMultiObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFTypeTestMultiObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  objc_super v79;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestMultiObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testBool;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v11 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  v12 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt16?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt32?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v16] = v17;
  v18 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt64?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v18] = v19;
  v20 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v20] = v21;
  v22 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int16?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int32?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int64?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v26] = v27;
  v28 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testFloat;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Float?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v28] = v29;
  v30 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, String?>);
  OUTLINED_FUNCTION_127();
  v31 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v30] = specialized SafePublished.init(observedValuekeypath:)(v31);
  v32 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Data?>);
  OUTLINED_FUNCTION_127();
  v33 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v32] = specialized SafePublished.init(observedValuekeypath:)(v33);
  v34 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testRawData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestMultiObservable, Data?>);
  OUTLINED_FUNCTION_127();
  v35 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v34] = specialized SafePublished.init(observedValuekeypath:)(v35);
  v36 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testEnum;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFButtonAction?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v36] = v37;
  v38 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testDimensionUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFUnitType?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v38] = v39;
  v40 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItem;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_111_0();
  *(_QWORD *)&v9[v40] = v41;
  v42 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayBool;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Bool]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v42] = v43;
  v44 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt8]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v44] = v45;
  v46 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt16]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v46] = v47;
  v48 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt32]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v48] = v49;
  v50 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt64]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v50] = v51;
  v52 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int8]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v52] = v53;
  v54 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int16]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v54] = v55;
  v56 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int32]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v56] = v57;
  v58 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int64]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v58] = v59;
  v60 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayFloat;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Float]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v60] = v61;
  v62 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [String]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v62] = v63;
  v64 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Data]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v64] = v65;
  v66 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayRawData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestMultiObservable, [Data]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v66] = v67;
  v68 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItems;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFTestComplexItems?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_112_0();
  *(_QWORD *)&v9[v68] = v69;
  v70 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemValue;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_111_0();
  *(_QWORD *)&v9[v70] = v71;
  v72 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemList;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_112_0();
  *(_QWORD *)&v9[v72] = v73;
  v74 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  v75 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v74] = specialized SafePublished.init(observedValuekeypath:)(v75);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed] = a1;
  v76 = a1;

  v79.receiver = v9;
  v79.super_class = (Class)type metadata accessor for CAFTypeTestMultiObservable();
  v77 = objc_msgSendSuper2(&v79, sel_init);
  objc_msgSend(v76, sel_registerObserver_, v77);

  return v77;
}

void CAFTypeTestMultiObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTypeTestMultiObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFTypeTestMultiObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTypeTestMultiObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTypeTestMultiObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTypeTestMultiObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFTypeTestMultiObservable(id *a1@<X8>)
{
  *a1 = CAFTypeTestMultiObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTypeTestMultiObservable(void **a1)
{
  CAFTypeTestMultiObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTypeTestMultiObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)()
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestBool:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt8:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt8, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(uint64_t a1, unsigned __int16 a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt16, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt32, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt64, (void (*)(uint64_t, _QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt8:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt8, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt16:)(uint64_t a1, unsigned __int16 a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt16, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt32, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2, uint64_t a3, void (*a4)(_QWORD))
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  a4(a2);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt64:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt64, (void (*)(uint64_t, _QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD))
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  a4(a2, 0);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestFloat:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestString:)()
{
  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestData:)()
{
  unint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  outlined copy of Data?(v1, v0);
  OUTLINED_FUNCTION_31_0();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestRawData:)()
{
  unint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_32();
  outlined copy of Data?(v1, v0);
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestData:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void (*v20)(void);
  void (*v21)(void);
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  void *v33;

  OUTLINED_FUNCTION_138_0();
  v21 = v20;
  v22 = v18;
  v33 = v23;
  if (v19)
  {
    v24 = v19;
    v25 = v18;
    v26 = v33;
    v27 = v24;
    v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

  }
  else
  {
    v31 = v18;
    v32 = v33;
    v28 = 0;
    v30 = 0xF000000000000000;
  }
  v21();
  outlined consume of Data?(v28, v30);

}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestEnum:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testEnum, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestDimensionUnitRawValue:)(uint64_t a1, unsigned __int16 a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testDimensionUnitRawValue, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(uint64_t a1, unsigned __int16 a2, uint64_t a3, void (*a4)(_QWORD))
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  a4(a2);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItem, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayBool:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  char v11;
  _BOOL8 v12;
  int64_t v13;
  char v14;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  v6 = (char *)OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v7, v8);
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_BOOLValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v10)
      {
        v12 = OUTLINED_FUNCTION_31_3(v9);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)v12, v13, v14);
      }
      OUTLINED_FUNCTION_60_0();
    }
    while (!v11);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt8:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_unsignedCharValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_60_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayBool:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v8;
  id v9;

  if (a4)
  {
    OUTLINED_FUNCTION_98((uint64_t)a1, &lazy cache variable for type metadata for NSNumber);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  v8 = a3;
  v9 = a1;
  a5();

  return OUTLINED_FUNCTION_80_0();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt16:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_unsignedShortValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_105_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt32, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_unsignedIntValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt64, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_unsignedLongLongValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt8:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_charValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_60_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt16:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_shortValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_105_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt32:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt32, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_intValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, SEL *a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;

  v13 = (uint64_t *)(v6 + *a3);
  OUTLINED_FUNCTION_15_0();
  v14 = *v13;
  if (!a2)
  {
    OUTLINED_FUNCTION_146();
LABEL_15:
    v27 = swift_bridgeObjectRetain();
    a6(v27);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_71_1();
    return;
  }
  if (!(a2 >> 62))
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_146();
    OUTLINED_FUNCTION_45();
    if (v15)
      goto LABEL_4;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_45();
  v15 = OUTLINED_FUNCTION_61_1();
  if (!v15)
  {
LABEL_14:
    OUTLINED_FUNCTION_56();
    goto LABEL_15;
  }
LABEL_4:
  OUTLINED_FUNCTION_75_0();
  if ((v15 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_97_0();
    do
    {
      if (a6)
        OUTLINED_FUNCTION_106_0();
      v16 = OUTLINED_FUNCTION_56_1(a2 + 8 * v8);
      v17 = objc_msgSend(v16, *a5);

      OUTLINED_FUNCTION_125_0();
      if (v26)
      {
        OUTLINED_FUNCTION_82_0(v25 > 1, v18, v19, v20, v21, v22, v23, v24, v28, v29);
        v7 = v31;
      }
      ++v8;
      *(_QWORD *)(v7 + 16) = a4;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v17;
    }
    while (v15 != v8);
    OUTLINED_FUNCTION_56();
    a6 = v30;
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt64:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt64, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_longLongValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, SEL *a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;

  v13 = (uint64_t *)(v6 + *a3);
  OUTLINED_FUNCTION_15_0();
  v14 = *v13;
  if (!a2)
  {
    OUTLINED_FUNCTION_146();
LABEL_15:
    v27 = swift_bridgeObjectRetain();
    a6(v27);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_71_1();
    return;
  }
  if (!(a2 >> 62))
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_146();
    OUTLINED_FUNCTION_45();
    if (v15)
      goto LABEL_4;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_45();
  v15 = OUTLINED_FUNCTION_61_1();
  if (!v15)
  {
LABEL_14:
    OUTLINED_FUNCTION_56();
    goto LABEL_15;
  }
LABEL_4:
  OUTLINED_FUNCTION_75_0();
  if ((v15 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_97_0();
    do
    {
      if (a6)
        OUTLINED_FUNCTION_106_0();
      v16 = OUTLINED_FUNCTION_56_1(a2 + 8 * v8);
      v17 = objc_msgSend(v16, *a5);

      OUTLINED_FUNCTION_125_0();
      if (v26)
      {
        OUTLINED_FUNCTION_82_0(v25 > 1, v18, v19, v20, v21, v22, v23, v24, v28, v29);
        v7 = v31;
      }
      ++v8;
      *(_QWORD *)(v7 + 16) = a4;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v17;
    }
    while (v15 != v8);
    OUTLINED_FUNCTION_56();
    a6 = v30;
    goto LABEL_15;
  }
  __break(1u);
}

char *CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayFloat:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t i;
  id v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_15_0();
  if (!a2)
  {
    OUTLINED_FUNCTION_40();
LABEL_15:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    return (char *)OUTLINED_FUNCTION_27();
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_14:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_14;
LABEL_4:
  v13 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_51_2();
      v8 = OUTLINED_FUNCTION_50_1();
      objc_msgSend(v8, sel_floatValue);
      v10 = v9;

      v12 = *(_QWORD *)(v13 + 16);
      v11 = *(_QWORD *)(v13 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v13 + 16) = v12 + 1;
      *(_DWORD *)(v13 + 4 * v12 + 32) = v10;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayString, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayData:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayData, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_64_0();
  OUTLINED_FUNCTION_32();
  a4(a2);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  id v9;
  id v10;

  if (a4)
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a1;
  a6();

  return OUTLINED_FUNCTION_80_0();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayRawData:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItems:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItems, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItemValue:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemValue, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItemList:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemList, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *))
{
  id v6;

  OUTLINED_FUNCTION_15_0();
  v6 = a2;
  OUTLINED_FUNCTION_32();
  a4(a2);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateName:)()
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)();
}

void CAFTypeTestMultiObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFTypeTestMultiObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFTypeTestMultiObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374785E4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testBool.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478604(unsigned __int8 *a1)
{
  CAFTypeTestMultiObservable.testBool.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23747866C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMultiObservable.testString.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_11();
}

void sub_237478690()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testData.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374786C4()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testComplexItem.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374786E8()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayBool.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747870C()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayUInt8.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478730()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayUInt16.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478754()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayUInt32.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478778()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayUInt64.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747879C()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayInt8.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374787C0()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayInt16.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374787E4()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayInt32.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478808()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayInt64.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747882C()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayFloat.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478850()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayString.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478874()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testArrayData.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478898()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testComplexItems.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374788BC()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testComplexItemValue.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374788E0()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMultiObservable.testComplexItemList.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478904(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_237478920()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMulti.testBoolBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237478940(char *a1)
{
  CAFTypeTestMulti.testBoolBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void key path getter for CAFTypeTestMulti.testUInt8Bridged : CAFTypeTestMulti(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestMulti.testUInt8Bridged.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void sub_237478994(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testUInt8Bridged.setter);
}

void key path getter for CAFTypeTestMulti.testUInt16Bridged : CAFTypeTestMulti(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestMulti.testUInt16Bridged.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void sub_2374789E4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testUInt16Bridged.setter);
}

void key path getter for CAFTypeTestMulti.testUInt32Bridged : CAFTypeTestMulti(uint64_t a1@<X8>)
{
  int v2;
  char v3;

  CAFTypeTestMulti.testUInt32Bridged.getter();
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = v3 & 1;
}

void sub_237478A34(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMulti.testUInt32Bridged.setter);
}

id key path getter for CAFTypeTestMulti.testUInt64Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  id result;
  char v3;

  result = CAFTypeTestMulti.testUInt64Bridged.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

id key path setter for CAFTypeTestMulti.testUInt64Bridged : CAFTypeTestMulti(uint64_t a1)
{
  return CAFTypeTestMulti.testUInt64Bridged.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t key path getter for CAFTypeTestMulti.testInt8Bridged : CAFTypeTestMulti@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMulti.testInt8Bridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

void sub_237478AEC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testInt8Bridged.setter);
}

uint64_t key path getter for CAFTypeTestMulti.testInt16Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestMulti.testInt16Bridged.getter();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

void sub_237478B3C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testInt16Bridged.setter);
}

void key path getter for CAFTypeTestMulti.testInt32Bridged : CAFTypeTestMulti(uint64_t a1@<X8>)
{
  int v2;
  char v3;

  CAFTypeTestMulti.testInt32Bridged.getter();
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = v3 & 1;
}

void sub_237478B8C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestIndexByUnit.testInt32Bridged.setter);
}

id key path getter for CAFTypeTestMulti.testInt64Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  id result;
  char v3;

  result = CAFTypeTestMulti.testInt64Bridged.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

id key path setter for CAFTypeTestMulti.testInt64Bridged : CAFTypeTestMulti(uint64_t a1)
{
  return CAFTypeTestMulti.testInt64Bridged.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

unint64_t key path getter for CAFTypeTestMulti.testFloatBridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestMulti.testFloatBridged.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_237478C44(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMulti.testFloatBridged.setter);
}

void key path getter for CAFTypeTestMulti.testString : CAFTypeTestMulti(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_testString);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void key path setter for CAFTypeTestMulti.testString : CAFTypeTestMulti(_QWORD *a1, void **a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *a2;
  if (a1[1])
    v3 = MEMORY[0x23B811BC4](*a1);
  else
    v3 = 0;
  v4 = (id)v3;
  objc_msgSend(v2, sel_setTestString_);

}

char *keypath_get_selector_testData()
{
  return sel_testData;
}

void sub_237478D34(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testData : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testData);
}

void key path setter for CAFTypeTestMulti.testData : CAFTypeTestMulti(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  Class v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = isa;
  objc_msgSend(v2, sel_setTestData_);

}

char *keypath_get_selector_testRawData()
{
  return sel_testRawData;
}

void key path getter for CAFTypeTestMulti.testData : CAFTypeTestMulti(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xF000000000000000;
  }
  *v4 = v7;
  v4[1] = v9;
  OUTLINED_FUNCTION_24_1();
}

void sub_237478E10(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testData : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testRawData);
}

void key path getter for CAFTypeTestMulti.testEnumBridged : CAFTypeTestMulti(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestMulti.testEnumBridged.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void sub_237478E60(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testEnumBridged.setter);
}

void key path getter for CAFTypeTestMulti.testDimensionUnitRawValueBridged : CAFTypeTestMulti(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestMulti.testDimensionUnitRawValueBridged.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void sub_237478EB0(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testDimensionUnitRawValueBridged.setter);
}

char *keypath_get_selector_testComplexItem()
{
  return sel_testComplexItem;
}

id key path getter for CAFTypeTestMulti.testComplexItem : CAFTypeTestMulti@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_testComplexItem);
  *a2 = result;
  return result;
}

id sub_237478F14(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItem_, *a1);
}

void sub_237478F28()
{
  char **v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMulti.testArrayBoolBridged.getter();
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFTypeTestMulti.testArrayBoolBridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayBoolBridged.setter(v0);
}

void sub_237478F74()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt8Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFTypeTestMulti.testArrayUInt8Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayUInt8Bridged.setter(v0);
}

void sub_237478FC0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt16Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFTypeTestMulti.testArrayUInt16Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayUInt16Bridged.setter(v0);
}

void sub_23747900C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt32Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

uint64_t key path setter for CAFTypeTestMulti.testArrayUInt32Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMulti.testArrayUInt32Bridged.setter(v0, &selRef_initWithUnsignedInt_, &selRef_setTestArrayUInt32_);
}

void sub_237479068()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt64Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

uint64_t key path setter for CAFTypeTestMulti.testArrayUInt64Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMulti.testArrayUInt64Bridged.setter(v0, &selRef_initWithUnsignedLongLong_, &selRef_setTestArrayUInt64_);
}

void sub_2374790C4()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt8Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFTypeTestMulti.testArrayInt8Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayInt8Bridged.setter(v0);
}

void sub_237479110()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt16Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFTypeTestMulti.testArrayInt16Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayInt16Bridged.setter(v0);
}

void sub_23747915C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt32Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

uint64_t key path setter for CAFTypeTestMulti.testArrayInt32Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMulti.testArrayUInt32Bridged.setter(v0, &selRef_initWithInt_, &selRef_setTestArrayInt32_);
}

void sub_2374791B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt64Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

uint64_t key path setter for CAFTypeTestMulti.testArrayInt64Bridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestMulti.testArrayUInt64Bridged.setter(v0, &selRef_initWithLongLong_, &selRef_setTestArrayInt64_);
}

void sub_237479214()
{
  char **v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMulti.testArrayFloatBridged.getter();
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFTypeTestMulti.testArrayFloatBridged : CAFTypeTestMulti()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayFloatBridged.setter(v0);
}

char *keypath_get_selector_testArrayString()
{
  return sel_testArrayString;
}

void sub_23747926C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testArrayString);
}

void sub_237479290(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, a4, MEMORY[0x24BEE0D00], (SEL *)&selRef_setTestArrayString_);
}

char *keypath_get_selector_testArrayData()
{
  return sel_testArrayData;
}

void sub_2374792C0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testArrayData);
}

void key path setter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  void *v7;
  NSArray v8;
  Class isa;

  v7 = *a2;
  if (*a1)
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v8.super.isa = 0;
  isa = v8.super.isa;
  objc_msgSend(v7, *a6);

}

void sub_23747933C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, a4, MEMORY[0x24BDCDDE8], (SEL *)&selRef_setTestArrayData_);
}

char *keypath_get_selector_testArrayRawData()
{
  return sel_testArrayRawData;
}

void key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v7 = 0;
  }
  *v4 = v7;
  OUTLINED_FUNCTION_24_1();
}

void sub_2374793B8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testArrayRawData);
}

char *keypath_get_selector_testComplexItems()
{
  return sel_testComplexItems;
}

id key path getter for CAFTypeTestMulti.testComplexItems : CAFTypeTestMulti@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_testComplexItems);
  *a2 = result;
  return result;
}

id sub_237479424(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItems_, *a1);
}

char *keypath_get_selector_testComplexItemValue()
{
  return sel_testComplexItemValue;
}

id key path getter for CAFTypeTestMulti.testComplexItemValue : CAFTypeTestMulti@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_testComplexItemValue);
  *a2 = result;
  return result;
}

id sub_237479480(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItemValue_, *a1);
}

char *keypath_get_selector_testComplexItemList()
{
  return sel_testComplexItemList;
}

id key path getter for CAFTypeTestMulti.testComplexItemList : CAFTypeTestMulti@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_testComplexItemList);
  *a2 = result;
  return result;
}

id sub_2374794DC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItemList_, *a1);
}

void sub_2374794F0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFTypeTestMultiObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTypeTestMulti()
{
  lazy protocol witness table accessor for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable(lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, (uint64_t)&protocol conformance descriptor for CAFTypeTestMultiObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTypeTestMulti and conformance CAFTypeTestMulti()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFTypeTestMulti and conformance CAFTypeTestMulti;
  if (!lazy protocol witness table cache variable for type CAFTypeTestMulti and conformance CAFTypeTestMulti)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTypeTestMulti);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFTypeTestMulti, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMulti and conformance CAFTypeTestMulti);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTypeTestMultiObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable(&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, (uint64_t)&protocol conformance descriptor for CAFTypeTestMultiObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFTypeTestMultiObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFTypeTestMultiObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testBool.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testBool.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testUInt8.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt8.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1E0));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testUInt16.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt16.setter(int a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FFFF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x200));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testUInt32.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
  OUTLINED_FUNCTION_118_0(v1);
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt32.setter(unint64_t a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_38_3(a1, *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x220));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt64.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v2) + 0x240))(a1, a2 & 1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x250))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testInt8.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x258))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt8.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x260));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x270))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testInt16.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x278))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt16.setter(int a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FFFF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x280));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x290))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testInt32.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x298))();
  OUTLINED_FUNCTION_118_0(v1);
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt32.setter(unint64_t a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_38_3(a1, *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x2A0));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt64.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v2) + 0x2C0))(a1, a2 & 1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D0))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testFloat.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D8))();
  OUTLINED_FUNCTION_118_0(v1);
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testFloat.setter(unint64_t a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_38_3(a1, *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x2E0));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testFloat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testFloat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testString.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testString.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x318))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testData.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testData.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x328))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x330))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x340))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testEnum.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x348))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testEnum.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x350));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testEnum.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testEnum.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x360))();
}

void dispatch thunk of CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x368))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testDimensionUnitRawValue.setter(int a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FFFF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x370));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testDimensionUnitRawValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testDimensionUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItem.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItem.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayBool.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayBool.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt8.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt16.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x400))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x408))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt32.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x418))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x420))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt64.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x430))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x438))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x448))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt8.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x450))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x458))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x460))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x468))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt16.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x478))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x480))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt32.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x490))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x498))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt64.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayFloat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayFloat.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayFloat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayFloat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayString.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayString.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x500))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x508))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayData.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x510))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayData.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x518))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x520))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x528))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x530))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItems.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x538))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItems.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x540))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItems.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x548))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItems.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x550))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x558))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x560))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x568))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItemValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x570))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x578))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemList.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x580))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemList.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x588))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItemList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x590))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x598))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x5A0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1456))();
}

uint64_t partial apply for closure #1 in CAFTypeTestMultiObservable.resetCachedDescription()()
{
  return CAFTypeTestMultiObservable.cachedDescription.setter(0, 0);
}

void outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    OUTLINED_FUNCTION_98((uint64_t)v2, &lazy cache variable for type metadata for NSNumber);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  OUTLINED_FUNCTION_11();
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_12_3(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_13_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_22_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_25_5@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(v1, 0);
}

uint64_t OUTLINED_FUNCTION_26_5(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_28_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

BOOL OUTLINED_FUNCTION_31_3@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_35_3(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 8) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_36_3(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

void OUTLINED_FUNCTION_37_4(void *a1)
{
  free(a1);
}

uint64_t OUTLINED_FUNCTION_38_3(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t OUTLINED_FUNCTION_39_2()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_41_3(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_47_1()
{
  return 0x495574736574202CLL;
}

id OUTLINED_FUNCTION_50_1()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

void OUTLINED_FUNCTION_51_2()
{
  JUMPOUT(0x23B811D2CLL);
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return 0x74736574202CLL;
}

void OUTLINED_FUNCTION_54_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_55_1(id a1)
{

}

id OUTLINED_FUNCTION_56_1@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

id OUTLINED_FUNCTION_57_0(SEL *a1)
{
  void *v1;

  return objc_msgSend(v1, *a1);
}

uint64_t OUTLINED_FUNCTION_59_1()
{
  return 0x6E4974736574202CLL;
}

void OUTLINED_FUNCTION_60_0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + v0 + 32) = v2;
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  return swift_getKeyPath();
}

void OUTLINED_FUNCTION_69_1(void *a1)
{
  free(a1);
}

id OUTLINED_FUNCTION_72_0()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  uint64_t (*v0)(_QWORD, uint64_t, _QWORD);
  uint64_t v1;

  return v0(0, v1 & ~(v1 >> 63), 0);
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  uint64_t (*v0)(_QWORD, uint64_t, _QWORD);
  uint64_t v1;

  return v0(0, v1 & ~(v1 >> 63), 0);
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return specialized static SafePublished.subscript.setter(v2, v3, a1, v4, v1);
}

uint64_t OUTLINED_FUNCTION_80_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return specialized static SafePublished.subscript.setter(v0, v1, v3, v4, v2);
}

uint64_t OUTLINED_FUNCTION_82_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;

  return a10(a1, v10, 1);
}

uint64_t OUTLINED_FUNCTION_86_0()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

void OUTLINED_FUNCTION_90_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return swift_getKeyPath();
}

void OUTLINED_FUNCTION_92_0(SEL *a1)
{
  void *v1;

  outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v1, a1);
}

void OUTLINED_FUNCTION_93_0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 24) = a1;
  specialized static SafePublished.subscript.getter(v2);
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return swift_readAtKeyPath();
}

void OUTLINED_FUNCTION_104_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_105_0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v3;
  *(_WORD *)(v1 + 2 * v0 + 32) = v2;
}

void OUTLINED_FUNCTION_106_0()
{
  JUMPOUT(0x23B811D2CLL);
}

uint64_t OUTLINED_FUNCTION_107_0()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_108_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2, 1);
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

void OUTLINED_FUNCTION_111_0()
{
  specialized SafePublished.init(observedValuekeypath:)();
}

void OUTLINED_FUNCTION_112_0()
{
  specialized SafePublished.init(observedValuekeypath:)();
}

uint64_t OUTLINED_FUNCTION_113()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_114_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_116()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_118_0(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t OUTLINED_FUNCTION_119_0(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 104) = result;
  *(_BYTE *)(v1 - 100) = BYTE4(result) & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_122_0(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 - 104) = result;
  *(_BYTE *)(v1 - 102) = BYTE2(result) & 1;
  return result;
}

id OUTLINED_FUNCTION_123_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;
  SEL *v10;

  return objc_msgSend(v9, *v10, a9);
}

uint64_t OUTLINED_FUNCTION_124_0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 104) = result;
  *(_BYTE *)(v1 - 103) = BYTE1(result) & 1;
  return result;
}

void *OUTLINED_FUNCTION_126_0()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_127_0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = result;
  *(_QWORD *)(result + 80) = v1;
  return result;
}

void *OUTLINED_FUNCTION_128_0()
{
  return malloc(0x68uLL);
}

void OUTLINED_FUNCTION_129(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

}

void OUTLINED_FUNCTION_130_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 & 0xFFFF0000FFFFLL | 0xEC000000203A0000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  return swift_getKeyPath();
}

NSArray OUTLINED_FUNCTION_137_0()
{
  return Array._bridgeToObjectiveC()();
}

id CAFRequestContentObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
}

uint64_t CAFRequestContentObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFRequestContentObservable.on : CAFRequestContentObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFRequestContentObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFRequestContentObservable.on : CAFRequestContentObservable(unsigned __int8 *a1)
{
  return CAFRequestContentObservable.on.setter(*a1);
}

uint64_t CAFRequestContentObservable.on.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFRequestContentObservable.on.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFRequestContentObservable.on.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFRequestContentObservable.on.modify;
}

void CAFRequestContentObservable.on.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFRequestContentObservable.$on.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFRequestContentObservable.contentURL.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFRequestContentObservable.$contentURL.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__contentURL, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.userDismissible.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFRequestContentObservable.$userDismissible.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__userDismissible, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.displayPanelIdentifier.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

void CAFRequestContentObservable.$displayPanelIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayPanelIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.displayZoneIdentifier.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

void CAFRequestContentObservable.$displayZoneIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayZoneIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.name.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

void CAFRequestContentObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable._description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  Swift::String v26;

  HIBYTE(v26._object) = -18;
  strcpy((char *)&v26, "<unregistered>");
  v1 = (uint64_t)OUTLINED_FUNCTION_7_6(a1, sel_registeredForOn);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    v1 = CAFRequestContentObservable.on.getter();
    if ((v1 & 1) != 0)
      v2 = 1702195828;
    else
      v2 = 0x65736C6166;
    if ((v1 & 1) != 0)
      v3 = (void *)0xE400000000000000;
    else
      v3 = (void *)0xE500000000000000;
  }
  v25 = v2;
  v4 = (uint64_t)OUTLINED_FUNCTION_7_6(v1, sel_registeredForContentURL);
  v5 = 0x73696765726E753CLL;
  v6 = (void *)0xEE003E6465726574;
  if ((_DWORD)v4)
  {
    v4 = CAFRequestContentObservable.contentURL.getter();
    v5 = v4;
    v6 = v7;
  }
  v8 = (uint64_t)OUTLINED_FUNCTION_7_6(v4, sel_registeredForUserDismissible);
  v9 = 0x73696765726E753CLL;
  v10 = (void *)0xEE003E6465726574;
  if ((_DWORD)v8)
  {
    v8 = CAFRequestContentObservable.userDismissible.getter();
    if ((v8 & 1) != 0)
      v9 = 1702195828;
    else
      v9 = 0x65736C6166;
    if ((v8 & 1) != 0)
      v10 = (void *)0xE400000000000000;
    else
      v10 = (void *)0xE500000000000000;
  }
  v11 = (uint64_t)OUTLINED_FUNCTION_7_6(v8, sel_registeredForDisplayPanelIdentifier);
  v12 = 0x73696765726E753CLL;
  v13 = (void *)0xEE003E6465726574;
  if ((_DWORD)v11)
  {
    v11 = CAFRequestContentObservable.displayPanelIdentifier.getter();
    v12 = v11;
    v13 = v14;
  }
  if (OUTLINED_FUNCTION_7_6(v11, sel_registeredForDisplayZoneIdentifier))
  {
    v26._countAndFlagsBits = CAFRequestContentObservable.displayZoneIdentifier.getter();
    v26._object = v15;
  }
  _StringGuts.grow(_:)(136);
  OUTLINED_FUNCTION_21_2(0xD00000000000001ELL, (uint64_t)"<CAFRequestContentObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v16._countAndFlagsBits = 0x203A6E6F207B20;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v25;
  v17._object = v3;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6E65746E6F63202CLL;
  v18._object = (void *)0xEE00203A4C525574;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v5;
  v19._object = v6;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x80000002374E1580;
  v20._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v9;
  v21._object = v10;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_2(0xD00000000000001ALL, (uint64_t)", displayPanelIdentifier: ");
  v22._countAndFlagsBits = v12;
  v22._object = v13;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_2(0xD000000000000019, (uint64_t)", displayZoneIdentifier: ");
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 4095264;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  return 0;
}

uint64_t CAFRequestContentObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFRequestContentObservable._description.getter(v3);
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFRequestContentObservable.cachedDescription.setter(v4, v7);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v5 + 4);
  OUTLINED_FUNCTION_25();
  return v4;
}

void CAFRequestContentObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFRequestContentObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFRequestContentObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFRequestContentObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__contentURL;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRequestContentObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_19_1();
  v11 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__userDismissible;
  v12 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRequestContentObservable, Bool>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v11] = specialized SafePublished.init(observedValuekeypath:)(v12);
  v13 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v13] = OUTLINED_FUNCTION_19_1();
  v14 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for CAFRequestContentObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFRequestContentObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFRequestContentObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFRequestContentObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRequestContentObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRequestContentObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFRequestContentObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFRequestContentObservable(id *a1@<X8>)
{
  *a1 = CAFRequestContentObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747B84C(_BYTE *a1@<X8>)
{
  *a1 = CAFRequestContentObservable.on.getter() & 1;
  OUTLINED_FUNCTION_11();
}

void sub_23747B874(unsigned __int8 *a1)
{
  CAFRequestContentObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFRequestContentObservable(void **a1)
{
  CAFRequestContentObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRequestContentObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFRequestContentObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateUserDismissible:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateName:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

void CAFRequestContentObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFRequestContentObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFRequestContentObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23747BBF4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_on);
  OUTLINED_FUNCTION_11();
}

id sub_23747BC20(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

char *keypath_get_selector_contentURL()
{
  return sel_contentURL;
}

void sub_23747BC40(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_contentURL, a2);
}

void sub_23747BC5C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_userDismissible);
  OUTLINED_FUNCTION_11();
}

void sub_23747BC88(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayPanelIdentifier, a2);
}

void sub_23747BCA4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayZoneIdentifier, a2);
}

void sub_23747BCC0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFRequestContentObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRequestContent(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFRequestContentObservable and conformance CAFRequestContentObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFRequestContentObservable, (uint64_t)&protocol conformance descriptor for CAFRequestContentObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFRequestContentObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRequestContent and conformance CAFRequestContent, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFRequestContent, (uint64_t)&protocol conformance descriptor for CAFRequestContent);
}

unint64_t type metadata accessor for CAFRequestContent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFRequestContent;
  if (!lazy cache variable for type metadata for CAFRequestContent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFRequestContent);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFRequestContentObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRequestContentObservable and conformance CAFRequestContentObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFRequestContentObservable, (uint64_t)&protocol conformance descriptor for CAFRequestContentObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFRequestContentObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFRequestContentObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.contentURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$contentURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.userDismissible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$userDismissible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t partial apply for closure #1 in CAFRequestContentObservable.resetCachedDescription()()
{
  return CAFRequestContentObservable.cachedDescription.setter(0, 0);
}

id OUTLINED_FUNCTION_7_6(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t static CAFChargingState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFChargingState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFChargingState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFChargingState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFChargingState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromChargingState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFChargingState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(&lazy protocol witness table cache variable for type CAFChargingState and conformance CAFChargingState, (uint64_t)&protocol conformance descriptor for CAFChargingState);
  a1[2] = lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(&lazy protocol witness table cache variable for type CAFChargingState and conformance CAFChargingState, (uint64_t)&protocol conformance descriptor for CAFChargingState);
  result = lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(&lazy protocol witness table cache variable for type CAFChargingState and conformance CAFChargingState, (uint64_t)&protocol conformance descriptor for CAFChargingState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFChargingState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFChargingState()
{
  return CAFChargingState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFChargingState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFChargingState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFChargingState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFChargingState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFChargingState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFChargingState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFChargingState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFChargingState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void CAFMultipleSelectSetting.selectedEntryIndicesBridged.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  v1 = objc_msgSend(v0, sel_selectedEntryIndices);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_11;
LABEL_3:
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_unsignedCharValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_11;
  }
  __break(1u);
}

void CAFMultipleSelectSetting.selectedEntryIndicesBridged.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = 0;
    do
    {
      v5 = v4 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedChar_, *(unsigned __int8 *)(a1 + v4 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 = v5;
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setSelectedEntryIndices_, isa);

}

id CAFMultipleSelectSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
}

uint64_t CAFMultipleSelectSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFMultipleSelectSettingObservable.userVisibleLabel.getter()
{
  CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectSettingObservable.$userVisibleLabel.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.sectionIdentifier.getter()
{
  CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFMultipleSelectSettingObservable.$sectionIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFMultipleSelectSettingObservable.$sortOrder.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectSettingObservable.$category.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.identifier.getter()
{
  CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectSettingObservable.$identifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.disabled.getter()
{
  CAFMultipleSelectSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectSettingObservable.$disabled.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.limitableUIElement.getter()
{
  CAFMultipleSelectSettingObservable.disabled.getter();
}

void CAFMultipleSelectSettingObservable.$limitableUIElement.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.hidden.getter()
{
  CAFMultipleSelectSettingObservable.disabled.getter();
}

void CAFMultipleSelectSettingObservable.$hidden.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.showAudioBrandLogo.getter()
{
  CAFMultipleSelectSettingObservable.disabled.getter();
}

void CAFMultipleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.vehicleLayoutKey.getter()
{
  CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.symbolName.getter()
{
  CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectSettingObservable.$symbolName.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectSettingObservable.$prominenceInfo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMultipleSelectSettingObservable.selectSettingEntryList.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMultipleSelectSettingObservable.$selectSettingEntryList.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__selectSettingEntryList, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFMultipleSelectSettingObservable.selectedEntryIndices : CAFMultipleSelectSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFMultipleSelectSettingObservable.selectedEntryIndices.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFMultipleSelectSettingObservable.selectedEntryIndices : CAFMultipleSelectSettingObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFMultipleSelectSettingObservable.selectedEntryIndices.setter(v0);
}

uint64_t CAFMultipleSelectSettingObservable.selectedEntryIndices.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  v2 = v1;
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v2;
}

uint64_t CAFMultipleSelectSettingObservable.selectedEntryIndices.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFMultipleSelectSettingObservable.selectedEntryIndices.modify(_QWORD *a1)
{
  void *v1;
  uint64_t v3;

  a1[1] = v1;
  a1[2] = swift_getKeyPath();
  a1[3] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1);
  *a1 = v3;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFMultipleSelectSettingObservable.selectedEntryIndices.modify(uint64_t *a1, char a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *a1;
  v5 = (id)a1[1];
  v8 = a1 + 2;
  v7 = a1[2];
  v6 = v8[1];
  if ((a2 & 1) == 0)
    return specialized static SafePublished.subscript.setter(v4, v5, v7, v6);
  v9 = OUTLINED_FUNCTION_71_0();
  specialized static SafePublished.subscript.setter(v9, v5, v7, v6);
  return OUTLINED_FUNCTION_5_1();
}

uint64_t CAFMultipleSelectSettingObservable.$selectedEntryIndices.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFMultipleSelectSettingObservable.name.getter()
{
  CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFMultipleSelectSettingObservable.$name.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable._description.getter()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed];
  v3 = 0x73696765726E753CLL;
  v4 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForSelectSettingEntryList))
  {
    CAFMultipleSelectSettingObservable.selectSettingEntryList.getter();
    v6 = v5;
    v7 = objc_msgSend(v5, sel_description);
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v8;

  }
  if (objc_msgSend(v2, sel_registeredForSelectedEntryIndices))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    specialized static SafePublished.subscript.getter(v1);
    v10 = v9;
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    MEMORY[0x23B811C3C](v10, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(97);
  OUTLINED_FUNCTION_12_0(0xD000000000000025, (uint64_t)"<CAFMultipleSelectSettingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_12_0(0xD00000000000001BLL, (uint64_t)" { selectSettingEntryList: ");
  v11._countAndFlagsBits = v3;
  v11._object = v4;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x80000002374E2040;
  v12._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v12);
  v13._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 4095264;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  return 0;
}

void CAFMultipleSelectSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    OUTLINED_FUNCTION_71_0();
  }
  else
  {
    CAFMultipleSelectSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFMultipleSelectSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_24_1();
}

void CAFMultipleSelectSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFMultipleSelectSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFMultipleSelectSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  objc_super v32;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__selectSettingEntryList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, CAFSelectSettingEntryList>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__selectedEntryIndices;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFMultipleSelectSettingObservable, [UInt8]>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v26] = v27;
  v28 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v28] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed] = a1;
  v29 = a1;

  v32.receiver = v9;
  v32.super_class = (Class)type metadata accessor for CAFMultipleSelectSettingObservable();
  v30 = objc_msgSendSuper2(&v32, sel_init);
  objc_msgSend(v29, sel_registerObserver_, v30);

  return v30;
}

uint64_t CAFMultipleSelectSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFMultipleSelectSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFMultipleSelectSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFMultipleSelectSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFMultipleSelectSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFMultipleSelectSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFMultipleSelectSettingObservable(id *a1@<X8>)
{
  *a1 = CAFMultipleSelectSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFMultipleSelectSettingObservable(void **a1)
{
  CAFMultipleSelectSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFMultipleSelectSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFMultipleSelectSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFMultipleSelectSettingObservable.multipleSelectSettingService(_:didUpdateSelectSettingEntryList:)(uint64_t a1, void *a2)
{
  id v3;

  OUTLINED_FUNCTION_15_1();
  v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFMultipleSelectSettingObservable.multipleSelectSettingService(_:didUpdateSelectedEntryIndices:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_61_0();
  if (a2 >> 62)
  {
    OUTLINED_FUNCTION_40();
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_40();
  }
  if (!v3)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27();
    return;
  }
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B811D2C](i, a2);
      else
        v5 = *(id *)(a2 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, sel_unsignedCharValue);

      v8 = *(_QWORD *)(v9 + 16);
      if (v8 >= *(_QWORD *)(v9 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t CAFMultipleSelectSettingObservable.multipleSelectSettingService(_:didUpdateName:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFMultipleSelectSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFMultipleSelectSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFMultipleSelectSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23747DD20()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectSettingObservable.selectedEntryIndices.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747DD44(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_23747DD60(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_23747DD80(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_23747DDAC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_23747DDC8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747DDE8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747DE08()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747DE28()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23747DE48(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void sub_23747DE64(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

char *keypath_get_selector_selectSettingEntryList()
{
  return sel_selectSettingEntryList;
}

id key path getter for CAFMultipleSelectSetting.selectSettingEntryList : CAFMultipleSelectSetting@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_selectSettingEntryList);
  *a2 = result;
  return result;
}

void sub_23747DECC()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFMultipleSelectSetting.selectedEntryIndicesBridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void key path setter for CAFMultipleSelectSetting.selectedEntryIndicesBridged : CAFMultipleSelectSetting()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CAFMultipleSelectSetting.selectedEntryIndicesBridged.setter(v0);
}

void sub_23747DF18(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFMultipleSelectSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFMultipleSelectSetting()
{
  lazy protocol witness table accessor for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, (uint64_t)&protocol conformance descriptor for CAFMultipleSelectSettingObservable);
}

unint64_t lazy protocol witness table accessor for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting;
  if (!lazy protocol witness table cache variable for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFMultipleSelectSetting);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFMultipleSelectSetting, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFMultipleSelectSettingObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, (uint64_t)&protocol conformance descriptor for CAFMultipleSelectSettingObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFMultipleSelectSettingObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFMultipleSelectSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectSettingEntryList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$selectSettingEntryList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectedEntryIndices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectedEntryIndices.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectedEntryIndices.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$selectedEntryIndices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t partial apply for closure #1 in CAFMultipleSelectSettingObservable.resetCachedDescription()()
{
  return CAFMultipleSelectSettingObservable.cachedDescription.setter(0, 0);
}

id CAFVehicleInformationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed);
}

uint64_t CAFVehicleInformationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFVehicleInformationObservable.vehicleUserVisibleLabel.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v2;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  OUTLINED_FUNCTION_33_0();
}

void CAFVehicleInformationObservable.$vehicleUserVisibleLabel.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

void CAFVehicleInformationObservable._description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed), sel_registeredForVehicleUserVisibleLabel))CAFVehicleInformationObservable.vehicleUserVisibleLabel.getter();
  _StringGuts.grow(_:)(69);
  v1._countAndFlagsBits = 0xD000000000000022;
  v1._object = (void *)0x80000002374E20F0;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000002374E2120;
  v2._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 4095264;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFVehicleInformationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFVehicleInformationObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFVehicleInformationObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFVehicleInformationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFVehicleInformationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFVehicleInformationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable__vehicleUserVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVehicleInformationObservable, String>);
  swift_allocObject();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v9;
  v13.super_class = (Class)type metadata accessor for CAFVehicleInformationObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFVehicleInformationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFVehicleInformationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFVehicleInformationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFVehicleInformationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFVehicleInformationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFVehicleInformationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFVehicleInformationObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFVehicleInformationObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFVehicleInformationObservable(void **a1)
{
  CAFVehicleInformationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFVehicleInformationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFVehicleInformationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFVehicleInformationObservable.vehicleInformationService(_:didUpdateVehicleUserVisibleLabel:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFVehicleInformationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFVehicleInformationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFVehicleInformationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_vehicleUserVisibleLabel()
{
  return sel_vehicleUserVisibleLabel;
}

void key path getter for CAFVehicleInformation.vehicleUserVisibleLabel : CAFVehicleInformation(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_vehicleUserVisibleLabel);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t type metadata accessor for CAFVehicleInformationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFVehicleInformation(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFVehicleInformationObservable, (uint64_t)&protocol conformance descriptor for CAFVehicleInformationObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFVehicleInformationObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVehicleInformation and conformance CAFVehicleInformation, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFVehicleInformation, (uint64_t)&protocol conformance descriptor for CAFVehicleInformation);
}

unint64_t type metadata accessor for CAFVehicleInformation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFVehicleInformation;
  if (!lazy cache variable for type metadata for CAFVehicleInformation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFVehicleInformation);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFVehicleInformationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFVehicleInformationObservable, (uint64_t)&protocol conformance descriptor for CAFVehicleInformationObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFVehicleInformationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFVehicleInformationObservable.vehicleUserVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFVehicleInformationObservable.$vehicleUserVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFVehicleInformationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFVehicleInformationObservable.resetCachedDescription()()
{
  return CAFVehicleInformationObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFBatteryLevelState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFBatteryLevelState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFBatteryLevelState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFBatteryLevelState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFBatteryLevelState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromBatteryLevelState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFBatteryLevelState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(&lazy protocol witness table cache variable for type CAFBatteryLevelState and conformance CAFBatteryLevelState, (uint64_t)&protocol conformance descriptor for CAFBatteryLevelState);
  a1[2] = lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(&lazy protocol witness table cache variable for type CAFBatteryLevelState and conformance CAFBatteryLevelState, (uint64_t)&protocol conformance descriptor for CAFBatteryLevelState);
  result = lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(&lazy protocol witness table cache variable for type CAFBatteryLevelState and conformance CAFBatteryLevelState, (uint64_t)&protocol conformance descriptor for CAFBatteryLevelState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFBatteryLevelState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFBatteryLevelState()
{
  return CAFBatteryLevelState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFBatteryLevelState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFBatteryLevelState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFBatteryLevelState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFBatteryLevelState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFBatteryLevelState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFBatteryLevelState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFBatteryLevelState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFBatteryLevelState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFEnginePowerObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed);
}

uint64_t CAFEnginePowerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEnginePowerObservable.power.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFEnginePowerObservable.$power.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__power, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMin.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

void CAFEnginePowerObservable.$powerMin.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMax.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

void CAFEnginePowerObservable.$powerMax.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMarkerAvailableMin.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

void CAFEnginePowerObservable.$powerMarkerAvailableMin.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMarkerAvailableMax.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

void CAFEnginePowerObservable.$powerMarkerAvailableMax.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = 0x73696765726E753CLL;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_143();
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_14_4(v2, sel_registeredForPower);
  OUTLINED_FUNCTION_7_4();
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFEnginePowerObservable.power.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    v0 = OUTLINED_FUNCTION_2_7();
    v4 = v5;
    v3 = OUTLINED_FUNCTION_1_6();
  }
  v30 = v0;
  OUTLINED_FUNCTION_14_4(v3, sel_registeredForPowerMin);
  OUTLINED_FUNCTION_7_4();
  v7 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFEnginePowerObservable.powerMin.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    v0 = OUTLINED_FUNCTION_2_7();
    v7 = v8;
    v6 = OUTLINED_FUNCTION_1_6();
  }
  v28 = v0;
  OUTLINED_FUNCTION_14_4(v6, sel_registeredForPowerMax);
  OUTLINED_FUNCTION_7_4();
  v10 = (void *)0xEE003E6465726574;
  if ((_DWORD)v9)
  {
    CAFEnginePowerObservable.powerMax.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    v0 = OUTLINED_FUNCTION_2_7();
    v10 = v11;
    v9 = OUTLINED_FUNCTION_1_6();
  }
  v12 = (uint64_t)OUTLINED_FUNCTION_14_4(v9, sel_registeredForPowerMarkerAvailableMin);
  v13 = 0x73696765726E753CLL;
  v14 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    CAFEnginePowerObservable.powerMarkerAvailableMin.getter();
    v12 = OUTLINED_FUNCTION_13_5();
    v13 = v12;
    v14 = v15;
  }
  v16 = (void *)0xEE003E6465726574;
  if (OUTLINED_FUNCTION_14_4(v12, sel_registeredForPowerMarkerAvailableMax))
  {
    CAFEnginePowerObservable.powerMarkerAvailableMax.getter();
    v31 = OUTLINED_FUNCTION_13_5();
    v16 = v17;
  }
  _StringGuts.grow(_:)(130);
  OUTLINED_FUNCTION_0_7((uint64_t)"<CAFEnginePowerObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v18._countAndFlagsBits = 0x7265776F70207B20;
  v18._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v30;
  v19._object = v4;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = OUTLINED_FUNCTION_16_6();
  v20._object = (void *)0xEC000000203A6E69;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v28;
  v21._object = v7;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = OUTLINED_FUNCTION_16_6();
  String.append(_:)(v22);
  v23._countAndFlagsBits = v0;
  v23._object = v10;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_7((uint64_t)", powerMarkerAvailableMin: ");
  v24._countAndFlagsBits = v13;
  v24._object = v14;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_7((uint64_t)", powerMarkerAvailableMax: ");
  v25._countAndFlagsBits = v31;
  v25._object = v16;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 4095264;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  return 0;
}

uint64_t CAFEnginePowerObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFEnginePowerObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFEnginePowerObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFEnginePowerObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFEnginePowerObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFEnginePowerObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_super v21;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__power;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEnginePowerObservable, Measurement<NSUnitPower>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMin;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_11_4();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMax;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_11_4();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMin;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEnginePowerObservable, Measurement<NSUnitPower>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_10_5();
  *(_QWORD *)&v8[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMax;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_10_5();
  *(_QWORD *)&v8[v16] = v17;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed] = a1;
  v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFEnginePowerObservable();
  v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFEnginePowerObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFEnginePowerObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFEnginePowerObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEnginePowerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEnginePowerObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFEnginePowerObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEnginePowerObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFEnginePowerObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFEnginePowerObservable(void **a1)
{
  CAFEnginePowerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEnginePowerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFEnginePowerObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__power, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMin, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_143();
  v12 = v11 - v10;
  OUTLINED_FUNCTION_98(v13, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = a3;
  v15 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMax, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMarkerAvailableMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMin, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMarkerAvailableMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMax, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMarkerAvailableMin:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_143();
  v13 = v12 - v11;
  if (a4)
  {
    OUTLINED_FUNCTION_98(v10, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
    v15 = v13;
    v16 = 0;
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
    v15 = v13;
    v16 = 1;
  }
  __swift_storeEnumTagSinglePayload(v15, v16, 1, v14);
  v17 = a3;
  v18 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitPower>?(v13);
}

uint64_t CAFEnginePowerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFEnginePowerObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFEnginePowerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_power()
{
  return sel_power;
}

void sub_23747FE78(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEnginePower.power : CAFEnginePower(a1, a2, a3, (SEL *)&selRef_power);
}

char *keypath_get_selector_powerMin()
{
  return sel_powerMin;
}

void key path getter for CAFEnginePower.power : CAFEnginePower(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  OUTLINED_FUNCTION_98((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_23747FEF8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEnginePower.power : CAFEnginePower(a1, a2, a3, (SEL *)&selRef_powerMin);
}

char *keypath_get_selector_powerMax()
{
  return sel_powerMax;
}

void sub_23747FF20(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEnginePower.power : CAFEnginePower(a1, a2, a3, (SEL *)&selRef_powerMax);
}

char *keypath_get_selector_powerMarkerAvailableMin()
{
  return sel_powerMarkerAvailableMin;
}

uint64_t sub_23747FF48(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFEnginePower.powerMarkerAvailableMin : CAFEnginePower(a1, a2, a3, (SEL *)&selRef_powerMarkerAvailableMin);
}

char *keypath_get_selector_powerMarkerAvailableMax()
{
  return sel_powerMarkerAvailableMax;
}

uint64_t key path getter for CAFEnginePower.powerMarkerAvailableMin : CAFEnginePower(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    OUTLINED_FUNCTION_98((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  return __swift_storeEnumTagSinglePayload(v4, v7, 1, v8);
}

uint64_t sub_23747FFEC(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFEnginePower.powerMarkerAvailableMin : CAFEnginePower(a1, a2, a3, (SEL *)&selRef_powerMarkerAvailableMax);
}

uint64_t type metadata accessor for CAFEnginePowerObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEnginePower()
{
  lazy protocol witness table accessor for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable, (uint64_t)&protocol conformance descriptor for CAFEnginePowerObservable);
}

unint64_t lazy protocol witness table accessor for type CAFEnginePower and conformance CAFEnginePower()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFEnginePower and conformance CAFEnginePower;
  if (!lazy protocol witness table cache variable for type CAFEnginePower and conformance CAFEnginePower)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFEnginePower);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFEnginePower, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEnginePower and conformance CAFEnginePower);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFEnginePowerObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable, (uint64_t)&protocol conformance descriptor for CAFEnginePowerObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFEnginePowerObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFEnginePowerObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.power.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$power.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMarkerAvailableMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMarkerAvailableMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMarkerAvailableMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMarkerAvailableMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t outlined destroy of Measurement<NSUnitPower>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFEnginePowerObservable.resetCachedDescription()()
{
  return CAFEnginePowerObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<NSUnitPower> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitPower> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitPower> and conformance Measurement<A>);
  }
  return result;
}

void OUTLINED_FUNCTION_0_7(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_1_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_10_5()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

void OUTLINED_FUNCTION_11_4()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_16_6()
{
  return 0x4D7265776F70202CLL;
}

id CAFVolumeObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
}

uint64_t CAFVolumeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFVolumeObservable.volumeType.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFVolumeObservable.$volumeType.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__volumeType, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFVolumeObservable.volume : CAFVolumeObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFVolumeObservable.volume.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFVolumeObservable.volume : CAFVolumeObservable(unsigned __int8 *a1)
{
  return CAFVolumeObservable.volume.setter(*a1);
}

uint64_t CAFVolumeObservable.volume.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFVolumeObservable.volume.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFVolumeObservable.volume.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFVolumeObservable.volume.modify;
}

void CAFVolumeObservable.volume.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFVolumeObservable.$volume.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFVolumeObservable.userVisibleLabel.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFVolumeObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFVolumeObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFVolumeObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVolumeObservable._description.getter(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  v1 = OUTLINED_FUNCTION_67(a1, sel_registeredForVolumeType);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    CAFVolumeObservable.volumeType.getter();
    v1 = (id)NSStringFromVolumeType();
    if (v1)
    {
      v4 = v1;
      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v3 = v5;

    }
    else
    {
      v3 = (void *)0xE900000000000029;
      v2 = 0x6E776F6E6B6E7528;
    }
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_67((uint64_t)v1, sel_registeredForVolume);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFVolumeObservable.volume.getter();
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
    v8 = v9;
  }
  if (OUTLINED_FUNCTION_67(v6, sel_registeredForUserVisibleLabel))
  {
    CAFVolumeObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(78);
  v10._countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x80000002374E22D0;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0x6D756C6F76207B20;
  v11._object = (void *)0xEF203A6570795465;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x656D756C6F76202CLL;
  v13._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x80000002374E22F0;
  v15._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v15);
  v16._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 4095264;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t CAFVolumeObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFVolumeObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFVolumeObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFVolumeObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFVolumeObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFVolumeObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__volumeType;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVolumeObservable, CAFVolumeType>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__volume;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFVolumeObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__userVisibleLabel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVolumeObservable, String?>);
  OUTLINED_FUNCTION_127();
  v13 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  v14 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVolumeObservable, String>);
  OUTLINED_FUNCTION_127();
  v15 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFVolumeObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFVolumeObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFVolumeObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFVolumeObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFVolumeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFVolumeObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFVolumeObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFVolumeObservable(id *a1@<X8>)
{
  *a1 = CAFVolumeObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFVolumeObservable(void **a1)
{
  CAFVolumeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFVolumeObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFVolumeObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateVolumeType:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateVolume:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateUserVisibleLabel:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void CAFVolumeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFVolumeObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFVolumeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237481320(_BYTE *a1@<X8>)
{
  *a1 = CAFVolumeObservable.volume.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237481344(unsigned __int8 *a1)
{
  CAFVolumeObservable.volume.setter(*a1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_volumeType()
{
  return sel_volumeType;
}

void sub_237481370(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_volumeType);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_volume()
{
  return sel_volume;
}

void sub_2374813A8(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_volume);
  OUTLINED_FUNCTION_11();
}

id sub_2374813D4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVolume_, *a1);
}

uint64_t type metadata accessor for CAFVolumeObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFVolume(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFVolumeObservable, (uint64_t)&protocol conformance descriptor for CAFVolumeObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFVolumeObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVolume and conformance CAFVolume, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFVolume, (uint64_t)&protocol conformance descriptor for CAFVolume);
}

unint64_t type metadata accessor for CAFVolume()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFVolume;
  if (!lazy cache variable for type metadata for CAFVolume)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFVolume);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFVolumeObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFVolumeObservable, (uint64_t)&protocol conformance descriptor for CAFVolumeObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFVolumeObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFVolumeObservable.volumeType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$volumeType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.volume.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.volume.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.volume.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$volume.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFVolumeObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t partial apply for closure #1 in CAFVolumeObservable.resetCachedDescription()()
{
  return CAFVolumeObservable.cachedDescription.setter(0, 0);
}

id CAFFuelConsumptionObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed);
}

uint64_t CAFFuelConsumptionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFFuelConsumptionObservable.fuelEfficiency.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFFuelConsumptionObservable.$fuelEfficiency.getter()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFFuelConsumptionObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed), sel_registeredForFuelEfficiency))
  {
    CAFFuelConsumptionObservable.fuelEfficiency.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>();
    v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v7 = (void *)0xEE003E6465726574;
    v5 = 0x73696765726E753CLL;
  }
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v8._countAndFlagsBits = 0xD00000000000001FLL;
  v8._object = (void *)0x80000002374E2370;
  String.append(_:)(v8);
  v13[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v9._object = (void *)0x80000002374E2390;
  v9._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v5;
  v10._object = v7;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 4095264;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  return v14;
}

uint64_t CAFFuelConsumptionObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFFuelConsumptionObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFFuelConsumptionObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFFuelConsumptionObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFFuelConsumptionObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFFuelConsumptionObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable__fuelEfficiency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFFuelConsumptionObservable, Measurement<NSUnitFuelEfficiency>>);
  swift_allocObject();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFFuelConsumptionObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFFuelConsumptionObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFFuelConsumptionObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFFuelConsumptionObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFFuelConsumptionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFFuelConsumptionObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFFuelConsumptionObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFFuelConsumptionObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFFuelConsumptionObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFFuelConsumptionObservable(void **a1)
{
  CAFFuelConsumptionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFFuelConsumptionObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFFuelConsumptionObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFFuelConsumptionObservable.fuelConsumptionService(_:didUpdateFuelEfficiency:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFFuelConsumptionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFFuelConsumptionObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFFuelConsumptionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void key path getter for CAFFuelConsumption.fuelEfficiency : CAFFuelConsumption(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_fuelEfficiency);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitFuelEfficiency);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

uint64_t type metadata accessor for CAFFuelConsumptionObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFFuelConsumption()
{
  lazy protocol witness table accessor for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable(&lazy protocol witness table cache variable for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable, (uint64_t)&protocol conformance descriptor for CAFFuelConsumptionObservable);
}

unint64_t lazy protocol witness table accessor for type CAFFuelConsumption and conformance CAFFuelConsumption()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFFuelConsumption and conformance CAFFuelConsumption;
  if (!lazy protocol witness table cache variable for type CAFFuelConsumption and conformance CAFFuelConsumption)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFFuelConsumption);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFFuelConsumption, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFFuelConsumption and conformance CAFFuelConsumption);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFFuelConsumptionObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable(&lazy protocol witness table cache variable for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable, (uint64_t)&protocol conformance descriptor for CAFFuelConsumptionObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFFuelConsumptionObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFFuelConsumptionObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFFuelConsumptionObservable.fuelEfficiency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFFuelConsumptionObservable.$fuelEfficiency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFFuelConsumptionObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFFuelConsumptionObservable.resetCachedDescription()()
{
  return CAFFuelConsumptionObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>);
  }
  return result;
}

id CAFDriveModeObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed);
}

uint64_t CAFDriveModeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFDriveModeObservable.identifiers.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFDriveModeObservable.$identifiers.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__identifiers, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFDriveModeObservable.currentIndex.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned int v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  OUTLINED_FUNCTION_35_1();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFDriveModeObservable.$currentIndex.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__currentIndex, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFDriveModeObservable._description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  v0._object = (void *)0x80000002374E2430;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFDriveModeObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFDriveModeObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFDriveModeObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFDriveModeObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFDriveModeObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFDriveModeObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__identifiers;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDriveModeObservable, [String]>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__currentIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDriveModeObservable, UInt32>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFDriveModeObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFDriveModeObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFDriveModeObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFDriveModeObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDriveModeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDriveModeObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFDriveModeObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDriveModeObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFDriveModeObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFDriveModeObservable(void **a1)
{
  CAFDriveModeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDriveModeObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFDriveModeObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDriveModeObservable.modeItemsService(_:didUpdateIdentifiers:)()
{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFDriveModeObservable.modeItemsService(_:didUpdateCurrentIndex:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFDriveModeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFDriveModeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFDriveModeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_identifiers()
{
  return sel_identifiers;
}

void key path getter for CAFModeItems.identifiers : CAFDriveMode(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, sel_identifiers);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a2 = v4;
}

id sub_237482AC0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_currentIndex);
  *a2 = (_DWORD)result;
  return result;
}

uint64_t type metadata accessor for CAFDriveModeObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDriveMode(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDriveModeObservable and conformance CAFDriveModeObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDriveModeObservable, (uint64_t)&protocol conformance descriptor for CAFDriveModeObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDriveModeObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDriveMode and conformance CAFDriveMode, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFDriveMode, (uint64_t)&protocol conformance descriptor for CAFDriveMode);
}

unint64_t type metadata accessor for CAFDriveMode()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFDriveMode;
  if (!lazy cache variable for type metadata for CAFDriveMode)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDriveMode);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFDriveModeObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDriveModeObservable and conformance CAFDriveModeObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDriveModeObservable, (uint64_t)&protocol conformance descriptor for CAFDriveModeObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFDriveModeObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFDriveModeObservable.identifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.$identifiers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.currentIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.$currentIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t partial apply for closure #1 in CAFDriveModeObservable.resetCachedDescription()()
{
  return CAFDriveModeObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFEqualizerType.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFEqualizerType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFEqualizerType.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFEqualizerType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFEqualizerType.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromEqualizerType();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFEqualizerType(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(&lazy protocol witness table cache variable for type CAFEqualizerType and conformance CAFEqualizerType, (uint64_t)&protocol conformance descriptor for CAFEqualizerType);
  a1[2] = lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(&lazy protocol witness table cache variable for type CAFEqualizerType and conformance CAFEqualizerType, (uint64_t)&protocol conformance descriptor for CAFEqualizerType);
  result = lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(&lazy protocol witness table cache variable for type CAFEqualizerType and conformance CAFEqualizerType, (uint64_t)&protocol conformance descriptor for CAFEqualizerType);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFEqualizerType(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFEqualizerType()
{
  return CAFEqualizerType.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFEqualizerType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFEqualizerType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFEqualizerType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFEqualizerType]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFEqualizerType] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFEqualizerType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFEqualizerType.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFEqualizerType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFPairedDevicesActionObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed);
}

uint64_t CAFPairedDevicesActionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFPairedDevicesActionObservable.pairedDeviceActionRequest : CAFPairedDevicesActionObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFPairedDevicesActionObservable.pairedDeviceActionRequest.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFPairedDevicesActionObservable.pairedDeviceActionRequest : CAFPairedDevicesActionObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFPairedDevicesActionObservable.pairedDeviceActionRequest.setter((uint64_t)v1);
}

uint64_t CAFPairedDevicesActionObservable.pairedDeviceActionRequest.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  v2 = v1;
  OUTLINED_FUNCTION_27();
  swift_release();
  return v2;
}

void sub_23748307C(uint64_t *a1@<X8>)
{
  *a1 = CAFPairedDevicesActionObservable.pairedDeviceActionRequest.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFPairedDevicesActionObservable.pairedDeviceActionRequest.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFPairedDevicesActionObservable.pairedDeviceActionRequest.modify(_QWORD *a1)
{
  void *v1;
  uint64_t v3;

  a1[1] = v1;
  a1[2] = swift_getKeyPath();
  a1[3] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1);
  *a1 = v3;
  OUTLINED_FUNCTION_24_1();
}

void CAFPairedDevicesActionObservable.pairedDeviceActionRequest.modify(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v2 = *(void **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v13 = *(id *)a1;
    v3 = v2;
    v4 = OUTLINED_FUNCTION_4_6();
    specialized static SafePublished.subscript.setter(v4, v5, v6, v7);

  }
  else
  {
    v8 = v2;
    v9 = OUTLINED_FUNCTION_4_6();
    specialized static SafePublished.subscript.setter(v9, v10, v11, v12);
  }
}

uint64_t CAFPairedDevicesActionObservable.$pairedDeviceActionRequest.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFPairedDevicesActionObservable._description.getter()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  if (objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed], sel_registeredForPairedDeviceActionRequest))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    specialized static SafePublished.subscript.getter(v0);
    OUTLINED_FUNCTION_25();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFDeviceActionRequest?);
    v1 = String.init<A>(describing:)();
    v3 = v2;
  }
  else
  {
    v3 = (void *)0xEE003E6465726574;
    v1 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(72);
  v4._countAndFlagsBits = 0xD000000000000023;
  v4._object = (void *)0x80000002374E24E0;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._object = (void *)0x80000002374E2510;
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v1;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  return 0;
}

void CAFPairedDevicesActionObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock)
                          + 16);
  swift_retain();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFPairedDevicesActionObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFPairedDevicesActionObservable.cachedDescription.setter(v4, v6);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_24_1();
}

id CAFPairedDevicesActionObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFPairedDevicesActionObservable.init(_:)(a1);
}

id CAFPairedDevicesActionObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable__pairedDeviceActionRequest;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFPairedDevicesActionObservable, CAFDeviceActionRequest?>);
  swift_allocObject();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed] = a1;
  v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFPairedDevicesActionObservable();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFPairedDevicesActionObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFPairedDevicesActionObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return OUTLINED_FUNCTION_27();
}

id CAFPairedDevicesActionObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPairedDevicesActionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPairedDevicesActionObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFPairedDevicesActionObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFPairedDevicesActionObservable(id *a1@<X8>)
{
  *a1 = CAFPairedDevicesActionObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

id protocol witness for CAFObservable.init(_:) in conformance CAFPairedDevicesActionObservable(void **a1)
{
  return CAFPairedDevicesActionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPairedDevicesActionObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFPairedDevicesActionObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPairedDevicesActionObservable.pairedDevicesActionService(_:didUpdatePairedDeviceActionRequest:)(uint64_t a1, void *a2)
{
  id v3;

  OUTLINED_FUNCTION_15_0();
  v3 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

void CAFPairedDevicesActionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFPairedDevicesActionObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFPairedDevicesActionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_pairedDeviceActionRequest()
{
  return sel_pairedDeviceActionRequest;
}

id key path getter for CAFPairedDevicesAction.pairedDeviceActionRequest : CAFPairedDevicesAction@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_pairedDeviceActionRequest);
  *a2 = result;
  return result;
}

id sub_237483A10(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPairedDeviceActionRequest_, *a1);
}

uint64_t type metadata accessor for CAFPairedDevicesActionObservable()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPairedDevicesAction(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFPairedDevicesActionObservable, (uint64_t)&protocol conformance descriptor for CAFPairedDevicesActionObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPairedDevicesActionObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesAction and conformance CAFPairedDevicesAction, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFPairedDevicesAction, (uint64_t)&protocol conformance descriptor for CAFPairedDevicesAction);
}

unint64_t type metadata accessor for CAFPairedDevicesAction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFPairedDevicesAction;
  if (!lazy cache variable for type metadata for CAFPairedDevicesAction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPairedDevicesAction);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFPairedDevicesActionObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFPairedDevicesActionObservable, (uint64_t)&protocol conformance descriptor for CAFPairedDevicesActionObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFPairedDevicesActionObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFPairedDevicesActionObservable.pairedDeviceActionRequest.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFPairedDevicesActionObservable.pairedDeviceActionRequest.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFPairedDevicesActionObservable.pairedDeviceActionRequest.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFPairedDevicesActionObservable.$pairedDeviceActionRequest.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFPairedDevicesActionObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t partial apply for closure #1 in CAFPairedDevicesActionObservable.resetCachedDescription()()
{
  return CAFPairedDevicesActionObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  uint64_t v0;

  return v0;
}

id CAFEqualizerObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
}

uint64_t CAFEqualizerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFEqualizerObservable.type.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_10_6();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFEqualizerObservable.$type.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__type, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFEqualizerObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_10_6();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFEqualizerObservable.$sortOrder.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFEqualizerObservable.value : CAFEqualizerObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFEqualizerObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFEqualizerObservable.value : CAFEqualizerObservable(unsigned __int8 *a1)
{
  return CAFEqualizerObservable.value.setter(*a1);
}

uint64_t CAFEqualizerObservable.value.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFEqualizerObservable.value.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFEqualizerObservable.value.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFEqualizerObservable.value.modify;
}

void CAFEqualizerObservable.value.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFEqualizerObservable.$value.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFEqualizerObservable.userVisibleLabel.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFEqualizerObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFEqualizerObservable.name.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFEqualizerObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFEqualizerObservable._description.getter(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;

  v1 = OUTLINED_FUNCTION_152(a1, sel_registeredForEqualizerType);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    CAFEqualizerObservable.type.getter();
    v1 = (id)NSStringFromEqualizerType();
    if (v1)
    {
      v4 = v1;
      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v3 = v5;

    }
    else
    {
      v3 = (void *)0xE900000000000029;
      v2 = 0x6E776F6E6B6E7528;
    }
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_152((uint64_t)v1, sel_registeredForSortOrder);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFEqualizerObservable.sortOrder.getter();
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
    v8 = v9;
  }
  v10 = (uint64_t)OUTLINED_FUNCTION_152(v6, sel_registeredForEqualizerValue);
  v11 = 0x73696765726E753CLL;
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFEqualizerObservable.value.getter();
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v11 = v10;
    v12 = v13;
  }
  if (OUTLINED_FUNCTION_152(v10, sel_registeredForUserVisibleLabel))
  {
    CAFEqualizerObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(89);
  v14._countAndFlagsBits = 0xD000000000000019;
  v14._object = (void *)0x80000002374E25B0;
  String.append(_:)(v14);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_17_3(0x707974207B20);
  v15._countAndFlagsBits = v2;
  v15._object = v3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x724F74726F73202CLL;
  v16._object = (void *)0xED0000203A726564;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v7;
  v17._object = v8;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_3(0x756C6176202CLL);
  v18._countAndFlagsBits = v11;
  v18._object = v12;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._object = (void *)0x80000002374E22F0;
  v19._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v19);
  v20._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 4095264;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  return 0;
}

uint64_t CAFEqualizerObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFEqualizerObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFEqualizerObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFEqualizerObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFEqualizerObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFEqualizerObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_super v21;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__type;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, CAFEqualizerType>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__value;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFEqualizerObservable, Int8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__userVisibleLabel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, String?>);
  OUTLINED_FUNCTION_127();
  v15 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  v16 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, String>);
  OUTLINED_FUNCTION_127();
  v17 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed] = a1;
  v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFEqualizerObservable();
  v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFEqualizerObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFEqualizerObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFEqualizerObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEqualizerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEqualizerObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFEqualizerObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFEqualizerObservable(id *a1@<X8>)
{
  *a1 = CAFEqualizerObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFEqualizerObservable(void **a1)
{
  CAFEqualizerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEqualizerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFEqualizerObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateType:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFEqualizerObservable.equalizerService(_:didUpdateType:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__type, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateSortOrder:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFEqualizerObservable.equalizerService(_:didUpdateType:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__sortOrder, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateType:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(_QWORD))
{
  OUTLINED_FUNCTION_32();
  a4(a2);
  return swift_release();
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateValue:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateUserVisibleLabel:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

void CAFEqualizerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFEqualizerObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFEqualizerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237484D28(_BYTE *a1@<X8>)
{
  *a1 = CAFEqualizerObservable.value.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237484D4C(unsigned __int8 *a1)
{
  CAFEqualizerObservable.value.setter(*a1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_type()
{
  return sel_type;
}

void sub_237484D78(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_type);
  OUTLINED_FUNCTION_11();
}

void sub_237484DA4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_sortOrder);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_value()
{
  return sel_value;
}

void sub_237484DDC(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_value);
  OUTLINED_FUNCTION_11();
}

id sub_237484E08(char *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setValue_, *a1);
}

uint64_t type metadata accessor for CAFEqualizerObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEqualizer(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFEqualizerObservable, (uint64_t)&protocol conformance descriptor for CAFEqualizerObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFEqualizerObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFEqualizer, (uint64_t)&protocol conformance descriptor for CAFEqualizer);
}

unint64_t type metadata accessor for CAFEqualizer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFEqualizer;
  if (!lazy cache variable for type metadata for CAFEqualizer)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFEqualizerObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFEqualizerObservable, (uint64_t)&protocol conformance descriptor for CAFEqualizerObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFEqualizerObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFEqualizerObservable.type.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$type.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$value.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t partial apply for closure #1 in CAFEqualizerObservable.resetCachedDescription()()
{
  return CAFEqualizerObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  return swift_getAtKeyPath();
}

void OUTLINED_FUNCTION_17_3(uint64_t a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = a1 & 0xFFFFFFFFFFFFLL | 0x3A65000000000000;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
}

id CAFBooleanSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
}

uint64_t CAFBooleanSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFBooleanSettingObservable.userVisibleLabel.getter()
{
  CAFBooleanSettingObservable.sectionIdentifier.getter();
}

void CAFBooleanSettingObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.sectionIdentifier.getter()
{
  CAFBooleanSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFBooleanSettingObservable.$sectionIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFBooleanSettingObservable.$sortOrder.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFBooleanSettingObservable.$category.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.identifier.getter()
{
  CAFBooleanSettingObservable.sectionIdentifier.getter();
}

void CAFBooleanSettingObservable.$identifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.disabled.getter()
{
  CAFBooleanSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFBooleanSettingObservable.$disabled.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.limitableUIElement.getter()
{
  CAFBooleanSettingObservable.disabled.getter();
}

void CAFBooleanSettingObservable.$limitableUIElement.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.hidden.getter()
{
  CAFBooleanSettingObservable.disabled.getter();
}

void CAFBooleanSettingObservable.$hidden.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.showAudioBrandLogo.getter()
{
  CAFBooleanSettingObservable.disabled.getter();
}

void CAFBooleanSettingObservable.$showAudioBrandLogo.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.vehicleLayoutKey.getter()
{
  CAFBooleanSettingObservable.sectionIdentifier.getter();
}

void CAFBooleanSettingObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable.symbolName.getter()
{
  CAFBooleanSettingObservable.sectionIdentifier.getter();
}

void CAFBooleanSettingObservable.$symbolName.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFBooleanSettingObservable.$prominenceInfo.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFBooleanSettingObservable.on : CAFBooleanSettingObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFBooleanSettingObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFBooleanSettingObservable.on : CAFBooleanSettingObservable(unsigned __int8 *a1)
{
  return CAFBooleanSettingObservable.on.setter(*a1);
}

uint64_t CAFBooleanSettingObservable.on.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFBooleanSettingObservable.on.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFBooleanSettingObservable.on.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFBooleanSettingObservable.on.modify;
}

void CAFBooleanSettingObservable.on.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFBooleanSettingObservable.$on.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFBooleanSettingObservable.name.getter()
{
  CAFBooleanSettingObservable.sectionIdentifier.getter();
}

void CAFBooleanSettingObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFBooleanSettingObservable._description.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed), sel_registeredForOn))
  {
    v1 = CAFBooleanSettingObservable.on.getter();
    if ((v1 & 1) != 0)
      v2 = 1702195828;
    else
      v2 = 0x65736C6166;
    if ((v1 & 1) != 0)
      v3 = (void *)0xE400000000000000;
    else
      v3 = (void *)0xE500000000000000;
  }
  else
  {
    v3 = (void *)0xEE003E6465726574;
    v2 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(44);
  v4._object = (void *)0x80000002374E2630;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x203A6E6F207B20;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v2;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFBooleanSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFBooleanSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFBooleanSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFBooleanSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFBooleanSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFBooleanSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  objc_super v30;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__on;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFBooleanSettingObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v25 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v24] = specialized SafePublished.init(observedValuekeypath:)(v25);
  v26 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v26] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed] = a1;
  v27 = a1;

  v30.receiver = v9;
  v30.super_class = (Class)type metadata accessor for CAFBooleanSettingObservable();
  v28 = objc_msgSendSuper2(&v30, sel_init);
  objc_msgSend(v27, sel_registerObserver_, v28);

  return v28;
}

uint64_t CAFBooleanSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFBooleanSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFBooleanSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFBooleanSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFBooleanSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFBooleanSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFBooleanSettingObservable(id *a1@<X8>)
{
  *a1 = CAFBooleanSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFBooleanSettingObservable(void **a1)
{
  CAFBooleanSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFBooleanSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFBooleanSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFBooleanSettingObservable.BOOLeanSettingService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFBooleanSettingObservable.BOOLeanSettingService(_:didUpdateName:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFBooleanSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFBooleanSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFBooleanSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374865A8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFBooleanSettingObservable.on.getter() & 1;
  OUTLINED_FUNCTION_11();
}

void sub_2374865CC(unsigned __int8 *a1)
{
  CAFBooleanSettingObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_2374865EC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_237486608(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_237486628(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_237486654(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_237486670()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237486690()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374866B0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374866D0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374866F0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void sub_23748670C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

void sub_23748672C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_on);
  OUTLINED_FUNCTION_11();
}

id sub_237486758(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

void sub_23748676C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFBooleanSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFBooleanSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable, (uint64_t)&protocol conformance descriptor for CAFBooleanSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFBooleanSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFBooleanSetting and conformance CAFBooleanSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFBooleanSetting, (uint64_t)&protocol conformance descriptor for CAFBooleanSetting);
}

unint64_t type metadata accessor for CAFBooleanSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFBooleanSetting;
  if (!lazy cache variable for type metadata for CAFBooleanSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFBooleanSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFBooleanSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable, (uint64_t)&protocol conformance descriptor for CAFBooleanSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFBooleanSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))() & 0x1FF;
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t partial apply for closure #1 in CAFBooleanSettingObservable.resetCachedDescription()()
{
  return CAFBooleanSettingObservable.cachedDescription.setter(0, 0);
}

unint64_t CAFMediaSource.currentFrequencyBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_hasCurrentFrequency);
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v0, sel_currentFrequency);
  else
    v3 = 0;
  return v3 | ((unint64_t)(v2 ^ 1u) << 32);
}

id CAFMediaSourceObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
}

uint64_t CAFMediaSourceObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

unint64_t CAFMediaSourceObservable.currentFrequency.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned int v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | ((unint64_t)v5 << 32);
}

void CAFMediaSourceObservable.$currentFrequency.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentFrequency, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMediaSourceObservable.currentMediaItemIdentifier.getter()
{
  CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFMediaSourceObservable.$currentMediaItemIdentifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentMediaItemIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.mediaItems.getter()
{
  return CAFMediaSourceObservable.mediaItems.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFMediaSourceObservable.$mediaItems.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItems, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMediaSourceObservable.userVisibleLabel.getter()
{
  CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

void CAFMediaSourceObservable.$userVisibleLabel.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMediaSourceObservable.identifier.getter()
{
  CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

void CAFMediaSourceObservable.$identifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFMediaSourceObservable.mediaSourceSemanticType.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMediaSourceObservable.$mediaSourceSemanticType.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaSourceSemanticType, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMediaSourceObservable.disabled.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFMediaSourceObservable.$disabled.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.mediaItemImages.getter()
{
  return CAFMediaSourceObservable.mediaItems.getter();
}

void CAFMediaSourceObservable.$mediaItemImages.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItemImages, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFMediaSourceObservable.name.getter()
{
  CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

void CAFMediaSourceObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;

  v45._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v45._countAndFlagsBits = v1;
  OUTLINED_FUNCTION_152(v2, sel_registeredForCurrentFrequency);
  OUTLINED_FUNCTION_2_4();
  v5 = 0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFMediaSourceObservable.currentFrequency.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    v3 = OUTLINED_FUNCTION_4_7();
    v4 = v3;
  }
  v44._countAndFlagsBits = v4;
  v44._object = (void *)v5;
  OUTLINED_FUNCTION_152(v3, sel_registeredForCurrentMediaItemIdentifier);
  OUTLINED_FUNCTION_2_4();
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v6 = OUTLINED_FUNCTION_4_7();
    v7 = v6;
    v8 = v9;
  }
  v43 = v7;
  OUTLINED_FUNCTION_152(v6, sel_registeredForMediaItems);
  OUTLINED_FUNCTION_2_4();
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFMediaSourceObservable.mediaItems.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItems?);
    v10 = OUTLINED_FUNCTION_4_7();
    v11 = v10;
    v12 = v13;
  }
  v42 = v11;
  OUTLINED_FUNCTION_152(v10, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_2_4();
  v16 = (void *)0xEE003E6465726574;
  if ((_DWORD)v14)
  {
    CAFMediaSourceObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v14 = OUTLINED_FUNCTION_4_7();
    v15 = v14;
    v16 = v17;
  }
  v41 = v15;
  OUTLINED_FUNCTION_152(v14, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_2_4();
  v20 = (void *)0xEE003E6465726574;
  if ((_DWORD)v18)
  {
    CAFMediaSourceObservable.identifier.getter();
    v19 = v18;
    v20 = v21;
  }
  v40 = v19;
  OUTLINED_FUNCTION_152(v18, sel_registeredForMediaSourceSemanticType);
  OUTLINED_FUNCTION_46_2();
  v23 = (void *)0xEE003E6465726574;
  if ((_DWORD)v22)
  {
    CAFMediaSourceObservable.mediaSourceSemanticType.getter();
    v22 = (id)NSStringFromMediaSourceSemanticType();
    if (v22)
    {
      v24 = v22;
      v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v25;

    }
    else
    {
      v23 = (void *)0xE900000000000029;
      v0 = 0x6E776F6E6B6E7528;
    }
  }
  v39 = v0;
  OUTLINED_FUNCTION_152((uint64_t)v22, sel_registeredForDisabled);
  OUTLINED_FUNCTION_46_2();
  v27 = (void *)0xEE003E6465726574;
  if ((_DWORD)v26)
  {
    CAFMediaSourceObservable.disabled.getter();
    if ((v26 & 1) != 0)
      v0 = 1702195828;
    else
      v0 = 0x65736C6166;
    if ((v26 & 1) != 0)
      v27 = (void *)0xE400000000000000;
    else
      v27 = (void *)0xE500000000000000;
  }
  if (OUTLINED_FUNCTION_152(v26, sel_registeredForMediaItemImages))
  {
    CAFMediaSourceObservable.mediaItemImages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItemImages?);
    v45._countAndFlagsBits = OUTLINED_FUNCTION_4_7();
    v45._object = v28;
  }
  v46 = static String._createEmpty(withInitialCapacity:)(205);
  OUTLINED_FUNCTION_24_3(v46, 0x80000002374E2740);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_3_7(0xD000000000000015, (uint64_t)" { currentFrequency: ");
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD00000000000001ELL, (uint64_t)", currentMediaItemIdentifier: ");
  v29._countAndFlagsBits = v43;
  v29._object = v8;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2(0x49616964656D202CLL, 0x736D6574u);
  v30._countAndFlagsBits = v42;
  v30._object = v12;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000014, (uint64_t)", userVisibleLabel: ");
  v31._countAndFlagsBits = v41;
  v31._object = v16;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2(0x69746E656469202CLL, 0x72656966u);
  v32._countAndFlagsBits = v40;
  v32._object = v20;
  String.append(_:)(v32);
  v33 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24_3(v33, 0x80000002374E27A0);
  v34._countAndFlagsBits = v39;
  v34._object = v23;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 0x6C6261736964202CLL;
  v35._object = (void *)0xEC000000203A6465;
  String.append(_:)(v35);
  v36._countAndFlagsBits = v0;
  v36._object = v27;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000013, (uint64_t)", mediaItemImages: ");
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 4095264;
  v37._object = (void *)0xE300000000000000;
  String.append(_:)(v37);
  return v46;
}

uint64_t CAFMediaSourceObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFMediaSourceObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFMediaSourceObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFMediaSourceObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFMediaSourceObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFMediaSourceObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  objc_super v25;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentFrequency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, UInt32?>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentMediaItemIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItems;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, CAFMediaItems?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__userVisibleLabel;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v8[v13] = OUTLINED_FUNCTION_32_0();
  v14 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__identifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaSourceSemanticType;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, CAFMediaSourceSemanticType>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v15] = v16;
  v17 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v18 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v8[v17] = specialized SafePublished.init(observedValuekeypath:)(v18);
  v19 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItemImages;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, CAFMediaItemImages?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v19] = v20;
  v21 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v8[v21] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed] = a1;
  v22 = a1;

  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for CAFMediaSourceObservable();
  v23 = objc_msgSendSuper2(&v25, sel_init);
  objc_msgSend(v22, sel_registerObserver_, v23);

  return v23;
}

uint64_t CAFMediaSourceObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFMediaSourceObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFMediaSourceObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFMediaSourceObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFMediaSourceObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFMediaSourceObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFMediaSourceObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFMediaSourceObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFMediaSourceObservable(void **a1)
{
  CAFMediaSourceObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFMediaSourceObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFMediaSourceObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentFrequency:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(uint64_t a1, void *a2)
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItems, (void (*)(void *))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateUserVisibleLabel:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaSourceSemanticType:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateDisabled:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItemImages:)(uint64_t a1, void *a2)
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItemImages, (void (*)(void *))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *))
{
  id v6;

  v6 = a2;
  OUTLINED_FUNCTION_32();
  a4(a2);
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateName:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)();
}

void CAFMediaSourceObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFMediaSourceObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFMediaSourceObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

unint64_t key path getter for CAFMediaSource.currentFrequencyBridged : CAFMediaSource@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFMediaSource.currentFrequencyBridged.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

char *keypath_get_selector_currentMediaItemIdentifier()
{
  return sel_currentMediaItemIdentifier;
}

void sub_237487F8C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_currentMediaItemIdentifier);
}

char *keypath_get_selector_mediaItems()
{
  return sel_mediaItems;
}

id key path getter for CAFMediaSource.mediaItems : CAFMediaSource@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_mediaItems);
  *a2 = result;
  return result;
}

void sub_237487FF0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_23748800C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

char *keypath_get_selector_mediaSourceSemanticType()
{
  return sel_mediaSourceSemanticType;
}

void sub_237488034(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_mediaSourceSemanticType);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_disabled()
{
  return sel_disabled;
}

void sub_23748806C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_disabled);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_mediaItemImages()
{
  return sel_mediaItemImages;
}

id key path getter for CAFMediaSource.mediaItemImages : CAFMediaSource@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_mediaItemImages);
  *a2 = result;
  return result;
}

void sub_2374880E0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFMediaSourceObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFMediaSource(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable, (uint64_t)&protocol conformance descriptor for CAFMediaSourceObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFMediaSourceObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFMediaSource and conformance CAFMediaSource, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFMediaSource, (uint64_t)&protocol conformance descriptor for CAFMediaSource);
}

unint64_t type metadata accessor for CAFMediaSource()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFMediaSource;
  if (!lazy cache variable for type metadata for CAFMediaSource)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFMediaSource);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFMediaSourceObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable, (uint64_t)&protocol conformance descriptor for CAFMediaSourceObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFMediaSourceObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.currentFrequency.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$currentFrequency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.currentMediaItemIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$currentMediaItemIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.mediaItems.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$mediaItems.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.mediaSourceSemanticType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$mediaSourceSemanticType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.mediaItemImages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$mediaItemImages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t partial apply for closure #1 in CAFMediaSourceObservable.resetCachedDescription()()
{
  return CAFMediaSourceObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_3_7(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_24_3(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD00000000000001BLL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

id CAFFanObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
}

uint64_t CAFFanObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFFanObservable.fanLevel : CAFFanObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFFanObservable.fanLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFFanObservable.fanLevel : CAFFanObservable(unsigned __int8 *a1)
{
  return CAFFanObservable.fanLevel.setter(*a1);
}

uint64_t CAFFanObservable.fanLevel.getter()
{
  return CAFFanObservable.fanLevel.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFFanObservable.fanLevel.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2374CFED0, (uint64_t)&unk_2374CFEF8, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFFanObservable.fanLevel.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFFanObservable.fanLevel.modify(uint64_t a1, uint64_t a2)
{
  CAFHistoricalNotificationObservable.notificationSeverity.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFFanObservable.$fanLevel.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__fanLevel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFFanObservable.on : CAFFanObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFFanObservable.on.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFFanObservable.on : CAFFanObservable(unsigned __int8 *a1)
{
  return CAFFanObservable.on.setter(*a1);
}

uint64_t CAFFanObservable.on.getter()
{
  return CAFFanObservable.fanLevel.getter();
}

uint64_t CAFFanObservable.on.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2374CFF18, (uint64_t)&unk_2374CFF40, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFFanObservable.on.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFFanObservable.on.modify(uint64_t a1, uint64_t a2)
{
  CAFHistoricalNotificationObservable.notificationSeverity.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFFanObservable.$on.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.autoMode.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFFanObservable.$autoMode.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__autoMode, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.vehicleLayoutKey.getter()
{
  return CAFFanObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFFanObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.name.getter()
{
  return CAFFanObservable.vehicleLayoutKey.getter();
}

void CAFFanObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable._description.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v26;

  v1 = (void *)0xEE003E6465726574;
  v26 = 0x73696765726E753CLL;
  v2 = (uint64_t)OUTLINED_FUNCTION_152(a1, sel_registeredForFanLevel);
  v3 = 0x73696765726E753CLL;
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v2)
  {
    CAFFanObservable.fanLevel.getter();
    v2 = dispatch thunk of CustomStringConvertible.description.getter();
    v3 = v2;
    v4 = v5;
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_152(v2, sel_registeredForOn);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFFanObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v6 = OUTLINED_FUNCTION_24_0();
    v7 = v6;
    v8 = v9;
  }
  v10 = (uint64_t)OUTLINED_FUNCTION_152(v6, sel_registeredForAutoMode);
  v11 = 0x73696765726E753CLL;
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFFanObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v10 = OUTLINED_FUNCTION_24_0();
    v11 = v10;
    v12 = v13;
  }
  if (OUTLINED_FUNCTION_152(v10, sel_registeredForVehicleLayoutKey))
  {
    v26 = CAFFanObservable.vehicleLayoutKey.getter();
    v1 = v14;
  }
  _StringGuts.grow(_:)(83);
  v15._object = (void *)0x80000002374E2840;
  v15._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v15);
  _print_unlocked<A, B>(_:_:)();
  v16._countAndFlagsBits = 0x654C6E6166207B20;
  v16._object = (void *)0xED0000203A6C6576;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v3;
  v17._object = v4;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x203A6E6F202CLL;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v7;
  v19._object = v8;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v20._object = (void *)0xEC000000203A6564;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v11;
  v21._object = v12;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0xD000000000000014;
  v22._object = (void *)0x80000002374DF1B0;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v26;
  v23._object = v1;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 4095264;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  return 0;
}

uint64_t CAFFanObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock) + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFFanObservable._description.getter(v3);
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFFanObservable.cachedDescription.setter(v4, v7);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v5 + 4);
  OUTLINED_FUNCTION_25();
  return v4;
}

void CAFFanObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFFanObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFFanObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__fanLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFFanObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFFanObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v12 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__autoMode;
  v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFFanObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  v14 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFFanObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v8[v15] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFFanObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFFanObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock) + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFFanObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFFanObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFFanObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFFanObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFFanObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFFanObservable(id *a1@<X8>)
{
  *a1 = CAFFanObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374890F0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFFanObservable.fanLevel.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237489110(unsigned __int8 *a1)
{
  CAFFanObservable.fanLevel.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFFanObservable(void **a1)
{
  CAFFanObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFFanObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFFanObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFFanObservable.fanService(_:didUpdateFanLevel:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFFanObservable.fanService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFFanObservable.fanService(_:didUpdateAutoMode:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFFanObservable.fanService(_:didUpdateName:)()
{
  return CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

void CAFFanObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFFanObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFFanObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374894F4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFFanObservable.on.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237489514(unsigned __int8 *a1)
{
  CAFFanObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_fanLevel()
{
  return sel_fanLevel;
}

void sub_237489540(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_fanLevel);
  OUTLINED_FUNCTION_11();
}

id sub_23748956C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFanLevel_, *a1);
}

void sub_237489580()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.onBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374895A0(char *a1)
{
  CAFSeatHeatingCooling.onBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_2374895C0()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.autoModeBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374895E0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void sub_2374895FC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFFanObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFFan(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFFanObservable and conformance CAFFanObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFFanObservable, (uint64_t)&protocol conformance descriptor for CAFFanObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFFanObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFFan and conformance CAFFan, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFFan, (uint64_t)&protocol conformance descriptor for CAFFan);
}

unint64_t type metadata accessor for CAFFan()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFFan;
  if (!lazy cache variable for type metadata for CAFFan)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFFan);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFFanObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFFanObservable and conformance CAFFanObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFFanObservable, (uint64_t)&protocol conformance descriptor for CAFFanObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFFanObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFFanObservable.fanLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFFanObservable.fanLevel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFFanObservable.fanLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFFanObservable.$fanLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFFanObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFFanObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFFanObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFFanObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFFanObservable.autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFFanObservable.$autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFFanObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFFanObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFFanObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFFanObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFFanObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t partial apply for closure #1 in CAFFanObservable.resetCachedDescription()()
{
  return CAFFanObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFRemainingRange.hiddenBridged.getter()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasHidden))
    return (uint64_t)objc_msgSend(v0, sel_hidden);
  else
    return 2;
}

id CAFRemainingRangeObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed);
}

uint64_t CAFRemainingRangeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFRemainingRangeObservable.distanceKM.getter()
{
  return CAFRemainingRangeObservable.distanceKM.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFRemainingRangeObservable.$distanceKM.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceKM, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFRemainingRangeObservable.distanceMiles.getter()
{
  return CAFRemainingRangeObservable.distanceKM.getter();
}

void CAFRemainingRangeObservable.$distanceMiles.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceMiles, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFRemainingRangeObservable.hidden.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFRemainingRangeObservable.$hidden.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemainingRangeObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed), sel_registeredForHidden))
  {
    CAFRemainingRangeObservable.hidden.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v1 = String.init<A>(describing:)();
    v3 = v2;
  }
  else
  {
    v3 = (void *)0xEE003E6465726574;
    v1 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(48);
  v4._object = (void *)0x80000002374E28F0;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x6564646968207B20;
  v5._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v1;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t CAFRemainingRangeObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFRemainingRangeObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFRemainingRangeObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFRemainingRangeObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFRemainingRangeObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFRemainingRangeObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceKM;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemainingRangeObservable, Measurement<NSUnitLength>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceMiles;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__hidden;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemainingRangeObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFRemainingRangeObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFRemainingRangeObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFRemainingRangeObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFRemainingRangeObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRemainingRangeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRemainingRangeObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFRemainingRangeObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFRemainingRangeObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFRemainingRangeObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFRemainingRangeObservable(void **a1)
{
  CAFRemainingRangeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRemainingRangeObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFRemainingRangeObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(uint64_t a1, uint64_t a2)
{
  return CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceMiles:)(uint64_t a1, uint64_t a2)
{
  return CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

uint64_t @objc CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitLength);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a1;
  a5();

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t CAFRemainingRangeObservable.remainingRangeService(_:didUpdateHidden:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFRemainingRangeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFRemainingRangeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFRemainingRangeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_distanceKM()
{
  return sel_distanceKM;
}

void sub_23748A3B8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFDistanceDisplay.distanceKM : CAFRemainingRange(a1, a2, a3, (SEL *)&selRef_distanceKM);
}

char *keypath_get_selector_distanceMiles()
{
  return sel_distanceMiles;
}

void key path getter for CAFDistanceDisplay.distanceKM : CAFRemainingRange(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = objc_msgSend(*a1, *a4);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitLength);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_23748A448(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFDistanceDisplay.distanceKM : CAFRemainingRange(a1, a2, a3, (SEL *)&selRef_distanceMiles);
}

uint64_t sub_23748A464@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFRemainingRange.hiddenBridged.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CAFRemainingRangeObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRemainingRange()
{
  lazy protocol witness table accessor for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable(lazy protocol witness table cache variable for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable, (uint64_t)&protocol conformance descriptor for CAFRemainingRangeObservable);
}

unint64_t lazy protocol witness table accessor for type CAFRemainingRange and conformance CAFRemainingRange()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFRemainingRange and conformance CAFRemainingRange;
  if (!lazy protocol witness table cache variable for type CAFRemainingRange and conformance CAFRemainingRange)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFRemainingRange);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFRemainingRange, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFRemainingRange and conformance CAFRemainingRange);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFRemainingRangeObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable(&lazy protocol witness table cache variable for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable, (uint64_t)&protocol conformance descriptor for CAFRemainingRangeObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFRemainingRangeObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFRemainingRangeObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.distanceKM.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.$distanceKM.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.distanceMiles.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.$distanceMiles.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFRemainingRangeObservable.resetCachedDescription()()
{
  return CAFRemainingRangeObservable.cachedDescription.setter(0, 0);
}

void CAFRange.maximumValue<A>()(uint64_t a1, uint64_t a2)
{
  CAFRange.maximumValue<A>()(a1, a2, (SEL *)&selRef_maximum);
}

void CAFRange.minimumValue<A>()(uint64_t a1, uint64_t a2)
{
  CAFRange.maximumValue<A>()(a1, a2, (SEL *)&selRef_minimum);
}

BOOL static CAFRange.StepDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CAFRange.StepDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CAFRange.StepDirection.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CAFRange.StepDirection()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CAFRange.extract<A>(from:)(void *a1)
{
  uint64_t result;

  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_floatValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_doubleValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_charValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_shortValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_intValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_longLongValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedCharValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedShortValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedIntValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedLongLongValue);
    return swift_dynamicCast();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CAFRange.stepValue<A>()(uint64_t a1, uint64_t a2)
{
  CAFRange.maximumValue<A>()(a1, a2, (SEL *)&selRef_step);
}

void CAFRange.maximumValue<A>()(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  id v4;

  v4 = objc_msgSend(v3, *a3);
  CAFRange.extract<A>(from:)(v4);

}

unint64_t lazy protocol witness table accessor for type CAFRange.StepDirection and conformance CAFRange.StepDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFRange.StepDirection and conformance CAFRange.StepDirection;
  if (!lazy protocol witness table cache variable for type CAFRange.StepDirection and conformance CAFRange.StepDirection)
  {
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFRange.StepDirection, &type metadata for CAFRange.StepDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFRange.StepDirection and conformance CAFRange.StepDirection);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CAFRange.StepDirection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFRange.StepDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23748AB8C + 4 * byte_2374D0295[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23748ABC0 + 4 * byte_2374D0290[v4]))();
}

uint64_t sub_23748ABC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23748ABC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23748ABD0);
  return result;
}

uint64_t sub_23748ABDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23748ABE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23748ABE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23748ABF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for CAFRange.StepDirection(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CAFRange.StepDirection(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CAFRange.StepDirection()
{
  return &type metadata for CAFRange.StepDirection;
}

uint64_t static CAFSensorState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSensorState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFSensorState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSensorState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSensorState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromSensorState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFSensorState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(&lazy protocol witness table cache variable for type CAFSensorState and conformance CAFSensorState, (uint64_t)&protocol conformance descriptor for CAFSensorState);
  a1[2] = lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(&lazy protocol witness table cache variable for type CAFSensorState and conformance CAFSensorState, (uint64_t)&protocol conformance descriptor for CAFSensorState);
  result = lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(&lazy protocol witness table cache variable for type CAFSensorState and conformance CAFSensorState, (uint64_t)&protocol conformance descriptor for CAFSensorState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSensorState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSensorState()
{
  return CAFSensorState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSensorState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFSensorState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSensorState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFSensorState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSensorState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSensorState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFSensorState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFSensorState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFOdometerObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed);
}

uint64_t CAFOdometerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFOdometerObservable.distanceKM.getter()
{
  return CAFOdometerObservable.distanceKM.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFOdometerObservable.$distanceKM.getter()
{
  CAFOdometerObservable.$distanceKM.getter();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFOdometerObservable.distanceMiles.getter()
{
  return CAFOdometerObservable.distanceKM.getter();
}

void CAFOdometerObservable.$distanceMiles.getter()
{
  CAFOdometerObservable.$distanceKM.getter();
}

uint64_t CAFOdometerObservable._description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(32);
  v0._object = (void *)0x80000002374E29C0;
  v0._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFOdometerObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFOdometerObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFOdometerObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFOdometerObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFOdometerObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFOdometerObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable__distanceKM;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFOdometerObservable, Measurement<NSUnitLength>>);
  swift_allocObject();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable__distanceMiles;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFOdometerObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFOdometerObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFOdometerObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFOdometerObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFOdometerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFOdometerObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFOdometerObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFOdometerObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFOdometerObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFOdometerObservable(void **a1)
{
  CAFOdometerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFOdometerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFOdometerObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(uint64_t a1, uint64_t a2)
{
  return CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceMiles:)(uint64_t a1, uint64_t a2)
{
  return CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

uint64_t CAFOdometerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFOdometerObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFOdometerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23748B714(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFDistanceDisplay.distanceKM : CAFRemainingRange(a1, a2, a3, (SEL *)&selRef_distanceKM);
}

void sub_23748B730(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFDistanceDisplay.distanceKM : CAFRemainingRange(a1, a2, a3, (SEL *)&selRef_distanceMiles);
}

uint64_t type metadata accessor for CAFOdometerObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFOdometer()
{
  lazy protocol witness table accessor for type CAFOdometerObservable and conformance CAFOdometerObservable(&lazy protocol witness table cache variable for type CAFOdometerObservable and conformance CAFOdometerObservable, (uint64_t)&protocol conformance descriptor for CAFOdometerObservable);
}

unint64_t lazy protocol witness table accessor for type CAFOdometer and conformance CAFOdometer()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFOdometer and conformance CAFOdometer;
  if (!lazy protocol witness table cache variable for type CAFOdometer and conformance CAFOdometer)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFOdometer);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFOdometer, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFOdometer and conformance CAFOdometer);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFOdometerObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFOdometerObservable and conformance CAFOdometerObservable(&lazy protocol witness table cache variable for type CAFOdometerObservable and conformance CAFOdometerObservable, (uint64_t)&protocol conformance descriptor for CAFOdometerObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFOdometerObservable and conformance CAFOdometerObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFOdometerObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFOdometerObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFOdometerObservable.distanceKM.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFOdometerObservable.$distanceKM.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFOdometerObservable.distanceMiles.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFOdometerObservable.$distanceMiles.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFOdometerObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t partial apply for closure #1 in CAFOdometerObservable.resetCachedDescription()()
{
  return CAFOdometerObservable.cachedDescription.setter(0, 0);
}

id CAFDefrostObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
}

uint64_t CAFDefrostObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFDefrostObservable.types.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFDefrostObservable.$types.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__types, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFDefrostObservable.level : CAFDefrostObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFDefrostObservable.level.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFDefrostObservable.level : CAFDefrostObservable(unsigned __int8 *a1)
{
  return CAFDefrostObservable.level.setter(*a1);
}

uint64_t CAFDefrostObservable.level.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFDefrostObservable.level.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFDefrostObservable.level.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFDefrostObservable.level.modify;
}

void CAFDefrostObservable.level.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFDefrostObservable.$level.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFDefrostObservable.vehicleLayoutKey.getter()
{
  return CAFDefrostObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFDefrostObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDefrostObservable.name.getter()
{
  return CAFDefrostObservable.vehicleLayoutKey.getter();
}

void CAFDefrostObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDefrostObservable._description.getter(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  v1 = OUTLINED_FUNCTION_67(a1, sel_registeredForDefrostTypes);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    CAFDefrostObservable.types.getter();
    v1 = (id)NSStringFromDefrostTypes();
    if (v1)
    {
      v4 = v1;
      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v3 = v5;

    }
    else
    {
      v3 = (void *)0xE900000000000029;
      v2 = 0x6E776F6E6B6E7528;
    }
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_67((uint64_t)v1, sel_registeredForLevel);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFDefrostObservable.level.getter();
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v6;
    v8 = v9;
  }
  if (OUTLINED_FUNCTION_67(v6, sel_registeredForVehicleLayoutKey))
    CAFDefrostObservable.vehicleLayoutKey.getter();
  _StringGuts.grow(_:)(73);
  v10._countAndFlagsBits = 0xD000000000000017;
  v10._object = (void *)0x80000002374E2A50;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0x7365707974207B20;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A6C6576656C202CLL;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x80000002374DF1B0;
  v15._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v15);
  v16._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 4095264;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t CAFDefrostObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFDefrostObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFDefrostObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFDefrostObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFDefrostObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFDefrostObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__types;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDefrostObservable, CAFDefrostTypes>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__level;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFDefrostObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDefrostObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v12] = OUTLINED_FUNCTION_19_1();
  v13 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v8[v13] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFDefrostObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFDefrostObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFDefrostObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFDefrostObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDefrostObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDefrostObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFDefrostObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFDefrostObservable(id *a1@<X8>)
{
  *a1 = CAFDefrostObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFDefrostObservable(void **a1)
{
  CAFDefrostObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDefrostObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFDefrostObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateTypes:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateLevel:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateName:)()
{
  return CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)();
}

void CAFDefrostObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFDefrostObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFDefrostObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23748C78C(_BYTE *a1@<X8>)
{
  *a1 = CAFDefrostObservable.level.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23748C7B0(unsigned __int8 *a1)
{
  CAFDefrostObservable.level.setter(*a1);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_types()
{
  return sel_types;
}

void sub_23748C7DC(id *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_types);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_level()
{
  return sel_level;
}

void sub_23748C814(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_level);
  OUTLINED_FUNCTION_11();
}

id sub_23748C840(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLevel_, *a1);
}

void sub_23748C854(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void sub_23748C870(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFDefrostObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDefrost(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDefrostObservable, (uint64_t)&protocol conformance descriptor for CAFDefrostObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDefrostObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDefrost and conformance CAFDefrost, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFDefrost, (uint64_t)&protocol conformance descriptor for CAFDefrost);
}

unint64_t type metadata accessor for CAFDefrost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFDefrost;
  if (!lazy cache variable for type metadata for CAFDefrost)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDefrost);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFDefrostObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDefrostObservable, (uint64_t)&protocol conformance descriptor for CAFDefrostObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFDefrostObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFDefrostObservable.types.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$types.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.level.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.level.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.level.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$level.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFDefrostObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t partial apply for closure #1 in CAFDefrostObservable.resetCachedDescription()()
{
  return CAFDefrostObservable.cachedDescription.setter(0, 0);
}

id CAFPickerObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
}

uint64_t CAFPickerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFPickerObservable.identifier.getter()
{
  return CAFPickerObservable.identifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFPickerObservable.$identifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.entryList.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFPickerObservable.$entryList.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__entryList, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFPickerObservable.selectedEntryIndex : CAFPickerObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFPickerObservable.selectedEntryIndex.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFPickerObservable.selectedEntryIndex : CAFPickerObservable(unsigned __int8 *a1)
{
  return CAFPickerObservable.selectedEntryIndex.setter(*a1);
}

uint64_t CAFPickerObservable.selectedEntryIndex.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFPickerObservable.selectedEntryIndex.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFPickerObservable.selectedEntryIndex.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFPickerObservable.selectedEntryIndex.modify;
}

void CAFPickerObservable.selectedEntryIndex.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFPickerObservable.$selectedEntryIndex.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

uint64_t CAFPickerObservable.userSelectionEnabled.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFPickerObservable.$userSelectionEnabled.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__userSelectionEnabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.displayPanelIdentifier.getter()
{
  return CAFPickerObservable.identifier.getter();
}

void CAFPickerObservable.$displayPanelIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayPanelIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.displayZoneIdentifier.getter()
{
  return CAFPickerObservable.identifier.getter();
}

void CAFPickerObservable.$displayZoneIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayZoneIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;

  v38._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v38._countAndFlagsBits = v0;
  OUTLINED_FUNCTION_152(v1, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_2_4();
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v2)
  {
    v2 = CAFPickerObservable.identifier.getter();
    v3 = v2;
    v4 = v5;
  }
  v37 = v3;
  v6 = OUTLINED_FUNCTION_152(v2, sel_registeredForEntryList);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    v9 = (void *)CAFPickerObservable.entryList.getter();
    v10 = objc_msgSend(v9, sel_description);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v11;

  }
  v36 = v7;
  OUTLINED_FUNCTION_152((uint64_t)v6, sel_registeredForSelectedEntryIndex);
  OUTLINED_FUNCTION_2_4();
  v14 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    CAFPickerObservable.selectedEntryIndex.getter();
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = v12;
    v14 = v15;
  }
  v35 = v13;
  v16 = (uint64_t)OUTLINED_FUNCTION_152(v12, sel_registeredForUserSelectionEnabled);
  v17 = 0x73696765726E753CLL;
  v18 = (void *)0xEE003E6465726574;
  if ((_DWORD)v16)
  {
    v16 = CAFPickerObservable.userSelectionEnabled.getter();
    if ((v16 & 1) != 0)
      v17 = 1702195828;
    else
      v17 = 0x65736C6166;
    if ((v16 & 1) != 0)
      v18 = (void *)0xE400000000000000;
    else
      v18 = (void *)0xE500000000000000;
  }
  v19 = (uint64_t)OUTLINED_FUNCTION_152(v16, sel_registeredForDisplayPanelIdentifier);
  v20 = 0x73696765726E753CLL;
  v21 = (void *)0xEE003E6465726574;
  if ((_DWORD)v19)
  {
    v19 = CAFPickerObservable.displayPanelIdentifier.getter();
    v20 = v19;
    v21 = v22;
  }
  if (OUTLINED_FUNCTION_152(v19, sel_registeredForDisplayZoneIdentifier))
  {
    v38._countAndFlagsBits = CAFPickerObservable.displayZoneIdentifier.getter();
    v38._object = v23;
  }
  _StringGuts.grow(_:)(164);
  OUTLINED_FUNCTION_15_4(v24, 0x80000002374E2AF0);
  _print_unlocked<A, B>(_:_:)();
  v25._countAndFlagsBits = 0x746E656469207B20;
  v25._object = (void *)0xEF203A7265696669;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v37;
  v26._object = v4;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x4C7972746E65202CLL;
  v27._object = (void *)0xED0000203A747369;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v36;
  v28._object = v8;
  String.append(_:)(v28);
  v29 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_15_4(v29, 0x80000002374E1990);
  v30._countAndFlagsBits = v35;
  v30._object = v14;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_5(0xD000000000000018, (uint64_t)", userSelectionEnabled: ");
  v31._countAndFlagsBits = v17;
  v31._object = v18;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_5(0xD00000000000001ALL, (uint64_t)", displayPanelIdentifier: ");
  v32._countAndFlagsBits = v20;
  v32._object = v21;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_5(0xD000000000000019, (uint64_t)", displayZoneIdentifier: ");
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 4095264;
  v33._object = (void *)0xE300000000000000;
  String.append(_:)(v33);
  return 0;
}

uint64_t CAFPickerObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFPickerObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFPickerObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

void CAFPickerObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFPickerObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFPickerObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_super v21;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__identifier;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPickerObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__entryList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPickerObservable, CAFEntryList>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__selectedEntryIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFPickerObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__userSelectionEnabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPickerObservable, Bool>);
  OUTLINED_FUNCTION_127();
  v15 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  v16 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_19_1();
  v17 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed] = a1;
  v18 = a1;

  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for CAFPickerObservable();
  v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFPickerObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFPickerObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFPickerObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPickerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPickerObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFPickerObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFPickerObservable(id *a1@<X8>)
{
  *a1 = CAFPickerObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFPickerObservable(void **a1)
{
  CAFPickerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPickerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFPickerObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateIdentifier:)()
{
  return CAFPickerObservable.pickerService(_:didUpdateIdentifier:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateEntryList:)(uint64_t a1, void *a2)
{
  id v3;

  OUTLINED_FUNCTION_15_1();
  v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateSelectedEntryIndex:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateUserSelectionEnabled:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFPickerObservable.pickerService(_:didUpdateIdentifier:)();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFPickerObservable.pickerService(_:didUpdateIdentifier:)();
}

void CAFPickerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFPickerObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFPickerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23748DC40(_BYTE *a1@<X8>)
{
  *a1 = CAFPickerObservable.selectedEntryIndex.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23748DC64(unsigned __int8 *a1)
{
  CAFPickerObservable.selectedEntryIndex.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23748DC84(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_identifier, a2);
}

char *keypath_get_selector_entryList()
{
  return sel_entryList;
}

id key path getter for CAFPicker.entryList : CAFPicker@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_entryList);
  *a2 = result;
  return result;
}

char *keypath_get_selector_selectedEntryIndex()
{
  return sel_selectedEntryIndex;
}

void sub_23748DCF4(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_selectedEntryIndex);
  OUTLINED_FUNCTION_11();
}

id sub_23748DD20(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSelectedEntryIndex_, *a1);
}

char *keypath_get_selector_userSelectionEnabled()
{
  return sel_userSelectionEnabled;
}

void sub_23748DD40(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_userSelectionEnabled);
  OUTLINED_FUNCTION_11();
}

void sub_23748DD6C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayPanelIdentifier, a2);
}

void sub_23748DD88(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayZoneIdentifier, a2);
}

uint64_t type metadata accessor for CAFPickerObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPicker(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFPickerObservable, (uint64_t)&protocol conformance descriptor for CAFPickerObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPickerObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFPicker and conformance CAFPicker, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFPicker, (uint64_t)&protocol conformance descriptor for CAFPicker);
}

unint64_t type metadata accessor for CAFPicker()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFPicker;
  if (!lazy cache variable for type metadata for CAFPicker)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPicker);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFPickerObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFPickerObservable, (uint64_t)&protocol conformance descriptor for CAFPickerObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFPickerObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFPickerObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFPickerObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFPickerObservable.entryList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFPickerObservable.$entryList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFPickerObservable.selectedEntryIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFPickerObservable.selectedEntryIndex.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFPickerObservable.selectedEntryIndex.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFPickerObservable.$selectedEntryIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFPickerObservable.userSelectionEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFPickerObservable.$userSelectionEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFPickerObservable.displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFPickerObservable.$displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFPickerObservable.displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFPickerObservable.$displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFPickerObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t partial apply for closure #1 in CAFPickerObservable.resetCachedDescription()()
{
  return CAFPickerObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_5_5(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_15_4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD000000000000016;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

id CAFTestControlEventObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_observed);
}

uint64_t CAFTestControlEventObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTestControlEventObservable._description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x80000002374E2B90;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTestControlEventObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTestControlEventObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTestControlEventObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTestControlEventObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFTestControlEventObservable.init(_:)(a1);
}

id CAFTestControlEventObservable.init(_:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = &v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)&v1[v4] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTestControlEventObservable();
  v6 = a1;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFTestControlEventObservable()
{
  return objc_opt_self();
}

uint64_t CAFTestControlEventObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTestControlEventObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTestControlEventObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTestControlEventObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTestControlEventObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTestControlEventObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTestControlEventObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTestControlEventObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTestControlEventObservable(void **a1)
{
  return CAFTestControlEventObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTestControlEventObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTestControlEventObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTestControlEventObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFTestControlEventObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFTestControlEventObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTestControlEvent(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlEventObservable, (uint64_t)&protocol conformance descriptor for CAFTestControlEventObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTestControlEventObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlEvent and conformance CAFTestControlEvent, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlEvent, (uint64_t)&protocol conformance descriptor for CAFTestControlEvent);
}

unint64_t type metadata accessor for CAFTestControlEvent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFTestControlEvent;
  if (!lazy cache variable for type metadata for CAFTestControlEvent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTestControlEvent);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTestControlEventObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTestControlEventObservable, (uint64_t)&protocol conformance descriptor for CAFTestControlEventObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFTestControlEventObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTestControlEventObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFTestControlEventObservable.resetCachedDescription()()
{
  return CAFTestControlEventObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFTemperatureState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFTemperatureState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFTemperatureState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFTemperatureState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFTemperatureState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromTemperatureState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFTemperatureState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(&lazy protocol witness table cache variable for type CAFTemperatureState and conformance CAFTemperatureState, (uint64_t)&protocol conformance descriptor for CAFTemperatureState);
  a1[2] = lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(&lazy protocol witness table cache variable for type CAFTemperatureState and conformance CAFTemperatureState, (uint64_t)&protocol conformance descriptor for CAFTemperatureState);
  result = lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(&lazy protocol witness table cache variable for type CAFTemperatureState and conformance CAFTemperatureState, (uint64_t)&protocol conformance descriptor for CAFTemperatureState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTemperatureState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFTemperatureState()
{
  return CAFTemperatureState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFTemperatureState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFTemperatureState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFTemperatureState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFTemperatureState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFTemperatureState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFTemperatureState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFTemperatureState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFTemperatureState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t CAFTargetSpeed.speedLimitedBridged.getter()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasSpeedLimited))
    return (uint64_t)objc_msgSend(v0, sel_speedLimited);
  else
    return 2;
}

id CAFTargetSpeedObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
}

uint64_t CAFTargetSpeedObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFTargetSpeedObservable.targetSpeedState.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_10_6();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFTargetSpeedObservable.$targetSpeedState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__targetSpeedState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable.speedKMH.getter()
{
  return CAFTargetSpeedObservable.speedKMH.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  OUTLINED_FUNCTION_146();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_37();
  return swift_release();
}

void CAFTargetSpeedObservable.$speedKMH.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedKMH, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable.speedMPH.getter()
{
  return CAFTargetSpeedObservable.speedKMH.getter();
}

void CAFTargetSpeedObservable.$speedMPH.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedMPH, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFTargetSpeedObservable.speedLimited.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_10_6();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFTargetSpeedObservable.$speedLimited.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedLimited, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v26;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_5_6(v2, sel_registeredForTargetSpeedState);
  OUTLINED_FUNCTION_13_6();
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFTargetSpeedObservable.targetSpeedState.getter();
    v3 = (id)NSStringFromTargetSpeedState();
    if (v3)
    {
      v5 = v3;
      v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v4 = v6;

    }
    else
    {
      v4 = (void *)0xE900000000000029;
      v0 = 0x6E776F6E6B6E7528;
    }
  }
  v26 = v0;
  v7 = (uint64_t)OUTLINED_FUNCTION_5_6((uint64_t)v3, sel_registeredForSpeedKMH);
  v8 = 0x73696765726E753CLL;
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFTargetSpeedObservable.speedKMH.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitSpeed> and conformance Measurement<A>();
    v8 = OUTLINED_FUNCTION_11_5();
    v9 = v10;
    v7 = OUTLINED_FUNCTION_8_4();
  }
  OUTLINED_FUNCTION_5_6(v7, sel_registeredForSpeedMPH);
  OUTLINED_FUNCTION_13_6();
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v11)
  {
    CAFTargetSpeedObservable.speedMPH.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitSpeed> and conformance Measurement<A>();
    v0 = OUTLINED_FUNCTION_11_5();
    v12 = v13;
    v11 = OUTLINED_FUNCTION_8_4();
  }
  v14 = (void *)0xEE003E6465726574;
  v15 = 0x73696765726E753CLL;
  if (OUTLINED_FUNCTION_5_6(v11, sel_registeredForSpeedLimited))
  {
    CAFTargetSpeedObservable.speedLimited.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v15 = String.init<A>(describing:)();
    v14 = v16;
  }
  _StringGuts.grow(_:)(101);
  OUTLINED_FUNCTION_128(0xD00000000000001BLL, (uint64_t)"<CAFTargetSpeedObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000015, (uint64_t)" { targetSpeedState: ");
  v17._countAndFlagsBits = v26;
  v17._object = v4;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x4B6465657073202CLL;
  v18._object = (void *)0xEC000000203A484DLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v8;
  v19._object = v9;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0xEC000000203A4850;
  v20._countAndFlagsBits = 0x4D6465657073202CLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v0;
  v21._object = v12;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000002374E2CA0;
  v22._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v15;
  v23._object = v14;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 4095264;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  return 0;
}

uint64_t CAFTargetSpeedObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTargetSpeedObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTargetSpeedObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFTargetSpeedObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFTargetSpeedObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFTargetSpeedObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__targetSpeedState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTargetSpeedObservable, CAFTargetSpeedState>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedKMH;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTargetSpeedObservable, Measurement<NSUnitSpeed>>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_10_7();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedMPH;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_10_7();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedLimited;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTargetSpeedObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFTargetSpeedObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFTargetSpeedObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTargetSpeedObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFTargetSpeedObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTargetSpeedObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTargetSpeedObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTargetSpeedObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTargetSpeedObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTargetSpeedObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTargetSpeedObservable(void **a1)
{
  CAFTargetSpeedObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTargetSpeedObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTargetSpeedObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateTargetSpeedState:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(uint64_t a1, uint64_t a2)
{
  return CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(a1, a2);
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedMPH:)(uint64_t a1, uint64_t a2)
{
  return CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(a1, a2);
}

uint64_t @objc CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_0();
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedLimited:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFTargetSpeedObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFTargetSpeedObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFTargetSpeedObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_targetSpeedState()
{
  return sel_targetSpeedState;
}

void sub_23748F85C(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_targetSpeedState);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_speedKMH()
{
  return sel_speedKMH;
}

void sub_23748F894(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTargetSpeed.speedKMH : CAFTargetSpeed(a1, a2, a3, (SEL *)&selRef_speedKMH);
}

char *keypath_get_selector_speedMPH()
{
  return sel_speedMPH;
}

void key path getter for CAFTargetSpeed.speedKMH : CAFTargetSpeed(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = objc_msgSend(*a1, *a4);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_23748F924(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTargetSpeed.speedKMH : CAFTargetSpeed(a1, a2, a3, (SEL *)&selRef_speedMPH);
}

void sub_23748F940(_BYTE *a1@<X8>)
{
  *a1 = CAFTargetSpeed.speedLimitedBridged.getter();
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFTargetSpeedObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTargetSpeed()
{
  lazy protocol witness table accessor for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable(&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable, (uint64_t)&protocol conformance descriptor for CAFTargetSpeedObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTargetSpeed and conformance CAFTargetSpeed()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFTargetSpeed and conformance CAFTargetSpeed;
  if (!lazy protocol witness table cache variable for type CAFTargetSpeed and conformance CAFTargetSpeed)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTargetSpeed);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFTargetSpeed, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTargetSpeed and conformance CAFTargetSpeed);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTargetSpeedObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable(&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable, (uint64_t)&protocol conformance descriptor for CAFTargetSpeedObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFTargetSpeedObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFTargetSpeedObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.targetSpeedState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$targetSpeedState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.speedKMH.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$speedKMH.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.speedMPH.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$speedMPH.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.speedLimited.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$speedLimited.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t partial apply for closure #1 in CAFTargetSpeedObservable.resetCachedDescription()()
{
  return CAFTargetSpeedObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitSpeed> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<NSUnitSpeed> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitSpeed> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitSpeed> and conformance Measurement<A>);
  }
  return result;
}

id OUTLINED_FUNCTION_5_6(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_10_7()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t CAFCabin.maxACOnBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasMaxACOn, (SEL *)&selRef_maxACOn);
}

id CAFCabin.maxACOnBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setMaxACOn_, a1 & 1);
}

uint64_t CAFCabin.hvacOnBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasHvacOn, (SEL *)&selRef_hvacOn);
}

id CAFCabin.hvacOnBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setHvacOn_, a1 & 1);
}

uint64_t CAFCabin.compressorOnBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasCompressorOn, (SEL *)&selRef_compressorOn);
}

id CAFCabin.compressorOnBridged.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setCompressorOn_, a1 & 1);
}

id CAFCabinObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
}

uint64_t CAFCabinObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFCabinObservable.maxACOn : CAFCabinObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCabinObservable.maxACOn.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCabinObservable.maxACOn : CAFCabinObservable(unsigned __int8 *a1)
{
  return CAFCabinObservable.maxACOn.setter(*a1);
}

uint64_t CAFCabinObservable.maxACOn.getter()
{
  return CAFCabinObservable.maxACOn.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFCabinObservable.maxACOn.setter(uint64_t a1)
{
  return CAFCabinObservable.maxACOn.setter(a1);
}

{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFCabinObservable.maxACOn.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = (_BYTE)v1;
  OUTLINED_FUNCTION_81();
}

uint64_t CAFCabinObservable.$maxACOn.getter()
{
  return CAFTripObservable.$tripReset.getter();
}

uint64_t key path getter for CAFCabinObservable.hvacOn : CAFCabinObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCabinObservable.hvacOn.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCabinObservable.hvacOn : CAFCabinObservable(unsigned __int8 *a1)
{
  return CAFCabinObservable.hvacOn.setter(*a1);
}

uint64_t CAFCabinObservable.hvacOn.getter()
{
  return CAFCabinObservable.maxACOn.getter();
}

uint64_t CAFCabinObservable.hvacOn.setter(uint64_t a1)
{
  return CAFCabinObservable.maxACOn.setter(a1);
}

void CAFCabinObservable.hvacOn.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = (_BYTE)v1;
  OUTLINED_FUNCTION_81();
}

uint64_t CAFCabinObservable.$hvacOn.getter()
{
  return CAFTripObservable.$tripReset.getter();
}

uint64_t key path getter for CAFCabinObservable.compressorOn : CAFCabinObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFCabinObservable.compressorOn.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCabinObservable.compressorOn : CAFCabinObservable(unsigned __int8 *a1)
{
  return CAFCabinObservable.compressorOn.setter(*a1);
}

uint64_t CAFCabinObservable.compressorOn.getter()
{
  return CAFCabinObservable.maxACOn.getter();
}

uint64_t CAFCabinObservable.compressorOn.setter(uint64_t a1)
{
  return CAFCabinObservable.maxACOn.setter(a1);
}

void CAFCabinObservable.compressorOn.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = (_BYTE)v1;
  OUTLINED_FUNCTION_81();
}

void CAFCabinObservable.maxACOn.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFCabinObservable.$compressorOn.getter()
{
  return CAFTripObservable.$tripReset.getter();
}

uint64_t CAFCabinObservable._description.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;

  v1 = (void *)0xEE003E6465726574;
  v2 = 0x73696765726E753CLL;
  v3 = (uint64_t)OUTLINED_FUNCTION_67(a1, sel_registeredForMaxACOn);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFCabinObservable.maxACOn.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v3 = OUTLINED_FUNCTION_24_0();
    v4 = v3;
    v5 = v6;
  }
  v7 = (uint64_t)OUTLINED_FUNCTION_67(v3, sel_registeredForHVACOn);
  v8 = 0x73696765726E753CLL;
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFCabinObservable.hvacOn.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v7 = OUTLINED_FUNCTION_24_0();
    v8 = v7;
    v9 = v10;
  }
  if (OUTLINED_FUNCTION_67(v7, sel_registeredForACCompressorOn))
  {
    CAFCabinObservable.compressorOn.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v2 = OUTLINED_FUNCTION_24_0();
    v1 = v11;
  }
  _StringGuts.grow(_:)(70);
  v12._countAndFlagsBits = 0xD000000000000015;
  v12._object = (void *)0x80000002374E2D30;
  String.append(_:)(v12);
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 0x434178616D207B20;
  v13._object = (void *)0xEC000000203A6E4FLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v4;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6E4F63617668202CLL;
  v15._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = v8;
  v16._object = v9;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x80000002374E2D50;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v2;
  v18._object = v1;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 4095264;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  return 0;
}

uint64_t CAFCabinObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFCabinObservable._description.getter(v3);
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFCabinObservable.cachedDescription.setter(v4, v7);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v5 + 4);
  OUTLINED_FUNCTION_25();
  return v4;
}

id CAFCabinObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFCabinObservable.init(_:)(a1);
}

id CAFCabinObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable__maxACOn;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFCabinObservable, Bool?>);
  swift_allocObject();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable__hvacOn;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_17_0();
  v11 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable__compressorOn;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v11] = OUTLINED_FUNCTION_17_0();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for CAFCabinObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFCabinObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFCabinObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFCabinObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCabinObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCabinObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFCabinObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFCabinObservable(id *a1@<X8>)
{
  *a1 = CAFCabinObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490804()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCabinObservable.maxACOn.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490824(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFCabinObservable.maxACOn.setter(v1);
  OUTLINED_FUNCTION_11();
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCabinObservable(void **a1)
{
  return CAFCabinObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCabinObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFCabinObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)()
{
  return CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)();
}

{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFCabinObservable.cabinService(_:didUpdateHvacOn:)()
{
  return CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)();
}

uint64_t CAFCabinObservable.cabinService(_:didUpdateCompressorOn:)()
{
  return CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)();
}

void CAFCabinObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFCabinObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFCabinObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237490B34()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCabinObservable.hvacOn.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490B54(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFCabinObservable.hvacOn.setter(v1);
  OUTLINED_FUNCTION_11();
}

void sub_237490B70()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCabinObservable.compressorOn.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490B90(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFCabinObservable.compressorOn.setter(v1);
  OUTLINED_FUNCTION_11();
}

void sub_237490BAC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCabin.maxACOnBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490BCC(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFCabin.maxACOnBridged.setter(v1);
  OUTLINED_FUNCTION_11();
}

void sub_237490BE8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCabin.hvacOnBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490C08(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFCabin.hvacOnBridged.setter(v1);
  OUTLINED_FUNCTION_11();
}

void sub_237490C24()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFCabin.compressorOnBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237490C44(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_37_3(a1);
  CAFCabin.compressorOnBridged.setter(v1);
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFCabinObservable()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCabin(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFCabinObservable and conformance CAFCabinObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCabinObservable, (uint64_t)&protocol conformance descriptor for CAFCabinObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCabinObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFCabin and conformance CAFCabin, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFCabin, (uint64_t)&protocol conformance descriptor for CAFCabin);
}

unint64_t type metadata accessor for CAFCabin()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFCabin;
  if (!lazy cache variable for type metadata for CAFCabin)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCabin);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCabinObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFCabinObservable and conformance CAFCabinObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFCabinObservable, (uint64_t)&protocol conformance descriptor for CAFCabinObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFCabinObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFCabinObservable.maxACOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFCabinObservable.maxACOn.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFCabinObservable.maxACOn.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFCabinObservable.$maxACOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFCabinObservable.hvacOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFCabinObservable.hvacOn.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFCabinObservable.hvacOn.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFCabinObservable.$hvacOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFCabinObservable.compressorOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFCabinObservable.compressorOn.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFCabinObservable.compressorOn.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFCabinObservable.$compressorOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFCabinObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t partial apply for closure #1 in CAFCabinObservable.resetCachedDescription()()
{
  return CAFCabinObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFPositioned.layoutKey.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v2, sel_vehicleLayoutKey);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    swift_bridgeObjectRetain();
    CAUVehicleLayoutKey.init(rawValue:)();
    v12 = type metadata accessor for CAUVehicleLayoutKey();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v12) == 1)
    {
      outlined destroy of CAUVehicleLayoutKey?((uint64_t)v6);
      v16 = 0;
      v17 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v16 = 0xD00000000000001CLL;
      v17 = 0x80000002374E2DA0;
      v15._countAndFlagsBits = v9;
      v15._object = v11;
      String.append(_:)(v15);
      result = OUTLINED_FUNCTION_0_8();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, v6, v12);
      return __swift_storeEnumTagSinglePayload(a1, 0, 1, v12);
    }
  }
  else
  {
    v14 = type metadata accessor for CAUVehicleLayoutKey();
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v14);
  }
  return result;
}

uint64_t CAFPositionedRequired.layoutKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t result;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_1_7();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  CAUVehicleLayoutKey.init(rawValue:)();
  v6 = type metadata accessor for CAUVehicleLayoutKey();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v6) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, v4, v6);
  outlined destroy of CAUVehicleLayoutKey?((uint64_t)v4);
  v13 = 0;
  v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v13 = 0xD00000000000001CLL;
  v14 = 0x80000002374E2DA0;
  v8 = OUTLINED_FUNCTION_1_7();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  result = OUTLINED_FUNCTION_0_8();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

id OUTLINED_FUNCTION_1_7()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2168));
}

uint64_t static CAFImageColor.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFImageColor.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFImageColor.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFImageColor.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFImageColor.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromImageColor();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFImageColor(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(&lazy protocol witness table cache variable for type CAFImageColor and conformance CAFImageColor, (uint64_t)&protocol conformance descriptor for CAFImageColor);
  a1[2] = lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(&lazy protocol witness table cache variable for type CAFImageColor and conformance CAFImageColor, (uint64_t)&protocol conformance descriptor for CAFImageColor);
  result = lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(&lazy protocol witness table cache variable for type CAFImageColor and conformance CAFImageColor, (uint64_t)&protocol conformance descriptor for CAFImageColor);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFImageColor(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFImageColor()
{
  return CAFImageColor.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFImageColor] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFImageColor] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFImageColor] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFImageColor]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFImageColor] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFImageColor@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFImageColor.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFImageColor(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFBatteryTemperatureObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
}

uint64_t CAFBatteryTemperatureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFBatteryTemperatureObservable.temperature.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFBatteryTemperatureObservable.$temperature.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureState.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFBatteryTemperatureObservable.$temperatureState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMin.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

void CAFBatteryTemperatureObservable.$temperatureMin.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMax.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

void CAFBatteryTemperatureObservable.$temperatureMax.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMarkerCold.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

void CAFBatteryTemperatureObservable.$temperatureMarkerCold.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerCold, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMarkerHot.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

void CAFBatteryTemperatureObservable.$temperatureMarkerHot.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerHot, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable._description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;

  v32 = 0x73696765726E753CLL;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_143();
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_152(v3, sel_registeredForTemperature);
  v4 = 0x73696765726E753CLL;
  OUTLINED_FUNCTION_18_4();
  if ((_DWORD)v5)
  {
    CAFBatteryTemperatureObservable.temperature.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v4 = OUTLINED_FUNCTION_3_4();
    v0 = v6;
    v5 = OUTLINED_FUNCTION_2_6();
  }
  v31._object = v0;
  OUTLINED_FUNCTION_152(v5, sel_registeredForTemperatureState);
  OUTLINED_FUNCTION_7_4();
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFBatteryTemperatureObservable.temperatureState.getter();
    v7 = (id)NSStringFromTemperatureState();
    if (v7)
    {
      v0 = v7;
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v9;

    }
    else
    {
      v8 = (void *)0xE900000000000029;
      v1 = 0x6E776F6E6B6E7528;
    }
  }
  v29 = v1;
  v31._countAndFlagsBits = v4;
  OUTLINED_FUNCTION_152((uint64_t)v7, sel_registeredForTemperatureMin);
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_18_4();
  if ((_DWORD)v10)
  {
    CAFBatteryTemperatureObservable.temperatureMin.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v1 = OUTLINED_FUNCTION_3_4();
    v0 = v11;
    v10 = OUTLINED_FUNCTION_2_6();
  }
  v28 = v1;
  OUTLINED_FUNCTION_152(v10, sel_registeredForTemperatureMax);
  OUTLINED_FUNCTION_7_4();
  v13 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    CAFBatteryTemperatureObservable.temperatureMax.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    v1 = OUTLINED_FUNCTION_3_4();
    v13 = v14;
    v12 = OUTLINED_FUNCTION_2_6();
  }
  v15 = (uint64_t)OUTLINED_FUNCTION_152(v12, sel_registeredForTemperatureMarkerCold);
  v16 = 0x73696765726E753CLL;
  v17 = (void *)0xEE003E6465726574;
  if ((_DWORD)v15)
  {
    CAFBatteryTemperatureObservable.temperatureMarkerCold.getter();
    v15 = OUTLINED_FUNCTION_17_2();
    v16 = v15;
    v17 = v18;
  }
  v19 = (void *)0xEE003E6465726574;
  if (OUTLINED_FUNCTION_152(v15, sel_registeredForTemperatureMarkerHot))
  {
    CAFBatteryTemperatureObservable.temperatureMarkerHot.getter();
    v32 = OUTLINED_FUNCTION_17_2();
    v19 = v20;
  }
  _StringGuts.grow(_:)(172);
  OUTLINED_FUNCTION_128(0xD000000000000022, (uint64_t)"<CAFBatteryTemperatureObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000010, (uint64_t)" { temperature: ");
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000014, (uint64_t)", temperatureState: ");
  v21._countAndFlagsBits = v29;
  v21._object = v8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_4((uint64_t)", temperatureMin: ");
  v22._countAndFlagsBits = v28;
  v22._object = v0;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_4((uint64_t)", temperatureMax: ");
  v23._countAndFlagsBits = v1;
  v23._object = v13;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000019, (uint64_t)", temperatureMarkerCold: ");
  v24._countAndFlagsBits = v16;
  v24._object = v17;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", temperatureMarkerHot: ");
  v25._countAndFlagsBits = v32;
  v25._object = v19;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 4095264;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  return 0;
}

uint64_t CAFBatteryTemperatureObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFBatteryTemperatureObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFBatteryTemperatureObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFBatteryTemperatureObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFBatteryTemperatureObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFBatteryTemperatureObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  objc_super v23;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBatteryTemperatureObservable, Measurement<NSUnitTemperature>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBatteryTemperatureObservable, CAFTemperatureState>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMin;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_12_2();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMax;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_12_2();
  *(_QWORD *)&v8[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerCold;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBatteryTemperatureObservable, Measurement<NSUnitTemperature>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_11_3();
  *(_QWORD *)&v8[v16] = v17;
  v18 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerHot;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_11_3();
  *(_QWORD *)&v8[v18] = v19;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed] = a1;
  v20 = a1;

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for CAFBatteryTemperatureObservable();
  v21 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v20, sel_registerObserver_, v21);

  return v21;
}

uint64_t CAFBatteryTemperatureObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFBatteryTemperatureObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFBatteryTemperatureObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFBatteryTemperatureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFBatteryTemperatureObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFBatteryTemperatureObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFBatteryTemperatureObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFBatteryTemperatureObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFBatteryTemperatureObservable(void **a1)
{
  CAFBatteryTemperatureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFBatteryTemperatureObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFBatteryTemperatureObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperature, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureState:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMin, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMax, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMarkerCold:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerCold, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMarkerHot:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerHot, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFBatteryTemperatureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFBatteryTemperatureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374922BC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperature);
}

id sub_2374922D8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_temperatureState);
  *a2 = (_BYTE)result;
  return result;
}

void sub_237492308(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMin);
}

void sub_237492324(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMax);
}

uint64_t sub_237492340(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMarkerCold);
}

uint64_t sub_23749235C(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, a2, a3, (SEL *)&selRef_temperatureMarkerHot);
}

uint64_t type metadata accessor for CAFBatteryTemperatureObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFBatteryTemperature()
{
  lazy protocol witness table accessor for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, (uint64_t)&protocol conformance descriptor for CAFBatteryTemperatureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFBatteryTemperature and conformance CAFBatteryTemperature()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFBatteryTemperature and conformance CAFBatteryTemperature;
  if (!lazy protocol witness table cache variable for type CAFBatteryTemperature and conformance CAFBatteryTemperature)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFBatteryTemperature);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFBatteryTemperature, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFBatteryTemperature and conformance CAFBatteryTemperature);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFBatteryTemperatureObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, (uint64_t)&protocol conformance descriptor for CAFBatteryTemperatureObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFBatteryTemperatureObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFBatteryTemperatureObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperature.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMin.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMarkerCold.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMarkerCold.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMarkerHot.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMarkerHot.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t partial apply for closure #1 in CAFBatteryTemperatureObservable.resetCachedDescription()()
{
  return CAFBatteryTemperatureObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFSeatBeltIndicator.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSeatBeltIndicator.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFSeatBeltIndicator.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSeatBeltIndicator.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSeatBeltIndicator.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromSeatBeltIndicator();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFSeatBeltIndicator(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(&lazy protocol witness table cache variable for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator, (uint64_t)&protocol conformance descriptor for CAFSeatBeltIndicator);
  a1[2] = lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(&lazy protocol witness table cache variable for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator, (uint64_t)&protocol conformance descriptor for CAFSeatBeltIndicator);
  result = lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(&lazy protocol witness table cache variable for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator, (uint64_t)&protocol conformance descriptor for CAFSeatBeltIndicator);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSeatBeltIndicator(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSeatBeltIndicator()
{
  return CAFSeatBeltIndicator.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSeatBeltIndicator] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFSeatBeltIndicator] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSeatBeltIndicator] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFSeatBeltIndicator]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSeatBeltIndicator] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSeatBeltIndicator@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFSeatBeltIndicator.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFSeatBeltIndicator(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFCarManagerObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable_observed);
}

uint64_t key path getter for CAFCarManagerObservable.currentCar : CAFCarManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFCarManagerObservable.currentCar.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarManagerObservable.currentCar : CAFCarManagerObservable(id *a1)
{
  id v1;

  v1 = *a1;
  return CAFCarManagerObservable.currentCar.setter();
}

uint64_t CAFCarManagerObservable.currentCar.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2374929E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFCarManagerObservable.currentCar.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCarManagerObservable.currentCar.setter()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  return static Published.subscript.setter();
}

void CAFCarManagerObservable.currentCar.modify(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  OUTLINED_FUNCTION_24_1();
}

{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t key path setter for CAFCarManagerObservable.$currentCar : CAFCarManagerObservable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCar?>.Publisher);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return CAFCarManagerObservable.$currentCar.setter((uint64_t)v4);
}

uint64_t CAFCarManagerObservable.$currentCar.getter()
{
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t CAFCarManagerObservable.$currentCar.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCar?>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void CAFCarManagerObservable.$currentCar.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCar?>.Publisher);
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[6] = malloc(v6);
  v3[7] = malloc(v6);
  OUTLINED_FUNCTION_2_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  Published.projectedValue.getter();
  swift_endAccess();
  OUTLINED_FUNCTION_24_1();
}

void CAFCarManagerObservable.$currentCar.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v5 = v2[4];
    v6 = v2[5];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 48), v4, v5);
    CAFCarManagerObservable.$currentCar.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CAFCarManagerObservable.$currentCar.setter(*(_QWORD *)(*(_QWORD *)a1 + 56));
  }
  free(v4);
  free(v3);
  free(v2);
}

id CAFCarManagerObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFCarManagerObservable.init(_:)(a1);
}

id CAFCarManagerObservable.init(_:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  id v9;
  id v10;
  objc_class *v11;
  id v12;
  objc_super v14;
  id v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable__currentCar];
  v16 = 0;
  v8 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFCar?);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v6, v3);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable_observed] = a1;
  v9 = a1;
  v10 = objc_msgSend(v9, sel_currentCar);
  OUTLINED_FUNCTION_2_2();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v15 = v10;
  Published.init(initialValue:)();
  swift_endAccess();

  v11 = (objc_class *)type metadata accessor for CAFCarManagerObservable();
  v14.receiver = v8;
  v14.super_class = v11;
  v12 = objc_msgSendSuper2(&v14, sel_init);
  objc_msgSend(v9, sel_registerObserver_, v12);

  return v12;
}

uint64_t type metadata accessor for CAFCarManagerObservable()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFCarManagerObservable;
  if (!type metadata singleton initialization cache for CAFCarManagerObservable)
    return swift_getSingletonMetadata();
  return result;
}

id CAFCarManagerObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCarManagerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCarManagerObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFCarManagerObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCarManagerObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFCarManagerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCarManagerObservable(void **a1)
{
  return CAFCarManagerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCarManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFCarManagerObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCarManagerObservable.carManager(_:didUpdateCurrentCar:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  return CAFCarManagerObservable.currentCar.setter();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCarManager()
{
  return lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFCarManagerObservable and conformance CAFCarManagerObservable, (uint64_t (*)(uint64_t))type metadata accessor for CAFCarManagerObservable, (uint64_t)&protocol conformance descriptor for CAFCarManagerObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCarManagerObservable()
{
  return lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFCarManager and conformance CAFCarManager, (uint64_t (*)(uint64_t))type metadata accessor for CAFCarManager, (uint64_t)&protocol conformance descriptor for CAFCarManager);
}

unint64_t type metadata accessor for CAFCarManager()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFCarManager;
  if (!lazy cache variable for type metadata for CAFCarManager)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCarManager);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCarManagerObservable(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFCarManagerObservable and conformance CAFCarManagerObservable, (uint64_t (*)(uint64_t))type metadata accessor for CAFCarManagerObservable, (uint64_t)&protocol conformance descriptor for CAFCarManagerObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2374932C8()
{
  return CAFCarManagerObservable.$currentCar.getter();
}

uint64_t ObjC metadata update function for CAFCarManagerObservable()
{
  return type metadata accessor for CAFCarManagerObservable();
}

void type metadata completion function for CAFCarManagerObservable()
{
  unint64_t v0;

  type metadata accessor for Published<CAFCar?>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for CAFCarManagerObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFCarManagerObservable.currentCar.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.currentCar.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.currentCar.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.$currentCar.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.$currentCar.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.$currentCar.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for Published<CAFCar?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<CAFCar?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CAFCar?);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CAFCar?>);
  }
}

uint64_t static CAFTransmissionMode.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFTransmissionMode.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFTransmissionMode.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFTransmissionMode.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFTransmissionMode.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromTransmissionMode();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFTransmissionMode(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(&lazy protocol witness table cache variable for type CAFTransmissionMode and conformance CAFTransmissionMode, (uint64_t)&protocol conformance descriptor for CAFTransmissionMode);
  a1[2] = lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(&lazy protocol witness table cache variable for type CAFTransmissionMode and conformance CAFTransmissionMode, (uint64_t)&protocol conformance descriptor for CAFTransmissionMode);
  result = lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(&lazy protocol witness table cache variable for type CAFTransmissionMode and conformance CAFTransmissionMode, (uint64_t)&protocol conformance descriptor for CAFTransmissionMode);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTransmissionMode(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFTransmissionMode()
{
  return CAFTransmissionMode.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFTransmissionMode] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFTransmissionMode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFTransmissionMode] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFTransmissionMode]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFTransmissionMode] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFTransmissionMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFTransmissionMode.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFTransmissionMode(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFTirePressureObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
}

uint64_t CAFTirePressureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTirePressureObservable.sensorState.getter()
{
  return CAFTirePressureObservable.sensorState.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTirePressureObservable.$sensorState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__sensorState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.pressure.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  OUTLINED_FUNCTION_146();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_37();
  return swift_release();
}

void CAFTirePressureObservable.$pressure.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressure, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.pressureState.getter()
{
  return CAFTirePressureObservable.sensorState.getter();
}

void CAFTirePressureObservable.$pressureState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressureState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.vehicleLayoutKey.getter()
{
  return CAFTirePressureObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTirePressureObservable.$vehicleLayoutKey.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.name.getter()
{
  return CAFTirePressureObservable.vehicleLayoutKey.getter();
}

void CAFTirePressureObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable._description.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  _QWORD v28[2];
  uint64_t v29;
  unint64_t v30;

  v28[0] = 0x73696765726E753CLL;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OUTLINED_FUNCTION_67(v3, sel_registeredForSensorState);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFTirePressureObservable.sensorState.getter();
    v6 = (id)NSStringFromSensorState();
    if (v6)
    {
      v7 = OUTLINED_FUNCTION_13_7();
      v8 = v9;

    }
    else
    {
      v7 = 0x6E776F6E6B6E7528;
      v8 = (void *)0xE900000000000029;
    }
  }
  v10 = OUTLINED_FUNCTION_67((uint64_t)v6, sel_registeredForPressure);
  v11 = 0x73696765726E753CLL;
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFTirePressureObservable.pressure.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPressure> and conformance Measurement<A>();
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v12 = v13;
    v10 = (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  v14 = OUTLINED_FUNCTION_67((uint64_t)v10, sel_registeredForPressureState);
  v15 = 0x73696765726E753CLL;
  v16 = (void *)0xEE003E6465726574;
  if ((_DWORD)v14)
  {
    CAFTirePressureObservable.pressureState.getter();
    v14 = (id)NSStringFromPressureState();
    if (v14)
    {
      v15 = OUTLINED_FUNCTION_13_7();
      v16 = v17;

    }
    else
    {
      v15 = 0x6E776F6E6B6E7528;
      v16 = (void *)0xE900000000000029;
    }
  }
  v18 = (void *)0xEE003E6465726574;
  if (OUTLINED_FUNCTION_67((uint64_t)v14, sel_registeredForVehicleLayoutKey))
  {
    v28[0] = CAFTirePressureObservable.vehicleLayoutKey.getter();
    v18 = v19;
  }
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(106);
  OUTLINED_FUNCTION_128(0xD00000000000001CLL, (uint64_t)"<CAFTirePressureObservable: ");
  v28[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v20._object = (void *)0x80000002374E2F90;
  v20._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v7;
  v21._object = v8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x757373657270202CLL;
  v22._object = (void *)0xEC000000203A6572;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v11;
  v23._object = v12;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000011, (uint64_t)", pressureState: ");
  v24._countAndFlagsBits = v15;
  v24._object = v16;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000014, (uint64_t)", vehicleLayoutKey: ");
  v25._countAndFlagsBits = v28[0];
  v25._object = v18;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 4095264;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  return v29;
}

uint64_t CAFTirePressureObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTirePressureObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTirePressureObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFTirePressureObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFTirePressureObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFTirePressureObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__sensorState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, CAFSensorState>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressure;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, Measurement<NSUnitPressure>>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressureState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, CAFPressureState>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v8[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v8[v15] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFTirePressureObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFTirePressureObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTirePressureObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFTirePressureObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTirePressureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTirePressureObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTirePressureObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTirePressureObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTirePressureObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTirePressureObservable(void **a1)
{
  CAFTirePressureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTirePressureObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTirePressureObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateSensorState:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__sensorState, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdatePressure:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdatePressureState:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressureState, (void (*)(_QWORD))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateName:)()
{
  return CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)();
}

void CAFTirePressureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFTirePressureObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFTirePressureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_sensorState()
{
  return sel_sensorState;
}

void sub_2374945BC(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_sensorState);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_pressure()
{
  return sel_pressure;
}

void key path getter for CAFTirePressure.pressure : CAFTirePressure(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_pressure);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitPressure);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

char *keypath_get_selector_pressureState()
{
  return sel_pressureState;
}

void sub_237494670(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_pressureState);
  OUTLINED_FUNCTION_11();
}

void sub_23749469C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTirePressure.vehicleLayoutKey : CAFTirePressure(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void key path getter for CAFTirePressure.vehicleLayoutKey : CAFTirePressure(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend(*a1, *a2);
  v6 = OUTLINED_FUNCTION_13_7();
  v8 = v7;

  *a3 = v6;
  a3[1] = v8;
}

void sub_237494704(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTirePressure.vehicleLayoutKey : CAFTirePressure(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFTirePressureObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTirePressure()
{
  lazy protocol witness table accessor for type CAFTirePressureObservable and conformance CAFTirePressureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, (uint64_t)&protocol conformance descriptor for CAFTirePressureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTirePressure and conformance CAFTirePressure()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFTirePressure and conformance CAFTirePressure;
  if (!lazy protocol witness table cache variable for type CAFTirePressure and conformance CAFTirePressure)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTirePressure);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFTirePressure, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTirePressure and conformance CAFTirePressure);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTirePressureObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFTirePressureObservable and conformance CAFTirePressureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, (uint64_t)&protocol conformance descriptor for CAFTirePressureObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFTirePressureObservable and conformance CAFTirePressureObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFTirePressureObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFTirePressureObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTirePressureObservable.sensorState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$sensorState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.pressure.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$pressure.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.pressureState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$pressureState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t partial apply for closure #1 in CAFTirePressureObservable.resetCachedDescription()()
{
  return CAFTirePressureObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitPressure> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<NSUnitPressure> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitPressure> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitPressure> and conformance Measurement<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CAFFillLevelLabel.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFFillLevelLabel.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFFillLevelLabel.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFFillLevelLabel.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFFillLevelLabel.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromFillLevelLabel();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFFillLevelLabel(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(&lazy protocol witness table cache variable for type CAFFillLevelLabel and conformance CAFFillLevelLabel, (uint64_t)&protocol conformance descriptor for CAFFillLevelLabel);
  a1[2] = lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(&lazy protocol witness table cache variable for type CAFFillLevelLabel and conformance CAFFillLevelLabel, (uint64_t)&protocol conformance descriptor for CAFFillLevelLabel);
  result = lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(&lazy protocol witness table cache variable for type CAFFillLevelLabel and conformance CAFFillLevelLabel, (uint64_t)&protocol conformance descriptor for CAFFillLevelLabel);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFFillLevelLabel(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFFillLevelLabel()
{
  return CAFFillLevelLabel.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFFillLevelLabel] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFFillLevelLabel] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFFillLevelLabel] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFFillLevelLabel]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFFillLevelLabel] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFFillLevelLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFFillLevelLabel.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFFillLevelLabel(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t static CAFUISceneState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFUISceneState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFUISceneState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFUISceneState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFUISceneState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromUISceneState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFUISceneState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(&lazy protocol witness table cache variable for type CAFUISceneState and conformance CAFUISceneState, (uint64_t)&protocol conformance descriptor for CAFUISceneState);
  a1[2] = lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(&lazy protocol witness table cache variable for type CAFUISceneState and conformance CAFUISceneState, (uint64_t)&protocol conformance descriptor for CAFUISceneState);
  result = lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(&lazy protocol witness table cache variable for type CAFUISceneState and conformance CAFUISceneState, (uint64_t)&protocol conformance descriptor for CAFUISceneState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFUISceneState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFUISceneState()
{
  return CAFUISceneState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFUISceneState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFUISceneState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFUISceneState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFUISceneState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFUISceneState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFUISceneState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFUISceneState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFUISceneState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t CAFEngineRPM.rotationalSpeedStateBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = objc_msgSend(v0, sel_hasRotationalSpeedState);
  v2 = v1;
  if (v1)
    v1 = objc_msgSend(v0, sel_rotationalSpeedState);
  return v1 | ((v2 ^ 1) << 8);
}

id CAFEngineRPMObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
}

uint64_t CAFEngineRPMObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEngineRPMObservable.rotationalSpeed.getter()
{
  return CAFEngineRPMObservable.rotationalSpeed.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFEngineRPMObservable.$rotationalSpeed.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeed, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.rotationalSpeedState.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4 | (v5 << 8);
}

void CAFEngineRPMObservable.$rotationalSpeedState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.rotationalSpeedMarkerRedline.getter()
{
  return CAFEngineRPMObservable.rotationalSpeed.getter();
}

void CAFEngineRPMObservable.$rotationalSpeedMarkerRedline.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMarkerRedline, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.rotationalSpeedMax.getter()
{
  return CAFEngineRPMObservable.rotationalSpeed.getter();
}

void CAFEngineRPMObservable.$rotationalSpeedMax.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_2_4();
  v27 = v0;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_143();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_143();
  v3 = (uint64_t)OUTLINED_FUNCTION_5_6(v2, sel_registeredForRotationalSpeed);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFEngineRPMObservable.rotationalSpeed.getter();
    lazy protocol witness table accessor for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>();
    v4 = OUTLINED_FUNCTION_2_7();
    v5 = v6;
    v3 = OUTLINED_FUNCTION_6_3();
  }
  OUTLINED_FUNCTION_5_6(v3, sel_registeredForRotationalSpeedState);
  OUTLINED_FUNCTION_2_4();
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFEngineRPMObservable.rotationalSpeedState.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFRotationalSpeedState?);
    v7 = String.init<A>(describing:)();
    v8 = v7;
    v9 = v10;
  }
  v26 = v8;
  OUTLINED_FUNCTION_5_6(v7, sel_registeredForRotationalSpeedMarkerRedline);
  OUTLINED_FUNCTION_2_4();
  v13 = (void *)0xEE003E6465726574;
  if ((_DWORD)v11)
  {
    CAFEngineRPMObservable.rotationalSpeedMarkerRedline.getter();
    v11 = String.init<A>(describing:)();
    v12 = v11;
    v13 = v14;
  }
  v25 = v12;
  v15 = (void *)0xEE003E6465726574;
  if (OUTLINED_FUNCTION_5_6(v11, sel_registeredForRotationalSpeedMax))
  {
    CAFEngineRPMObservable.rotationalSpeedMax.getter();
    lazy protocol witness table accessor for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>();
    v27 = OUTLINED_FUNCTION_2_7();
    v15 = v16;
    OUTLINED_FUNCTION_6_3();
  }
  _StringGuts.grow(_:)(136);
  OUTLINED_FUNCTION_128(0xD000000000000019, (uint64_t)"<CAFEngineRPMObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v17._object = (void *)0x80000002374E30D0;
  v17._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v4;
  v18._object = v5;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", rotationalSpeedState: ");
  v19._countAndFlagsBits = v26;
  v19._object = v9;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000020, (uint64_t)", rotationalSpeedMarkerRedline: ");
  v20._countAndFlagsBits = v25;
  v20._object = v13;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000016, (uint64_t)", rotationalSpeedMax: ");
  v21._countAndFlagsBits = v27;
  v21._object = v15;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFEngineRPMObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFEngineRPMObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFEngineRPMObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFEngineRPMObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFEngineRPMObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFEngineRPMObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeed;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineRPMObservable, Measurement<CAFUnitRotationalSpeed>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineRPMObservable, CAFRotationalSpeedState?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMarkerRedline;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineRPMObservable, Measurement<CAFUnitRotationalSpeed>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMax;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v14] = v15;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFEngineRPMObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFEngineRPMObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFEngineRPMObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFEngineRPMObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEngineRPMObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEngineRPMObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFEngineRPMObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEngineRPMObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFEngineRPMObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFEngineRPMObservable(void **a1)
{
  CAFEngineRPMObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEngineRPMObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFEngineRPMObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeed, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeedState:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeedMarkerRedline:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMarkerRedline, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeedMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMax, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_143();
  v12 = v11 - v10;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFUnitRotationalSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t CAFEngineRPMObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFEngineRPMObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFEngineRPMObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_rotationalSpeed()
{
  return sel_rotationalSpeed;
}

void sub_237495DC4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineRPM.rotationalSpeed : CAFEngineRPM(a1, a2, a3, (SEL *)&selRef_rotationalSpeed);
}

uint64_t key path getter for CAFEngineRPM.rotationalSpeedStateBridged : CAFEngineRPM@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFEngineRPM.rotationalSpeedStateBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

char *keypath_get_selector_rotationalSpeedMarkerRedline()
{
  return sel_rotationalSpeedMarkerRedline;
}

uint64_t key path getter for CAFEngineRPM.rotationalSpeedMarkerRedline : CAFEngineRPM@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_rotationalSpeedMarkerRedline);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFUnitRotationalSpeed);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

char *keypath_get_selector_rotationalSpeedMax()
{
  return sel_rotationalSpeedMax;
}

void key path getter for CAFEngineRPM.rotationalSpeed : CAFEngineRPM(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = objc_msgSend(*a1, *a4);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFUnitRotationalSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_237495F28(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFEngineRPM.rotationalSpeed : CAFEngineRPM(a1, a2, a3, (SEL *)&selRef_rotationalSpeedMax);
}

uint64_t type metadata accessor for CAFEngineRPMObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEngineRPM()
{
  lazy protocol witness table accessor for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, (uint64_t)&protocol conformance descriptor for CAFEngineRPMObservable);
}

unint64_t lazy protocol witness table accessor for type CAFEngineRPM and conformance CAFEngineRPM()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFEngineRPM and conformance CAFEngineRPM;
  if (!lazy protocol witness table cache variable for type CAFEngineRPM and conformance CAFEngineRPM)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFEngineRPM);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFEngineRPM, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEngineRPM and conformance CAFEngineRPM);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFEngineRPMObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, (uint64_t)&protocol conformance descriptor for CAFEngineRPMObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFEngineRPMObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFEngineRPMObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeedState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeedState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeedMarkerRedline.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeedMarkerRedline.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeedMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeedMax.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t outlined destroy of Measurement<CAFUnitRotationalSpeed>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFEngineRPMObservable.resetCachedDescription()()
{
  return CAFEngineRPMObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
    result = MEMORY[0x23B812308](MEMORY[0x24BDCB5E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

id CAFSeatFanObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
}

uint64_t CAFSeatFanObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSeatFanObservable.on : CAFSeatFanObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSeatFanObservable.on.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSeatFanObservable.on : CAFSeatFanObservable(unsigned __int8 *a1)
{
  return CAFSeatFanObservable.on.setter(*a1);
}

uint64_t CAFSeatFanObservable.on.getter()
{
  return CAFSeatFanObservable.on.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFSeatFanObservable.on.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2374D1990, (uint64_t)&unk_2374D19B8, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFSeatFanObservable.on.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFSeatFanObservable.on.modify(uint64_t a1, uint64_t a2)
{
  CAFHistoricalNotificationObservable.notificationSeverity.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFSeatFanObservable.$on.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFSeatFanObservable.fanLevel : CAFSeatFanObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSeatFanObservable.fanLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSeatFanObservable.fanLevel : CAFSeatFanObservable(unsigned __int8 *a1)
{
  return CAFSeatFanObservable.fanLevel.setter(*a1);
}

uint64_t CAFSeatFanObservable.fanLevel.getter()
{
  return CAFSeatFanObservable.on.getter();
}

uint64_t CAFSeatFanObservable.fanLevel.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2374D19D8, (uint64_t)&unk_2374D1A00, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void CAFSeatFanObservable.fanLevel.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  *(_QWORD *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_3(v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = (_BYTE)v3;
  OUTLINED_FUNCTION_81();
}

void CAFSeatFanObservable.fanLevel.modify(uint64_t a1, uint64_t a2)
{
  CAFHistoricalNotificationObservable.notificationSeverity.modify(a1, a2, (void (*)(_QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFSeatFanObservable.$fanLevel.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__fanLevel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.autoMode.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSeatFanObservable.$autoMode.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__autoMode, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.vehicleLayoutKey.getter()
{
  return CAFSeatFanObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSeatFanObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.name.getter()
{
  return CAFSeatFanObservable.vehicleLayoutKey.getter();
}

void CAFSeatFanObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable._description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  v1 = (uint64_t)OUTLINED_FUNCTION_152(a1, sel_registeredForOn);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if ((_DWORD)v1)
  {
    CAFSeatFanObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v1 = OUTLINED_FUNCTION_24_0();
    v2 = v1;
    v3 = v4;
  }
  v5 = (uint64_t)OUTLINED_FUNCTION_152(v1, sel_registeredForFanLevel);
  v6 = 0x73696765726E753CLL;
  v7 = (void *)0xEE003E6465726574;
  if ((_DWORD)v5)
  {
    CAFSeatFanObservable.fanLevel.getter();
    v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v6 = v5;
    v7 = v8;
  }
  v9 = (uint64_t)OUTLINED_FUNCTION_152(v5, sel_registeredForAutoMode);
  v10 = 0x73696765726E753CLL;
  v11 = (void *)0xEE003E6465726574;
  if ((_DWORD)v9)
  {
    CAFSeatFanObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v9 = OUTLINED_FUNCTION_24_0();
    v10 = v9;
    v11 = v12;
  }
  if (OUTLINED_FUNCTION_152(v9, sel_registeredForVehicleLayoutKey))
    CAFSeatFanObservable.vehicleLayoutKey.getter();
  _StringGuts.grow(_:)(87);
  v13._countAndFlagsBits = 0xD000000000000017;
  v13._object = (void *)0x80000002374E31B0;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x203A6E6F207B20;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v2;
  v15._object = v3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0xEC000000203A6C65;
  v16._countAndFlagsBits = 0x76654C6E6166202CLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v6;
  v17._object = v7;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v18._object = (void *)0xEC000000203A6564;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v10;
  v19._object = v11;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x80000002374DF1B0;
  v20._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v20);
  v21._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFSeatFanObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSeatFanObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFSeatFanObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFSeatFanObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFSeatFanObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFSeatFanObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__on;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatFanObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__fanLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatFanObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__autoMode;
  v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatFanObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  v14 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatFanObservable, String>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v14] = OUTLINED_FUNCTION_19_1();
  v15 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for CAFSeatFanObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFSeatFanObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSeatFanObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSeatFanObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSeatFanObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSeatFanObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSeatFanObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFSeatFanObservable(id *a1@<X8>)
{
  *a1 = CAFSeatFanObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237496E84()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatFanObservable.on.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237496EA4(unsigned __int8 *a1)
{
  CAFSeatFanObservable.on.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFSeatFanObservable(void **a1)
{
  CAFSeatFanObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSeatFanObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSeatFanObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFSeatFanObservable.fanService(_:didUpdateOn:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFSeatFanObservable.fanService(_:didUpdateFanLevel:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateAutoMode:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateName:)()
{
  return CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

void CAFSeatFanObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFSeatFanObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFSeatFanObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237497284()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatFanObservable.fanLevel.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374972A4(unsigned __int8 *a1)
{
  CAFSeatFanObservable.fanLevel.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_2374972C4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.onBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374972E4(char *a1)
{
  CAFSeatHeatingCooling.onBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_237497304(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_fanLevel);
  OUTLINED_FUNCTION_11();
}

id sub_237497330(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFanLevel_, *a1);
}

void sub_237497344()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSeatHeatingCooling.autoModeBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237497364(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_vehicleLayoutKey, a2);
}

void sub_237497380(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFSeatFanObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSeatFan(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFSeatFanObservable and conformance CAFSeatFanObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSeatFanObservable, (uint64_t)&protocol conformance descriptor for CAFSeatFanObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSeatFanObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSeatFan and conformance CAFSeatFan, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSeatFan, (uint64_t)&protocol conformance descriptor for CAFSeatFan);
}

unint64_t type metadata accessor for CAFSeatFan()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSeatFan;
  if (!lazy cache variable for type metadata for CAFSeatFan)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSeatFan);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFSeatFanObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSeatFanObservable and conformance CAFSeatFanObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSeatFanObservable, (uint64_t)&protocol conformance descriptor for CAFSeatFanObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFSeatFanObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSeatFanObservable.on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.on.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.on.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$on.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.fanLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.fanLevel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.fanLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$fanLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$autoMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t partial apply for closure #1 in CAFSeatFanObservable.resetCachedDescription()()
{
  return CAFSeatFanObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFSoundDistribution.fadeBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = objc_msgSend(v0, sel_hasFade);
  v2 = v1;
  if (v1)
    LOBYTE(v1) = objc_msgSend(v0, sel_fade);
  return v1 | ((v2 ^ 1) << 8);
}

id CAFSoundDistribution.fadeBridged.setter(__int16 a1)
{
  void *v1;
  char v2;

  if ((a1 & 0x100) != 0)
    v2 = 0;
  else
    v2 = a1;
  return objc_msgSend(v1, sel_setFade_, v2);
}

id CAFSoundDistributionObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
}

uint64_t CAFSoundDistributionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSoundDistributionObservable.balance : CAFSoundDistributionObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSoundDistributionObservable.balance.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSoundDistributionObservable.balance : CAFSoundDistributionObservable(unsigned __int8 *a1)
{
  return CAFSoundDistributionObservable.balance.setter(*a1);
}

uint64_t CAFSoundDistributionObservable.balance.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v7;
  v2 = (uint64_t (*)(uint64_t, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  OUTLINED_FUNCTION_14_0((uint64_t)&v6, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFSoundDistributionObservable.balance.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFSoundDistributionObservable.balance.modify()
{
  uint64_t v0;
  id *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  char *v6;
  char v7;

  v3 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v3);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  swift_retain();
  v4 = v2;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v7 = *v6;
  OUTLINED_FUNCTION_14_0(v0, v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = v7;
  OUTLINED_FUNCTION_81();
}

void CAFSoundDistributionObservable.balance.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFSoundDistributionObservable.$balance.getter()
{
  return CAFSoundDistributionObservable.$balance.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__balance, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSoundDistributionObservable.fade.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFSoundDistributionObservable.fade.setter);
}

uint64_t CAFSoundDistributionObservable.fade.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned __int8 *v3;
  int v4;
  int v5;
  _BYTE v7[32];
  id v8;

  OUTLINED_FUNCTION_15_0();
  v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v8;
  v2 = (uint64_t (*)(uint64_t, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v5 = v3[1];
  OUTLINED_FUNCTION_14_0((uint64_t)v7, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4 | (v5 << 8);
}

uint64_t CAFSoundDistributionObservable.fade.setter(__int16 a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1 & 0x1FF, v1, KeyPath, v4);
}

void CAFSoundDistributionObservable.fade.modify()
{
  uint64_t v0;
  id *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  char *v6;
  char v7;
  char v8;

  v3 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v3);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  swift_retain();
  v4 = v2;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v7 = *v6;
  v8 = v6[1];
  OUTLINED_FUNCTION_14_0(v0, v5);
  OUTLINED_FUNCTION_37();
  swift_release();

  *(_BYTE *)(v0 + 88) = v7;
  *(_BYTE *)(v0 + 89) = v8;
  OUTLINED_FUNCTION_81();
}

void CAFSoundDistributionObservable.fade.modify(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88) | (*(unsigned __int8 *)(*(_QWORD *)a1 + 89) << 8), *(id *)(*(_QWORD *)a1 + 64), v1[9], v1[10]);
  free(v1);
}

uint64_t CAFSoundDistributionObservable.$fade.getter()
{
  return CAFSoundDistributionObservable.$balance.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__fade, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSoundDistributionObservable.$balance.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_0();
  v3 = OUTLINED_FUNCTION_2_8();
  v4 = a2(v3);
  OUTLINED_FUNCTION_25();
  return v4;
}

uint64_t CAFSoundDistributionObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = (void *)0xEE003E6465726574;
  v2 = 0x73696765726E753CLL;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForBalance))
  {
    CAFSoundDistributionObservable.balance.getter();
    v4 = dispatch thunk of CustomStringConvertible.description.getter();
    v5 = v6;
  }
  if (objc_msgSend(v3, sel_registeredForFade))
  {
    CAFSoundDistributionObservable.fade.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
    v2 = String.init<A>(describing:)();
    v1 = v7;
  }
  _StringGuts.grow(_:)(62);
  v8._object = (void *)0x80000002374E3250;
  v8._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x6E616C6162207B20;
  v9._object = (void *)0xEC000000203A6563;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A65646166202CLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFSoundDistributionObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFSoundDistributionObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFSoundDistributionObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

id CAFSoundDistributionObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFSoundDistributionObservable.init(_:)(a1);
}

id CAFSoundDistributionObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__balance;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSoundDistributionObservable, Int8>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__fade;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSoundDistributionObservable, Int8?>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFSoundDistributionObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFSoundDistributionObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSoundDistributionObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSoundDistributionObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSoundDistributionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSoundDistributionObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSoundDistributionObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFSoundDistributionObservable(id *a1@<X8>)
{
  *a1 = CAFSoundDistributionObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237498228(_BYTE *a1@<X8>)
{
  *a1 = CAFSoundDistributionObservable.balance.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749824C(unsigned __int8 *a1)
{
  CAFSoundDistributionObservable.balance.setter(*a1);
  OUTLINED_FUNCTION_11();
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSoundDistributionObservable(void **a1)
{
  return CAFSoundDistributionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSoundDistributionObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSoundDistributionObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFSoundDistributionObservable.soundDistributionService(_:didUpdateBalance:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_2_8();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFSoundDistributionObservable.soundDistributionService(_:didUpdateFade:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_2_8();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_21_0();
}

void CAFSoundDistributionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFSoundDistributionObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFSoundDistributionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_balance()
{
  return sel_balance;
}

void sub_237498538(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_balance);
  OUTLINED_FUNCTION_11();
}

id sub_237498564(char *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBalance_, *a1);
}

uint64_t key path getter for CAFSoundDistribution.fadeBridged : CAFSoundDistribution@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSoundDistribution.fadeBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_2374985AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(_QWORD))CAFSoundDistribution.fadeBridged.setter);
}

uint64_t type metadata accessor for CAFSoundDistributionObservable()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSoundDistribution(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSoundDistributionObservable, (uint64_t)&protocol conformance descriptor for CAFSoundDistributionObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSoundDistributionObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSoundDistribution, (uint64_t)&protocol conformance descriptor for CAFSoundDistribution);
}

unint64_t type metadata accessor for CAFSoundDistribution()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSoundDistribution;
  if (!lazy cache variable for type metadata for CAFSoundDistribution)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSoundDistributionObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSoundDistributionObservable, (uint64_t)&protocol conformance descriptor for CAFSoundDistributionObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFSoundDistributionObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$balance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.setter(__int16 a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD0))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$fade.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t partial apply for closure #1 in CAFSoundDistributionObservable.resetCachedDescription()()
{
  return CAFSoundDistributionObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return swift_retain();
}

id CAFSingleSelectSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
}

uint64_t CAFSingleSelectSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFSingleSelectSettingObservable.userVisibleLabel.getter()
{
  CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectSettingObservable.$userVisibleLabel.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.sectionIdentifier.getter()
{
  CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFSingleSelectSettingObservable.$sectionIdentifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFSingleSelectSettingObservable.$sortOrder.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectSettingObservable.$category.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.identifier.getter()
{
  CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectSettingObservable.$identifier.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.disabled.getter()
{
  CAFSingleSelectSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectSettingObservable.$disabled.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.limitableUIElement.getter()
{
  CAFSingleSelectSettingObservable.disabled.getter();
}

void CAFSingleSelectSettingObservable.$limitableUIElement.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.hidden.getter()
{
  CAFSingleSelectSettingObservable.disabled.getter();
}

void CAFSingleSelectSettingObservable.$hidden.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.showAudioBrandLogo.getter()
{
  CAFSingleSelectSettingObservable.disabled.getter();
}

void CAFSingleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.vehicleLayoutKey.getter()
{
  CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.symbolName.getter()
{
  CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectSettingObservable.$symbolName.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectSettingObservable.$prominenceInfo.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFSingleSelectSettingObservable.selectSettingEntryList.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSingleSelectSettingObservable.$selectSettingEntryList.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__selectSettingEntryList, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFSingleSelectSettingObservable.selectedEntryIndex : CAFSingleSelectSettingObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFSingleSelectSettingObservable.selectedEntryIndex.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSingleSelectSettingObservable.selectedEntryIndex : CAFSingleSelectSettingObservable(unsigned __int8 *a1)
{
  return CAFSingleSelectSettingObservable.selectedEntryIndex.setter(*a1);
}

uint64_t CAFSingleSelectSettingObservable.selectedEntryIndex.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFSingleSelectSettingObservable.selectedEntryIndex.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFSingleSelectSettingObservable.selectedEntryIndex.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFSingleSelectSettingObservable.selectedEntryIndex.modify;
}

void CAFSingleSelectSettingObservable.selectedEntryIndex.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFSingleSelectSettingObservable.$selectedEntryIndex.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFSingleSelectSettingObservable.name.getter()
{
  CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

void CAFSingleSelectSettingObservable.$name.getter()
{
  CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForSelectSettingEntryList))
  {
    CAFSingleSelectSettingObservable.selectSettingEntryList.getter();
    v5 = v4;
    v6 = objc_msgSend(v4, sel_description);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = v7;

  }
  if (objc_msgSend(v1, sel_registeredForSelectedEntryIndex))
  {
    CAFSingleSelectSettingObservable.selectedEntryIndex.getter();
    dispatch thunk of CustomStringConvertible.description.getter();
  }
  _StringGuts.grow(_:)(93);
  OUTLINED_FUNCTION_12_0(0xD000000000000023, (uint64_t)"<CAFSingleSelectSettingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_12_0(0xD00000000000001BLL, (uint64_t)" { selectSettingEntryList: ");
  v8._countAndFlagsBits = v2;
  v8._object = v3;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000002374E1990;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  v10._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 4095264;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t CAFSingleSelectSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSingleSelectSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFSingleSelectSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFSingleSelectSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFSingleSelectSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFSingleSelectSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  objc_super v32;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__selectSettingEntryList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, CAFSelectSettingEntryList>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__selectedEntryIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFSingleSelectSettingObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v26] = v27;
  v28 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v28] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed] = a1;
  v29 = a1;

  v32.receiver = v9;
  v32.super_class = (Class)type metadata accessor for CAFSingleSelectSettingObservable();
  v30 = objc_msgSendSuper2(&v32, sel_init);
  objc_msgSend(v29, sel_registerObserver_, v30);

  return v30;
}

uint64_t CAFSingleSelectSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSingleSelectSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSingleSelectSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSingleSelectSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSingleSelectSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSingleSelectSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFSingleSelectSettingObservable(id *a1@<X8>)
{
  *a1 = CAFSingleSelectSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFSingleSelectSettingObservable(void **a1)
{
  CAFSingleSelectSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSingleSelectSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSingleSelectSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSingleSelectSettingObservable.singleSelectSettingService(_:didUpdateSelectSettingEntryList:)(uint64_t a1, void *a2)
{
  id v3;

  OUTLINED_FUNCTION_15_1();
  v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFSingleSelectSettingObservable.singleSelectSettingService(_:didUpdateSelectedEntryIndex:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFSingleSelectSettingObservable.singleSelectSettingService(_:didUpdateName:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFSingleSelectSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFSingleSelectSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFSingleSelectSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_237499ED4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFSingleSelectSettingObservable.selectedEntryIndex.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237499EF4(unsigned __int8 *a1)
{
  CAFSingleSelectSettingObservable.selectedEntryIndex.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_237499F14(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_237499F30(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_237499F50(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_237499F7C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_237499F98()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237499FB8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237499FD8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_237499FF8()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749A018(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void sub_23749A034(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

void sub_23749A058(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_selectedEntryIndex);
  OUTLINED_FUNCTION_11();
}

id sub_23749A084(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSelectedEntryIndex_, *a1);
}

void sub_23749A098(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFSingleSelectSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSingleSelectSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable, (uint64_t)&protocol conformance descriptor for CAFSingleSelectSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSingleSelectSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSingleSelectSetting and conformance CAFSingleSelectSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSingleSelectSetting, (uint64_t)&protocol conformance descriptor for CAFSingleSelectSetting);
}

unint64_t type metadata accessor for CAFSingleSelectSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSingleSelectSetting;
  if (!lazy cache variable for type metadata for CAFSingleSelectSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSingleSelectSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFSingleSelectSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable, (uint64_t)&protocol conformance descriptor for CAFSingleSelectSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFSingleSelectSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectSettingEntryList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$selectSettingEntryList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectedEntryIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectedEntryIndex.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectedEntryIndex.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$selectedEntryIndex.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t partial apply for closure #1 in CAFSingleSelectSettingObservable.resetCachedDescription()()
{
  return CAFSingleSelectSettingObservable.cachedDescription.setter(0, 0);
}

void CAFCar.id.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

}

void protocol witness for Identifiable.id.getter in conformance CAFCar()
{
  CAFCar.id.getter();
}

id CAFTirePressureMonitoringSystemObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_observed);
}

uint64_t CAFTirePressureMonitoringSystemObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTirePressureMonitoringSystemObservable._description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(52);
  v0._object = (void *)0x80000002374E33A0;
  v0._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTirePressureMonitoringSystemObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFTirePressureMonitoringSystemObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFTirePressureMonitoringSystemObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTirePressureMonitoringSystemObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CAFTirePressureMonitoringSystemObservable.init(_:)(a1);
}

id CAFTirePressureMonitoringSystemObservable.init(_:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = &v1[OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)&v1[v4] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTirePressureMonitoringSystemObservable();
  v6 = a1;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFTirePressureMonitoringSystemObservable()
{
  return objc_opt_self();
}

uint64_t CAFTirePressureMonitoringSystemObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTirePressureMonitoringSystemObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTirePressureMonitoringSystemObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTirePressureMonitoringSystemObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTirePressureMonitoringSystemObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTirePressureMonitoringSystemObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTirePressureMonitoringSystemObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFTirePressureMonitoringSystemObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTirePressureMonitoringSystemObservable(void **a1)
{
  return CAFTirePressureMonitoringSystemObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTirePressureMonitoringSystemObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTirePressureMonitoringSystemObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTirePressureMonitoringSystemObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFTirePressureMonitoringSystemObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFTirePressureMonitoringSystemObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTirePressureMonitoringSystem(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTirePressureMonitoringSystemObservable, (uint64_t)&protocol conformance descriptor for CAFTirePressureMonitoringSystemObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTirePressureMonitoringSystemObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTirePressureMonitoringSystem and conformance CAFTirePressureMonitoringSystem, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFTirePressureMonitoringSystem, (uint64_t)&protocol conformance descriptor for CAFTirePressureMonitoringSystem);
}

unint64_t type metadata accessor for CAFTirePressureMonitoringSystem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFTirePressureMonitoringSystem;
  if (!lazy cache variable for type metadata for CAFTirePressureMonitoringSystem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTirePressureMonitoringSystem);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTirePressureMonitoringSystemObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFTirePressureMonitoringSystemObservable, (uint64_t)&protocol conformance descriptor for CAFTirePressureMonitoringSystemObservable);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFTirePressureMonitoringSystemObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTirePressureMonitoringSystemObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFTirePressureMonitoringSystemObservable.resetCachedDescription()()
{
  return CAFTirePressureMonitoringSystemObservable.cachedDescription.setter(0, 0);
}

void CAFService.id.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

}

void protocol witness for Identifiable.id.getter in conformance CAFService()
{
  CAFService.id.getter();
}

uint64_t static CAFRotationalSpeedState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFRotationalSpeedState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFRotationalSpeedState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFRotationalSpeedState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFRotationalSpeedState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromRotationalSpeedState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFRotationalSpeedState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(&lazy protocol witness table cache variable for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState, (uint64_t)&protocol conformance descriptor for CAFRotationalSpeedState);
  a1[2] = lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(&lazy protocol witness table cache variable for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState, (uint64_t)&protocol conformance descriptor for CAFRotationalSpeedState);
  result = lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(&lazy protocol witness table cache variable for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState, (uint64_t)&protocol conformance descriptor for CAFRotationalSpeedState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFRotationalSpeedState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFRotationalSpeedState()
{
  return CAFRotationalSpeedState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFRotationalSpeedState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFRotationalSpeedState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFRotationalSpeedState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFRotationalSpeedState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFRotationalSpeedState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFRotationalSpeedState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFRotationalSpeedState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFRotationalSpeedState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

BOOL static CAFCombineLogger.debug(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE7908]);
}

uint64_t OS_os_log.init(category:)()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v0);
  return OS_os_log.init(subsystem:category:)();
}

uint64_t one-time initialization function for default()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(category:)();
  static OS_os_log.default = result;
  return result;
}

BOOL static CAFCombineLogger.error(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE7910]);
}

BOOL static CAFCombineLogger.log(_:message:function:file:line:)(os_log_type_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  NSObject *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for default != -1)
    swift_once();
  v10 = static OS_os_log.default;
  result = os_log_type_enabled((os_log_t)static OS_os_log.default, a1);
  if (result)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237423000, v10, a1, "%s: %ld  %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_9();
  }
  return result;
}

BOOL static CAFCombineLogger.info(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE78F0]);
}

BOOL static CAFCombineLogger.default(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE78F0]);
}

BOOL static CAFCombineLogger.fault(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE7920]);
}

BOOL static CAFCombineLogger.debug(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  os_log_type_t v12;

  v12 = a8();
  return static CAFCombineLogger.log(_:message:function:file:line:)(v12, a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for CAFCombineLogger()
{
  return &type metadata for CAFCombineLogger;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_bundleIdentifier);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void OUTLINED_FUNCTION_0_9()
{
  JUMPOUT(0x23B8123B0);
}

uint64_t static CAFNotificationSeverity.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFNotificationSeverity.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFNotificationSeverity.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFNotificationSeverity.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFNotificationSeverity.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromNotificationSeverity();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFNotificationSeverity(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(&lazy protocol witness table cache variable for type CAFNotificationSeverity and conformance CAFNotificationSeverity, (uint64_t)&protocol conformance descriptor for CAFNotificationSeverity);
  a1[2] = lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(&lazy protocol witness table cache variable for type CAFNotificationSeverity and conformance CAFNotificationSeverity, (uint64_t)&protocol conformance descriptor for CAFNotificationSeverity);
  result = lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(&lazy protocol witness table cache variable for type CAFNotificationSeverity and conformance CAFNotificationSeverity, (uint64_t)&protocol conformance descriptor for CAFNotificationSeverity);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFNotificationSeverity(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFNotificationSeverity()
{
  return CAFNotificationSeverity.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFNotificationSeverity] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFNotificationSeverity] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFNotificationSeverity] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFNotificationSeverity]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFNotificationSeverity] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFNotificationSeverity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFNotificationSeverity.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFNotificationSeverity(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFDisplayUnitsObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed);
}

uint64_t CAFDisplayUnitsObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFDisplayUnitsObservable.speedUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.speedUnitRawValue.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int16 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed);
  OUTLINED_FUNCTION_40();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  swift_release();
  return v4;
}

void CAFDisplayUnitsObservable.$speedUnitRawValue.getter()
{
  CAFDisplayUnitsObservable.$speedUnitRawValue.getter();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_11();
}

uint64_t CAFDisplayUnitsObservable.distanceUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.speedUnitRawValue.getter();
}

void CAFDisplayUnitsObservable.$distanceUnitRawValue.getter()
{
  CAFDisplayUnitsObservable.$speedUnitRawValue.getter();
}

uint64_t CAFDisplayUnitsObservable.temperatureUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.speedUnitRawValue.getter();
}

void CAFDisplayUnitsObservable.$temperatureUnitRawValue.getter()
{
  CAFDisplayUnitsObservable.$speedUnitRawValue.getter();
}

uint64_t CAFDisplayUnitsObservable._description.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  v1 = (void *)0xEE003E6465726574;
  v2 = 0x73696765726E753CLL;
  v3 = (uint64_t)OUTLINED_FUNCTION_67(a1, sel_registeredForSpeedUnit);
  v4 = 0x73696765726E753CLL;
  v5 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFDisplayUnitsObservable.speedUnitRawValue.getter();
    OUTLINED_FUNCTION_1_8();
    v3 = OUTLINED_FUNCTION_24_0();
    v4 = v3;
    v5 = v6;
  }
  v7 = (uint64_t)OUTLINED_FUNCTION_67(v3, sel_registeredForDistanceUnit);
  v8 = 0x73696765726E753CLL;
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFDisplayUnitsObservable.distanceUnitRawValue.getter();
    OUTLINED_FUNCTION_1_8();
    v7 = OUTLINED_FUNCTION_24_0();
    v8 = v7;
    v9 = v10;
  }
  if (OUTLINED_FUNCTION_67(v7, sel_registeredForTemperatureUnit))
  {
    CAFDisplayUnitsObservable.temperatureUnitRawValue.getter();
    OUTLINED_FUNCTION_1_8();
    v2 = OUTLINED_FUNCTION_24_0();
    v1 = v11;
  }
  _StringGuts.grow(_:)(112);
  OUTLINED_FUNCTION_12_0(0xD00000000000001CLL, (uint64_t)"<CAFDisplayUnitsObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v12._object = (void *)0x80000002374E36D0;
  v12._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v4;
  v13._object = v5;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD000000000000018, (uint64_t)", distanceUnitRawValue: ");
  v14._countAndFlagsBits = v8;
  v14._object = v9;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD00000000000001BLL, (uint64_t)", temperatureUnitRawValue: ");
  v15._countAndFlagsBits = v2;
  v15._object = v1;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4095264;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t CAFDisplayUnitsObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = CAFDisplayUnitsObservable._description.getter(v3);
    v7 = v6;
    swift_bridgeObjectRetain();
    CAFDisplayUnitsObservable.cachedDescription.setter(v4, v7);
    v5 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);
  swift_release();
  return v4;
}

void CAFDisplayUnitsObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFDisplayUnitsObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFDisplayUnitsObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable__speedUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDisplayUnitsObservable, CAFUnitType>);
  swift_allocObject();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable__distanceUnitRawValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_5_7();
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable__temperatureUnitRawValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_5_7();
  *(_QWORD *)&v8[v12] = v13;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed] = a1;
  v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFDisplayUnitsObservable();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFDisplayUnitsObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFDisplayUnitsObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFDisplayUnitsObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDisplayUnitsObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDisplayUnitsObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFDisplayUnitsObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDisplayUnitsObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFDisplayUnitsObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFDisplayUnitsObservable(void **a1)
{
  CAFDisplayUnitsObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDisplayUnitsObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFDisplayUnitsObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)()
{
  return CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateDistanceUnitRawValue:)()
{
  return CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)();
}

uint64_t CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateTemperatureUnitRawValue:)()
{
  return CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)();
}

void CAFDisplayUnitsObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFDisplayUnitsObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFDisplayUnitsObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_speedUnitRawValue()
{
  return sel_speedUnitRawValue;
}

void sub_23749C8A4(id *a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = (unsigned __int16)objc_msgSend(*a1, sel_speedUnitRawValue);
  OUTLINED_FUNCTION_11();
}

void sub_23749C8D0(id *a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = (unsigned __int16)objc_msgSend(*a1, sel_distanceUnitRawValue);
  OUTLINED_FUNCTION_11();
}

char *keypath_get_selector_temperatureUnitRawValue()
{
  return sel_temperatureUnitRawValue;
}

void sub_23749C908(id *a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = (unsigned __int16)objc_msgSend(*a1, sel_temperatureUnitRawValue);
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFDisplayUnitsObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDisplayUnits(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDisplayUnitsObservable, (uint64_t)&protocol conformance descriptor for CAFDisplayUnitsObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDisplayUnitsObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDisplayUnits and conformance CAFDisplayUnits, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFDisplayUnits, (uint64_t)&protocol conformance descriptor for CAFDisplayUnits);
}

unint64_t type metadata accessor for CAFDisplayUnits()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFDisplayUnits;
  if (!lazy cache variable for type metadata for CAFDisplayUnits)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDisplayUnits);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFDisplayUnitsObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDisplayUnitsObservable, (uint64_t)&protocol conformance descriptor for CAFDisplayUnitsObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFDisplayUnitsObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.speedUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.$speedUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.distanceUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.$distanceUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.temperatureUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.$temperatureUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFDisplayUnitsObservable.resetCachedDescription()()
{
  return CAFDisplayUnitsObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_1_8()
{
  type metadata accessor for CAFUnitType(0);
}

void OUTLINED_FUNCTION_5_7()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

uint64_t CAFIntegerSetting.stepperBarHiddenBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasStepperBarHidden, (SEL *)&selRef_stepperBarHidden);
}

id CAFIntegerSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
}

uint64_t CAFIntegerSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFIntegerSettingObservable.userVisibleLabel.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.sectionIdentifier.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFIntegerSettingObservable.$sectionIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFIntegerSettingObservable.$sortOrder.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFIntegerSettingObservable.$category.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.identifier.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$identifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.disabled.getter()
{
  CAFIntegerSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFIntegerSettingObservable.$disabled.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.limitableUIElement.getter()
{
  CAFIntegerSettingObservable.disabled.getter();
}

void CAFIntegerSettingObservable.$limitableUIElement.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.hidden.getter()
{
  CAFIntegerSettingObservable.disabled.getter();
}

void CAFIntegerSettingObservable.$hidden.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.showAudioBrandLogo.getter()
{
  CAFIntegerSettingObservable.disabled.getter();
}

void CAFIntegerSettingObservable.$showAudioBrandLogo.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.vehicleLayoutKey.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$vehicleLayoutKey.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.symbolName.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$symbolName.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFIntegerSettingObservable.$prominenceInfo.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFIntegerSettingObservable.value : CAFIntegerSettingObservable@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = CAFIntegerSettingObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFIntegerSettingObservable.value : CAFIntegerSettingObservable(unsigned int *a1)
{
  return CAFIntegerSettingObservable.value.setter(*a1);
}

uint64_t CAFIntegerSettingObservable.value.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFIntegerSettingObservable.value.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFIntegerSettingObservable.value.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _DWORD *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LODWORD(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_DWORD *)v3 + 22) = (_DWORD)v4;
  return CAFIntegerSettingObservable.value.modify;
}

void CAFIntegerSettingObservable.value.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned int *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFIntegerSettingObservable.$value.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFIntegerSettingObservable.userVisibleValue.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$userVisibleValue.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleValue, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.maximumSymbolName.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$maximumSymbolName.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__maximumSymbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.minimumSymbolName.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$minimumSymbolName.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__minimumSymbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.stepperBarHidden.getter()
{
  CAFIntegerSettingObservable.disabled.getter();
}

void CAFIntegerSettingObservable.$stepperBarHidden.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__stepperBarHidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFIntegerSettingObservable.name.getter()
{
  CAFIntegerSettingObservable.sectionIdentifier.getter();
}

void CAFIntegerSettingObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37[8];

  v33 = 0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v30 = v1;
  OUTLINED_FUNCTION_152(v2, sel_registeredForInt32Value);
  OUTLINED_FUNCTION_2_4();
  v5 = (void *)0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    CAFIntegerSettingObservable.value.getter();
    v3 = dispatch thunk of CustomStringConvertible.description.getter();
    v4 = v3;
    v5 = v6;
  }
  v28 = v4;
  v7 = (uint64_t)OUTLINED_FUNCTION_152(v3, sel_registeredForUserVisibleValue);
  v8 = 0x73696765726E753CLL;
  v9 = (void *)0xEE003E6465726574;
  if ((_DWORD)v7)
  {
    CAFIntegerSettingObservable.userVisibleValue.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v7 = OUTLINED_FUNCTION_28_1();
    v8 = v7;
    v9 = v10;
  }
  v11 = (uint64_t)OUTLINED_FUNCTION_152(v7, sel_registeredForMaximumSymbolName);
  v12 = 0x73696765726E753CLL;
  v13 = (void *)0xEE003E6465726574;
  if ((_DWORD)v11)
  {
    CAFIntegerSettingObservable.maximumSymbolName.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v11 = OUTLINED_FUNCTION_28_1();
    v12 = v11;
    v13 = v14;
  }
  v15 = (uint64_t)OUTLINED_FUNCTION_152(v11, sel_registeredForMinimumSymbolName);
  v16 = 0x73696765726E753CLL;
  v17 = (void *)0xEE003E6465726574;
  if ((_DWORD)v15)
  {
    CAFIntegerSettingObservable.minimumSymbolName.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v15 = OUTLINED_FUNCTION_28_1();
    v16 = v15;
    v17 = v18;
  }
  if (OUTLINED_FUNCTION_152(v15, sel_registeredForStepperBarHidden))
  {
    CAFIntegerSettingObservable.stepperBarHidden.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v30 = OUTLINED_FUNCTION_28_1();
    v33 = v19;
  }
  _StringGuts.grow(_:)(137);
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v20._object = (void *)0x80000002374E3800;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)();
  v21._countAndFlagsBits = 0x65756C6176207B20;
  v21._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v28;
  v22._object = v5;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4((uint64_t)", userVisibleValue: ");
  v23._countAndFlagsBits = v8;
  v23._object = v9;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_6((uint64_t)", maximumSymbolName: ", v28, v30, v33, v0, 0);
  v24._countAndFlagsBits = v12;
  v24._object = v13;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_6((uint64_t)", minimumSymbolName: ", v29, v31, v34, v35, v36);
  v25._countAndFlagsBits = v16;
  v25._object = v17;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_4((uint64_t)", stepperBarHidden: ");
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 4095264;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  return *(_QWORD *)v37;
}

uint64_t CAFIntegerSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFIntegerSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFIntegerSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_31_0();
}

void CAFIntegerSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFIntegerSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFIntegerSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  objc_super v34;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__value;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFIntegerSettingObservable, Int32>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v26] = OUTLINED_FUNCTION_32_0();
  v27 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__maximumSymbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v27] = OUTLINED_FUNCTION_32_0();
  v28 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__minimumSymbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v28] = OUTLINED_FUNCTION_32_0();
  v29 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__stepperBarHidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v29] = OUTLINED_FUNCTION_17_0();
  v30 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v30] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed] = a1;
  v31 = a1;

  v34.receiver = v9;
  v34.super_class = (Class)type metadata accessor for CAFIntegerSettingObservable();
  v32 = objc_msgSendSuper2(&v34, sel_init);
  objc_msgSend(v31, sel_registerObserver_, v32);

  return v32;
}

uint64_t CAFIntegerSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFIntegerSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFIntegerSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFIntegerSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFIntegerSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFIntegerSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFIntegerSettingObservable(id *a1@<X8>)
{
  *a1 = CAFIntegerSettingObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFIntegerSettingObservable(void **a1)
{
  CAFIntegerSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFIntegerSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFIntegerSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateValue:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateUserVisibleValue:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateMaximumSymbolName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateMinimumSymbolName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateStepperBarHidden:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFIntegerSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFIntegerSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFIntegerSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_23749E3F8()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFIntegerSettingObservable.value.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749E418(unsigned int *a1)
{
  CAFIntegerSettingObservable.value.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_23749E438(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_23749E454(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_23749E474(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_23749E4A0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_23749E4BC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749E4DC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749E4FC()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749E51C()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749E53C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void sub_23749E558(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

void sub_23749E578(id *a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_value);
  OUTLINED_FUNCTION_11();
}

id sub_23749E5A4(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setValue_, *a1);
}

void sub_23749E5B8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleValue);
}

char *keypath_get_selector_maximumSymbolName()
{
  return sel_maximumSymbolName;
}

void sub_23749E5E0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_maximumSymbolName);
}

char *keypath_get_selector_minimumSymbolName()
{
  return sel_minimumSymbolName;
}

void sub_23749E608(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_minimumSymbolName);
}

void sub_23749E624()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFIntegerSetting.stepperBarHiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_23749E644(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFIntegerSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable, (uint64_t)&protocol conformance descriptor for CAFIntegerSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFIntegerSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFIntegerSetting and conformance CAFIntegerSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFIntegerSetting, (uint64_t)&protocol conformance descriptor for CAFIntegerSetting);
}

unint64_t type metadata accessor for CAFIntegerSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFIntegerSetting;
  if (!lazy cache variable for type metadata for CAFIntegerSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFIntegerSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFIntegerSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable, (uint64_t)&protocol conformance descriptor for CAFIntegerSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFIntegerSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))() & 0x1FF;
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.value.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.value.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.value.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$value.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.userVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$userVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.maximumSymbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$maximumSymbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.minimumSymbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$minimumSymbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.stepperBarHidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$stepperBarHidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 608))();
}

uint64_t partial apply for closure #1 in CAFIntegerSettingObservable.resetCachedDescription()()
{
  return CAFIntegerSettingObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_20_4(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_25_6(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  Swift::String v7;

  v7._object = (void *)((a1 - 32) | 0x8000000000000000);
  v7._countAndFlagsBits = v6;
  String.append(_:)(v7);
}

uint64_t CAFNowPlaying.playbackStateBridged.getter()
{
  void *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = objc_msgSend(v0, sel_hasPlaybackState);
  v2 = v1;
  if (v1)
    v1 = objc_msgSend(v0, sel_playbackState);
  return v1 | ((v2 ^ 1) << 8);
}

id CAFNowPlayingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
}

uint64_t CAFNowPlayingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFNowPlayingObservable.currentMediaSourceIdentifier.getter()
{
  CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

{
  void *v0;
  id v1;

  OUTLINED_FUNCTION_21_3();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_146();
  v1 = v0;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__currentMediaSourceIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFNowPlayingObservable.title.getter()
{
  CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

void CAFNowPlayingObservable.$title.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__title, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFNowPlayingObservable.artist.getter()
{
  CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

void CAFNowPlayingObservable.$artist.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artist, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFNowPlayingObservable.album.getter()
{
  CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

void CAFNowPlayingObservable.$album.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__album, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFNowPlayingObservable.userVisibleDescription.getter()
{
  void *v0;
  id v1;

  OUTLINED_FUNCTION_21_3();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_146();
  v1 = v0;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFNowPlayingObservable.$userVisibleDescription.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__userVisibleDescription, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFNowPlayingObservable.artwork.getter()
{
  void *v0;
  id v1;

  OUTLINED_FUNCTION_21_3();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_146();
  v1 = v0;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFNowPlayingObservable.$artwork.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artwork, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.jumpBackwardInterval.getter()
{
  return CAFNowPlayingObservable.jumpBackwardInterval.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
  OUTLINED_FUNCTION_146();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_37();
  return swift_release();
}

void CAFNowPlayingObservable.$jumpBackwardInterval.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpBackwardInterval, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.jumpForwardInterval.getter()
{
  return CAFNowPlayingObservable.jumpBackwardInterval.getter();
}

void CAFNowPlayingObservable.$jumpForwardInterval.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpForwardInterval, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.playbackState.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFNowPlayingObservable.$playbackState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__playbackState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  v1 = MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_12_3(v1, sel_registeredForCurrentMediaSourceIdentifier);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v2)
  {
    CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
    v3 = v2;
  }
  v53 = v3;
  OUTLINED_FUNCTION_12_3(v2, sel_registeredForTitle);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v4)
  {
    CAFNowPlayingObservable.title.getter();
    v5 = v4;
  }
  v52 = v5;
  OUTLINED_FUNCTION_12_3(v4, sel_registeredForArtist);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v6)
  {
    CAFNowPlayingObservable.artist.getter();
    v7 = v6;
  }
  v51 = v7;
  OUTLINED_FUNCTION_12_3(v6, sel_registeredForAlbum);
  OUTLINED_FUNCTION_2_4();
  v10 = (void *)0xEE003E6465726574;
  if ((_DWORD)v8)
  {
    CAFNowPlayingObservable.album.getter();
    v9 = v8;
    v10 = v11;
  }
  v50 = v9;
  OUTLINED_FUNCTION_12_3(v8, sel_registeredForUserVisibleDescription);
  OUTLINED_FUNCTION_2_4();
  v14 = (void *)0xEE003E6465726574;
  if ((_DWORD)v12)
  {
    CAFNowPlayingObservable.userVisibleDescription.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v12 = OUTLINED_FUNCTION_22_4();
    v13 = v12;
    v14 = v15;
  }
  v49 = v13;
  v16 = (uint64_t)OUTLINED_FUNCTION_12_3(v12, sel_registeredForArtwork);
  v17 = 0x73696765726E753CLL;
  v18 = (void *)0xEE003E6465726574;
  if ((_DWORD)v16)
  {
    CAFNowPlayingObservable.artwork.getter();
    v20 = v19;
    v22 = v21;
    v17 = Data.description.getter();
    v18 = v23;
    v16 = outlined consume of Data._Representation(v20, v22);
  }
  v48 = v17;
  OUTLINED_FUNCTION_12_3(v16, sel_registeredForJumpBackwardInterval);
  OUTLINED_FUNCTION_2_4();
  v26 = (void *)0xEE003E6465726574;
  if ((_DWORD)v24)
  {
    CAFNowPlayingObservable.jumpBackwardInterval.getter();
    v24 = OUTLINED_FUNCTION_24_4();
    v25 = v24;
    v26 = v27;
  }
  v47 = v25;
  OUTLINED_FUNCTION_12_3(v24, sel_registeredForJumpForwardInterval);
  OUTLINED_FUNCTION_2_4();
  v30 = (void *)0xEE003E6465726574;
  if ((_DWORD)v28)
  {
    CAFNowPlayingObservable.jumpForwardInterval.getter();
    v28 = OUTLINED_FUNCTION_24_4();
    v29 = v28;
    v30 = v31;
  }
  v46 = v29;
  v32 = (void *)0xEE003E6465726574;
  v33 = 0x73696765726E753CLL;
  if (OUTLINED_FUNCTION_12_3(v28, sel_registeredForPlaybackState))
  {
    CAFNowPlayingObservable.playbackState.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFPlaybackState?);
    v33 = OUTLINED_FUNCTION_22_4();
    v32 = v34;
  }
  v54 = static String._createEmpty(withInitialCapacity:)(211);
  OUTLINED_FUNCTION_27_3(v54, 0x80000002374E39A0);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_128(0xD000000000000021, (uint64_t)" { currentMediaSourceIdentifier: ");
  OUTLINED_FUNCTION_28_3(v53);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_25_7(0x3A656C746974202CLL);
  OUTLINED_FUNCTION_28_3(v52);
  OUTLINED_FUNCTION_56();
  v35._countAndFlagsBits = 0x747369747261202CLL;
  v35._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v35);
  OUTLINED_FUNCTION_28_3(v51);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_25_7(0x3A6D75626C61202CLL);
  v36._countAndFlagsBits = v50;
  v36._object = v10;
  String.append(_:)(v36);
  v37 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_27_3(v37, 0x80000002374E17E0);
  v38._countAndFlagsBits = v49;
  v38._object = v14;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 0x726F77747261202CLL;
  v39._object = (void *)0xEB00000000203A6BLL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v48;
  v40._object = v18;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", jumpBackwardInterval: ");
  v41._countAndFlagsBits = v47;
  v41._object = v26;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000017, (uint64_t)", jumpForwardInterval: ");
  v42._countAndFlagsBits = v46;
  v42._object = v30;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000011, (uint64_t)", playbackState: ");
  v43._countAndFlagsBits = v33;
  v43._object = v32;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 4095264;
  v44._object = (void *)0xE300000000000000;
  String.append(_:)(v44);
  return v54;
}

uint64_t CAFNowPlayingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFNowPlayingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFNowPlayingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFNowPlayingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFNowPlayingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFNowPlayingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  objc_super v26;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__currentMediaSourceIdentifier;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__title;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_19_1();
  v11 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artist;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v11] = OUTLINED_FUNCTION_19_1();
  v12 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__album;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v12] = OUTLINED_FUNCTION_19_1();
  v13 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__userVisibleDescription;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, String?>);
  OUTLINED_FUNCTION_127();
  v14 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v9[v13] = specialized SafePublished.init(observedValuekeypath:)(v14);
  v15 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artwork;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, Data>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v15] = v16;
  v17 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpBackwardInterval;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_21_4();
  *(_QWORD *)&v9[v17] = v18;
  v19 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpForwardInterval;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_21_4();
  *(_QWORD *)&v9[v19] = v20;
  v21 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__playbackState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, CAFPlaybackState?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v21] = v22;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed] = a1;
  v23 = a1;

  v26.receiver = v9;
  v26.super_class = (Class)type metadata accessor for CAFNowPlayingObservable();
  v24 = objc_msgSendSuper2(&v26, sel_init);
  objc_msgSend(v23, sel_registerObserver_, v24);

  return v24;
}

uint64_t CAFNowPlayingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFNowPlayingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFNowPlayingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFNowPlayingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFNowPlayingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFNowPlayingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFNowPlayingObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFNowPlayingObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFNowPlayingObservable(void **a1)
{
  CAFNowPlayingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFNowPlayingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFNowPlayingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateTitle:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateArtist:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateAlbum:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateUserVisibleDescription:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateArtwork:)()
{
  uint64_t v0;
  unint64_t v1;

  OUTLINED_FUNCTION_15_1();
  v0 = OUTLINED_FUNCTION_31_0();
  outlined copy of Data._Representation(v0, v1);
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(uint64_t a1, uint64_t a2)
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(a1, a2);
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpForwardInterval:)(uint64_t a1, uint64_t a2)
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(a1, a2);
}

uint64_t @objc CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitDuration);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
    v13 = (uint64_t)v11;
    v14 = 0;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
    v13 = (uint64_t)v11;
    v14 = 1;
  }
  __swift_storeEnumTagSinglePayload(v13, v14, 1, v12);
  v15 = a3;
  v16 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitDuration>?((uint64_t)v11);
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdatePlaybackState:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFNowPlayingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFNowPlayingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFNowPlayingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

char *keypath_get_selector_currentMediaSourceIdentifier()
{
  return sel_currentMediaSourceIdentifier;
}

void sub_23749FF3C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFNowPlaying.currentMediaSourceIdentifier : CAFNowPlaying(a1, a2, a3, (SEL *)&selRef_currentMediaSourceIdentifier);
}

char *keypath_get_selector_title()
{
  return sel_title;
}

void sub_23749FF64(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFNowPlaying.currentMediaSourceIdentifier : CAFNowPlaying(a1, a2, a3, (SEL *)&selRef_title);
}

char *keypath_get_selector_artist()
{
  return sel_artist;
}

void sub_23749FF8C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFNowPlaying.currentMediaSourceIdentifier : CAFNowPlaying(a1, a2, a3, (SEL *)&selRef_artist);
}

char *keypath_get_selector_album()
{
  return sel_album;
}

void key path getter for CAFNowPlaying.currentMediaSourceIdentifier : CAFNowPlaying(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  *v4 = v6;
  v4[1] = v8;
}

void sub_23749FFF8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFNowPlaying.currentMediaSourceIdentifier : CAFNowPlaying(a1, a2, a3, (SEL *)&selRef_album);
}

void key path getter for CAFNowPlaying.userVisibleDescription : CAFNowPlaying(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_userVisibleDescription);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

char *keypath_get_selector_artwork()
{
  return sel_artwork;
}

void key path getter for CAFNowPlaying.artwork : CAFNowPlaying(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_artwork);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

char *keypath_get_selector_jumpBackwardInterval()
{
  return sel_jumpBackwardInterval;
}

uint64_t sub_2374A00EC(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFNowPlaying.jumpBackwardInterval : CAFNowPlaying(a1, a2, a3, (SEL *)&selRef_jumpBackwardInterval);
}

char *keypath_get_selector_jumpForwardInterval()
{
  return sel_jumpForwardInterval;
}

uint64_t key path getter for CAFNowPlaying.jumpBackwardInterval : CAFNowPlaying(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_25_4(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitDuration);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  return __swift_storeEnumTagSinglePayload(v4, v7, 1, v8);
}

uint64_t sub_2374A0194(id *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for CAFNowPlaying.jumpBackwardInterval : CAFNowPlaying(a1, a2, a3, (SEL *)&selRef_jumpForwardInterval);
}

uint64_t key path getter for CAFNowPlaying.playbackStateBridged : CAFNowPlaying@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFNowPlaying.playbackStateBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t type metadata accessor for CAFNowPlayingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFNowPlaying()
{
  lazy protocol witness table accessor for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, (uint64_t)&protocol conformance descriptor for CAFNowPlayingObservable);
}

unint64_t lazy protocol witness table accessor for type CAFNowPlaying and conformance CAFNowPlaying()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFNowPlaying and conformance CAFNowPlaying;
  if (!lazy protocol witness table cache variable for type CAFNowPlaying and conformance CAFNowPlaying)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFNowPlaying);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFNowPlaying, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFNowPlaying and conformance CAFNowPlaying);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFNowPlayingObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, (uint64_t)&protocol conformance descriptor for CAFNowPlayingObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFNowPlayingObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFNowPlayingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.currentMediaSourceIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.title.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$title.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.artist.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$artist.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.album.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$album.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.userVisibleDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$userVisibleDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.artwork.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$artwork.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.jumpBackwardInterval.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$jumpBackwardInterval.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.jumpForwardInterval.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$jumpForwardInterval.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.playbackState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))() & 0x1FF;
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$playbackState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t outlined destroy of Measurement<NSUnitDuration>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFNowPlayingObservable.resetCachedDescription()()
{
  return CAFNowPlayingObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_21_4()
{
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_25_7(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE900000000000020;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_27_3(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD00000000000001ALL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

id CAFRemoteNotificationObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
}

uint64_t CAFRemoteNotificationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFRemoteNotificationObservable.userVisibleLabel.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFRemoteNotificationObservable.$userVisibleLabel.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.userVisibleDescription.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

void CAFRemoteNotificationObservable.$userVisibleDescription.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleDescription, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.identifier.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

void CAFRemoteNotificationObservable.$identifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFRemoteNotificationObservable.notificationUserActions.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_13_8();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFRemoteNotificationObservable.$notificationUserActions.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__notificationUserActions, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFRemoteNotificationObservable.userAction : CAFRemoteNotificationObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFRemoteNotificationObservable.userAction.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFRemoteNotificationObservable.userAction : CAFRemoteNotificationObservable(unsigned __int8 *a1)
{
  return CAFRemoteNotificationObservable.userAction.setter(*a1);
}

uint64_t CAFRemoteNotificationObservable.userAction.getter()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  OUTLINED_FUNCTION_15_0();
  v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v7;
  v2 = (void (*)(uint64_t *, _QWORD))swift_readAtKeyPath();
  v4 = *v3;
  v2(&v6, 0);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  return v4;
}

uint64_t CAFRemoteNotificationObservable.userAction.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void (*CAFRemoteNotificationObservable.userAction.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void (*v6)(void *, _QWORD);
  _BYTE *v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  *((_QWORD *)v3 + 9) = swift_getKeyPath();
  *((_QWORD *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  *((_QWORD *)v3 + 7) = v4;
  OUTLINED_FUNCTION_146();
  swift_retain();
  v5 = v4;
  v6 = (void (*)(void *, _QWORD))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  OUTLINED_FUNCTION_37();
  swift_release();

  *((_BYTE *)v3 + 88) = (_BYTE)v4;
  return CAFRemoteNotificationObservable.userAction.modify;
}

void CAFRemoteNotificationObservable.userAction.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFRemoteNotificationObservable.$userAction.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.projectedValue.getter();
  v1 = v0;
  OUTLINED_FUNCTION_25();
  return v1;
}

void CAFRemoteNotificationObservable.symbolNameAndColor.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_13_8();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFRemoteNotificationObservable.$symbolNameAndColor.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__symbolNameAndColor, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.displayPanelIdentifier.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

void CAFRemoteNotificationObservable.$displayPanelIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayPanelIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.displayZoneIdentifier.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

void CAFRemoteNotificationObservable.$displayZoneIdentifier.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayZoneIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.name.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

void CAFRemoteNotificationObservable.$name.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;

  v46._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v46._countAndFlagsBits = v1;
  OUTLINED_FUNCTION_7_6(v2, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_2_4();
  v5 = 0xEE003E6465726574;
  if ((_DWORD)v3)
  {
    v3 = CAFRemoteNotificationObservable.userVisibleLabel.getter();
    v4 = v3;
  }
  v45._countAndFlagsBits = v4;
  v45._object = (void *)v5;
  OUTLINED_FUNCTION_7_6(v3, sel_registeredForUserVisibleDescription);
  OUTLINED_FUNCTION_2_4();
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    v6 = CAFRemoteNotificationObservable.userVisibleDescription.getter();
    v7 = v6;
    v8 = v9;
  }
  v44 = v7;
  OUTLINED_FUNCTION_7_6(v6, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_2_4();
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    v10 = CAFRemoteNotificationObservable.identifier.getter();
    v11 = v10;
    v12 = v13;
  }
  v43 = v11;
  OUTLINED_FUNCTION_7_6(v10, sel_registeredForNotificationUserActions);
  OUTLINED_FUNCTION_22_6();
  v15 = (void *)0xEE003E6465726574;
  if ((_DWORD)v14)
  {
    CAFRemoteNotificationObservable.notificationUserActions.getter();
    v17 = v16;
    v18 = objc_msgSend(v16, sel_description);
    v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v19;

  }
  OUTLINED_FUNCTION_7_6(v14, sel_registeredForUserAction);
  OUTLINED_FUNCTION_2_4();
  v22 = (void *)0xEE003E6465726574;
  if ((_DWORD)v20)
  {
    CAFRemoteNotificationObservable.userAction.getter();
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v21 = v20;
    v22 = v23;
  }
  v41 = v21;
  v42 = v0;
  OUTLINED_FUNCTION_7_6(v20, sel_registeredForSymbolNameAndColor);
  OUTLINED_FUNCTION_2_4();
  v26 = (void *)0xEE003E6465726574;
  if ((_DWORD)v24)
  {
    CAFRemoteNotificationObservable.symbolNameAndColor.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFSymbolImageWithColor?);
    v24 = String.init<A>(describing:)();
    v25 = v24;
    v26 = v27;
  }
  v40 = v25;
  OUTLINED_FUNCTION_7_6(v24, sel_registeredForDisplayPanelIdentifier);
  OUTLINED_FUNCTION_22_6();
  v29 = (void *)0xEE003E6465726574;
  if ((_DWORD)v28)
  {
    v28 = CAFRemoteNotificationObservable.displayPanelIdentifier.getter();
    v0 = v28;
    v29 = v30;
  }
  if (OUTLINED_FUNCTION_7_6(v28, sel_registeredForDisplayZoneIdentifier))
  {
    v46._countAndFlagsBits = CAFRemoteNotificationObservable.displayZoneIdentifier.getter();
    v46._object = v31;
  }
  _StringGuts.grow(_:)(230);
  OUTLINED_FUNCTION_3_7(0xD000000000000022, (uint64_t)"<CAFRemoteNotificationObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_3_7(0xD000000000000015, (uint64_t)" { userVisibleLabel: ");
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_4((uint64_t)", userVisibleDescription: ");
  v32._countAndFlagsBits = v44;
  v32._object = v8;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2(0x69746E656469202CLL, 0x72656966u);
  v33._countAndFlagsBits = v43;
  v33._object = v12;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD00000000000001BLL, (uint64_t)", notificationUserActions: ");
  v34._countAndFlagsBits = v42;
  v34._object = v15;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2(0x634172657375202CLL, 0x6E6F6974u);
  v35._countAndFlagsBits = v41;
  v35._object = v22;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000016, (uint64_t)", symbolNameAndColor: ");
  v36._countAndFlagsBits = v40;
  v36._object = v26;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_4((uint64_t)", displayPanelIdentifier: ");
  v37._countAndFlagsBits = v0;
  v37._object = v29;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000019, (uint64_t)", displayZoneIdentifier: ");
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 4095264;
  v38._object = (void *)0xE300000000000000;
  String.append(_:)(v38);
  return 0;
}

uint64_t CAFRemoteNotificationObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFRemoteNotificationObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFRemoteNotificationObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v4 + 4);
  OUTLINED_FUNCTION_25();
  return v3;
}

void CAFRemoteNotificationObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFRemoteNotificationObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFRemoteNotificationObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  objc_super v24;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemoteNotificationObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleDescription;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_19_1();
  v11 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v11] = OUTLINED_FUNCTION_19_1();
  v12 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__notificationUserActions;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemoteNotificationObservable, CAFNotificationUserActions>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFRemoteNotificationObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__symbolNameAndColor;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemoteNotificationObservable, CAFSymbolImageWithColor?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v16] = v17;
  v18 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_19_1();
  v19 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_19_1();
  v20 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed] = a1;
  v21 = a1;

  v24.receiver = v9;
  v24.super_class = (Class)type metadata accessor for CAFRemoteNotificationObservable();
  v22 = objc_msgSendSuper2(&v24, sel_init);
  objc_msgSend(v21, sel_registerObserver_, v22);

  return v22;
}

uint64_t CAFRemoteNotificationObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFRemoteNotificationObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFRemoteNotificationObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRemoteNotificationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRemoteNotificationObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFRemoteNotificationObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFRemoteNotificationObservable(id *a1@<X8>)
{
  *a1 = CAFRemoteNotificationObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFRemoteNotificationObservable(void **a1)
{
  CAFRemoteNotificationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRemoteNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFRemoteNotificationObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_32();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleDescription:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateIdentifier:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateNotificationUserActions:)(uint64_t a1, void *a2)
{
  id v3;

  OUTLINED_FUNCTION_32();
  v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserAction:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateSymbolNameAndColor:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateName:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

void CAFRemoteNotificationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFRemoteNotificationObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFRemoteNotificationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374A18DC(_BYTE *a1@<X8>)
{
  *a1 = CAFRemoteNotificationObservable.userAction.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A1900(unsigned __int8 *a1)
{
  CAFRemoteNotificationObservable.userAction.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_2374A1920(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_userVisibleLabel, a2);
}

void sub_2374A193C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_userVisibleDescription, a2);
}

void sub_2374A1958(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_identifier, a2);
}

char *keypath_get_selector_notificationUserActions()
{
  return sel_notificationUserActions;
}

id key path getter for CAFRemoteNotification.notificationUserActions : CAFRemoteNotification@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_notificationUserActions);
  *a2 = result;
  return result;
}

char *keypath_get_selector_userAction()
{
  return sel_userAction;
}

void sub_2374A19C8(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_userAction);
  OUTLINED_FUNCTION_11();
}

id sub_2374A19F4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUserAction_, *a1);
}

char *keypath_get_selector_symbolNameAndColor()
{
  return sel_symbolNameAndColor;
}

id key path getter for CAFRemoteNotification.symbolNameAndColor : CAFRemoteNotification@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_symbolNameAndColor);
  *a2 = result;
  return result;
}

void sub_2374A1A50(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayPanelIdentifier, a2);
}

void sub_2374A1A6C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_displayZoneIdentifier, a2);
}

void sub_2374A1A88(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(a1, (SEL *)&selRef_name, a2);
}

uint64_t type metadata accessor for CAFRemoteNotificationObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRemoteNotification(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable, (uint64_t)&protocol conformance descriptor for CAFRemoteNotificationObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFRemoteNotificationObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRemoteNotification and conformance CAFRemoteNotification, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFRemoteNotification, (uint64_t)&protocol conformance descriptor for CAFRemoteNotification);
}

unint64_t type metadata accessor for CAFRemoteNotification()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFRemoteNotification;
  if (!lazy cache variable for type metadata for CAFRemoteNotification)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFRemoteNotification);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFRemoteNotificationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable, (uint64_t)&protocol conformance descriptor for CAFRemoteNotificationObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFRemoteNotificationObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userVisibleDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$userVisibleDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.notificationUserActions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$notificationUserActions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userAction.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userAction.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$userAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.symbolNameAndColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$symbolNameAndColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$displayPanelIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$displayZoneIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t partial apply for closure #1 in CAFRemoteNotificationObservable.resetCachedDescription()()
{
  return CAFRemoteNotificationObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_12_4(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_13_8()
{
  return swift_getAtKeyPath();
}

id CAFSettingsSectionObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
}

uint64_t CAFSettingsSectionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFSettingsSectionObservable.identifier.getter()
{
  CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

void CAFSettingsSectionObservable.$identifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSettingsSectionObservable.userVisibleSectionName.getter()
{
  CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_29_0();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFSettingsSectionObservable.$userVisibleSectionName.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleSectionName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSettingsSectionObservable.userVisibleFooter.getter()
{
  CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

void CAFSettingsSectionObservable.$userVisibleFooter.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleFooter, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSettingsSectionObservable.$sortOrder.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFSettingsSectionObservable.name.getter()
{
  CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

void CAFSettingsSectionObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable._description.getter(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;

  v1 = (void *)0xEE003E6465726574;
  v24 = 0x73696765726E753CLL;
  v2 = OUTLINED_FUNCTION_152(a1, sel_registeredForIdentifier);
  v3 = 0x73696765726E753CLL;
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v2)
  {
    CAFSettingsSectionObservable.identifier.getter();
    v3 = (uint64_t)v2;
    v4 = v5;
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_152((uint64_t)v2, sel_registeredForUserVisibleSectionName);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFSettingsSectionObservable.userVisibleSectionName.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v6 = OUTLINED_FUNCTION_24_0();
    v7 = v6;
    v8 = v9;
  }
  v10 = (uint64_t)OUTLINED_FUNCTION_152(v6, sel_registeredForUserVisibleFooter);
  v11 = 0x73696765726E753CLL;
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFSettingsSectionObservable.userVisibleFooter.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v10 = OUTLINED_FUNCTION_24_0();
    v11 = v10;
    v12 = v13;
  }
  if (OUTLINED_FUNCTION_152(v10, sel_registeredForSortOrder))
  {
    CAFSettingsSectionObservable.sortOrder.getter();
    v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v1 = v14;
  }
  _StringGuts.grow(_:)(119);
  OUTLINED_FUNCTION_12_0(0xD00000000000001FLL, (uint64_t)"<CAFSettingsSectionObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v15._countAndFlagsBits = 0x746E656469207B20;
  v15._object = (void *)0xEF203A7265696669;
  String.append(_:)(v15);
  v16._countAndFlagsBits = v3;
  v16._object = v4;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD00000000000001ALL, (uint64_t)", userVisibleSectionName: ");
  v17._countAndFlagsBits = v7;
  v17._object = v8;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x80000002374E3C50;
  v18._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v11;
  v19._object = v12;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x724F74726F73202CLL;
  v20._object = (void *)0xED0000203A726564;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v24;
  v21._object = v1;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFSettingsSectionObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  v3 = OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescription + 8))
  {
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSettingsSectionObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_31_0();
    CAFSettingsSectionObservable.cachedDescription.setter(v5, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFSettingsSectionObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFSettingsSectionObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFSettingsSectionObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_super v19;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__identifier;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSettingsSectionObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleSectionName;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSettingsSectionObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleFooter;
  swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v11] = OUTLINED_FUNCTION_32_0();
  v12 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSettingsSectionObservable, UInt8>);
  OUTLINED_FUNCTION_127();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__name;
  v15 = swift_getKeyPath();
  swift_allocObject();
  *(_QWORD *)&v9[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed] = a1;
  v16 = a1;

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for CAFSettingsSectionObservable();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFSettingsSectionObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFSettingsSectionObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFSettingsSectionObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSettingsSectionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSettingsSectionObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFSettingsSectionObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSettingsSectionObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFSettingsSectionObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFSettingsSectionObservable(void **a1)
{
  CAFSettingsSectionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSettingsSectionObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFSettingsSectionObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)();
}

{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleFooter:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateName:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)();
}

uint64_t CAFSettingsSectionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFSettingsSectionObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFSettingsSectionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374A2AC0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

char *keypath_get_selector_userVisibleSectionName()
{
  return sel_userVisibleSectionName;
}

void sub_2374A2AE8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleSectionName);
}

char *keypath_get_selector_userVisibleFooter()
{
  return sel_userVisibleFooter;
}

void sub_2374A2B10(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleFooter);
}

id sub_2374A2B2C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_sortOrder);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2374A2B5C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFSettingsSectionObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSettingsSection(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(lazy protocol witness table cache variable for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSettingsSectionObservable, (uint64_t)&protocol conformance descriptor for CAFSettingsSectionObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSettingsSectionObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSettingsSection and conformance CAFSettingsSection, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFSettingsSection, (uint64_t)&protocol conformance descriptor for CAFSettingsSection);
}

unint64_t type metadata accessor for CAFSettingsSection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSettingsSection;
  if (!lazy cache variable for type metadata for CAFSettingsSection)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSettingsSection);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFSettingsSectionObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFSettingsSectionObservable, (uint64_t)&protocol conformance descriptor for CAFSettingsSectionObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFSettingsSectionObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.userVisibleSectionName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$userVisibleSectionName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.userVisibleFooter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$userVisibleFooter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t partial apply for closure #1 in CAFSettingsSectionObservable.resetCachedDescription()()
{
  return CAFSettingsSectionObservable.cachedDescription.setter(0, 0);
}

id CAFChargingRateObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed);
}

uint64_t CAFChargingRateObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFChargingRateObservable.power.getter()
{
  return CAFChargingRateObservable.power.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed);
  swift_retain();
  swift_retain();
  v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

void CAFChargingRateObservable.$power.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__power, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFChargingRateObservable.chargingSpeed.getter()
{
  return CAFChargingRateObservable.power.getter();
}

void CAFChargingRateObservable.$chargingSpeed.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__chargingSpeed, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFChargingRateObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD v20[2];
  uint64_t v21;
  unint64_t v22;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  MEMORY[0x24BDAC7A8](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForPower))
  {
    CAFChargingRateObservable.power.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v8 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v10 = (void *)0xEE003E6465726574;
  v11 = 0x73696765726E753CLL;
  if (objc_msgSend(v6, sel_registeredForChargingSpeed))
  {
    CAFChargingRateObservable.chargingSpeed.getter();
    v11 = String.init<A>(describing:)();
    v10 = v12;
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v13._countAndFlagsBits = 0xD00000000000001CLL;
  v13._object = (void *)0x80000002374E3CE0;
  String.append(_:)(v13);
  v20[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x7265776F70207B20;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v7;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000002374E3D00;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v11;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 4095264;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  return v21;
}

uint64_t CAFChargingRateObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = CAFChargingRateObservable._description.getter();
    v6 = v5;
    swift_bridgeObjectRetain();
    CAFChargingRateObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

void CAFChargingRateObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFChargingRateObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFChargingRateObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__power;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFChargingRateObservable, Measurement<NSUnitPower>>);
  OUTLINED_FUNCTION_127();
  v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v2[v7] = v9;
  v10 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__chargingSpeed;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFChargingRateObservable, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_127();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v8[v10] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed] = a1;
  v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFChargingRateObservable();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFChargingRateObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFChargingRateObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFChargingRateObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFChargingRateObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFChargingRateObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFChargingRateObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFChargingRateObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFChargingRateObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFChargingRateObservable(void **a1)
{
  CAFChargingRateObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFChargingRateObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFChargingRateObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFChargingRateObservable.chargingRateService(_:didUpdatePower:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__power, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFChargingRateObservable.chargingRateService(_:didUpdateChargingSpeed:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__chargingSpeed, specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFChargingRateObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = CAFChargingRateObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
    return specialized CAFObservable.notifyChange()(result);
  return result;
}

uint64_t CAFChargingRateObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void key path getter for CAFChargingRate.power : CAFChargingRate(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_power);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

}

char *keypath_get_selector_chargingSpeed()
{
  return sel_chargingSpeed;
}

uint64_t key path getter for CAFChargingRate.chargingSpeed : CAFChargingRate@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_chargingSpeed);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

uint64_t type metadata accessor for CAFChargingRateObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFChargingRate()
{
  lazy protocol witness table accessor for type CAFChargingRateObservable and conformance CAFChargingRateObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable, (uint64_t)&protocol conformance descriptor for CAFChargingRateObservable);
}

unint64_t lazy protocol witness table accessor for type CAFChargingRate and conformance CAFChargingRate()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFChargingRate and conformance CAFChargingRate;
  if (!lazy protocol witness table cache variable for type CAFChargingRate and conformance CAFChargingRate)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFChargingRate);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFChargingRate, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFChargingRate and conformance CAFChargingRate);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFChargingRateObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFChargingRateObservable and conformance CAFChargingRateObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable, (uint64_t)&protocol conformance descriptor for CAFChargingRateObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFChargingRateObservable and conformance CAFChargingRateObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFChargingRateObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFChargingRateObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFChargingRateObservable.power.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.$power.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.chargingSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.$chargingSpeed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t outlined destroy of Measurement<NSUnitSpeed>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFChargingRateObservable.resetCachedDescription()()
{
  return CAFChargingRateObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFTargetSpeedState.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFTargetSpeedState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFTargetSpeedState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFTargetSpeedState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFTargetSpeedState.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromTargetSpeedState();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFTargetSpeedState(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(&lazy protocol witness table cache variable for type CAFTargetSpeedState and conformance CAFTargetSpeedState, (uint64_t)&protocol conformance descriptor for CAFTargetSpeedState);
  a1[2] = lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(&lazy protocol witness table cache variable for type CAFTargetSpeedState and conformance CAFTargetSpeedState, (uint64_t)&protocol conformance descriptor for CAFTargetSpeedState);
  result = lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(&lazy protocol witness table cache variable for type CAFTargetSpeedState and conformance CAFTargetSpeedState, (uint64_t)&protocol conformance descriptor for CAFTargetSpeedState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTargetSpeedState(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFTargetSpeedState()
{
  return CAFTargetSpeedState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFTargetSpeedState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFTargetSpeedState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFTargetSpeedState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFTargetSpeedState]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFTargetSpeedState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFTargetSpeedState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFTargetSpeedState.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFTargetSpeedState(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t static CAFSettingProminenceLevel.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSettingProminenceLevel.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFSettingProminenceLevel.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSettingProminenceLevel.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSettingProminenceLevel.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromSettingProminenceLevel();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFSettingProminenceLevel.hasAppHomeTile.getter(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 1);
}

uint64_t instantiation function for generic protocol witness table for CAFSettingProminenceLevel(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(&lazy protocol witness table cache variable for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel, (uint64_t)&protocol conformance descriptor for CAFSettingProminenceLevel);
  a1[2] = lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(&lazy protocol witness table cache variable for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel, (uint64_t)&protocol conformance descriptor for CAFSettingProminenceLevel);
  result = lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(&lazy protocol witness table cache variable for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel, (uint64_t)&protocol conformance descriptor for CAFSettingProminenceLevel);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSettingProminenceLevel(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSettingProminenceLevel()
{
  return CAFSettingProminenceLevel.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSettingProminenceLevel] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFSettingProminenceLevel] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSettingProminenceLevel] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFSettingProminenceLevel]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSettingProminenceLevel] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSettingProminenceLevel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFSettingProminenceLevel.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFSettingProminenceLevel(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

id CAFTypeTestWithStatesObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
}

uint64_t CAFTypeTestWithStatesObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testBool : CAFTypeTestWithStatesObservable@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testBool : CAFTypeTestWithStatesObservable(unsigned __int8 *a1)
{
  return CAFTypeTestWithStatesObservable.testBool.setter(*a1);
}

uint64_t CAFTypeTestWithStatesObservable.testBool.getter()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];
  void *v15;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v15;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  v4 = *v3;
  OUTLINED_FUNCTION_14_0((uint64_t)v14, v2);
  OUTLINED_FUNCTION_37();
  v5 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_129(v5, v6, v7, v8, v9, v10, v11, v12, v14[0], v14[1], v14[2], v14[3], v15);
  return v4;
}

uint64_t CAFTypeTestWithStatesObservable.testBool.setter(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = swift_getKeyPath();
  return specialized static SafePublished.subscript.setter(a1, v1, KeyPath, v4);
}

void CAFTypeTestWithStatesObservable.testBool.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestWithStatesObservable.testBool.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(_QWORD *)a1 + 88), *(id *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v1);
}

uint64_t CAFTypeTestWithStatesObservable.$testBool.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestWithStatesObservable.testUInt8.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void key path setter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestWithStatesObservable.testUInt8.setter);
}

void CAFTypeTestWithStatesObservable.testUInt8.getter()
{
  CAFTypeTestWithStatesObservable.testUInt8.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  _BYTE v3[32];
  id v4;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_14_0((uint64_t)v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_101_0();
}

uint64_t CAFTypeTestWithStatesObservable.testUInt8.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestWithStatesObservable.testUInt8.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestWithStatesObservable.testUInt16.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void key path setter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestWithStatesObservable.testUInt16.setter);
}

void CAFTypeTestWithStatesObservable.testUInt16.getter()
{
  CAFTypeTestWithStatesObservable.testUInt16.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  _BYTE v3[32];
  id v4;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v4 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v4;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_14_0((uint64_t)v3, v2);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_27();

  OUTLINED_FUNCTION_101_0();
}

uint64_t CAFTypeTestWithStatesObservable.testUInt16.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestWithStatesObservable.testUInt16.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  __int16 *v5;
  __int16 v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 2);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_WORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestWithStatesObservable.testUInt32.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void key path setter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestWithStatesObservable.testUInt32.setter);
}

unint64_t CAFTypeTestWithStatesObservable.testUInt32.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  unsigned int *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[4];
  void *v16;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v16 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v16;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  v4 = *v3;
  v5 = *((_BYTE *)v3 + 4);
  OUTLINED_FUNCTION_14_0((uint64_t)v15, v2);
  OUTLINED_FUNCTION_37();
  v6 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_129(v6, v7, v8, v9, v10, v11, v12, v13, v15[0], v15[1], v15[2], v15[3], v16);
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt32.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestWithStatesObservable.testUInt32.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int *v5;
  int v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 4);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_DWORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testUInt64 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = CAFTypeTestWithStatesObservable.testUInt64.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt64 : CAFTypeTestWithStatesObservable()
{
  return CAFTypeTestWithStatesObservable.testUInt64.setter();
}

uint64_t CAFTypeTestWithStatesObservable.testUInt64.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt64.getter();
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];
  void *v15;

  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_100_0();
  v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v15;
  v2 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_16_0();
  v4 = *v3;
  OUTLINED_FUNCTION_14_0((uint64_t)v14, v2);
  OUTLINED_FUNCTION_37();
  v5 = OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_129(v5, v6, v7, v8, v9, v10, v11, v12, v14[0], v14[1], v14[2], v14[3], v15);
  return v4;
}

uint64_t CAFTypeTestWithStatesObservable.testUInt64.setter()
{
  return CAFTypeTestMultiObservable.testUInt64.setter();
}

void CAFTypeTestWithStatesObservable.testUInt64.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v2 = OUTLINED_FUNCTION_128_0();
  OUTLINED_FUNCTION_127_0((uint64_t)v2);
  *(_QWORD *)(v0 + 88) = swift_getKeyPath();
  *(_QWORD *)(v0 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  *(_QWORD *)(v0 + 72) = v3;
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  OUTLINED_FUNCTION_25_5(v5);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_QWORD *)(v0 + 56) = v7;
  *(_BYTE *)(v0 + 64) = v8;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestWithStatesObservable.testUInt64.modify(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.testUInt64.modify(a1, a2, (void (*)(_QWORD, _QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testInt8 : CAFTypeTestWithStatesObservable(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestWithStatesObservable.testInt8.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void key path setter for CAFTypeTestWithStatesObservable.testInt8 : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestWithStatesObservable.testInt8.setter);
}

void CAFTypeTestWithStatesObservable.testInt8.getter()
{
  CAFTypeTestWithStatesObservable.testUInt8.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt8.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestWithStatesObservable.testInt8.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testInt16 : CAFTypeTestWithStatesObservable(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestWithStatesObservable.testInt16.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void key path setter for CAFTypeTestWithStatesObservable.testInt16 : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestWithStatesObservable.testInt16.setter);
}

void CAFTypeTestWithStatesObservable.testInt16.getter()
{
  CAFTypeTestWithStatesObservable.testUInt16.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt16.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestWithStatesObservable.testInt16.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  __int16 *v5;
  __int16 v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 2);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_WORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestWithStatesObservable.testInt32 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestWithStatesObservable.testInt32.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void key path setter for CAFTypeTestWithStatesObservable.testInt32 : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestWithStatesObservable.testInt32.setter);
}

unint64_t CAFTypeTestWithStatesObservable.testInt32.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt32.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestWithStatesObservable.testInt32.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int *v5;
  int v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 4);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_DWORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testInt64 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = CAFTypeTestWithStatesObservable.testInt64.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testInt64 : CAFTypeTestWithStatesObservable()
{
  return CAFTypeTestWithStatesObservable.testInt64.setter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt64.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt64.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt64.setter()
{
  return CAFTypeTestMultiObservable.testUInt64.setter();
}

void CAFTypeTestWithStatesObservable.testInt64.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(uint64_t, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v2 = OUTLINED_FUNCTION_128_0();
  OUTLINED_FUNCTION_127_0((uint64_t)v2);
  *(_QWORD *)(v0 + 88) = swift_getKeyPath();
  *(_QWORD *)(v0 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  *(_QWORD *)(v0 + 72) = v3;
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_33_3();
  v4 = v3;
  v5 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  OUTLINED_FUNCTION_25_5(v5);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_QWORD *)(v0 + 56) = v7;
  *(_BYTE *)(v0 + 64) = v8;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestWithStatesObservable.testInt64.modify(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.testUInt64.modify(a1, a2, (void (*)(_QWORD, _QWORD, id, _QWORD, _QWORD))specialized static SafePublished.subscript.setter);
}

uint64_t CAFTypeTestWithStatesObservable.$testInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestWithStatesObservable.testFloat : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = CAFTypeTestWithStatesObservable.testFloat.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void key path setter for CAFTypeTestWithStatesObservable.testFloat : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestWithStatesObservable.testFloat.setter);
}

unint64_t CAFTypeTestWithStatesObservable.testFloat.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testFloat.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestWithStatesObservable.testFloat.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int *v5;
  int v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 4);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_DWORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testFloat.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testString : CAFTypeTestWithStatesObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CAFTypeTestWithStatesObservable.testString.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testString : CAFTypeTestWithStatesObservable()
{
  swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testString.setter();
}

void CAFTypeTestWithStatesObservable.testString.getter()
{
  void *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testString.setter()
{
  return CAFTypeTestMultiObservable.testString.setter();
}

void CAFTypeTestWithStatesObservable.testString.modify()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_126_0();
  *v0 = v2;
  v2[2] = v1;
  v2[3] = swift_getKeyPath();
  v2[4] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1);
  *v2 = v3;
  v2[1] = v4;
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestWithStatesObservable.testString.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_78_1((uint64_t)v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_78_1((uint64_t)v3);
  }
  OUTLINED_FUNCTION_69_1(v2);
}

uint64_t CAFTypeTestWithStatesObservable.$testString.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testData : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CAFTypeTestWithStatesObservable.testData.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testData : CAFTypeTestWithStatesObservable(uint64_t a1)
{
  outlined copy of Data?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return CAFTypeTestWithStatesObservable.testData.setter();
}

uint64_t CAFTypeTestWithStatesObservable.testData.getter()
{
  void *v0;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0, &v2);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v2;
}

uint64_t CAFTypeTestWithStatesObservable.testData.setter()
{
  return CAFTypeTestMultiObservable.testString.setter();
}

void CAFTypeTestWithStatesObservable.testData.modify()
{
  uint64_t **v0;
  void *v1;
  uint64_t *v2;

  v2 = (uint64_t *)OUTLINED_FUNCTION_126_0();
  *v0 = v2;
  v2[2] = (uint64_t)v1;
  v2[3] = swift_getKeyPath();
  v2[4] = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v1, v2);
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestWithStatesObservable.testData.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *a1;
  v4 = (*a1)[1];
  v5 = **a1;
  v6 = (id)(*a1)[2];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data?(v5, v4);
    OUTLINED_FUNCTION_80_1();
    outlined consume of Data?(*v3, v3[1]);
  }
  else
  {
    OUTLINED_FUNCTION_80_1();
  }
  free(v3);
}

uint64_t CAFTypeTestWithStatesObservable.$testData.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestWithStatesObservable.testRawData.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFTypeTestWithStatesObservable.$testRawData.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testRawData, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testEnum : CAFTypeTestWithStatesObservable(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  CAFTypeTestWithStatesObservable.testEnum.getter();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void key path setter for CAFTypeTestWithStatesObservable.testEnum : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestWithStatesObservable.testEnum.setter);
}

void CAFTypeTestWithStatesObservable.testEnum.getter()
{
  CAFTypeTestWithStatesObservable.testUInt8.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testEnum.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestWithStatesObservable.testEnum.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  char *v5;
  char v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = v5[1];
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_BYTE *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testEnum.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testEnum, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void key path getter for CAFTypeTestWithStatesObservable.testDimensionUnitRawValue : CAFTypeTestWithStatesObservable(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.getter();
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3 & 1;
}

void key path setter for CAFTypeTestWithStatesObservable.testDimensionUnitRawValue : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.setter);
}

void CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.getter()
{
  CAFTypeTestWithStatesObservable.testUInt16.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.modify()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  __int16 *v5;
  __int16 v6;
  char v7;

  v2 = OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_22_1((uint64_t)v2);
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_33_3();
  v3 = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_18_1();
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 2);
  OUTLINED_FUNCTION_25_5(v4);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_41_2();
  *(_WORD *)(v0 + 88) = v6;
  *(_BYTE *)(v0 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testDimensionUnitRawValue.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testDimensionUnitRawValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testComplexItem : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testComplexItem.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testComplexItem : CAFTypeTestWithStatesObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestWithStatesObservable.testComplexItem.setter((uint64_t)v1);
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItem.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItem.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3A30, (uint64_t)&unk_2374D3A58, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testComplexItem.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_90_1(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestWithStatesObservable.testComplexItem.modify(uint64_t a1, char a2)
{
  CAFTypeTestMultiObservable.testComplexItem.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testComplexItem.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItem, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayBool : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayBool : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayBool.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayBool.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayBool.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3A78, (uint64_t)&unk_2374D3AA0, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayBool.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayBool.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayBool.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayUInt8 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayUInt8.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayUInt8 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayUInt8.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt8.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt8.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3AC0, (uint64_t)&unk_2374D3AE8, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayUInt8.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt8.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayUInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayUInt16 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayUInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayUInt16 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayUInt16.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt16.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt16.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3B08, (uint64_t)&unk_2374D3B30, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayUInt16.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt16.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayUInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayUInt32 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayUInt32.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayUInt32 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayUInt32.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt32.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt32.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3B50, (uint64_t)&unk_2374D3B78, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayUInt32.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt32.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayUInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayUInt64 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayUInt64.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayUInt64 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayUInt64.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt64.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt64.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3B98, (uint64_t)&unk_2374D3BC0, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayUInt64.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayUInt64.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayUInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayInt8 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayInt8.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayInt8 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayInt8.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt8.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt8.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3BE0, (uint64_t)&unk_2374D3C08, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayInt8.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt8.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayInt8.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayInt16 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayInt16 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayInt16.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt16.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt16.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3C28, (uint64_t)&unk_2374D3C50, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayInt16.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt16.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayInt16.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayInt32 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayInt32.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayInt32 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayInt32.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt32.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt32.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3C70, (uint64_t)&unk_2374D3C98, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayInt32.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt32.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayInt32.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayInt64 : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayInt64.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayInt64 : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayInt64.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt64.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt64.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3CB8, (uint64_t)&unk_2374D3CE0, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayInt64.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayInt64.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayInt64.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayFloat : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayFloat.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayFloat : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayFloat.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayFloat.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayFloat.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3D00, (uint64_t)&unk_2374D3D28, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayFloat.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayFloat.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayFloat.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayString : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayString.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayString : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayString.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayString.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayString.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3D48, (uint64_t)&unk_2374D3D70, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayString.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayString.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayString.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testArrayData : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testArrayData.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testArrayData : CAFTypeTestWithStatesObservable()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testArrayData.setter(v0);
}

uint64_t CAFTypeTestWithStatesObservable.testArrayData.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayData.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3D90, (uint64_t)&unk_2374D3DB8, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testArrayData.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  v4 = (void *)OUTLINED_FUNCTION_13_4(v3);
  specialized static SafePublished.subscript.getter(v4);
  *v1 = v5;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.testArrayData.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testArrayData.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFTypeTestWithStatesObservable.testArrayRawData.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  swift_getAtKeyPath();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFTypeTestWithStatesObservable.$testArrayRawData.getter()
{
  CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayRawData, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testComplexItems : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testComplexItems.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testComplexItems : CAFTypeTestWithStatesObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestWithStatesObservable.testComplexItems.setter((uint64_t)v1);
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItems.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItems.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3DD8, (uint64_t)&unk_2374D3E00, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testComplexItems.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_90_1(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestWithStatesObservable.testComplexItems.modify(uint64_t a1, char a2)
{
  CAFTypeTestMultiObservable.testComplexItem.modify(a1, a2);
}

uint64_t CAFTypeTestWithStatesObservable.$testComplexItems.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItems, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testComplexItemValue : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testComplexItemValue.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testComplexItemValue : CAFTypeTestWithStatesObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestWithStatesObservable.testComplexItemValue.setter((uint64_t)v1);
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItemValue.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItemValue.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3E20, (uint64_t)&unk_2374D3E48, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testComplexItemValue.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_90_1(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.$testComplexItemValue.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItemValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testComplexItemList : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CAFTypeTestWithStatesObservable.testComplexItemList.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testComplexItemList : CAFTypeTestWithStatesObservable(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return CAFTypeTestWithStatesObservable.testComplexItemList.setter((uint64_t)v1);
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItemList.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItemList.setter(uint64_t a1)
{
  return CAFTypeTestMultiObservable.testComplexItem.setter(a1, (uint64_t)&unk_2374D3E68, (uint64_t)&unk_2374D3E90, (uint64_t (*)(void))specialized static SafePublished.subscript.setter);
}

void CAFTypeTestWithStatesObservable.testComplexItemList.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_35_3(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_36_3(KeyPath);
  v3 = swift_getKeyPath();
  OUTLINED_FUNCTION_90_1(v3);
  *v1 = v4;
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFTypeTestWithStatesObservable.$testComplexItemList.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItemList, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestWithStatesObservable._description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  Swift::String v101;
  uint64_t v102;
  unsigned __int16 v103;
  uint64_t v104;
  unsigned __int16 v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t v108;
  unsigned __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  Swift::String v156;

  v156._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_2_4();
  v156._countAndFlagsBits = v0;
  OUTLINED_FUNCTION_152(v1, sel_registeredForTestBool);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v2)
  {
    CAFTypeTestWithStatesObservable.testBool.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v2 = OUTLINED_FUNCTION_19_4();
    v3 = v2;
  }
  v155 = v3;
  OUTLINED_FUNCTION_152(v2, sel_registeredForTestUInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v4)
  {
    CAFTypeTestWithStatesObservable.testUInt8.getter();
    OUTLINED_FUNCTION_124_0(v6);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v4 = OUTLINED_FUNCTION_19_4();
    v5 = v4;
  }
  v154 = v5;
  OUTLINED_FUNCTION_152(v4, sel_registeredForTestUInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v7)
  {
    CAFTypeTestWithStatesObservable.testUInt16.getter();
    OUTLINED_FUNCTION_122_0(v9);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
    v7 = OUTLINED_FUNCTION_19_4();
    v8 = v7;
  }
  v153 = v8;
  OUTLINED_FUNCTION_152(v7, sel_registeredForTestUInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v10)
  {
    v12 = CAFTypeTestWithStatesObservable.testUInt32.getter();
    OUTLINED_FUNCTION_119_0(v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    v10 = OUTLINED_FUNCTION_19_4();
    v11 = v10;
  }
  v152 = v11;
  OUTLINED_FUNCTION_152(v10, sel_registeredForTestUInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v13)
  {
    CAFTypeTestWithStatesObservable.testUInt64.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
    v13 = OUTLINED_FUNCTION_19_4();
    v14 = v13;
  }
  v151 = v14;
  OUTLINED_FUNCTION_152(v13, sel_registeredForTestInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v15)
  {
    CAFTypeTestWithStatesObservable.testInt8.getter();
    OUTLINED_FUNCTION_124_0(v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
    v15 = OUTLINED_FUNCTION_19_4();
    v16 = v15;
  }
  v150 = v16;
  OUTLINED_FUNCTION_152(v15, sel_registeredForTestInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v18)
  {
    CAFTypeTestWithStatesObservable.testInt16.getter();
    OUTLINED_FUNCTION_122_0(v20);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
    v18 = OUTLINED_FUNCTION_19_4();
    v19 = v18;
  }
  v149 = v19;
  OUTLINED_FUNCTION_152(v18, sel_registeredForTestInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v21)
  {
    v23 = CAFTypeTestWithStatesObservable.testInt32.getter();
    OUTLINED_FUNCTION_119_0(v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
    v21 = OUTLINED_FUNCTION_19_4();
    v22 = v21;
  }
  v148 = v22;
  OUTLINED_FUNCTION_152(v21, sel_registeredForTestInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v24)
  {
    CAFTypeTestWithStatesObservable.testInt64.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
    v24 = OUTLINED_FUNCTION_19_4();
    v25 = v24;
  }
  v147 = v25;
  OUTLINED_FUNCTION_152(v24, sel_registeredForTestFloat);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v26)
  {
    v28 = CAFTypeTestWithStatesObservable.testFloat.getter();
    OUTLINED_FUNCTION_119_0(v28);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
    v26 = OUTLINED_FUNCTION_19_4();
    v27 = v26;
  }
  v146 = v27;
  OUTLINED_FUNCTION_152(v26, sel_registeredForTestString);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v29)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v31 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v31);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v29 = OUTLINED_FUNCTION_19_4();
    v30 = v29;
  }
  v145 = v30;
  OUTLINED_FUNCTION_152(v29, sel_registeredForTestData);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v32)
  {
    CAFTypeTestWithStatesObservable.testData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    v32 = OUTLINED_FUNCTION_19_4();
    v33 = v32;
  }
  v144 = v33;
  OUTLINED_FUNCTION_152(v32, sel_registeredForTestRawData);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v34)
  {
    CAFTypeTestWithStatesObservable.testRawData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    v34 = OUTLINED_FUNCTION_19_4();
    v35 = v34;
  }
  v143 = v35;
  OUTLINED_FUNCTION_152(v34, sel_registeredForTestEnum);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v36)
  {
    CAFTypeTestWithStatesObservable.testEnum.getter();
    OUTLINED_FUNCTION_124_0(v38);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
    v36 = OUTLINED_FUNCTION_19_4();
    v37 = v36;
  }
  v142 = v37;
  OUTLINED_FUNCTION_152(v36, sel_registeredForTestDimensionUnit);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v39)
  {
    CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.getter();
    OUTLINED_FUNCTION_122_0(v41);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
    v39 = OUTLINED_FUNCTION_19_4();
    v40 = v39;
  }
  v141 = v40;
  OUTLINED_FUNCTION_152(v39, sel_registeredForTestComplexItem);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v42)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v44 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v44);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
    v42 = OUTLINED_FUNCTION_19_4();
    v43 = v42;
  }
  v140 = v43;
  v45 = (uint64_t)OUTLINED_FUNCTION_152(v42, sel_registeredForTestArrayBool);
  v46 = 0x73696765726E753CLL;
  if ((_DWORD)v45)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v47 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v47);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
    v45 = OUTLINED_FUNCTION_19_4();
    v46 = v45;
  }
  OUTLINED_FUNCTION_152(v45, sel_registeredForTestArrayUInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v48)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v50 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v50);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
    v48 = OUTLINED_FUNCTION_19_4();
    v49 = v48;
  }
  v139 = v49;
  OUTLINED_FUNCTION_152(v48, sel_registeredForTestArrayUInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v51)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v53 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v53);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
    v51 = OUTLINED_FUNCTION_19_4();
    v52 = v51;
  }
  v138 = v52;
  OUTLINED_FUNCTION_152(v51, sel_registeredForTestArrayUInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v54)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v56 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v56);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
    v54 = OUTLINED_FUNCTION_19_4();
    v55 = v54;
  }
  v137 = v55;
  OUTLINED_FUNCTION_152(v54, sel_registeredForTestArrayUInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v57)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v59 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v59);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
    v57 = OUTLINED_FUNCTION_19_4();
    v58 = v57;
  }
  v136 = v58;
  OUTLINED_FUNCTION_152(v57, sel_registeredForTestArrayInt8);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v60)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v62 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v62);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
    v60 = OUTLINED_FUNCTION_19_4();
    v61 = v60;
  }
  v135 = v61;
  OUTLINED_FUNCTION_152(v60, sel_registeredForTestArrayInt16);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v63)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v65 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v65);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
    v63 = OUTLINED_FUNCTION_19_4();
    v64 = v63;
  }
  v134 = v64;
  OUTLINED_FUNCTION_152(v63, sel_registeredForTestArrayInt32);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v66)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v68 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v68);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
    v66 = OUTLINED_FUNCTION_19_4();
    v67 = v66;
  }
  v133 = v67;
  OUTLINED_FUNCTION_152(v66, sel_registeredForTestArrayInt64);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v69)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v71 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v71);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
    v69 = OUTLINED_FUNCTION_19_4();
    v70 = v69;
  }
  v132 = v70;
  OUTLINED_FUNCTION_152(v69, sel_registeredForTestArrayFloat);
  OUTLINED_FUNCTION_0_5();
  if ((_DWORD)v72)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v74 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v74);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
    v72 = OUTLINED_FUNCTION_19_4();
    v73 = v72;
  }
  v131 = v73;
  OUTLINED_FUNCTION_152(v72, sel_registeredForTestArrayString);
  OUTLINED_FUNCTION_2_4();
  v77 = (void *)0xEE003E6465726574;
  if ((_DWORD)v75)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v78 = (void *)OUTLINED_FUNCTION_7_7();
    specialized static SafePublished.subscript.getter(v78);
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_25();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    v75 = OUTLINED_FUNCTION_19_4();
    v76 = v75;
    v77 = v79;
  }
  v130 = v76;
  OUTLINED_FUNCTION_152(v75, sel_registeredForTestArrayData);
  OUTLINED_FUNCTION_2_4();
  v82 = (void *)0xEE003E6465726574;
  if ((_DWORD)v80)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v83 = (void *)OUTLINED_FUNCTION_132_1();
    specialized static SafePublished.subscript.getter(v83);
    OUTLINED_FUNCTION_25();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
    v80 = OUTLINED_FUNCTION_19_4();
    v81 = v80;
    v82 = v84;
  }
  v129 = v81;
  OUTLINED_FUNCTION_152(v80, sel_registeredForTestArrayRawData);
  OUTLINED_FUNCTION_2_4();
  v87 = (void *)0xEE003E6465726574;
  if ((_DWORD)v85)
  {
    CAFTypeTestWithStatesObservable.testArrayRawData.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
    v85 = OUTLINED_FUNCTION_19_4();
    v86 = v85;
    v87 = v88;
  }
  v128 = v86;
  OUTLINED_FUNCTION_152(v85, sel_registeredForTestComplexItems);
  OUTLINED_FUNCTION_2_4();
  v91 = (void *)0xEE003E6465726574;
  if ((_DWORD)v89)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v92 = (void *)OUTLINED_FUNCTION_132_1();
    specialized static SafePublished.subscript.getter(v92);
    OUTLINED_FUNCTION_25();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
    v89 = OUTLINED_FUNCTION_19_4();
    v90 = v89;
    v91 = v93;
  }
  v127 = v90;
  OUTLINED_FUNCTION_152(v89, sel_registeredForTestComplexItemValue);
  OUTLINED_FUNCTION_2_4();
  v96 = (void *)0xEE003E6465726574;
  if ((_DWORD)v94)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v97 = (void *)OUTLINED_FUNCTION_132_1();
    specialized static SafePublished.subscript.getter(v97);
    OUTLINED_FUNCTION_25();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
    v94 = OUTLINED_FUNCTION_19_4();
    v95 = v94;
    v96 = v98;
  }
  v126 = v95;
  if (OUTLINED_FUNCTION_152(v94, sel_registeredForTestComplexItemList))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v99 = (void *)OUTLINED_FUNCTION_132_1();
    specialized static SafePublished.subscript.getter(v99);
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
    v156._countAndFlagsBits = OUTLINED_FUNCTION_19_4();
    v156._object = v100;
  }
  static String._createEmpty(withInitialCapacity:)(640);
  v101._countAndFlagsBits = 0xD000000000000022;
  v101._object = (void *)0x80000002374E3DC0;
  String.append(_:)(v101);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_34_1(0x4274736574207B20, 0x3A6C6F6Fu);
  OUTLINED_FUNCTION_39_3(v155);
  OUTLINED_FUNCTION_39_2();
  v102 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_34_1(v102, v103 | 0x3A380000);
  OUTLINED_FUNCTION_39_3(v154);
  OUTLINED_FUNCTION_39_2();
  v104 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_6_2(v104, v105 | 0x36310000);
  OUTLINED_FUNCTION_39_3(v153);
  OUTLINED_FUNCTION_39_2();
  v106 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_6_2(v106, v107 | 0x32330000);
  OUTLINED_FUNCTION_39_3(v152);
  OUTLINED_FUNCTION_39_2();
  v108 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_6_2(v108, v109 | 0x34360000);
  OUTLINED_FUNCTION_39_3(v151);
  OUTLINED_FUNCTION_39_2();
  v110 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_130_0(v110, 14452);
  OUTLINED_FUNCTION_39_3(v150);
  OUTLINED_FUNCTION_39_2();
  v111 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_34_1(v111, 0x3A363174u);
  OUTLINED_FUNCTION_39_3(v149);
  OUTLINED_FUNCTION_39_2();
  v112 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_34_1(v112, 0x3A323374u);
  OUTLINED_FUNCTION_39_3(v148);
  OUTLINED_FUNCTION_39_2();
  v113 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_34_1(v113, 0x3A343674u);
  OUTLINED_FUNCTION_39_3(v147);
  OUTLINED_FUNCTION_39_2();
  v114 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_34_1(v114 & 0xFFFFFFFFFFFFLL | 0x6C46000000000000, 0x3A74616Fu);
  OUTLINED_FUNCTION_39_3(v146);
  OUTLINED_FUNCTION_39_2();
  v115 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_6_2(v115 & 0xFFFFFFFFFFFFLL | 0x7453000000000000, 0x676E6972u);
  OUTLINED_FUNCTION_39_3(v145);
  OUTLINED_FUNCTION_39_2();
  v116 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_130_0(v116 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 24948);
  OUTLINED_FUNCTION_28_3(v144);
  OUTLINED_FUNCTION_56();
  v117._countAndFlagsBits = OUTLINED_FUNCTION_53_0() & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
  v117._object = (void *)0xEF203A6174614477;
  String.append(_:)(v117);
  OUTLINED_FUNCTION_28_3(v143);
  OUTLINED_FUNCTION_56();
  v118._countAndFlagsBits = OUTLINED_FUNCTION_53_0() & 0xFFFFFFFFFFFFLL | 0x6E45000000000000;
  String.append(_:)(v118);
  OUTLINED_FUNCTION_39_3(v142);
  OUTLINED_FUNCTION_39_2();
  OUTLINED_FUNCTION_128(0xD00000000000001DLL, (uint64_t)", testDimensionUnitRawValue: ");
  OUTLINED_FUNCTION_39_3(v141);
  OUTLINED_FUNCTION_39_2();
  OUTLINED_FUNCTION_41_4((uint64_t)", testComplexItem: ");
  OUTLINED_FUNCTION_28_3(v140);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_64_2((uint64_t)", testArrayBool: ");
  OUTLINED_FUNCTION_52_3(v46);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayUInt8: ");
  OUTLINED_FUNCTION_52_3(v139);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_41_4((uint64_t)", testArrayUInt16: ");
  OUTLINED_FUNCTION_52_3(v138);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_41_4((uint64_t)", testArrayUInt32: ");
  OUTLINED_FUNCTION_52_3(v137);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_41_4((uint64_t)", testArrayUInt64: ");
  OUTLINED_FUNCTION_52_3(v136);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_64_2((uint64_t)", testArrayInt8: ");
  OUTLINED_FUNCTION_52_3(v135);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayInt16: ");
  OUTLINED_FUNCTION_52_3(v134);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayInt32: ");
  OUTLINED_FUNCTION_52_3(v133);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayInt64: ");
  OUTLINED_FUNCTION_52_3(v132);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_10_4((uint64_t)", testArrayFloat: ");
  OUTLINED_FUNCTION_52_3(v131);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_41_4((uint64_t)", testArrayString: ");
  v119._countAndFlagsBits = v130;
  v119._object = v77;
  String.append(_:)(v119);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_64_2((uint64_t)", testArrayData: ");
  v120._countAndFlagsBits = v129;
  v120._object = v82;
  String.append(_:)(v120);
  OUTLINED_FUNCTION_129_0();
  OUTLINED_FUNCTION_104_0((uint64_t)", testArrayRawData: ");
  v121._countAndFlagsBits = v128;
  v121._object = v87;
  String.append(_:)(v121);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_104_0((uint64_t)", testComplexItems: ");
  v122._countAndFlagsBits = v127;
  v122._object = v91;
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000018, (uint64_t)", testComplexItemValue: ");
  v123._countAndFlagsBits = v126;
  v123._object = v96;
  String.append(_:)(v123);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128(0xD000000000000017, (uint64_t)", testComplexItemList: ");
  String.append(_:)(v156);
  swift_bridgeObjectRelease();
  v124._countAndFlagsBits = 4095264;
  v124._object = (void *)0xE300000000000000;
  String.append(_:)(v124);
  return String.init(stringInterpolation:)();
}

void CAFTypeTestWithStatesObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTypeTestWithStatesObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFTypeTestWithStatesObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_24_1();
}

void CAFTypeTestWithStatesObservable.__allocating_init(_:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  CAFTypeTestWithStatesObservable.init(_:)();
  OUTLINED_FUNCTION_11();
}

id CAFTypeTestWithStatesObservable.init(_:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  objc_super v77;
  uint64_t v78;
  uint64_t v79;

  OUTLINED_FUNCTION_138_0();
  v78 = v1;
  v79 = v2;
  v3 = v0;
  v5 = v4;
  v6 = &v0[OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescription];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)&v3[v7] = v8;
  v9 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testBool;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  v11 = v3;
  *(_QWORD *)&v3[v9] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v12 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v12] = v13;
  v14 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, UInt16?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v14] = v15;
  v16 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, UInt32?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v16] = v17;
  v18 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, UInt64?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v18] = v19;
  v20 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Int8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v20] = v21;
  v22 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Int16?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Int32?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v24] = v25;
  v26 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Int64?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v26] = v27;
  v28 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testFloat;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Float?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v28] = v29;
  v30 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, String?>);
  OUTLINED_FUNCTION_127();
  v31 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v11[v30] = specialized SafePublished.init(observedValuekeypath:)(v31);
  v32 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, Data?>);
  OUTLINED_FUNCTION_127();
  v33 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v11[v32] = specialized SafePublished.init(observedValuekeypath:)(v33);
  v34 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testRawData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestWithStatesObservable, Data?>);
  OUTLINED_FUNCTION_127();
  v35 = OUTLINED_FUNCTION_16_1();
  *(_QWORD *)&v11[v34] = specialized SafePublished.init(observedValuekeypath:)(v35);
  v36 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testEnum;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, CAFButtonAction?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v36] = v37;
  v38 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testDimensionUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, CAFUnitType?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v38] = v39;
  v40 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItem;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_111_0();
  *(_QWORD *)&v11[v40] = v41;
  v42 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayBool;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Bool]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v42] = v43;
  v44 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [UInt8]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v44] = v45;
  v46 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [UInt16]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v46] = v47;
  v48 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [UInt32]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v48] = v49;
  v50 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [UInt64]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v50] = v51;
  v52 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Int8]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v52] = v53;
  v54 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Int16]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v54] = v55;
  v56 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Int32]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v56] = v57;
  v58 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Int64]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v58] = v59;
  v60 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayFloat;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Float]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v60] = v61;
  v62 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [String]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v62] = v63;
  v64 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, [Data]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v64] = v65;
  v66 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayRawData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestWithStatesObservable, [Data]?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v11[v66] = v67;
  v68 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItems;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFTypeTestWithStatesObservable, CAFTestComplexItems?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_112_0();
  *(_QWORD *)&v11[v68] = v69;
  v70 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItemValue;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_111_0();
  *(_QWORD *)&v11[v70] = v71;
  v72 = OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItemList;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_112_0();
  *(_QWORD *)&v11[v72] = v73;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed] = v5;
  v74 = v5;

  v77.receiver = v11;
  v77.super_class = (Class)type metadata accessor for CAFTypeTestWithStatesObservable();
  v75 = objc_msgSendSuper2(&v77, sel_init);
  objc_msgSend(v74, sel_registerObserver_, v75);

  return v75;
}

void CAFTypeTestWithStatesObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFTypeTestWithStatesObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_33_0();
}

id CAFTypeTestWithStatesObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTypeTestWithStatesObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTypeTestWithStatesObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFTypeTestWithStatesObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void protocol witness for CAFObservable.observed.getter in conformance CAFTypeTestWithStatesObservable(id *a1@<X8>)
{
  *a1 = CAFTypeTestWithStatesObservable.observed.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A820C()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testBool.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A822C(unsigned __int8 *a1)
{
  CAFTypeTestWithStatesObservable.testBool.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void protocol witness for CAFObservable.init(_:) in conformance CAFTypeTestWithStatesObservable()
{
  CAFTypeTestWithStatesObservable.__allocating_init(_:)();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFTypeTestWithStatesObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestBool:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestUInt8:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt8, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestUInt16:)(uint64_t a1, unsigned __int16 a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt16, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt32, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestUInt64:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt64, (void (*)(uint64_t, _QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestInt8:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt8, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestInt16:)(uint64_t a1, unsigned __int16 a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt16, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt32, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestInt64:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt64, (void (*)(uint64_t, _QWORD))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestFloat:)()
{
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  specialized SafePublished.value.setter();
  return OUTLINED_FUNCTION_25();
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestString:)()
{
  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestData:)()
{
  unint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_32();
  outlined copy of Data?(v1, v0);
  OUTLINED_FUNCTION_31_0();
  specialized SafePublished.value.setter();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_33_0();
}

uint64_t CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestRawData:)()
{
  unint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_32();
  outlined copy of Data?(v1, v0);
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return swift_release();
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestEnum:)(uint64_t a1, unsigned __int8 a2)
{
  CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testEnum, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestDimensionUnitRawValue:)(uint64_t a1, unsigned __int16 a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testDimensionUnitRawValue, (void (*)(_QWORD))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestComplexItem:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItem, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayBool:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  char v11;
  _BOOL8 v12;
  int64_t v13;
  char v14;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  v6 = (char *)OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v7, v8);
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_BOOLValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v10)
      {
        v12 = OUTLINED_FUNCTION_31_3(v9);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)v12, v13, v14);
      }
      OUTLINED_FUNCTION_60_0();
    }
    while (!v11);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt8:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_unsignedCharValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_60_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt16:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_unsignedShortValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_105_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt32:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt32:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt32, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_unsignedIntValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt64:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt64:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayUInt64, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_unsignedLongLongValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayInt8:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_charValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_60_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayInt16:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  OUTLINED_FUNCTION_52_2();
  v2 = v1;
  OUTLINED_FUNCTION_15_0();
  if (!v2)
  {
    OUTLINED_FUNCTION_40();
LABEL_16:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_27();
    OUTLINED_FUNCTION_23_1();
    return;
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_15:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  OUTLINED_FUNCTION_32_2();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_46_3();
    do
    {
      if (v0)
        OUTLINED_FUNCTION_51_2();
      objc_msgSend(OUTLINED_FUNCTION_50_1(), sel_shortValue);
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_45_2();
      if (v7)
      {
        OUTLINED_FUNCTION_31_3(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_105_0();
    }
    while (!v8);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayInt32:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt32:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt32, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_intValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt32:)(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, SEL *a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;

  v13 = (uint64_t *)(v6 + *a3);
  OUTLINED_FUNCTION_15_0();
  v14 = *v13;
  if (!a2)
  {
    OUTLINED_FUNCTION_146();
LABEL_15:
    v27 = swift_bridgeObjectRetain();
    a6(v27);
    OUTLINED_FUNCTION_129_0();
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_71_1();
    return;
  }
  if (!(a2 >> 62))
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_146();
    OUTLINED_FUNCTION_45();
    if (v15)
      goto LABEL_4;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_45();
  v15 = OUTLINED_FUNCTION_61_1();
  if (!v15)
  {
LABEL_14:
    OUTLINED_FUNCTION_56();
    goto LABEL_15;
  }
LABEL_4:
  OUTLINED_FUNCTION_75_0();
  if ((v15 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_97_0();
    do
    {
      if (a6)
        OUTLINED_FUNCTION_106_0();
      v16 = OUTLINED_FUNCTION_56_1(a2 + 8 * v8);
      v17 = objc_msgSend(v16, *a5);

      OUTLINED_FUNCTION_125_0();
      if (v26)
      {
        OUTLINED_FUNCTION_82_0(v25 > 1, v18, v19, v20, v21, v22, v23, v24, v28, v29);
        v7 = v31;
      }
      ++v8;
      *(_QWORD *)(v7 + 16) = a4;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v17;
    }
    while (v15 != v8);
    OUTLINED_FUNCTION_56();
    a6 = v30;
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayInt64:)(uint64_t a1, unint64_t a2)
{
  CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt64:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayInt64, (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_longLongValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayUInt64:)(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, SEL *a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;

  v13 = (uint64_t *)(v6 + *a3);
  OUTLINED_FUNCTION_15_0();
  v14 = *v13;
  if (!a2)
  {
    OUTLINED_FUNCTION_146();
LABEL_15:
    v27 = swift_bridgeObjectRetain();
    a6(v27);
    OUTLINED_FUNCTION_129_0();
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_71_1();
    return;
  }
  if (!(a2 >> 62))
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_146();
    OUTLINED_FUNCTION_45();
    if (v15)
      goto LABEL_4;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_45();
  v15 = OUTLINED_FUNCTION_61_1();
  if (!v15)
  {
LABEL_14:
    OUTLINED_FUNCTION_56();
    goto LABEL_15;
  }
LABEL_4:
  OUTLINED_FUNCTION_75_0();
  if ((v15 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_97_0();
    do
    {
      if (a6)
        OUTLINED_FUNCTION_106_0();
      v16 = OUTLINED_FUNCTION_56_1(a2 + 8 * v8);
      v17 = objc_msgSend(v16, *a5);

      OUTLINED_FUNCTION_125_0();
      if (v26)
      {
        OUTLINED_FUNCTION_82_0(v25 > 1, v18, v19, v20, v21, v22, v23, v24, v28, v29);
        v7 = v31;
      }
      ++v8;
      *(_QWORD *)(v7 + 16) = a4;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v17;
    }
    while (v15 != v8);
    OUTLINED_FUNCTION_56();
    a6 = v30;
    goto LABEL_15;
  }
  __break(1u);
}

char *CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayFloat:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t i;
  id v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_15_0();
  if (!a2)
  {
    OUTLINED_FUNCTION_40();
LABEL_15:
    OUTLINED_FUNCTION_76_0();
    specialized SafePublished.value.setter();
    OUTLINED_FUNCTION_14_5();
    return (char *)OUTLINED_FUNCTION_27();
  }
  OUTLINED_FUNCTION_85_0();
  if (!v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_64_0();
    if (v5)
      goto LABEL_4;
LABEL_14:
    OUTLINED_FUNCTION_39_2();
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_64_0();
  v5 = OUTLINED_FUNCTION_61_1();
  if (!v5)
    goto LABEL_14;
LABEL_4:
  v13 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_51_2();
      v8 = OUTLINED_FUNCTION_50_1();
      objc_msgSend(v8, sel_floatValue);
      v10 = v9;

      v12 = *(_QWORD *)(v13 + 16);
      v11 = *(_QWORD *)(v13 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v13 + 16) = v12 + 1;
      *(_DWORD *)(v13 + 4 * v12 + 32) = v10;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayString:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayString, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayData:)(uint64_t a1, uint64_t a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testArrayData, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestArrayRawData:)()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestComplexItems:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItems, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestComplexItemValue:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItemValue, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.typeTestWithStatesService(_:didUpdateTestComplexItemList:)(uint64_t a1, void *a2)
{
  CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testComplexItemList, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestWithStatesObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  CAFTypeTestWithStatesObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFTypeTestWithStatesObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374A97E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestWithStatesObservable.testString.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9804()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testData.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9838()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testComplexItem.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A985C()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayBool.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9880()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayUInt8.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A98A4()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayUInt16.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A98C8()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayUInt32.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A98EC()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayUInt64.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9910()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayInt8.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9934()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayInt16.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9958()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayInt32.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A997C()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayInt64.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A99A0()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayFloat.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A99C4()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayString.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A99E8()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testArrayData.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9A0C()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testComplexItems.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9A30()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testComplexItemValue.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9A54()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestWithStatesObservable.testComplexItemList.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9A78()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMulti.testBoolBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9A98(char *a1)
{
  CAFTypeTestMulti.testBoolBridged.setter(*a1);
  OUTLINED_FUNCTION_11();
}

void sub_2374A9ABC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testUInt8Bridged.setter);
}

void sub_2374A9ADC(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testUInt16Bridged.setter);
}

void sub_2374A9AFC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMulti.testUInt32Bridged.setter);
}

void sub_2374A9B24(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testInt8Bridged.setter);
}

void sub_2374A9B44(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testInt16Bridged.setter);
}

void sub_2374A9B64(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestIndexByUnit.testInt32Bridged.setter);
}

void sub_2374A9B8C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(unint64_t))CAFTypeTestMulti.testFloatBridged.setter);
}

void sub_2374A9BB0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testData : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testData);
}

void sub_2374A9BD0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testData : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testRawData);
}

void sub_2374A9BF0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testEnumBridged.setter);
}

void sub_2374A9C10(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (void (*)(_QWORD))CAFTypeTestMulti.testDimensionUnitRawValueBridged.setter);
}

id sub_2374A9C30(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItem_, *a1);
}

void sub_2374A9C44()
{
  char **v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMulti.testArrayBoolBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9C68()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt8Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9C8C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt16Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9CB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt32Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9CD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayUInt64Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9CF8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt8Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9D1C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt16Bridged.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9D40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt32Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9D64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_0();
  CAFTypeTestMulti.testArrayInt64Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *v0 = v9;
  OUTLINED_FUNCTION_11();
}

void sub_2374A9D88()
{
  char **v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFTypeTestMulti.testArrayFloatBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374A9DAC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testArrayString);
}

void sub_2374A9DD0(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, a4, MEMORY[0x24BEE0D00], (SEL *)&selRef_setTestArrayString_);
}

void sub_2374A9DF4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testArrayData);
}

void sub_2374A9E18(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, a4, MEMORY[0x24BDCDDE8], (SEL *)&selRef_setTestArrayData_);
}

void sub_2374A9E3C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(a1, a2, a3, (SEL *)&selRef_testArrayRawData);
}

id sub_2374A9E64(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItems_, *a1);
}

id sub_2374A9E7C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItemValue_, *a1);
}

id sub_2374A9E94(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItemList_, *a1);
}

uint64_t type metadata accessor for CAFTypeTestWithStatesObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTypeTestWithStates()
{
  lazy protocol witness table accessor for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, (uint64_t)&protocol conformance descriptor for CAFTypeTestWithStatesObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTypeTestWithStates and conformance CAFTypeTestWithStates()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFTypeTestWithStates and conformance CAFTypeTestWithStates;
  if (!lazy protocol witness table cache variable for type CAFTypeTestWithStates and conformance CAFTypeTestWithStates)
  {
    v1 = type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTypeTestWithStates);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFTypeTestWithStates, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestWithStates and conformance CAFTypeTestWithStates);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFTypeTestWithStatesObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, (uint64_t)&protocol conformance descriptor for CAFTypeTestWithStatesObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFTypeTestWithStatesObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t method lookup function for CAFTypeTestWithStatesObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testBool.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testBool.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testUInt8.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt8.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1C0));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testUInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testUInt16.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt16.setter(int a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FFFF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1E0));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testUInt32.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
  OUTLINED_FUNCTION_118_0(v1);
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt32.setter(unint64_t a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_38_3(a1, *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x200));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt64.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v2) + 0x220))(a1, a2 & 1);
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testUInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testInt8.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt8.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x240));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x250))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testInt16.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x258))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt16.setter(int a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FFFF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x260));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x270))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testInt32.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x278))();
  OUTLINED_FUNCTION_118_0(v1);
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt32.setter(unint64_t a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_38_3(a1, *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x280));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x298))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt64.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v2) + 0x2A0))(a1, a2 & 1);
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B0))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testFloat.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B8))();
  OUTLINED_FUNCTION_118_0(v1);
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testFloat.setter(unint64_t a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_38_3(a1, *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x2C0));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testFloat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testFloat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testString.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testString.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testData.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testData.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x318))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x320))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testEnum.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x328))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testEnum.setter(__int16 a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x330));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testEnum.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testEnum.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x340))();
}

void dispatch thunk of CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.getter()
{
  _QWORD *v0;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x348))();
  OUTLINED_FUNCTION_74_0();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.setter(int a1)
{
  _QWORD *v1;

  return OUTLINED_FUNCTION_26_5(a1 & 0x1FFFF, *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x350));
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testDimensionUnitRawValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x360))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItem.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x370))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItem.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testComplexItem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayBool.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayBool.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayBool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt8.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayUInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt16.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayUInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt32.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayUInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x400))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x408))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt64.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayUInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x418))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayUInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x420))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt8.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x430))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt8.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x438))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayInt8.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x448))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt16.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x450))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt16.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x458))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayInt16.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x460))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x468))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt32.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt32.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x478))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayInt32.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x480))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt64.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x490))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayInt64.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x498))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayInt64.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayFloat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayFloat.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayFloat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayFloat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayString.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayString.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayData.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayData.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x500))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testArrayRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x508))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testArrayRawData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x510))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItems.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x518))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItems.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x520))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItems.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x528))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testComplexItems.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x530))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItemValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x538))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItemValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x540))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItemValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x548))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testComplexItemValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x550))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItemList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x558))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItemList.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x560))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.testComplexItemList.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x568))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.$testComplexItemList.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x570))();
}

uint64_t dispatch thunk of CAFTypeTestWithStatesObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1408))();
}

uint64_t partial apply for closure #1 in CAFTypeTestWithStatesObservable.resetCachedDescription()()
{
  return CAFTypeTestWithStatesObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_39_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_41_4(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_52_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_64_2(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_78_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return specialized static SafePublished.subscript.setter(v2, v3, a1, v4, v1);
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return specialized static SafePublished.subscript.setter(v0, v1, v3, v4, v2);
}

void OUTLINED_FUNCTION_90_1(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 24) = a1;
  specialized static SafePublished.subscript.getter(v2);
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_132_1()
{
  uint64_t v0;

  return v0;
}

uint64_t CAFEnum.id.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD v9[2];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  v9[0] = String.init<A>(describing:)();
  v9[1] = v5;
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9[0];
}

id CAFDeepLinkSettingObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
}

uint64_t CAFDeepLinkSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void CAFDeepLinkSettingObservable.userVisibleLabel.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$userVisibleLabel.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__userVisibleLabel, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.sectionIdentifier.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_33_0();
}

void CAFDeepLinkSettingObservable.$sectionIdentifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__sectionIdentifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDeepLinkSettingObservable.sortOrder.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFDeepLinkSettingObservable.$sortOrder.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__sortOrder, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.category.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFDeepLinkSettingObservable.$category.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__category, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.identifier.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$identifier.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__identifier, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.disabled.getter()
{
  CAFDeepLinkSettingObservable.disabled.getter();
}

{
  uint64_t v0;
  id v1;
  void *v2;

  OUTLINED_FUNCTION_21_3();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFDeepLinkSettingObservable.$disabled.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__disabled, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.limitableUIElement.getter()
{
  CAFDeepLinkSettingObservable.disabled.getter();
}

void CAFDeepLinkSettingObservable.$limitableUIElement.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__limitableUIElement, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.hidden.getter()
{
  CAFDeepLinkSettingObservable.disabled.getter();
}

void CAFDeepLinkSettingObservable.$hidden.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__hidden, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.showAudioBrandLogo.getter()
{
  CAFDeepLinkSettingObservable.disabled.getter();
}

void CAFDeepLinkSettingObservable.$showAudioBrandLogo.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__showAudioBrandLogo, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.vehicleLayoutKey.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$vehicleLayoutKey.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.symbolName.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$symbolName.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__symbolName, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDeepLinkSettingObservable.prominenceInfo.getter()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_3();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFDeepLinkSettingObservable.$prominenceInfo.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__prominenceInfo, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.userVisibleValue.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$userVisibleValue.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__userVisibleValue, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.contentURLAction.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$contentURLAction.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__contentURLAction, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void CAFDeepLinkSettingObservable.name.getter()
{
  CAFDeepLinkSettingObservable.sectionIdentifier.getter();
}

void CAFDeepLinkSettingObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDeepLinkSettingObservable._description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed);
  v2 = 0x73696765726E753CLL;
  v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForUserVisibleValue))
  {
    CAFDeepLinkSettingObservable.userVisibleValue.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v2 = String.init<A>(describing:)();
    v3 = v4;
  }
  if (objc_msgSend(v1, sel_registeredForContentURLAction))
    CAFDeepLinkSettingObservable.contentURLAction.getter();
  _StringGuts.grow(_:)(81);
  OUTLINED_FUNCTION_12_0(0xD00000000000001FLL, (uint64_t)"<CAFDeepLinkSettingObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_12_0(0xD000000000000015, (uint64_t)" { userVisibleValue: ");
  v5._countAndFlagsBits = v2;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000002374E1950;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  v7._countAndFlagsBits = OUTLINED_FUNCTION_31_0();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 4095264;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t CAFDeepLinkSettingObservable.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescriptionLock;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v2);
  OUTLINED_FUNCTION_27();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescription + 8))
  {
    v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFDeepLinkSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    v4 = OUTLINED_FUNCTION_31_0();
    CAFDeepLinkSettingObservable.cachedDescription.setter(v4, v5);
    v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  OUTLINED_FUNCTION_32();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_31_0();
}

void CAFDeepLinkSettingObservable.__allocating_init(_:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  CAFDeepLinkSettingObservable.init(_:)(a1);
  OUTLINED_FUNCTION_11();
}

id CAFDeepLinkSettingObservable.init(_:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  objc_super v30;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescription];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v2[v5] = v6;
  v7 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__userVisibleLabel;
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDeepLinkSettingObservable, String>);
  OUTLINED_FUNCTION_127();
  v9 = v2;
  *(_QWORD *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  v10 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDeepLinkSettingObservable, String?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v10] = OUTLINED_FUNCTION_32_0();
  v11 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDeepLinkSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v11] = v12;
  v13 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDeepLinkSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v13] = v14;
  v15 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v15] = OUTLINED_FUNCTION_19_1();
  v16 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDeepLinkSettingObservable, Bool?>);
  OUTLINED_FUNCTION_127();
  *(_QWORD *)&v9[v16] = OUTLINED_FUNCTION_17_0();
  v17 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v17] = OUTLINED_FUNCTION_17_0();
  v18 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v18] = OUTLINED_FUNCTION_17_0();
  v19 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_2();
  *(_QWORD *)&v9[v19] = OUTLINED_FUNCTION_17_0();
  v20 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v20] = OUTLINED_FUNCTION_32_0();
  v21 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v21] = OUTLINED_FUNCTION_32_0();
  v22 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDeepLinkSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_16_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(_QWORD *)&v9[v22] = v23;
  v24 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__userVisibleValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)&v9[v24] = OUTLINED_FUNCTION_32_0();
  v25 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__contentURLAction;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v25] = OUTLINED_FUNCTION_19_1();
  v26 = OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_46_0();
  *(_QWORD *)&v9[v26] = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed] = a1;
  v27 = a1;

  v30.receiver = v9;
  v30.super_class = (Class)type metadata accessor for CAFDeepLinkSettingObservable();
  v28 = objc_msgSendSuper2(&v30, sel_init);
  objc_msgSend(v27, sel_registerObserver_, v28);

  return v28;
}

uint64_t CAFDeepLinkSettingObservable.resetCachedDescription()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_cachedDescriptionLock)
                          + 16);
  OUTLINED_FUNCTION_40();
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, partial apply for closure #1 in CAFDeepLinkSettingObservable.resetCachedDescription());
  os_unfair_lock_unlock(v1);
  return OUTLINED_FUNCTION_27();
}

id CAFDeepLinkSettingObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFDeepLinkSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDeepLinkSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDeepLinkSettingObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFDeepLinkSettingObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDeepLinkSettingObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFDeepLinkSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFDeepLinkSettingObservable(void **a1)
{
  CAFDeepLinkSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDeepLinkSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFDeepLinkSettingObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_31_0();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_18_0();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_39_0();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  OUTLINED_FUNCTION_15_1();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  OUTLINED_FUNCTION_32();
  specialized SafeReadOnlyPublished.value.setter();
  return OUTLINED_FUNCTION_0();
}

uint64_t CAFDeepLinkSettingObservable.deepLinkSettingService(_:didUpdateUserVisibleValue:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFDeepLinkSettingObservable.deepLinkSettingService(_:didUpdateContentURLAction:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFDeepLinkSettingObservable.deepLinkSettingService(_:didUpdateName:)()
{
  return CAFDeepLinkSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

void CAFDeepLinkSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = CAFDeepLinkSettingObservable.resetCachedDescription()();
  if ((a3 & 1) != 0)
    OUTLINED_FUNCTION_11();
  else
    specialized CAFObservable.notifyChange()(v4);
}

uint64_t CAFDeepLinkSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return specialized CAFObservable.notifyChange()();
  return result;
}

void sub_2374AC2C0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleLabel);
}

void sub_2374AC2DC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_sectionIdentifier);
}

void sub_2374AC2FC(id *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_category);
  OUTLINED_FUNCTION_11();
}

void sub_2374AC328(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_2374AC344()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.disabledBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AC364()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AC384()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AC3A4()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_20_0();
  *v0 = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AC3C4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_vehicleLayoutKey);
}

void sub_2374AC3E0(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_symbolName);
}

void sub_2374AC400(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.sectionIdentifier : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_userVisibleValue);
}

void sub_2374AC41C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_contentURLAction);
}

void sub_2374AC438(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for CAFAutomakerSetting.userVisibleLabel : CAFButtonSetting(a1, a2, a3, (SEL *)&selRef_name);
}

uint64_t type metadata accessor for CAFDeepLinkSettingObservable()
{
  return objc_opt_self();
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDeepLinkSetting(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable, (uint64_t)&protocol conformance descriptor for CAFDeepLinkSettingObservable);
}

void associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDeepLinkSettingObservable()
{
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSetting and conformance CAFDeepLinkSetting, 255, (uint64_t (*)(uint64_t))type metadata accessor for CAFDeepLinkSetting, (uint64_t)&protocol conformance descriptor for CAFDeepLinkSetting);
}

unint64_t type metadata accessor for CAFDeepLinkSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFDeepLinkSetting;
  if (!lazy cache variable for type metadata for CAFDeepLinkSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDeepLinkSetting);
  }
  return result;
}

void instantiation function for generic protocol witness table for CAFDeepLinkSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, a2, (uint64_t (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable, (uint64_t)&protocol conformance descriptor for CAFDeepLinkSettingObservable);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t method lookup function for CAFDeepLinkSettingObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$userVisibleLabel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$sectionIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$sortOrder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$category.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$identifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$disabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$limitableUIElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$hidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$showAudioBrandLogo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$vehicleLayoutKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$symbolName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$prominenceInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.userVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$userVisibleValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.contentURLAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$contentURLAction.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFDeepLinkSettingObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t partial apply for closure #1 in CAFDeepLinkSettingObservable.resetCachedDescription()()
{
  return CAFDeepLinkSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFVolumeType.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFVolumeType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFVolumeType.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFVolumeType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFVolumeType.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromVolumeType();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFVolumeType(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFVolumeType and conformance CAFVolumeType(&lazy protocol witness table cache variable for type CAFVolumeType and conformance CAFVolumeType, (uint64_t)&protocol conformance descriptor for CAFVolumeType);
  a1[2] = lazy protocol witness table accessor for type CAFVolumeType and conformance CAFVolumeType(&lazy protocol witness table cache variable for type CAFVolumeType and conformance CAFVolumeType, (uint64_t)&protocol conformance descriptor for CAFVolumeType);
  result = lazy protocol witness table accessor for type CAFVolumeType and conformance CAFVolumeType(&lazy protocol witness table cache variable for type CAFVolumeType and conformance CAFVolumeType, (uint64_t)&protocol conformance descriptor for CAFVolumeType);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFVolumeType and conformance CAFVolumeType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFVolumeType(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFVolumeType()
{
  return CAFVolumeType.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFVolumeType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFVolumeType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFVolumeType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFVolumeType]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFVolumeType] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFVolumeType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFVolumeType.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFVolumeType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t static CAFDefrostTypes.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFDefrostTypes.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  static CAFDefrostTypes.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFDefrostTypes.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  OUTLINED_FUNCTION_15();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFDefrostTypes.description.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)NSStringFromDefrostTypes();
  if (!v0)
    return 0x6E776F6E6B6E7528;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFDefrostTypes.hasBlownAir.getter(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 1);
}

id CAFDefrostTypes.hasFilament.getter(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_bitmask_hasOption_, a1, 2);
}

uint64_t instantiation function for generic protocol witness table for CAFDefrostTypes(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CAFDefrostTypes and conformance CAFDefrostTypes(&lazy protocol witness table cache variable for type CAFDefrostTypes and conformance CAFDefrostTypes, (uint64_t)&protocol conformance descriptor for CAFDefrostTypes);
  a1[2] = lazy protocol witness table accessor for type CAFDefrostTypes and conformance CAFDefrostTypes(&lazy protocol witness table cache variable for type CAFDefrostTypes and conformance CAFDefrostTypes, (uint64_t)&protocol conformance descriptor for CAFDefrostTypes);
  result = lazy protocol witness table accessor for type CAFDefrostTypes and conformance CAFDefrostTypes(&lazy protocol witness table cache variable for type CAFDefrostTypes and conformance CAFDefrostTypes, (uint64_t)&protocol conformance descriptor for CAFDefrostTypes);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFDefrostTypes and conformance CAFDefrostTypes(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CAFDefrostTypes(255);
    result = MEMORY[0x23B812308](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFDefrostTypes()
{
  return CAFDefrostTypes.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFDefrostTypes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CAFDefrostTypes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFDefrostTypes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFDefrostTypes]);
    result = MEMORY[0x23B812308](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFDefrostTypes] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFDefrostTypes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static CAFDefrostTypes.allCases.getter();
  *a1 = result;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFDefrostTypes(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  specialized CAFEnum.id.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void CAFCar.dimesionObservable.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_dimensionManager);
  v2 = objc_allocWithZone((Class)ObjC metadata update function for CAFDimensionObservable());
  OUTLINED_FUNCTION_22_7();
  OUTLINED_FUNCTION_11();
}

void CAFDimensionObservable.__allocating_init(_:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  OUTLINED_FUNCTION_22_7();
  OUTLINED_FUNCTION_11();
}

uint64_t type metadata accessor for CAFDimensionObservable()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFDimensionObservable;
  if (!type metadata singleton initialization cache for CAFDimensionObservable)
    return swift_getSingletonMetadata();
  return result;
}

id CAFDimensionObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDimensionObservable_observed);
}

uint64_t key path getter for CAFDimensionObservable.currentLocale : CAFDimensionObservable()
{
  return CAFDimensionObservable.currentLocale.getter();
}

void key path setter for CAFDimensionObservable.currentLocale : CAFDimensionObservable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  CAFDimensionObservable.currentLocale.setter((uint64_t)v4);
}

uint64_t CAFDimensionObservable.currentLocale.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  OUTLINED_FUNCTION_37();
  return swift_release();
}

void CAFDimensionObservable.currentLocale.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v5 = OUTLINED_FUNCTION_25_8();
  OUTLINED_FUNCTION_16_7();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_15_5();
  swift_getKeyPath();
  swift_getKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v5);
  v7 = v1;
  static Published.subscript.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v5);
  OUTLINED_FUNCTION_72();
}

uint64_t CAFDimensionObservable.$currentLocale.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

{
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_110();
  Published.projectedValue.getter();
  return swift_endAccess();
}

void CAFDimensionObservable.$currentLocale.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<Locale>.Publisher);
}

void key path getter for CAFDimensionObservable.measurementSystem : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.measurementSystem.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.measurementSystem : CAFDimensionObservable()
{
  CAFDimensionObservable.measurementSystem.setter();
}

void CAFDimensionObservable.measurementSystem.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFDimensionObservable.measurementSystem.setter()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  static Published.subscript.setter();
  OUTLINED_FUNCTION_56_0();
}

void key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_17_4();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_15_5();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v6, a1);
  a6(v6);
  OUTLINED_FUNCTION_24_1();
}

uint64_t CAFDimensionObservable.$measurementSystem.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$measurementSystem.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<CAFMeasurementSystem>.Publisher);
}

void key path getter for CAFDimensionObservable.temperatureUnit : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.temperatureUnit.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.temperatureUnit : CAFDimensionObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFDimensionObservable.temperatureUnit.setter();
}

void CAFDimensionObservable.temperatureUnit.getter()
{
  CAFDimensionObservable.temperatureUnit.getter();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  OUTLINED_FUNCTION_37();
  swift_release();
  OUTLINED_FUNCTION_56_0();
}

void CAFDimensionObservable.temperatureUnit.setter()
{
  CAFDimensionObservable.temperatureUnit.setter();
}

{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  static Published.subscript.setter();
  OUTLINED_FUNCTION_56_0();
}

uint64_t CAFDimensionObservable.$temperatureUnit.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$temperatureUnit.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<NSUnitTemperature>.Publisher);
}

void key path getter for CAFDimensionObservable.tirePressureUnit : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.tirePressureUnit.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.tirePressureUnit : CAFDimensionObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFDimensionObservable.tirePressureUnit.setter();
}

void CAFDimensionObservable.tirePressureUnit.getter()
{
  CAFDimensionObservable.temperatureUnit.getter();
}

void CAFDimensionObservable.tirePressureUnit.setter()
{
  CAFDimensionObservable.temperatureUnit.setter();
}

uint64_t CAFDimensionObservable.$tirePressureUnit.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$tirePressureUnit.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<NSUnitPressure>.Publisher);
}

void key path getter for CAFDimensionObservable.vehicleSpeedUnit : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.vehicleSpeedUnit.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.vehicleSpeedUnit : CAFDimensionObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFDimensionObservable.vehicleSpeedUnit.setter();
}

void CAFDimensionObservable.vehicleSpeedUnit.getter()
{
  CAFDimensionObservable.temperatureUnit.getter();
}

void CAFDimensionObservable.vehicleSpeedUnit.setter()
{
  CAFDimensionObservable.temperatureUnit.setter();
}

uint64_t CAFDimensionObservable.$vehicleSpeedUnit.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$vehicleSpeedUnit.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<NSUnitSpeed>.Publisher);
}

void key path getter for CAFDimensionObservable.vehicleRangeUnit : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.vehicleRangeUnit.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.vehicleRangeUnit : CAFDimensionObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFDimensionObservable.vehicleRangeUnit.setter();
}

void CAFDimensionObservable.vehicleRangeUnit.getter()
{
  CAFDimensionObservable.temperatureUnit.getter();
}

void CAFDimensionObservable.vehicleRangeUnit.setter()
{
  CAFDimensionObservable.temperatureUnit.setter();
}

uint64_t CAFDimensionObservable.$vehicleRangeUnit.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$vehicleRangeUnit.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<NSUnitLength>.Publisher);
}

void key path getter for CAFDimensionObservable.vehicleFuelEfficiencyUnit : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.vehicleFuelEfficiencyUnit.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.vehicleFuelEfficiencyUnit : CAFDimensionObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFDimensionObservable.vehicleFuelEfficiencyUnit.setter();
}

void CAFDimensionObservable.vehicleFuelEfficiencyUnit.getter()
{
  CAFDimensionObservable.temperatureUnit.getter();
}

void CAFDimensionObservable.vehicleFuelEfficiencyUnit.setter()
{
  CAFDimensionObservable.temperatureUnit.setter();
}

uint64_t CAFDimensionObservable.$vehicleFuelEfficiencyUnit.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$vehicleFuelEfficiencyUnit.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<NSUnitFuelEfficiency>.Publisher);
}

void key path getter for CAFDimensionObservable.vehicleChargePowerUnit : CAFDimensionObservable(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CAFDimensionObservable.vehicleChargePowerUnit.getter();
  *a1 = v2;
}

void key path setter for CAFDimensionObservable.vehicleChargePowerUnit : CAFDimensionObservable(id *a1)
{
  id v1;

  v1 = *a1;
  CAFDimensionObservable.vehicleChargePowerUnit.setter();
}

void CAFDimensionObservable.vehicleChargePowerUnit.getter()
{
  CAFDimensionObservable.temperatureUnit.getter();
}

void CAFDimensionObservable.vehicleChargePowerUnit.setter()
{
  CAFDimensionObservable.temperatureUnit.setter();
}

uint64_t CAFDimensionObservable.$vehicleChargePowerUnit.getter()
{
  return CAFDimensionObservable.$currentLocale.getter();
}

void CAFDimensionObservable.$vehicleChargePowerUnit.setter(uint64_t a1)
{
  CAFDimensionObservable.$currentLocale.setter(a1, &demangling cache variable for type metadata for Published<NSUnitPower>.Publisher);
}

void CAFDimensionObservable.$currentLocale.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_16_7();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v7 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_110();
  Published.projectedValue.setter();
  OUTLINED_FUNCTION_5_8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(a1, v4);
  OUTLINED_FUNCTION_72();
}

id CAFDimensionObservable.init(_:)(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  objc_class *v34;
  id v35;
  objc_super v37;
  id v38;

  v4 = OUTLINED_FUNCTION_25_8();
  OUTLINED_FUNCTION_16_7();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v37 - v9;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10CAFCombine22CAFDimensionObservable_observed] = a1;
  v11 = v1;
  v12 = a1;
  v13 = objc_msgSend(v12, sel_locale);
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_2_2();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v10, v4);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v4);
  v14 = OUTLINED_FUNCTION_5_8();
  v15 = OUTLINED_FUNCTION_5_6(v14, sel_unitTemperature);
  v16 = OUTLINED_FUNCTION_0_10();
  v38 = v15;
  OUTLINED_FUNCTION_8_5(v16, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  OUTLINED_FUNCTION_2_9();
  v17 = OUTLINED_FUNCTION_5_8();
  v18 = OUTLINED_FUNCTION_5_6(v17, sel_measurementSystem);
  OUTLINED_FUNCTION_0_10();
  v38 = v18;
  type metadata accessor for CAFMeasurementSystem(0);
  OUTLINED_FUNCTION_2_9();
  v19 = OUTLINED_FUNCTION_5_8();
  v20 = OUTLINED_FUNCTION_5_6(v19, sel_tirePressureUnit);
  v21 = OUTLINED_FUNCTION_0_10();
  v38 = v20;
  OUTLINED_FUNCTION_8_5(v21, &lazy cache variable for type metadata for NSUnitPressure);
  OUTLINED_FUNCTION_2_9();
  v22 = OUTLINED_FUNCTION_5_8();
  v23 = OUTLINED_FUNCTION_5_6(v22, sel_vehicleSpeedUnit);
  v24 = OUTLINED_FUNCTION_0_10();
  v38 = v23;
  OUTLINED_FUNCTION_8_5(v24, (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed);
  OUTLINED_FUNCTION_2_9();
  v25 = OUTLINED_FUNCTION_5_8();
  v26 = OUTLINED_FUNCTION_5_6(v25, sel_vehicleRangeUnit);
  v27 = OUTLINED_FUNCTION_0_10();
  v38 = v26;
  OUTLINED_FUNCTION_8_5(v27, &lazy cache variable for type metadata for NSUnitLength);
  OUTLINED_FUNCTION_2_9();
  v28 = OUTLINED_FUNCTION_5_8();
  v29 = OUTLINED_FUNCTION_5_6(v28, sel_vehicleFuelEfficiencyUnit);
  v30 = OUTLINED_FUNCTION_0_10();
  v38 = v29;
  OUTLINED_FUNCTION_8_5(v30, (unint64_t *)&lazy cache variable for type metadata for NSUnitFuelEfficiency);
  OUTLINED_FUNCTION_2_9();
  v31 = OUTLINED_FUNCTION_5_8();
  v32 = OUTLINED_FUNCTION_5_6(v31, sel_vehicleChargePowerUnit);
  v33 = OUTLINED_FUNCTION_0_10();
  v38 = v32;
  OUTLINED_FUNCTION_8_5(v33, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  OUTLINED_FUNCTION_2_9();
  OUTLINED_FUNCTION_5_8();

  v34 = (objc_class *)ObjC metadata update function for CAFDimensionObservable();
  v37.receiver = v11;
  v37.super_class = v34;
  v35 = objc_msgSendSuper2(&v37, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v35);

  return v35;
}

void sub_2374ADC3C()
{
  CAFDimensionObservable.currentLocale.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374ADC5C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.measurementSystem.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374ADC7C()
{
  CAFDimensionObservable.measurementSystem.setter();
  OUTLINED_FUNCTION_11();
}

void sub_2374ADC9C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.temperatureUnit.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374ADCC0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.tirePressureUnit.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374ADCE4()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.vehicleSpeedUnit.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374ADD08()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.vehicleRangeUnit.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374ADD2C()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.vehicleFuelEfficiencyUnit.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

void sub_2374ADD50()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_0();
  CAFDimensionObservable.vehicleChargePowerUnit.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_11();
}

id CAFDimensionObservable.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFDimensionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)ObjC metadata update function for CAFDimensionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDimensionObservable.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFDimensionObservable.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDimensionObservable@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CAFDimensionObservable.observed.getter();
  *a1 = result;
  return result;
}

void protocol witness for CAFObservable.init(_:) in conformance CAFDimensionObservable()
{
  CAFDimensionObservable.__allocating_init(_:)();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDimensionObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFDimensionObservable();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFDimensionObservable.dimensionManager(_:didUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_25_8();
  OUTLINED_FUNCTION_17_4();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a2);
  CAFDimensionObservable.currentLocale.setter((uint64_t)v5);
  OUTLINED_FUNCTION_24_1();
}

void CAFDimensionObservable.dimensionManager(_:didUpdate:)()
{
  CAFDimensionObservable.measurementSystem.setter();
}

void CAFDimensionObservable.dimensionManager(_:didUpdateTemperatureUnit:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  CAFDimensionObservable.temperatureUnit.setter();
}

void CAFDimensionObservable.dimensionManager(_:didUpdateTirePressureUnit:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  CAFDimensionObservable.tirePressureUnit.setter();
}

void CAFDimensionObservable.dimensionManager(_:didUpdateVehicleSpeedUnit:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  CAFDimensionObservable.vehicleSpeedUnit.setter();
}

void CAFDimensionObservable.dimensionManager(_:didUpdateVehicleRangeUnit:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  CAFDimensionObservable.vehicleRangeUnit.setter();
}

void CAFDimensionObservable.dimensionManager(_:didUpdateVehicleFuelEfficiencyUnit:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  CAFDimensionObservable.vehicleFuelEfficiencyUnit.setter();
}

void CAFDimensionObservable.dimensionManager(_:didUpdateVehicleChargePowerUnit:)(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  CAFDimensionObservable.vehicleChargePowerUnit.setter();
}

void Measurement<>.toTemperatureUnit(using:)(uint64_t a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_unitTemperature);
}

void Measurement<>.toTemperatureUnit(using:)(void *a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_unitTemperature);
}

void Measurement<>.toTirePressureUnit(using:)(uint64_t a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_tirePressureUnit);
}

void Measurement<>.toTirePressureUnit(using:)(void *a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_tirePressureUnit);
}

void Measurement<>.toVehicleSpeedUnit(using:)(uint64_t a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleSpeedUnit);
}

void Measurement<>.toVehicleSpeedUnit(using:)(void *a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleSpeedUnit);
}

void Measurement<>.toVehicleRangeUnit(using:)(uint64_t a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleRangeUnit);
}

void Measurement<>.toVehicleRangeUnit(using:)(void *a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleRangeUnit);
}

void Measurement<>.toVehicleFuelEfficiencyUnit(using:)(uint64_t a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleFuelEfficiencyUnit);
}

void Measurement<>.toVehicleFuelEfficiencyUnit(using:)(void *a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleFuelEfficiencyUnit);
}

void Measurement<>.vehicleChargePowerUnit(using:)(uint64_t a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleChargePowerUnit);
}

void Measurement<>.toTemperatureUnit(using:)(uint64_t a1, SEL *a2)
{
  id v2;

  v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC10CAFCombine22CAFDimensionObservable_observed), *a2));
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_11_6();
  OUTLINED_FUNCTION_7_8(v2);
}

void Measurement<>.vehicleChargePowerUnit(using:)(void *a1)
{
  Measurement<>.toTemperatureUnit(using:)(a1, (SEL *)&selRef_vehicleChargePowerUnit);
}

void Measurement<>.toTemperatureUnit(using:)(void *a1, SEL *a2)
{
  id v2;

  v2 = objc_msgSend(a1, *a2);
  OUTLINED_FUNCTION_110();
  OUTLINED_FUNCTION_11_6();
  OUTLINED_FUNCTION_7_8(v2);
}

id Measurement<>.formattedString(maximumFractionDigits:)(uint64_t a1)
{
  id v2;
  id result;
  void *v4;
  uint64_t v5;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1668]), sel_init);
  objc_msgSend(v2, sel_setUnitOptions_, 1);
  if (a1 < 0)
    goto LABEL_4;
  result = objc_msgSend(v2, sel_numberFormatter);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, sel_setMaximumFractionDigits_, a1);

LABEL_4:
    v5 = NSMeasurementFormatter.string<A>(from:)();

    return (id)v5;
  }
  __break(1u);
  return result;
}

void associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDimensionManager()
{
  lazy protocol witness table accessor for type CAFDimensionObservable and conformance CAFDimensionObservable(&lazy protocol witness table cache variable for type CAFDimensionObservable and conformance CAFDimensionObservable, (uint64_t)&protocol conformance descriptor for CAFDimensionObservable);
}

unint64_t lazy protocol witness table accessor for type CAFDimensionManager and conformance CAFDimensionManager()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFDimensionManager and conformance CAFDimensionManager;
  if (!lazy protocol witness table cache variable for type CAFDimensionManager and conformance CAFDimensionManager)
  {
    type metadata accessor for NSUnitTemperature(255, &lazy cache variable for type metadata for CAFDimensionManager);
    result = MEMORY[0x23B812308](&protocol conformance descriptor for CAFDimensionManager, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFDimensionManager and conformance CAFDimensionManager);
  }
  return result;
}

void type metadata accessor for NSUnitTemperature(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  OUTLINED_FUNCTION_11();
}

void instantiation function for generic protocol witness table for CAFDimensionObservable(uint64_t a1)
{
  uint64_t v2;

  lazy protocol witness table accessor for type CAFDimensionObservable and conformance CAFDimensionObservable(&lazy protocol witness table cache variable for type CAFDimensionObservable and conformance CAFDimensionObservable, (uint64_t)&protocol conformance descriptor for CAFDimensionObservable);
  *(_QWORD *)(a1 + 8) = v2;
}

void lazy protocol witness table accessor for type CAFDimensionObservable and conformance CAFDimensionObservable(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for CAFDimensionObservable();
    atomic_store(MEMORY[0x23B812308](a2, v4), a1);
  }
  OUTLINED_FUNCTION_11();
}

void sub_2374AE738()
{
  CAFDimensionObservable.$currentLocale.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<Locale>.Publisher, CAFDimensionObservable.$currentLocale.setter);
}

void sub_2374AE778()
{
  CAFDimensionObservable.$measurementSystem.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFMeasurementSystem>.Publisher, CAFDimensionObservable.$measurementSystem.setter);
}

void sub_2374AE7B8()
{
  CAFDimensionObservable.$temperatureUnit.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NSUnitTemperature>.Publisher, CAFDimensionObservable.$temperatureUnit.setter);
}

void sub_2374AE7F8()
{
  CAFDimensionObservable.$tirePressureUnit.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NSUnitPressure>.Publisher, CAFDimensionObservable.$tirePressureUnit.setter);
}

void sub_2374AE838()
{
  CAFDimensionObservable.$vehicleSpeedUnit.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NSUnitSpeed>.Publisher, CAFDimensionObservable.$vehicleSpeedUnit.setter);
}

void sub_2374AE878()
{
  CAFDimensionObservable.$vehicleRangeUnit.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NSUnitLength>.Publisher, CAFDimensionObservable.$vehicleRangeUnit.setter);
}

void sub_2374AE8B8()
{
  CAFDimensionObservable.$vehicleFuelEfficiencyUnit.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NSUnitFuelEfficiency>.Publisher, CAFDimensionObservable.$vehicleFuelEfficiencyUnit.setter);
}

void sub_2374AE8F8()
{
  CAFDimensionObservable.$vehicleChargePowerUnit.getter();
  OUTLINED_FUNCTION_11();
}

void sub_2374AE914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CAFDimensionObservable.$currentLocale : CAFDimensionObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NSUnitPower>.Publisher, CAFDimensionObservable.$vehicleChargePowerUnit.setter);
}

uint64_t ObjC metadata update function for CAFDimensionObservable()
{
  return type metadata accessor for CAFDimensionObservable();
}

void type metadata completion function for CAFDimensionObservable()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for Published<Locale>(319, &lazy cache variable for type metadata for Published<Locale>, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Locale>(319, &lazy cache variable for type metadata for Published<CAFMeasurementSystem>, type metadata accessor for CAFMeasurementSystem);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<NSUnitPower>(319, &lazy cache variable for type metadata for Published<NSUnitTemperature>, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<NSUnitPower>(319, &lazy cache variable for type metadata for Published<NSUnitPressure>, &lazy cache variable for type metadata for NSUnitPressure);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<NSUnitPower>(319, &lazy cache variable for type metadata for Published<NSUnitSpeed>, (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Published<NSUnitPower>(319, &lazy cache variable for type metadata for Published<NSUnitLength>, &lazy cache variable for type metadata for NSUnitLength);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Published<NSUnitPower>(319, &lazy cache variable for type metadata for Published<NSUnitFuelEfficiency>, (unint64_t *)&lazy cache variable for type metadata for NSUnitFuelEfficiency);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Published<NSUnitPower>(319, &lazy cache variable for type metadata for Published<NSUnitPower>, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
                if (v7 <= 0x3F)
                  swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for CAFDimensionObservable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CAFDimensionObservable.currentLocale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$currentLocale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFDimensionObservable.measurementSystem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$measurementSystem.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFDimensionObservable.temperatureUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$temperatureUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFDimensionObservable.tirePressureUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$tirePressureUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFDimensionObservable.vehicleSpeedUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$vehicleSpeedUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFDimensionObservable.vehicleRangeUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$vehicleRangeUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFDimensionObservable.vehicleFuelEfficiencyUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$vehicleFuelEfficiencyUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFDimensionObservable.vehicleChargePowerUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFDimensionObservable.$vehicleChargePowerUnit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFDimensionObservable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

void type metadata accessor for Published<Locale>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = OUTLINED_FUNCTION_20_5();
    if (!v5)
      atomic_store(v4, a2);
  }
  OUTLINED_FUNCTION_11();
}

void type metadata accessor for Published<NSUnitPower>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for NSUnitTemperature(255, a3);
    v4 = OUTLINED_FUNCTION_20_5();
    if (!v5)
      atomic_store(v4, a2);
  }
  OUTLINED_FUNCTION_11();
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return swift_endAccess();
}

void OUTLINED_FUNCTION_7_8(id a1)
{

}

void OUTLINED_FUNCTION_8_5(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for NSUnitTemperature(0, a2);
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return Measurement<>.converted(to:)();
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  return type metadata accessor for Published();
}

id OUTLINED_FUNCTION_22_7()
{
  void *v0;

  return CAFDimensionObservable.init(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_25_8()
{
  return type metadata accessor for Locale();
}

void CAFSeatBelt.seatOccupancyBridged.getter()
{
  CAFSeatBelt.seatOccupancyBridged.getter((SEL *)&selRef_hasSeatOccupancy, (SEL *)&selRef_seatOccupancy);
}

void CAFSeatBelt.buckleStateBridged.getter()
{
  CAFSeatBelt.seatOccupancyBridged.getter((SEL *)&selRef_hasBuckleState, (SEL *)&selRef_buckleState);
}

void CAFSeatBelt.seatOccupancyBridged.getter(SEL *a1, SEL *a2)
{
  void *v2;

  if (objc_msgSend(v2, *a1))
    objc_msgSend(v2, *a2);
  OUTLINED_FUNCTION_56_0();
}

id CAFSeatBeltObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable_observed);
}

uint64_t CAFSeatBeltObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable_cachedDescription);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFSeatBeltObservable.vehicleLayoutKey.getter()
{
  return CAFSeatBeltObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4;
}

void CAFSeatBeltObservable.$vehicleLayoutKey.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable__vehicleLayoutKey, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatBeltObservable.seatOccupancy.getter()
{
  return CAFSeatBeltObservable.seatOccupancy.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v3;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  return v4 | (v5 << 8);
}

void CAFSeatBeltObservable.$seatOccupancy.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable__seatOccupancy, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSeatBeltObservable.buckleState.getter()
{
  return CAFSeatBeltObservable.seatOccupancy.getter();
}

void CAFSeatBeltObservable.$buckleState.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable__buckleState, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void CAFSeatBeltObservable.seatBeltIndicator.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable_observed);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_146();
  v1 = v2;
  OUTLINED_FUNCTION_37_1();

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_56_0();
}

void CAFSeatBeltObservable.$seatBeltIndicator.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable__seatBeltIndicator, (void (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSeatBeltObservable.name.getter()
{
  return CAFSeatBeltObservable.vehicleLayoutKey.getter();
}

void CAFSeatBeltObservable.$name.getter()
{
  CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine21CAFSeatBeltObservable__name, (void (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatBeltObservable._description.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;

  v1 = (void *)0xEE003E6465726574;
  v24 = 0x73696765726E753CLL;
  v2 = (uint64_t)OUTLINED_FUNCTION_152(a1, sel_registeredForVehicleLayoutKey);
  v3 = 0x73696765726E753CLL;
  v4 = (void *)0xEE003E6465726574;
  if ((_DWORD)v2)
  {
    v2 = CAFSeatBeltObservable.vehicleLayoutKey.getter();
    v3 = v2;
    v4 = v5;
  }
  v6 = (uint64_t)OUTLINED_FUNCTION_152(v2, sel_registeredForSeatOccupancy);
  v7 = 0x73696765726E753CLL;
  v8 = (void *)0xEE003E6465726574;
  if ((_DWORD)v6)
  {
    CAFSeatBeltObservable.seatOccupancy.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFSeatOccupancy?);
    v6 = OUTLINED_FUNCTION_24_0();
    v7 = v6;
    v8 = v9;
  }
  v10 = (uint64_t)OUTLINED_FUNCTION_152(v6, sel_registeredForBuckleState);
  v11 = 0x73696765726E753CLL;
  v12 = (void *)0xEE003E6465726574;
  if ((_DWORD)v10)
  {
    CAFSeatBeltObservable.buckleState.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFLockState?);
    v10 = OUTLINED_FUNCTION_24_0();
    v11 = v10;
    v12 = v13;
  }
  if (OUTLINED_FUNCTION_152(v10, sel_registeredForSeatBeltIndicator))
  {
    CAFSeatBeltObservable.seatBeltIndicator.getter();
    v14 = (id)NSStringFromSeatBeltIndicator();
    if (v14)
    {
      v15 = v14;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v1 = v16;

    }
    else
    {
      v1 = (void *)0xE900000000000029;
      v24 = 0x6E776F6E6B6E7528;
    }
  }
  _StringGuts.grow(_:)(111);
  OUTLINED_FUNCTION_12_0(0xD000000000000018, (uint64_t)"<CAFSeatBeltObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_2_10((uint64_t)" { vehicleLayoutKey: ");
  v17._countAndFlagsBits = v3;
  v17._object = v4;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0(0xD000000000000011, (uint64_t)", seatOccupancy: ");
  v18._countAndFlagsBits = v7;
  v18._object = v8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x656C6B637562202CLL;
  v19._object = (void *)0xEF203A6574617453;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v11;
  v20._object = v12;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_10((uint64_t)", seatBeltIndicator: ");
  v21._countAndFlagsBits = v24;
  v21._object = v1;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

