uint64_t dispatch thunk of UsoEntityBuilder_appleArithmetic_ArithmeticAttribute.setDefinedValue(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PaymentAccount()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_PaymentAccount()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonWriting_WritingAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_commonWriting_WritingAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Arithmetic()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Arithmetic()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_UserFavorite()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_UserFavorite()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriFavorite()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriFavorite()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Time24HourClock()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Time24HourClock()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_App()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_App()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.attributes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.addAttributes(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.addAttributesListExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.associatedDateTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setAssociatedDateTime(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.developer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setDeveloper(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleTimer_TimerAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_appleTimer_TimerAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonNotebook_NotebookAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_commonNotebook_NotebookAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Integer()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Integer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValueAsExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ListPosition()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_ListPosition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setOffsetToReference(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setOffsetToReferenceAsExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t type metadata accessor for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Calendar()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Calendar()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_HealthLog()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_HealthLog()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonEmail_EmailAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_commonEmail_EmailAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Notification()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Notification()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementComponent()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_MeasurementComponent()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriProperty()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriProperty()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PaymentAccountType()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_PaymentAccountType()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SortOrder()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SortOrder()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PhotoMemory()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_PhotoMemory()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NavigationMenu()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_NavigationMenu()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Medication()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Medication()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DayOfWeek()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_DayOfWeek()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Currency()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Currency()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AttachmentType()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_AttachmentType()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Website()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Website()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_JournalEntry()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_JournalEntry()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Decimal()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Decimal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setDefinedValue(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SocialConversation()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SocialConversation()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MessageFolder()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_MessageFolder()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Person()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addRelationshipsListExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.location.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setLocation(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.associatedOrganization.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.usoSameAs.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setUsoSameAs(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.identifyingRelationship.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationship(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationshipAsExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.attributes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addAttributes(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addAttributesListExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.phoneticStructuredName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.definedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setDefinedValue(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Similarity()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Similarity()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NotificationType()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_NotificationType()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_HomeEntity()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_HomeEntity()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SearchObjectType()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SearchObjectType()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CalendarSystem()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_CalendarSystem()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_RadioStation()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_RadioStation()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonApp_AppListingAttribute()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_commonApp_AppListingAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Word()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Word()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Group()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Group()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.addMembersListExpression(operatorValue:operand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_TemperatureUnit()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_TemperatureUnit()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonStock_StockChangeState()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_commonStock_StockChangeState()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriContentType()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriContentType()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Attachment()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Attachment()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaItemVersion()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaItemVersion()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PostalAddress()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_PostalAddress()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CollaborationMode()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_CollaborationMode()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SortValue()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_SortValue()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Time()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_Time()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.second.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setDefinedValue(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NotebookList()
{
  return objc_opt_self();
}

uint64_t method lookup function for UsoEntityBuilder_common_NotebookList()
{
  return swift_lookUpClassMethod();
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 16) = 0;
  type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF8AEBE8);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.init()@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF8AEC80);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.asrHypothesisIndex.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.asrHypothesisIndex.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.asrHypothesisIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.spans.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.spans.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.spans.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.nodeIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.nodeIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.nodeIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0) + 28);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0) + 28);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startIndex.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startIndex.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.startIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.endIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startUnicodeScalarIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startUnicodeScalarIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.startUnicodeScalarIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endUnicodeScalarIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endUnicodeScalarIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.endUnicodeScalarIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startMilliSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startMilliSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.startMilliSeconds.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endMilliSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endMilliSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.endMilliSeconds.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0) + 40);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0) + 40);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
  return nullsub_1;
}

unint64_t static Siri_Nl_Core_Protocol_UtteranceAlignment.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t sub_1C32293E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AEB28);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AEB28);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338BE70;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "asr_hypothesis_index";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38D0];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "spans";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "node_index";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Siri_Nl_Core_Protocol_UtteranceAlignment._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AA50, (uint64_t)qword_1EF8AEB28, a1);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C3378980();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
        sub_1C2FF6DE0(&qword_1EF8AEB58, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
        sub_1C3378A64();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      result = sub_1C3378980();
    }
    sub_1C3378A4C();
    goto LABEL_11;
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = sub_1C3378B48(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0),
          sub_1C2FF6DE0(&qword_1EF8AEB58, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan), result = sub_1C3378B60(), !v1))
    {
      if (!*(_DWORD *)(v0 + 16) || (result = sub_1C3378B48(), !v1))
      {
        type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
        return sub_1C33788FC();
      }
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, &qword_1EF8AEB60, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1C32297F8@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 16) = 0;
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C3229828()
{
  return 0xD000000000000028;
}

uint64_t sub_1C3229844()
{
  return Siri_Nl_Core_Protocol_UtteranceAlignment.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C3229858()
{
  return Siri_Nl_Core_Protocol_UtteranceAlignment.traverse<A>(visitor:)();
}

uint64_t sub_1C322986C()
{
  sub_1C2FF6DE0(&qword_1EF8AECD8, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
  return sub_1C3378950();
}

uint64_t sub_1C32298BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AA50, (uint64_t)qword_1EF8AEB28, a1);
}

uint64_t sub_1C32298D8()
{
  sub_1C2FF6DE0(&qword_1EF884E10, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
  return sub_1C3378AA0();
}

uint64_t sub_1C3229918()
{
  sub_1C2FF6DE0(&qword_1EF884E10, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
  return sub_1C3378AAC();
}

unint64_t static Siri_Nl_Core_Protocol_UtteranceSpan.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_1C3229988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AEB40);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AEB40);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338ECC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "start_index";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38D0];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "end_index";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "start_unicode_scalar_index";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "end_unicode_scalar_index";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "start_milli_seconds";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "end_milli_seconds";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Siri_Nl_Core_Protocol_UtteranceSpan._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AA58, (uint64_t)qword_1EF8AEB40, a1);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C3378980();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          sub_1C3378A4C();
          break;
        case 5:
        case 6:
          sub_1C33789D4();
          break;
        default:
          break;
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.traverse<A>(visitor:)()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_1C3378B48(), !v1))
  {
    if (!v0[1] || (result = sub_1C3378B48(), !v1))
    {
      if (!v0[2] || (result = sub_1C3378B48(), !v1))
      {
        if (!v0[3] || (result = sub_1C3378B48(), !v1))
        {
          if (!v0[4] || (result = sub_1C3378B0C(), !v1))
          {
            if (!v0[5] || (result = sub_1C3378B0C(), !v1))
            {
              type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
              return sub_1C33788FC();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, &qword_1EF8AEB68, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1C3229E34@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C3229E58()
{
  return 0xD000000000000023;
}

uint64_t sub_1C3229E74()
{
  return Siri_Nl_Core_Protocol_UtteranceSpan.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C3229E88()
{
  return Siri_Nl_Core_Protocol_UtteranceSpan.traverse<A>(visitor:)();
}

uint64_t sub_1C3229E9C()
{
  sub_1C2FF6DE0(&qword_1EF8AECD0, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
  return sub_1C3378950();
}

uint64_t sub_1C3229EEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AA58, (uint64_t)qword_1EF8AEB40, a1);
}

uint64_t sub_1C3229F08()
{
  sub_1C2FF6DE0(&qword_1EF8AEB58, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
  return sub_1C3378AA0();
}

uint64_t sub_1C3229F48()
{
  sub_1C2FF6DE0(&qword_1EF8AEB58, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
  return sub_1C3378AAC();
}

uint64_t _s12SiriOntology0A36_Nl_Core_Protocol_UtteranceAlignmentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_1C3378914();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_1C3002818(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    v11 = type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
    v12 = a1 + *(int *)(v11 + 28);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 28), v4);
    sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
    v14 = sub_1C3378BD8();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t _s12SiriOntology0A31_Nl_Core_Protocol_UtteranceSpanV2eeoiySbAC_ACtFZ_0(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_1C3378914();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_DWORD *)a2
    && a1[1] == *((_DWORD *)a2 + 1)
    && a1[2] == *((_DWORD *)a2 + 2)
    && a1[3] == *((_DWORD *)a2 + 3)
    && a1[4] == *((_DWORD *)a2 + 4)
    && a1[5] == *((_DWORD *)a2 + 5))
  {
    v11 = type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
    v12 = (char *)a1 + *(int *)(v11 + 40);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 40)], v4);
    sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
    v14 = sub_1C3378BD8();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_1C322A274()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB70, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1C322A2A0()
{
  return sub_1C2FF6DE0(&qword_1EF884E10, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1C322A2CC()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB60, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1C322A2F8()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB78, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1C322A324()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB80, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1C322A350()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB58, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1C322A37C()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB68, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1C322A3A8()
{
  return sub_1C2FF6DE0(&qword_1EF8AEB88, type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

_QWORD *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v5 = *(int *)(a3 + 28);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = sub_1C3378914();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceAlignment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C322A6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceAlignment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C322A748(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C322A7BC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3378914();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 40);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1C3378914();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 40);
  v3 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for Siri_Nl_Core_Protocol_UtteranceSpan(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v4 = *(int *)(a3 + 40);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceSpan()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C322AAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 40);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceSpan()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C322AB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 40);
  v6 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1C322AB58()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3378914();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Graph.ComparisonOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Graph.ComparisonOptions.payloads.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Graph.ComparisonOptions.normalizedStringPayloads.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Graph.ComparisonOptions.identifiers.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Graph.ComparisonOptions.utteranceAlignments.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t Graph.ComparisonOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *sub_1C322AC18@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1C322AC24(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1C322AC2C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1C322AC40@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1C322AC54@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1C322AC68(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1C322AC98@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1C322ACC4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1C322ACE8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1C322ACFC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1C322AD10(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1C322AD24@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1C322AD38(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1C322AD4C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1C322AD60(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1C322AD74()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1C322AD84()
{
  return sub_1C3378EF0();
}

_QWORD *sub_1C322AD9C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_1C322ADB0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t Graph.isEquivalentTo(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = 15;
  return Graph.isEquivalentTo(_:comparisonOptions:)(a1, &v2) & 1;
}

uint64_t Graph.isEquivalentTo(_:comparisonOptions:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11[7];

  v3 = v2;
  v5 = *a2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 32);
  result = swift_unownedRetainStrong();
  if (v6)
  {
    swift_retain();
    swift_unownedRetain();
    swift_release();
    v11[5] = v3;
    v11[6] = v6;
    swift_beginAccess();
    v8 = *(_QWORD *)(a1 + 32);
    result = swift_unownedRetainStrong();
    if (v8)
    {
      swift_retain();
      swift_unownedRetain();
      swift_release();
      v11[0] = a1;
      v11[1] = v8;
      v10 = v5;
      v9 = Node.isEquivalentTo(_:comparisonOptions:)(v11, &v10);
      swift_release();
      swift_unownedRelease();
      swift_release();
      swift_unownedRelease();
      return v9 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Node.isEquivalentTo(_:comparisonOptions:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t result;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;

  v4 = *a1;
  v3 = a1[1];
  v133 = *a2;
  v6 = *v2;
  v5 = v2[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819770);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3388720;
  *(_OWORD *)(inited + 32) = 0u;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_OWORD *)(inited + 80) = 0u;
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 104) = v5;
  v175 = inited;
  v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C3388720;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = v4;
  *(_QWORD *)(v8 + 104) = v3;
  v174 = v8;
  v9 = *(_QWORD *)(inited + 16);
  swift_retain();
  swift_unownedRetain();
  swift_retain();
  swift_unownedRetain();
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_77:
    v118 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease();
    return v118 == 0;
  }
  v10 = *(_QWORD *)(inited + 16) == 0;
  while (!v10)
  {
    v12 = *(_QWORD *)(inited + 32);
    v11 = *(_QWORD *)(inited + 40);
    v14 = *(_QWORD *)(inited + 48);
    v13 = *(_QWORD *)(inited + 56);
    v16 = *(_QWORD *)(inited + 64);
    v15 = *(_QWORD *)(inited + 72);
    v18 = *(_QWORD *)(inited + 80);
    v17 = *(_QWORD *)(inited + 88);
    v20 = *(_QWORD **)(inited + 96);
    v19 = *(_QWORD **)(inited + 104);
    v137 = (_QWORD *)v13;
    v142 = v15;
    sub_1C322C4C4(v12, v11, v14, v13, v16);
    swift_retain();
    swift_unownedRetain();
    sub_1C322C390(0, 1);
    if (!*(_QWORD *)(v8 + 16))
      goto LABEL_91;
    v143 = v17;
    v144 = *(_QWORD *)(v8 + 32);
    v141 = *(_QWORD *)(v8 + 40);
    v21 = *(_QWORD *)(v8 + 48);
    v152 = v21;
    v153 = *(_QWORD *)(v8 + 56);
    v135 = v16;
    v136 = *(_QWORD *)(v8 + 64);
    v139 = v12;
    v151 = *(_QWORD *)(v8 + 72);
    v148 = v18;
    v23 = *(_QWORD *)(v8 + 80);
    v22 = *(_QWORD *)(v8 + 88);
    v145 = v11;
    v25 = *(_QWORD **)(v8 + 96);
    v24 = *(_QWORD **)(v8 + 104);
    sub_1C322C4C4(v144, v141, v21, v153, v136);
    swift_retain();
    swift_unownedRetain();
    sub_1C322C390(0, 1);
    v138 = v14;
    sub_1C322C4C4(v12, v11, v14, (uint64_t)v137, v135);
    swift_retain();
    swift_unownedRetain();
    v156 = v20;
    swift_release();
    v163 = v19;
    swift_unownedRelease();
    v140 = v23;
    sub_1C322C4C4(v144, v141, v152, v153, v136);
    swift_retain();
    swift_unownedRetain();
    swift_release();
    v162 = v24;
    swift_unownedRelease();
    v157 = v25;
    v26 = v11;
    if (v135)
    {
      if (!v136)
      {
        sub_1C322C4C4(v12, v11, v14, (uint64_t)v137, v135);
        sub_1C322C4C4(v12, v11, v14, (uint64_t)v137, v135);
        sub_1C322C4C4(v144, v141, v152, v153, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v120 = 0;
        v121 = (uint64_t)v137;
        v29 = v135;
        v28 = (uint64_t)v137;
        goto LABEL_85;
      }
      v169 = v137;
      v170 = (_QWORD *)v135;
      v171 = v142;
      v172 = v148;
      v173 = v143;
      v164 = v153;
      v165 = v136;
      v166 = v151;
      v167 = v140;
      v168 = v22;
      sub_1C322C4C4(v12, v11, v14, (uint64_t)v137, v135);
      sub_1C322C4C4(v12, v11, v14, (uint64_t)v137, v135);
      v27 = _s12SiriOntology4NameV2eeoiySbAC_ACtFZ_0(&v169, &v164);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v28 = (uint64_t)v137;
      v29 = v135;
      sub_1C322C500(v12, v145, v14, (uint64_t)v137, v135);
      v30 = v141;
      if ((v27 & 1) == 0)
      {
        v122 = v144;
        v123 = v153;
        v124 = v136;
        sub_1C322C500(v144, v141, v152, v153, v136);
        v125 = v14;
        v126 = v145;
        v127 = v139;
        goto LABEL_86;
      }
      v31 = (uint64_t)v137;
      v26 = v145;
      if ((_DWORD)v152 != (_DWORD)v14)
      {
        sub_1C322C500(v144, v141, v152, v153, v136);
        sub_1C322C500(v12, v145, v14, (uint64_t)v137, v135);
        sub_1C322C500(v144, v141, v152, v153, v136);
        swift_release();
        swift_unownedRelease();
        v128 = v12;
        v129 = v145;
        v130 = v14;
        v131 = (uint64_t)v137;
        v132 = v135;
        goto LABEL_87;
      }
    }
    else
    {
      v29 = 0;
      v31 = (uint64_t)v137;
      sub_1C322C4C4(v12, v11, v14, (uint64_t)v137, 0);
      if (v136)
      {
        v28 = (uint64_t)v137;
        v121 = 0;
        v120 = v153;
LABEL_85:
        sub_1C31C9CDC(v121, v29);
        sub_1C31C9CDC(v120, v136);
        v125 = v14;
        v127 = v12;
        v124 = v136;
        v122 = v144;
        v126 = v145;
        v123 = v153;
LABEL_86:
        sub_1C322C500(v127, v126, v125, v28, v29);
        sub_1C322C500(v122, v141, v152, v123, v124);
        swift_release();
        swift_unownedRelease();
        v128 = v127;
        v129 = v145;
        v130 = v14;
        v131 = v28;
        v132 = v29;
        goto LABEL_87;
      }
      v30 = v141;
      sub_1C322C4C4(v144, v141, v152, v153, 0);
    }
    sub_1C322C4C4(v12, v26, v14, v31, v29);
    swift_retain();
    swift_unownedRetain();
    sub_1C322C500(v12, v26, v14, v31, v29);
    sub_1C322C4C4(v144, v30, v152, v153, v136);
    swift_retain();
    swift_unownedRetain();
    sub_1C322C500(v144, v30, v152, v153, v136);
    swift_unownedRetainStrong();
    v32 = (_QWORD *)v19[8];
    v33 = (_QWORD *)v163[9];
    v35 = v163[10];
    v34 = v163[11];
    v36 = v163[12];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    v169 = v32;
    v170 = v33;
    v171 = v35;
    v172 = v34;
    v173 = v36;
    swift_unownedRetainStrong();
    v38 = v162[8];
    v37 = v162[9];
    v40 = v162[10];
    v39 = v162[11];
    v41 = v162[12];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    v164 = v38;
    v165 = v37;
    v166 = v40;
    v167 = v39;
    v168 = v41;
    LOBYTE(v40) = _s12SiriOntology4NameV2eeoiySbAC_ACtFZ_0(&v169, &v164);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      swift_release();
      swift_unownedRelease();
      swift_release();
      swift_unownedRelease();
      sub_1C322C500(v144, v141, v152, v153, v136);
      sub_1C322C500(v139, v145, v14, (uint64_t)v137, v135);
      sub_1C322C500(v144, v141, v152, v153, v136);
      swift_release();
      swift_unownedRelease();
      v128 = v139;
      v129 = v145;
      v130 = v14;
      v131 = (uint64_t)v137;
      v132 = v135;
      goto LABEL_87;
    }
    v43 = v152;
    v42 = v153;
    if ((v133 & 1) != 0)
    {
      v169 = v156;
      v170 = v163;
      v44 = Node.stringValue.getter();
      v46 = v45;
      v169 = v157;
      v170 = v162;
      v47 = Node.stringValue.getter();
      if (v46)
      {
        if (!v48)
          goto LABEL_20;
        if (v44 == v47 && v46 == v48)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v49 = sub_1C3379184();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v49 & 1) == 0)
            goto LABEL_78;
        }
      }
      else if (v48)
      {
LABEL_20:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
      v169 = v156;
      v170 = v163;
      v50 = Node.int64Value.getter();
      v52 = v51;
      v169 = v157;
      v170 = v162;
      v53 = Node.int64Value.getter();
      if ((v52 & 1) != 0)
      {
        if ((v54 & 1) == 0)
          goto LABEL_78;
      }
      else if ((v54 & 1) != 0 || v50 != v53)
      {
        goto LABEL_78;
      }
    }
    if ((v133 & 2) != 0)
    {
      swift_unownedRetainStrong();
      v56 = v163[8];
      v55 = v163[9];
      swift_retain();
      swift_unownedRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      if (qword_1ED7CEAB8 != -1)
        swift_once();
      if (__PAIR128__(v55, v56) == xmmword_1ED7CEA90)
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      v57 = sub_1C3379184();
      swift_bridgeObjectRelease();
      if ((v57 & 1) != 0)
      {
LABEL_33:
        swift_unownedRetainStrong();
        v58 = (_QWORD *)v163[6];
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      swift_unownedRelease();
      swift_unownedRetainStrong();
      v60 = v162[8];
      v59 = v162[9];
      swift_retain();
      swift_unownedRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      if (__PAIR128__(v59, v60) == xmmword_1ED7CEA90)
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      v61 = sub_1C3379184();
      swift_bridgeObjectRelease();
      if ((v61 & 1) != 0)
      {
LABEL_38:
        swift_unownedRetainStrong();
        v62 = (_QWORD *)v162[6];
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      swift_unownedRelease();
      v63 = sub_1C30020E8(v58, v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0)
        goto LABEL_78;
    }
    if ((v133 & 4) != 0)
    {
      swift_unownedRetainStrong();
      v64 = v163[13];
      swift_bridgeObjectRetain();
      swift_release();
      swift_unownedRetainStrong();
      v65 = v162[13];
      swift_bridgeObjectRetain();
      swift_release();
      v66 = sub_1C3001D18(v64, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v66)
        goto LABEL_78;
    }
    if ((v133 & 8) != 0)
    {
      swift_unownedRetainStrong();
      v67 = v163[14];
      swift_bridgeObjectRetain();
      swift_release();
      swift_unownedRetainStrong();
      v68 = v162[14];
      swift_bridgeObjectRetain();
      swift_release();
      v69 = sub_1C3001E68(v67, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0)
      {
LABEL_78:
        swift_release();
LABEL_79:
        swift_unownedRelease();
        swift_release();
        swift_unownedRelease();
        sub_1C322C500(v144, v141, v152, v153, v136);
        sub_1C322C500(v139, v145, v138, (uint64_t)v137, v135);
        sub_1C322C500(v144, v141, v152, v153, v136);
        swift_release();
        swift_unownedRelease();
        v128 = v139;
        v129 = v145;
        v130 = v138;
        v131 = (uint64_t)v137;
        v132 = v135;
LABEL_87:
        sub_1C322C500(v128, v129, v130, v131, v132);
        swift_release();
        swift_unownedRelease();
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
    }
    swift_beginAccess();
    v70 = v156[2];
    v71 = *(_QWORD *)(v70 + 16);
    if (v71)
    {
      swift_bridgeObjectRetain();
      v154 = v156 + 3;
      swift_beginAccess();
      v72 = (int *)(v70 + 48);
      v149 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v74 = *((_QWORD *)v72 - 2);
        v73 = *((_QWORD *)v72 - 1);
        v160 = *v72;
        v75 = *((_QWORD *)v72 + 2);
        v158 = *((_QWORD *)v72 + 1);
        v76 = *((_QWORD *)v72 + 3);
        v77 = *((_QWORD *)v72 + 4);
        v78 = *((_QWORD *)v72 + 5);
        swift_unownedRetainStrong();
        v79 = v163[7];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_release();
        if (v74 == v79 && (v80 = *v154, *(_QWORD *)(*v154 + 16)) && (v81 = sub_1C302BD54(v73), (v82 & 1) != 0))
        {
          v83 = *(_QWORD *)(*(_QWORD *)(v80 + 56) + 8 * v81);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_unownedRetain();
          v84 = v149;
          v146 = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v84 = sub_1C3024048(0, v149[2] + 1, 1, v149);
          v86 = v84[2];
          v85 = v84[3];
          v87 = v86 + 1;
          if (v86 >= v85 >> 1)
          {
            v89 = sub_1C3024048((_QWORD *)(v85 > 1), v86 + 1, 1, v84);
            v87 = v86 + 1;
            v84 = v89;
          }
          v84[2] = v87;
          v149 = v84;
          v88 = &v84[10 * v86];
          v88[4] = v74;
          v88[5] = v73;
          *((_DWORD *)v88 + 12) = v160;
          v88[7] = v158;
          v88[8] = v75;
          v88[9] = v76;
          v88[10] = v77;
          v88[11] = v78;
          v88[12] = v156;
          v88[13] = v146;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v72 += 16;
        --v71;
      }
      while (v71);
      swift_bridgeObjectRelease();
      v90 = (uint64_t)v149;
      v43 = v152;
      v42 = v153;
    }
    else
    {
      v90 = MEMORY[0x1E0DEE9D8];
    }
    v91 = (_QWORD *)sub_1C31B6E3C(v90);
    swift_bridgeObjectRelease();
    v169 = v91;
    swift_bridgeObjectRetain();
    sub_1C3071C04(&v169);
    swift_bridgeObjectRelease();
    v92 = v169;
    swift_beginAccess();
    v93 = v157[2];
    v94 = *(_QWORD *)(v93 + 16);
    if (v94)
    {
      v134 = v92;
      swift_bridgeObjectRetain();
      v155 = v157 + 3;
      swift_beginAccess();
      v95 = (int *)(v93 + 48);
      v150 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v96 = *((_QWORD *)v95 - 2);
        v97 = *((_QWORD *)v95 - 1);
        v161 = *v95;
        v98 = *((_QWORD *)v95 + 2);
        v159 = *((_QWORD *)v95 + 1);
        v99 = *((_QWORD *)v95 + 3);
        v100 = *((_QWORD *)v95 + 4);
        v101 = *((_QWORD *)v95 + 5);
        swift_unownedRetainStrong();
        v102 = v162[7];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_release();
        if (v96 == v102 && (v103 = *v155, *(_QWORD *)(*v155 + 16)) && (v104 = sub_1C302BD54(v97), (v105 & 1) != 0))
        {
          v106 = *(_QWORD *)(*(_QWORD *)(v103 + 56) + 8 * v104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          v147 = v106;
          swift_unownedRetain();
          v107 = v150;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v107 = sub_1C3024048(0, v150[2] + 1, 1, v150);
          v109 = v107[2];
          v108 = v107[3];
          v110 = v109 + 1;
          if (v109 >= v108 >> 1)
          {
            v112 = sub_1C3024048((_QWORD *)(v108 > 1), v109 + 1, 1, v107);
            v110 = v109 + 1;
            v107 = v112;
          }
          v107[2] = v110;
          v150 = v107;
          v111 = &v107[10 * v109];
          v111[4] = v96;
          v111[5] = v97;
          *((_DWORD *)v111 + 12) = v161;
          v111[7] = v159;
          v111[8] = v98;
          v111[9] = v99;
          v111[10] = v100;
          v111[11] = v101;
          v111[12] = v157;
          v111[13] = v147;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v95 += 16;
        --v94;
      }
      while (v94);
      swift_bridgeObjectRelease();
      v113 = (uint64_t)v150;
      v43 = v152;
      v42 = v153;
      v92 = v134;
    }
    else
    {
      v113 = MEMORY[0x1E0DEE9D8];
    }
    v114 = (_QWORD *)sub_1C31B6E3C(v113);
    swift_bridgeObjectRelease();
    v169 = v114;
    swift_bridgeObjectRetain();
    sub_1C3071C04(&v169);
    swift_bridgeObjectRelease();
    v115 = v169;
    v116 = (_QWORD *)sub_1C31B74DC((uint64_t)v92);
    swift_release();
    sub_1C306EA50(v116);
    v117 = (_QWORD *)sub_1C31B74DC((uint64_t)v115);
    swift_release();
    sub_1C306EA50(v117);
    sub_1C322C500(v139, v145, v138, (uint64_t)v137, v135);
    swift_release();
    swift_unownedRelease();
    sub_1C322C500(v144, v141, v43, v42, v136);
    swift_release();
    swift_unownedRelease();
    sub_1C322C500(v139, v145, v138, (uint64_t)v137, v135);
    sub_1C322C500(v144, v141, v152, v153, v136);
    swift_release();
    swift_unownedRelease();
    swift_release();
    swift_unownedRelease();
    inited = v175;
    if (!*(_QWORD *)(v175 + 16))
    {
      swift_bridgeObjectRelease();
      v8 = v174;
      goto LABEL_77;
    }
    v10 = 0;
    v8 = v174;
    if (!*(_QWORD *)(v174 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_88:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
LABEL_91:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t UsoEntity.isEquivalentTo(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v4;
  _OWORD v5[2];

  v2 = *(_OWORD *)(*(_QWORD *)(v1 + 48) + 16);
  v5[0] = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16);
  v5[1] = v2;
  v4 = 15;
  return Node.isEquivalentTo(_:comparisonOptions:)((uint64_t *)v5, &v4) & 1;
}

uint64_t UsoEntity.isEquivalentTo(_:comparisonOptions:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  _OWORD v7[2];

  v3 = *a2;
  v4 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16);
  v7[0] = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16);
  v7[1] = v4;
  v6 = v3;
  return Node.isEquivalentTo(_:comparisonOptions:)((uint64_t *)v7, &v6) & 1;
}

uint64_t sub_1C322C390(uint64_t result, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v2 = v4;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1C3025F68(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    *(_QWORD *)v2 = v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819778);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_19;
  v12 = v4[2];
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = (char *)&v4[10 * a2 + 4];
  if (v6 != a2 || &v4[10 * v6 + 4] >= (_QWORD *)&v15[80 * v14])
    result = (uint64_t)memmove(&v4[10 * v6 + 4], v15, 80 * v14);
  v16 = v4[2];
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    v4[2] = v17;
LABEL_19:
    *(_QWORD *)v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1C322C4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C322C500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t sub_1C322C540()
{
  unint64_t result;

  result = qword_1EF8AECE0;
  if (!qword_1EF8AECE0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Graph.ComparisonOptions, &type metadata for Graph.ComparisonOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8AECE0);
  }
  return result;
}

unint64_t sub_1C322C588()
{
  unint64_t result;

  result = qword_1EF8AECE8;
  if (!qword_1EF8AECE8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Graph.ComparisonOptions, &type metadata for Graph.ComparisonOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8AECE8);
  }
  return result;
}

unint64_t sub_1C322C5D0()
{
  unint64_t result;

  result = qword_1EF8AECF0;
  if (!qword_1EF8AECF0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Graph.ComparisonOptions, &type metadata for Graph.ComparisonOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8AECF0);
  }
  return result;
}

unint64_t sub_1C322C618()
{
  unint64_t result;

  result = qword_1EF8AECF8;
  if (!qword_1EF8AECF8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Graph.ComparisonOptions, &type metadata for Graph.ComparisonOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8AECF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Graph.ComparisonOptions()
{
  return &type metadata for Graph.ComparisonOptions;
}

uint64_t AddressOntologyNode.PersonPlaceReference.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1C3379028();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void *static AddressOntologyNode.PersonPlaceReference.allCases.getter()
{
  return &unk_1E7D107B8;
}

uint64_t AddressOntologyNode.PersonPlaceReference.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 31085;
  else
    return 6647407;
}

uint64_t sub_1C322C704(char *a1, char *a2)
{
  return sub_1C30376C8(*a1, *a2);
}

uint64_t sub_1C322C710()
{
  sub_1C3379208();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  return sub_1C3379244();
}

uint64_t sub_1C322C77C()
{
  sub_1C3378C38();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C322C7C4()
{
  sub_1C3379208();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  return sub_1C3379244();
}

uint64_t sub_1C322C82C@<X0>(char *a1@<X8>)
{
  return AddressOntologyNode.PersonPlaceReference.init(rawValue:)(a1);
}

void sub_1C322C838(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6647407;
  if (*v1)
    v2 = 31085;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE200000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1C322C864(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7D0FD70;
}

unint64_t sub_1C322C878()
{
  unint64_t result;

  result = qword_1EF8AED00;
  if (!qword_1EF8AED00)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.PersonPlaceReference, &type metadata for AddressOntologyNode.PersonPlaceReference);
    atomic_store(result, (unint64_t *)&qword_1EF8AED00);
  }
  return result;
}

unint64_t sub_1C322C8BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1C322C8E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C322C8E0()
{
  unint64_t result;

  result = qword_1EF8AED08;
  if (!qword_1EF8AED08)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.PersonPlaceReference, &type metadata for AddressOntologyNode.PersonPlaceReference);
    atomic_store(result, (unint64_t *)&qword_1EF8AED08);
  }
  return result;
}

unint64_t sub_1C322C928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8AED10;
  if (!qword_1EF8AED10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF8AED18);
    result = MEMORY[0x1C3BD1B4C](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8AED10);
  }
  return result;
}

unint64_t sub_1C322C974(uint64_t a1)
{
  unint64_t result;

  result = sub_1C322C998();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C322C998()
{
  unint64_t result;

  result = qword_1EF8AED20;
  if (!qword_1EF8AED20)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.PersonPlaceReference, &type metadata for AddressOntologyNode.PersonPlaceReference);
    atomic_store(result, (unint64_t *)&qword_1EF8AED20);
  }
  return result;
}

uint64_t _s20PersonPlaceReferenceOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C322CA28 + 4 * byte_1C33B9A15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C322CA5C + 4 * asc_1C33B9A10[v4]))();
}

uint64_t sub_1C322CA5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C322CA64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C322CA6CLL);
  return result;
}

uint64_t sub_1C322CA78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C322CA80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C322CA84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C322CA8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddressOntologyNode.PersonPlaceReference()
{
  return &type metadata for AddressOntologyNode.PersonPlaceReference;
}

uint64_t sub_1C322CAA8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_1C3378E54();
  if (!v18)
    return sub_1C3378DB8();
  v19 = v18;
  v25 = v15;
  v39 = sub_1C3378F8C();
  v32 = sub_1C3378F98();
  sub_1C3378F74();
  v36 = v17;
  result = sub_1C3378E48();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_1C3378E6C();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_1C3378F80();
      sub_1C3378E60();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

double NonTerminalIntentNodeWrapper.traversableIntentNode.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr))(a1 + 16))(&v5);
  v3 = v7;
  *(_QWORD *)a2 = v5;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t IntentNodeTraversable.value<A>(forNode:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[528];
  _OWORD __dst[84];
  _BYTE __src[528];

  v6 = *a1;
  v7 = IntentNodeTraversable.intentNode<A>(forOntologyNode:)((uint64_t)a1, a2, a3, a4, __dst);
  v8 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 56))(a5, 1, 1, v7);
  v9 = *(_QWORD *)&__dst[0];
  v10 = *(_QWORD *)(*((_QWORD *)&__dst[1] + 1) + 16);
  if (v10)
  {
    memcpy(__dst, (const void *)(*((_QWORD *)&__dst[1] + 1) + 1344 * v10 - 1312), sizeof(__dst));
    sub_1C3020A20(__dst);
    sub_1C3056C48(v9, v8);
    sub_1C2FFE080(__dst, sub_1C2FFD5C0);
    sub_1C3020E30(__dst);
    sub_1C3056C84((uint64_t)__dst, (uint64_t)__src);
    if (sub_1C30118DC((uint64_t)__src) != 1)
    {
      v11 = *(_QWORD *)(v6 + 80);
      sub_1C30118F0(__src, v13);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 + 88) + 16))(v13, v11);
      return sub_1C2FFE080(__dst, sub_1C2FFE4B0);
    }
  }
  else
  {
    sub_1C3056C48(*(uint64_t *)&__dst[0], *((uint64_t *)&__dst[0] + 1));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 56))(a5, 1, 1);
}

double IntentNodeTraversable.intentNode(forOntologyNode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  double result;
  _QWORD v10[5];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v10[3] = type metadata accessor for NonTerminalOntologyNode();
  v10[4] = &protocol witness table for NonTerminalOntologyNode;
  v10[0] = a1;
  swift_retain();
  v8 = sub_1C322D470(v10, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (*(_QWORD *)(v8 + 16))
  {
    sub_1C2FFCF44(v8 + 32, (uint64_t)&v11);
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v12 + 1))
  {
    sub_1C30573E4((uint64_t)&v11);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double IntentNodeTraversable.intentNode<A>(forOntologyNode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  double result;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v11[3] = type metadata accessor for TerminalOntologyNode(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v11[4] = &protocol witness table for TerminalOntologyNode<A>;
  v11[0] = a1;
  swift_retain();
  v9 = sub_1C322D470(v11, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (*(_QWORD *)(v9 + 16))
  {
    sub_1C2FFCF44(v9 + 32, (uint64_t)&v12);
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
    sub_1C30573E4((uint64_t)&v12);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t IntentNodeTraversable.values<A>(forNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  IntentNodeTraversable.intentNodes<A>(forOntologyNode:)(a1, a2, a3, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DFAB0);
  sub_1C322DBA4(&qword_1EF7DFAB8, &qword_1EF7DFAB0, MEMORY[0x1E0DEAF38]);
  v4 = sub_1C3378D1C();
  swift_bridgeObjectRelease();
  return v4;
}

char *IntentNodeTraversable.intentNodes<A>(forOntologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  __int128 v19;
  _OWORD v20[5];
  _QWORD v21[5];

  v21[3] = type metadata accessor for TerminalOntologyNode(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v21[4] = &protocol witness table for TerminalOntologyNode<A>;
  v21[0] = a1;
  swift_retain();
  v7 = sub_1C322D470(v21, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + 32;
    swift_bridgeObjectRetain();
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1C2FFCF44(v9, (uint64_t)v21);
      sub_1C2FFCF44((uint64_t)v21, (uint64_t)v20);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
      if ((swift_dynamicCast() & 1) == 0)
        memset((char *)&v20[2] + 8, 0, 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      if (*(_QWORD *)&v20[3])
      {
        v19 = v20[3];
        v12 = *((_QWORD *)&v20[2] + 1);
        v13 = *(_QWORD *)&v20[4];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1C3025130(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v15 = *((_QWORD *)v10 + 2);
        v14 = *((_QWORD *)v10 + 3);
        v16 = v19;
        if (v15 >= v14 >> 1)
        {
          v17 = sub_1C3025130((char *)(v14 > 1), v15 + 1, 1, v10);
          v16 = v19;
          v10 = v17;
        }
        *((_QWORD *)v10 + 2) = v15 + 1;
        v11 = &v10[32 * v15];
        *((_QWORD *)v11 + 4) = v12;
        *(_OWORD *)(v11 + 40) = v16;
        *((_QWORD *)v11 + 7) = v13;
      }
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  return v10;
}

uint64_t sub_1C322D3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[528];
  _BYTE v11[528];
  _BYTE __src[528];

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  sub_1C3056C84(v6 + 1344 * v7 - 1312, (uint64_t)v11);
  sub_1C3056C84((uint64_t)v11, (uint64_t)__src);
  if (sub_1C30118DC((uint64_t)__src) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  sub_1C30118F0(__src, v10);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 16))(v10, a2, a3);
}

uint64_t sub_1C322D470(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v17, a2, a3);
  v6 = v18;
  if (!v18)
    return MEMORY[0x1E0DEE9D8];
  v7 = v17;
  v9 = v19;
  v8 = v20;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v11 = a1[3];
  v12 = a1[4];
  v13 = __swift_project_boxed_opaque_existential_1(a1, v11);
  v14 = (_QWORD *)sub_1C308A1EC((uint64_t)v13, v10, v11, v12);
  swift_release();
  if (!v14[2])
  {
    sub_1C3056C48(v7, v6);
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v17 = v7;
  v18 = v6;
  v19 = v9;
  v20 = v8;
  v15 = sub_1C31CB0F0(v14);
  swift_bridgeObjectRelease();
  sub_1C3056C48(v7, v6);
  return v15;
}

uint64_t sub_1C322D580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1C322D3AC(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a2);
}

uint64_t IntentNodeTraversable.wrappedNonTerminalIntentNode<A>(forOntologyNode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _UNKNOWN **v19;

  *((_QWORD *)&v18 + 1) = type metadata accessor for NonTerminalOntologyNode();
  v19 = &protocol witness table for NonTerminalOntologyNode;
  *(_QWORD *)&v17 = a1;
  swift_retain();
  v12 = sub_1C322D470(&v17, a2, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  if (*(_QWORD *)(v12 + 16))
  {
    sub_1C2FFCF44(v12 + 32, (uint64_t)&v17);
  }
  else
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
  {
    sub_1C30573E4((uint64_t)&v17);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    v13 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a6, v13, 1, a3);
  }
  v17 = v15;
  v18 = v16;
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a5 + 32))(&v17, a1, a3, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a6, v13, 1, a3);
}

char *IntentNodeTraversable.intentNodes(forOntologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  __int128 v18;
  _OWORD v19[5];
  _QWORD v20[5];

  v20[3] = type metadata accessor for NonTerminalOntologyNode();
  v20[4] = &protocol witness table for NonTerminalOntologyNode;
  v20[0] = a1;
  swift_retain();
  v6 = sub_1C322D470(v20, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + 32;
    swift_bridgeObjectRetain();
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1C2FFCF44(v8, (uint64_t)v20);
      sub_1C2FFCF44((uint64_t)v20, (uint64_t)v19);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
      if ((swift_dynamicCast() & 1) == 0)
        memset((char *)&v19[2] + 8, 0, 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      if (*(_QWORD *)&v19[3])
      {
        v18 = v19[3];
        v11 = *((_QWORD *)&v19[2] + 1);
        v12 = *(_QWORD *)&v19[4];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1C30257E4(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v15 = v18;
        if (v14 >= v13 >> 1)
        {
          v16 = sub_1C30257E4((char *)(v13 > 1), v14 + 1, 1, v9);
          v15 = v18;
          v9 = v16;
        }
        *((_QWORD *)v9 + 2) = v14 + 1;
        v10 = &v9[32 * v14];
        *((_QWORD *)v10 + 4) = v11;
        *(_OWORD *)(v10 + 40) = v15;
        *((_QWORD *)v10 + 7) = v12;
      }
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  return v9;
}

uint64_t IntentNodeTraversable.wrappedNonTerminalIntentNodes<A>(forOntologyNode:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[9];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  _QWORD v34[9];
  _QWORD v35[6];

  v35[3] = type metadata accessor for NonTerminalOntologyNode();
  v35[4] = &protocol witness table for NonTerminalOntologyNode;
  v35[0] = a1;
  swift_retain();
  v10 = sub_1C322D470(v35, a2, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v28 = a2;
    v29 = a1;
    v30 = a4;
    v31 = a5;
    v32 = a3;
    v12 = v10 + 32;
    swift_bridgeObjectRetain();
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1C2FFCF44(v12, (uint64_t)v35);
      sub_1C2FFCF44((uint64_t)v35, (uint64_t)v34);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
      if ((swift_dynamicCast() & 1) == 0)
        memset(&v34[5], 0, 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      if (v34[6])
      {
        v33 = *(_OWORD *)&v34[6];
        v15 = v34[5];
        v16 = v34[8];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1C30257E4(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v18 = *((_QWORD *)v13 + 2);
        v17 = *((_QWORD *)v13 + 3);
        v19 = v33;
        if (v18 >= v17 >> 1)
        {
          v20 = sub_1C30257E4((char *)(v17 > 1), v18 + 1, 1, v13);
          v19 = v33;
          v13 = v20;
        }
        *((_QWORD *)v13 + 2) = v18 + 1;
        v14 = &v13[32 * v18];
        *((_QWORD *)v14 + 4) = v15;
        *(_OWORD *)(v14 + 40) = v19;
        *((_QWORD *)v14 + 7) = v16;
      }
      v12 += 40;
      --v11;
    }
    while (v11);
    v21 = swift_bridgeObjectRelease_n();
    a5 = v31;
    a3 = v32;
    a1 = v29;
    a4 = v30;
    a2 = v28;
  }
  else
  {
    v21 = swift_bridgeObjectRelease();
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v35[0] = v13;
  MEMORY[0x1E0C80A78](v21);
  v27[2] = a2;
  v27[3] = a3;
  v27[4] = a4;
  v27[5] = a5;
  v27[6] = a1;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AED28);
  v23 = sub_1C322DBA4(&qword_1EF8AED30, &qword_1EF8AED28, MEMORY[0x1E0DEAF50]);
  v25 = sub_1C322CAA8((void (*)(char *, char *))sub_1C322DB4C, (uint64_t)v27, v22, a3, MEMORY[0x1E0DEDCE8], v23, MEMORY[0x1E0DEDD18], v24);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_1C322DB4C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 40);
  v2 = *(_QWORD *)(v1 + 48);
  v4 = a1[3];
  v6 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v8 = v4;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 32))(&v6, v2);
}

uint64_t sub_1C322DBA4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BD1B4C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of NonTerminalIntentNodeWrapper.intentNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NonTerminalIntentNodeWrapper.ontologyNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static NonTerminalIntentNodeWrapper.from(intentNode:ontologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of IntentNodeTraversable.traversableIntentNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IntentNodeTraversable.traversableOntologyNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

__n128 PlaceIntentNode.init(intentNode:ontologyNode:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

uint64_t PlaceIntentNode.intentNode.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t PlaceIntentNode.ontologyNode.getter()
{
  return swift_retain();
}

uint64_t static PlaceIntentNode.from(intentNode:ontologyNode:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = v4;
  a3[3] = v5;
  a3[4] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PlaceIntentNode.worldPlaceName.getter()
{
  return sub_1C31ADB5C();
}

uint64_t PlaceIntentNode.domainObjectPlaceName.getter()
{
  return sub_1C31ADB5C();
}

uint64_t PlaceIntentNode.neighborhoodPlaceName.getter()
{
  return sub_1C31ADB5C();
}

double PlaceIntentNode.personPlace.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = v1[1];
  v13 = *v1;
  v14 = v3;
  v15 = *((_QWORD *)v1 + 4);
  if (qword_1EF80AA40 != -1)
    swift_once();
  sub_1C30569A0(&v10, qword_1EF8883A0);
  if ((_QWORD)v11)
  {
    v9 = v11;
    v4 = v10;
    v5 = v12;
    type metadata accessor for AddressOntologyNode.PersonPlaceNode();
    v6 = swift_allocObject();
    if (qword_1EF80A790 != -1)
      swift_once();
    v7 = qword_1EF81B4A8;
    *(_QWORD *)(v6 + 16) = 0x6C506E6F73726570;
    *(_QWORD *)(v6 + 24) = 0xEB00000000656361;
    *(_BYTE *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v7;
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceIntentNode()
{
  return &type metadata for PlaceIntentNode;
}

uint64_t NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, uint64_t a13, char a14, char *a15, char *a16, uint64_t a17, uint64_t a18, char a19, char a20,uint64_t a21)
{
  char v25;
  char v26;
  uint64_t result;

  v25 = *a15;
  v26 = *a16;
  result = sub_1C2FFD1BC(a1, a9);
  *(_QWORD *)(a9 + 40) = a2;
  *(_BYTE *)(a9 + 48) = a3 & 1;
  *(_QWORD *)(a9 + 56) = a4;
  *(_QWORD *)(a9 + 64) = a5;
  *(_BYTE *)(a9 + 72) = a6;
  *(_BYTE *)(a9 + 73) = a7;
  *(_BYTE *)(a9 + 74) = a8;
  *(_QWORD *)(a9 + 80) = a10;
  *(_BYTE *)(a9 + 88) = a11 & 1;
  *(_BYTE *)(a9 + 89) = a12;
  *(_QWORD *)(a9 + 96) = a13;
  *(_BYTE *)(a9 + 104) = a14 & 1;
  *(_BYTE *)(a9 + 105) = v25;
  *(_BYTE *)(a9 + 106) = v26;
  *(_QWORD *)(a9 + 112) = a17;
  *(_QWORD *)(a9 + 120) = a18;
  *(_BYTE *)(a9 + 128) = a19;
  *(_BYTE *)(a9 + 129) = a20;
  *(_QWORD *)(a9 + 136) = a21;
  return result;
}

__n128 NLIntent.domainNode.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  BOOL v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  sub_1C2FFCF44(v1, (uint64_t)&v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  if (!swift_dynamicCast())
    goto LABEL_20;
  v4 = v14 == 0x6973734169726953 && v15.n128_u64[0] == 0xED0000746E617473;
  if (!v4 && (sub_1C3379184() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1C322EC38(v5, 0x6E6F69746361, 0xE600000000000000);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v6 + 2) != 1)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v7 = *((_QWORD *)v6 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = sub_1C322EC38(v7, 0x646E616D6D6F63, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v8 + 2) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v9 = *((_QWORD *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = sub_1C322EC38(v9, 0x7463656A627573, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v10 + 2) != 1)
    goto LABEL_15;
  v11 = *((_QWORD *)v10 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = sub_1C322EC38(v11, 0x746E657665, 0xE500000000000000);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v12 + 2) == 1)
  {
    v13 = *((_QWORD *)v12 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v13;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v11 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v11 + 16))
  {
    sub_1C2FFCF44(v11 + 32, (uint64_t)&v17);
  }
  else
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
  {
    sub_1C2FF9138((uint64_t)&v17, &qword_1EF7DF500);
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    result.n128_u64[0] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  result = v15;
  *(_QWORD *)a1 = v14;
  *(__n128 *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 24) = v16;
  return result;
}

uint64_t NLIntent.rootNode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C2FFCF44(v1, a1);
}

uint64_t NLIntent.score.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t NLIntent.originalInput.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NLIntent.allWordsMatched.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t NLIntent.primary.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t NLIntent.usingExplicitInput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t NLIntent.intentRank.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t NLIntent.isNERBasedParse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t NLIntent.intentID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

void NLIntent.nlState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 105);
}

void NLIntent.mitigatorClassification.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 106);
}

uint64_t NLIntent.strippedVoiceTrigger.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NLIntent.isInvalidVoiceTrigger.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t NLIntent.isSuggested.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t NLIntent.metaDomainActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NLIntent.intentSignature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5[2];
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  sub_1C2FFCF44(v0, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819750);
  if (swift_dynamicCast())
  {
    sub_1C2FFD1BC(v5, (uint64_t)v8);
    v7[0] = 14906;
    v7[1] = 0xE200000000000000;
    v1 = v9;
    v2 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    sub_1C3378C5C();
    swift_bridgeObjectRelease();
    v3 = v7[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return v3;
  }
  else
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    sub_1C2FF9138((uint64_t)v5, &qword_1EF8880B8);
    result = sub_1C3378FE0();
    __break(1u);
  }
  return result;
}

unint64_t NLIntent.debugDescription.getter()
{
  uint64_t v0;
  _QWORD v2[5];
  unint64_t v3;
  unint64_t v4;

  v2[0] = 0;
  v2[1] = 0xE000000000000000;
  sub_1C3378F2C();
  swift_bridgeObjectRelease();
  v3 = 0xD000000000000014;
  v4 = 0x80000001C341D6E0;
  sub_1C2FFCF44(v0, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  sub_1C3378C14();
  sub_1C3378C5C();
  swift_bridgeObjectRelease();
  sub_1C3378C5C();
  return v3;
}

uint64_t NLIntent.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1C2FFCF44(v1, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
  if (swift_dynamicCast())
  {
    v8 = v4;
    v9 = v5;
    v10 = v6;
    v11 = v7;
    TerminalIntentNode.hash(into:)(a1);
  }
  else
  {
    sub_1C2FFCF44(v1, (uint64_t)&v8);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_6;
    v8 = v4;
    v9 = v5;
    v10 = v6;
    v11 = v7;
    NonTerminalIntentNode.hash(into:)(a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_6:
  if (*(_BYTE *)(v1 + 48) == 1)
  {
    sub_1C3379220();
    if (*(_QWORD *)(v1 + 64))
    {
LABEL_8:
      sub_1C3379220();
      swift_bridgeObjectRetain();
      sub_1C3378C38();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  else
  {
    sub_1C3379220();
    sub_1C3379238();
    if (*(_QWORD *)(v1 + 64))
      goto LABEL_8;
  }
  sub_1C3379220();
LABEL_11:
  sub_1C3379220();
  sub_1C3379220();
  sub_1C3379220();
  if (*(_BYTE *)(v1 + 88) == 1)
  {
    sub_1C3379220();
  }
  else
  {
    sub_1C3379220();
    sub_1C3379214();
  }
  sub_1C3379220();
  if (*(_BYTE *)(v1 + 104) == 1)
  {
    sub_1C3379220();
  }
  else
  {
    sub_1C3379220();
    sub_1C3379214();
  }
  return sub_1C3379220();
}

uint64_t NLIntent.hashValue.getter()
{
  _BYTE v1[72];

  sub_1C3379208();
  NLIntent.hash(into:)((uint64_t)v1);
  return sub_1C3379244();
}

uint64_t sub_1C322E868()
{
  _BYTE v1[72];

  sub_1C3379208();
  NLIntent.hash(into:)((uint64_t)v1);
  return sub_1C3379244();
}

uint64_t sub_1C322E8A8()
{
  _BYTE v1[72];

  sub_1C3379208();
  NLIntent.hash(into:)((uint64_t)v1);
  return sub_1C3379244();
}

uint64_t static NLState.== infix(_:_:)()
{
  return 1;
}

uint64_t NLState.hashValue.getter()
{
  sub_1C3379208();
  return sub_1C3379244();
}

uint64_t sub_1C322E924()
{
  sub_1C3379208();
  return sub_1C3379244();
}

uint64_t sub_1C322E958()
{
  sub_1C3379208();
  return sub_1C3379244();
}

BOOL static MitigatorClassification.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MitigatorClassification.hash(into:)()
{
  return sub_1C3379214();
}

void *static MitigatorClassification.allCases.getter()
{
  return &unk_1E7D107E0;
}

uint64_t MitigatorClassification.hashValue.getter()
{
  sub_1C3379208();
  sub_1C3379214();
  return sub_1C3379244();
}

void sub_1C322EA14(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7D102F8;
}

BOOL static MetaDomainAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MetaDomainAction.hash(into:)()
{
  return sub_1C3379214();
}

void *static MetaDomainAction.allCases.getter()
{
  return &unk_1E7D10808;
}

uint64_t MetaDomainAction.hashValue.getter()
{
  sub_1C3379208();
  sub_1C3379214();
  return sub_1C3379244();
}

void sub_1C322EAB4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7D102D0;
}

uint64_t _s12SiriOntology8NLIntentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v4);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a2, v4, v5) & 1) == 0)
    return 0;
  v6 = *(_BYTE *)(a2 + 48);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 48))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 40) != *(double *)(a2 + 40))
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a2 + 64);
  if (!v7)
  {
    if (v8)
      return 0;
    goto LABEL_15;
  }
  if (!v8)
    return 0;
  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56) && v7 == v8 || (v9 = sub_1C3379184(), result = 0, (v9 & 1) != 0))
  {
LABEL_15:
    if (*(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
      || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
      || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74))
    {
      return 0;
    }
    v11 = *(_BYTE *)(a2 + 88);
    if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 88))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
        v11 = 1;
      if ((v11 & 1) != 0)
        return 0;
    }
    if (*(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89))
    {
      v12 = *(_BYTE *)(a2 + 104);
      if ((*(_BYTE *)(a1 + 104) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 104))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
          v12 = 1;
        if ((v12 & 1) != 0)
          return 0;
      }
      if ((*(_BYTE *)(a1 + 105) & 1) != 0)
      {
        if ((*(_BYTE *)(a2 + 105) & 1) != 0)
          return 1;
      }
      else if ((*(_BYTE *)(a2 + 105) & 1) == 0)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

char *sub_1C322EC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[40];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (char *)MEMORY[0x1E0DEE9D8];
  v6 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v9 = v6[3];
    v10 = v6[4];
    __swift_project_boxed_opaque_existential_1(v6, v9);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10) == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_1C3379184();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        goto LABEL_4;
    }
    sub_1C2FFCF44((uint64_t)v6, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F8);
    if (swift_dynamicCast() && (_QWORD)v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1C30257E4(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v15 = *((_QWORD *)v7 + 2);
      v14 = *((_QWORD *)v7 + 3);
      v16 = v20;
      if (v15 >= v14 >> 1)
      {
        v17 = sub_1C30257E4((char *)(v14 > 1), v15 + 1, 1, v7);
        v16 = v20;
        v7 = v17;
      }
      *((_QWORD *)v7 + 2) = v15 + 1;
      v8 = &v7[32 * v15];
      *((_QWORD *)v8 + 4) = v19;
      *(_OWORD *)(v8 + 40) = v16;
      *((_QWORD *)v8 + 7) = v21;
    }
LABEL_4:
    v6 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_1C322EE04()
{
  unint64_t result;

  result = qword_1EF8AED38;
  if (!qword_1EF8AED38)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for NLIntent, &type metadata for NLIntent);
    atomic_store(result, (unint64_t *)&qword_1EF8AED38);
  }
  return result;
}

unint64_t sub_1C322EE4C()
{
  unint64_t result;

  result = qword_1EF8AED40;
  if (!qword_1EF8AED40)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for NLState, &type metadata for NLState);
    atomic_store(result, (unint64_t *)&qword_1EF8AED40);
  }
  return result;
}

unint64_t sub_1C322EE94()
{
  unint64_t result;

  result = qword_1EF8AED48;
  if (!qword_1EF8AED48)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MitigatorClassification, &type metadata for MitigatorClassification);
    atomic_store(result, (unint64_t *)&qword_1EF8AED48);
  }
  return result;
}

uint64_t sub_1C322EED8()
{
  return sub_1C3014264(&qword_1EF8AED50, &qword_1EF8AED58);
}

unint64_t sub_1C322EF00()
{
  unint64_t result;

  result = qword_1EF8AED60;
  if (!qword_1EF8AED60)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MetaDomainAction, &type metadata for MetaDomainAction);
    atomic_store(result, (unint64_t *)&qword_1EF8AED60);
  }
  return result;
}

uint64_t sub_1C322EF44()
{
  return sub_1C3014264(&qword_1EF8AED68, &qword_1EF8AED70);
}

uint64_t destroy for NLIntent(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NLIntent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v5 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v6 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for NLIntent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NLIntent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NLIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NLIntent()
{
  return &type metadata for NLIntent;
}

ValueMetadata *type metadata accessor for NLState()
{
  return &type metadata for NLState;
}

uint64_t storeEnumTagSinglePayload for MitigatorClassification(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C322F368 + 4 * byte_1C33B9BE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C322F39C + 4 * asc_1C33B9BE0[v4]))();
}

uint64_t sub_1C322F39C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C322F3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C322F3ACLL);
  return result;
}

uint64_t sub_1C322F3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C322F3C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C322F3C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C322F3CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MitigatorClassification()
{
  return &type metadata for MitigatorClassification;
}

uint64_t storeEnumTagSinglePayload for MetaDomainAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C322F434 + 4 * byte_1C33B9BEF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C322F468 + 4 * byte_1C33B9BEA[v4]))();
}

uint64_t sub_1C322F468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C322F470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C322F478);
  return result;
}

uint64_t sub_1C322F484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C322F48CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C322F490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C322F498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetaDomainAction()
{
  return &type metadata for MetaDomainAction;
}

BOOL Siri_Nl_Core_Protocol_NluResponse.hasRequestID.getter()
{
  return sub_1C318ECC4(&qword_1EF819C90, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(uint64_t a1)
{
  return sub_1C2FE8350(a1, (uint64_t *)&unk_1EF8AEEF8);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.requestID.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1EF819C90);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_1C2FF6C38((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v8 = (char *)a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1C2FF9138((uint64_t)v5, &qword_1EF819C90);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.requestID.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1EF819C90);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_1C2FF6C38((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v8 = (char *)a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1C2FF9138((uint64_t)v5, &qword_1EF819C90);
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(uint64_t a1)
{
  return sub_1C2FE8350(a1, (uint64_t *)&unk_1EF8AEE50);
}

uint64_t sub_1C322F728@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC(a1 + *(int *)(v7 + 24), (uint64_t)v6, &qword_1EF819C90);
  v8 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return sub_1C2FF6C38((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v9 = (char *)a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_1C2FF9138((uint64_t)v6, &qword_1EF819C90);
}

uint64_t sub_1C322F844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2FF6C7C(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  v8 = a2 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  sub_1C2FF9138(v8, &qword_1EF819C90);
  sub_1C2FF6C38((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.requestID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  sub_1C2FF9138(v3, &qword_1EF819C90);
  sub_1C2FF6C38(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  v4 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*Siri_Nl_Core_Protocol_NluRequest.requestID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_1C2FF6CFC(v1 + v10, (uint64_t)v5, &qword_1EF819C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = (char *)v9 + *(int *)(v6 + 28);
    v12 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_1C2FF9138((uint64_t)v5, &qword_1EF819C90);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  return sub_1C322FAD8;
}

void sub_1C322FAD8(uint64_t a1, char a2)
{
  sub_1C303CE20(a1, a2, &qword_1EF819C90, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
}

BOOL Siri_Nl_Core_Protocol_NluRequest.hasRequestID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_1EF819C90);
  v5 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1C2FF9138((uint64_t)v3, &qword_1EF819C90);
  return v6;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluRequest.clearRequestID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  sub_1C2FF9138(v1, &qword_1EF819C90);
  v2 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.currentTurnInput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1EF8AEDA8);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_1C2FF6C38((uint64_t)v5, a1, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v8 = *(int *)(v7 + 20);
  if (qword_1EF80A828 != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = qword_1EF8848D8;
  swift_retain();
  return sub_1C2FF9138((uint64_t)v5, &qword_1EF8AEDA8);
}

uint64_t sub_1C322FD10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC(a1 + *(int *)(v7 + 28), (uint64_t)v6, &qword_1EF8AEDA8);
  v8 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return sub_1C2FF6C38((uint64_t)v6, a2, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v9 = *(int *)(v8 + 20);
  if (qword_1EF80A828 != -1)
    swift_once();
  *(_QWORD *)(a2 + v9) = qword_1EF8848D8;
  swift_retain();
  return sub_1C2FF9138((uint64_t)v6, &qword_1EF8AEDA8);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.currentTurnInput.setter(uint64_t a1)
{
  return sub_1C318EABC(a1, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EF8AEDA8, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
}

void (*Siri_Nl_Core_Protocol_NluRequest.currentTurnInput.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1C2FF6CFC(v1 + v10, (uint64_t)v5, &qword_1EF8AEDA8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = *(int *)(v6 + 20);
    if (qword_1EF80A828 != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = qword_1EF8848D8;
    swift_retain();
    sub_1C2FF9138((uint64_t)v5, &qword_1EF8AEDA8);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  }
  return sub_1C322FFA0;
}

void sub_1C322FFA0(uint64_t a1, char a2)
{
  sub_1C303CE20(a1, a2, &qword_1EF8AEDA8, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
}

BOOL Siri_Nl_Core_Protocol_NluRequest.hasCurrentTurnInput.getter()
{
  return sub_1C318ECC4(&qword_1EF8AEDA8, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluRequest.clearCurrentTurnInput()()
{
  sub_1C318ED9C(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EF8AEDA8, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.previousTurnInputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.previousTurnInputs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_NluRequest.previousTurnInputs.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 20);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 20);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_NluRequest.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *a1 = MEMORY[0x1E0DEE9D8];
  v2 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + *(int *)(v2 + 28);
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_1C3230180@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC(a1 + *(int *)(v7 + 28), (uint64_t)v6, &qword_1EF819C90);
  v8 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return sub_1C2FF6C38((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v9 = (char *)a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_1C2FF9138((uint64_t)v6, &qword_1EF819C90);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.requestID.setter(uint64_t a1)
{
  return sub_1C318EABC(a1, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EF819C90, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
}

void (*Siri_Nl_Core_Protocol_NluResponse.requestID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1C2FF6CFC(v1 + v10, (uint64_t)v5, &qword_1EF819C90);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = (char *)v9 + *(int *)(v6 + 28);
    v12 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_1C2FF9138((uint64_t)v5, &qword_1EF819C90);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  return sub_1C322FAD8;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluResponse.clearRequestID()()
{
  sub_1C318ED9C(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EF819C90, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
}

uint64_t (*Siri_Nl_Core_Protocol_NluResponse.parses.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.responseStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1EF8AEDB0);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_1C2FF6C38((uint64_t)v5, a1, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  return sub_1C2FF9138((uint64_t)v5, &qword_1EF8AEDB0);
}

uint64_t sub_1C3230530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC(a1 + *(int *)(v7 + 32), (uint64_t)v6, &qword_1EF8AEDB0);
  v8 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return sub_1C2FF6C38((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  return sub_1C2FF9138((uint64_t)v6, &qword_1EF8AEDB0);
}

uint64_t sub_1C3230628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2FF6C7C(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  v8 = a2 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  sub_1C2FF9138(v8, &qword_1EF8AEDB0);
  sub_1C2FF6C38((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.responseStatus.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  sub_1C2FF9138(v3, &qword_1EF8AEDB0);
  sub_1C2FF6C38(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  v4 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*Siri_Nl_Core_Protocol_NluResponse.responseStatus.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_1C2FF6CFC(v1 + v10, (uint64_t)v5, &qword_1EF8AEDB0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 1;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = 0xE000000000000000;
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    sub_1C2FF9138((uint64_t)v5, &qword_1EF8AEDB0);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  }
  return sub_1C3230898;
}

void sub_1C3230898(uint64_t a1, char a2)
{
  sub_1C303CE20(a1, a2, &qword_1EF8AEDB0, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
}

BOOL Siri_Nl_Core_Protocol_NluResponse.hasResponseStatus.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC(v0 + *(int *)(v4 + 32), (uint64_t)v3, &qword_1EF8AEDB0);
  v5 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1C2FF9138((uint64_t)v3, &qword_1EF8AEDB0);
  return v6;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluResponse.clearResponseStatus()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  sub_1C2FF9138(v1, &qword_1EF8AEDB0);
  v2 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.repetitionResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.repetitionResults.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_NluResponse.repetitionResults.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 24);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 24);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_NluResponse.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v2;
  v3 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v4 = (char *)a1 + *(int *)(v3 + 28);
  v5 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a1 + *(int *)(v3 + 32);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t static Siri_Nl_Core_Protocol_NluRequest.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_1C3230B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AED78);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AED78);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338BE70;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "request_id";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38D0];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "current_turn_input";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "previous_turn_inputs";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Siri_Nl_Core_Protocol_NluRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AA60, (uint64_t)qword_1EF8AED78, a1);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_1C3378980();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v12 = v11;
        sub_1C319222C(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, &qword_1EF885018, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_TurnInput);
        goto LABEL_5;
      }
      if (result == 1)
      {
        v12 = v11;
        sub_1C3230E54();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1C3378980();
    }
    type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
    sub_1C2FF6DE0(&qword_1EF885018, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_TurnInput);
    v12 = v11;
    sub_1C3378A64();
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1C3230E54()
{
  type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  sub_1C2FF6DE0(&qword_1EF888248, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_RequestID);
  return sub_1C3378A70();
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v3;
  v26 = a1;
  v27 = a3;
  v25 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v23 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v22 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC(v5 + *(int *)(v24 + 24), (uint64_t)v12, &qword_1EF819C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1C2FF9138((uint64_t)v12, &qword_1EF819C90);
    v17 = v5;
    v18 = v28;
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    sub_1C2FF6DE0(&qword_1EF888248, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_RequestID);
    sub_1C3378B6C();
    result = sub_1C2FF6CC0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    v17 = v5;
    v18 = v28;
    if (v4)
      return result;
  }
  sub_1C2FF6CFC(v17 + *(int *)(v24 + 28), (uint64_t)v8, &qword_1EF8AEDA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v8, 1, v18) == 1)
  {
    sub_1C2FF9138((uint64_t)v8, &qword_1EF8AEDA8);
  }
  else
  {
    v20 = (uint64_t)v8;
    v21 = v22;
    sub_1C2FF6C38(v20, v22, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    sub_1C2FF6DE0(&qword_1EF885018, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_TurnInput);
    sub_1C3378B6C();
    result = sub_1C2FF6CC0(v21, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    if (v4)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v17 + 16))
    return sub_1C33788FC();
  sub_1C2FF6DE0(&qword_1EF885018, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_TurnInput);
  result = sub_1C3378B60();
  if (!v4)
    return sub_1C33788FC();
  return result;
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EF8AEDB8, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1C323125C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = MEMORY[0x1E0DEE9D8];
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t sub_1C32312F0()
{
  return 0xD000000000000020;
}

uint64_t sub_1C323130C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nl_Core_Protocol_NluRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C3231320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nl_Core_Protocol_NluRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C3231334()
{
  sub_1C2FF6DE0(&qword_1EF8AEF50, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
  return sub_1C3378950();
}

uint64_t sub_1C3231384@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AA60, (uint64_t)qword_1EF8AED78, a1);
}

uint64_t sub_1C32313A0()
{
  sub_1C2FF6DE0(&qword_1EF8AEDD0, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
  return sub_1C3378AA0();
}

uint64_t sub_1C32313E0()
{
  sub_1C2FF6DE0(&qword_1EF8AEDD0, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
  return sub_1C3378AAC();
}

unint64_t static Siri_Nl_Core_Protocol_NluResponse.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t sub_1C3231450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AED90);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AED90);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338BE60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "request_id";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38D0];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "parses";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "response_status";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "repetition_results";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Siri_Nl_Core_Protocol_NluResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AA68, (uint64_t)qword_1EF8AED90, a1);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_1C3378980();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          sub_1C319222C(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, &qword_1EF888248, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_RequestID);
          goto LABEL_5;
        case 2:
          type metadata accessor for Siri_Nl_Core_Protocol_UserParse(0);
          sub_1C2FF6DE0(&qword_1EF885088, type metadata accessor for Siri_Nl_Core_Protocol_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UserParse);
          goto LABEL_12;
        case 3:
          v12 = v11;
          sub_1C32317B8();
          goto LABEL_5;
        case 4:
          type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult(0);
          sub_1C2FF6DE0(&qword_1EF884E00, type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_RepetitionResult);
LABEL_12:
          v12 = v11;
          sub_1C3378A64();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t sub_1C32317B8()
{
  type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  sub_1C2FF6DE0(&qword_1EF81AFA8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_ResponseStatus);
  return sub_1C3378A70();
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v24 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
  MEMORY[0x1E0C80A78](v5);
  v21 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v20 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v19 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC((uint64_t)v3 + *(int *)(v23 + 28), (uint64_t)v10, &qword_1EF819C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1C2FF9138((uint64_t)v10, &qword_1EF819C90);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    sub_1C2FF6DE0(&qword_1EF888248, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_RequestID);
    sub_1C3378B6C();
    result = sub_1C2FF6CC0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    if (v4)
      return result;
  }
  if (!*(_QWORD *)(*v3 + 16)
    || (type metadata accessor for Siri_Nl_Core_Protocol_UserParse(0),
        sub_1C2FF6DE0(&qword_1EF885088, type metadata accessor for Siri_Nl_Core_Protocol_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_UserParse), result = sub_1C3378B60(), !v4))
  {
    v16 = v21;
    sub_1C2FF6CFC((uint64_t)v3 + *(int *)(v23 + 32), v21, &qword_1EF8AEDB0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v22) == 1)
    {
      sub_1C2FF9138(v16, &qword_1EF8AEDB0);
    }
    else
    {
      v17 = v16;
      v18 = v19;
      sub_1C2FF6C38(v17, v19, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      sub_1C2FF6DE0(&qword_1EF81AFA8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_ResponseStatus);
      sub_1C3378B6C();
      result = sub_1C2FF6CC0(v18, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      if (v4)
        return result;
    }
    if (!*(_QWORD *)(v3[1] + 16))
      return sub_1C33788FC();
    type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult(0);
    sub_1C2FF6DE0(&qword_1EF884E00, type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_RepetitionResult);
    result = sub_1C3378B60();
    if (!v4)
      return sub_1C33788FC();
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EF8AEDC0, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1C3231C1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = MEMORY[0x1E0DEE9D8];
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = v4;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v5 = (char *)a2 + *(int *)(a1 + 28);
  v6 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (char *)a2 + *(int *)(a1 + 32);
  v8 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

unint64_t sub_1C3231CB0()
{
  return 0xD000000000000021;
}

uint64_t sub_1C3231CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nl_Core_Protocol_NluResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C3231CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nl_Core_Protocol_NluResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C3231CF4()
{
  sub_1C2FF6DE0(&qword_1EF8AEF48, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
  return sub_1C3378950();
}

uint64_t sub_1C3231D44@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AA68, (uint64_t)qword_1EF8AED90, a1);
}

uint64_t sub_1C3231D60()
{
  sub_1C2FF6DE0(&qword_1EF8AEDE8, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
  return sub_1C3378AA0();
}

uint64_t sub_1C3231DA0()
{
  sub_1C2FF6DE0(&qword_1EF8AEDE8, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
  return sub_1C3378AAC();
}

uint64_t _s12SiriOntology0A29_Nl_Core_Protocol_NluResponseV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;

  v73 = a1;
  v74 = a2;
  v2 = sub_1C3378914();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v60 = (char *)&v59 - v5;
  v70 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v64 = (uint64_t *)((char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEF58);
  MEMORY[0x1E0C80A78](v66);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v65 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x1E0C80A78](v9);
  v68 = (uint64_t)&v59 - v12;
  MEMORY[0x1E0C80A78](v11);
  v69 = (uint64_t)&v59 - v13;
  v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEF60);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (uint64_t *)((char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v59 - v26;
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v59 - v28;
  v30 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C2FF6CFC((uint64_t)v73 + *(int *)(v30 + 28), (uint64_t)v29, &qword_1EF819C90);
  v72 = v30;
  sub_1C2FF6CFC((uint64_t)v74 + *(int *)(v30 + 28), (uint64_t)v27, &qword_1EF819C90);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_1C2FF6CFC((uint64_t)v29, (uint64_t)v20, &qword_1EF819C90);
  sub_1C2FF6CFC((uint64_t)v27, v31, &qword_1EF819C90);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_1C2FF9138((uint64_t)v27, &qword_1EF819C90);
    sub_1C2FF9138((uint64_t)v29, &qword_1EF819C90);
    if (v32(v31, 1, v14) == 1)
    {
      sub_1C2FF9138((uint64_t)v20, &qword_1EF819C90);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &qword_1EF8AEF60;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_1C2FF9138(v34, v33);
LABEL_19:
    v56 = 0;
    return v56 & 1;
  }
  sub_1C2FF6CFC((uint64_t)v20, (uint64_t)v24, &qword_1EF819C90);
  if (v32(v31, 1, v14) == 1)
  {
    sub_1C2FF9138((uint64_t)v27, &qword_1EF819C90);
    sub_1C2FF9138((uint64_t)v29, &qword_1EF819C90);
    sub_1C2FF6CC0((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    goto LABEL_6;
  }
  sub_1C2FF6C38(v31, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  v35 = static Siri_Nl_Core_Protocol_RequestID.== infix(_:_:)(v24, v17);
  sub_1C2FF6CC0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C2FF9138((uint64_t)v27, &qword_1EF819C90);
  sub_1C2FF9138((uint64_t)v29, &qword_1EF819C90);
  sub_1C2FF6CC0((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C2FF9138((uint64_t)v20, &qword_1EF819C90);
  if ((v35 & 1) == 0)
    goto LABEL_19;
LABEL_9:
  v37 = v73;
  v36 = v74;
  if ((sub_1C3003148(*v73, *v74) & 1) == 0)
    goto LABEL_19;
  v38 = v72;
  v39 = v69;
  sub_1C2FF6CFC((uint64_t)v37 + *(int *)(v72 + 32), v69, &qword_1EF8AEDB0);
  v40 = v68;
  sub_1C2FF6CFC((uint64_t)v36 + *(int *)(v38 + 32), v68, &qword_1EF8AEDB0);
  v41 = v71;
  v42 = v71 + *(int *)(v66 + 48);
  sub_1C2FF6CFC(v39, v71, &qword_1EF8AEDB0);
  sub_1C2FF6CFC(v40, v42, &qword_1EF8AEDB0);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v44 = v70;
  if (v43(v41, 1, v70) == 1)
  {
    sub_1C2FF9138(v40, &qword_1EF8AEDB0);
    sub_1C2FF9138(v39, &qword_1EF8AEDB0);
    if (v43(v42, 1, v44) == 1)
    {
      sub_1C2FF9138(v41, &qword_1EF8AEDB0);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v45 = v65;
  sub_1C2FF6CFC(v41, (uint64_t)v65, &qword_1EF8AEDB0);
  if (v43(v42, 1, v44) == 1)
  {
    sub_1C2FF9138(v40, &qword_1EF8AEDB0);
    sub_1C2FF9138(v39, &qword_1EF8AEDB0);
    sub_1C2FF6CC0((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
LABEL_15:
    v33 = &qword_1EF8AEF58;
    v34 = v41;
    goto LABEL_7;
  }
  v46 = v64;
  sub_1C2FF6C38(v42, (uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  v47 = _s12SiriOntology0A32_Nl_Core_Protocol_ResponseStatusV2eeoiySbAC_ACtFZ_0(v45, v46);
  sub_1C2FF6CC0((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  sub_1C2FF9138(v40, &qword_1EF8AEDB0);
  sub_1C2FF9138(v39, &qword_1EF8AEDB0);
  sub_1C2FF6CC0((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  sub_1C2FF9138(v41, &qword_1EF8AEDB0);
  if ((v47 & 1) == 0)
    goto LABEL_19;
LABEL_17:
  if ((sub_1C300315C(v37[1], v36[1]) & 1) == 0)
    goto LABEL_19;
  v48 = v72;
  v49 = (char *)v37 + *(int *)(v72 + 24);
  v51 = v62;
  v50 = v63;
  v52 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  v53 = v60;
  v52(v60, v49, v63);
  v54 = (char *)v36 + *(int *)(v48 + 24);
  v55 = v61;
  v52(v61, v54, v50);
  sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
  v56 = sub_1C3378BD8();
  v57 = *(void (**)(char *, uint64_t))(v51 + 8);
  v57(v55, v50);
  v57(v53, v50);
  return v56 & 1;
}

uint64_t _s12SiriOntology0A28_Nl_Core_Protocol_NluRequestV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;

  v73 = a1;
  v74 = a2;
  v2 = sub_1C3378914();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v60 = (char *)&v59 - v5;
  v70 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v64 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEF68);
  MEMORY[0x1E0C80A78](v66);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v65 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v68 = (uint64_t)&v59 - v12;
  MEMORY[0x1E0C80A78](v11);
  v69 = (uint64_t)&v59 - v13;
  v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEF60);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (uint64_t *)((char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v59 - v26;
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v59 - v28;
  v30 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C2FF6CFC((uint64_t)v73 + *(int *)(v30 + 24), (uint64_t)v29, &qword_1EF819C90);
  v72 = v30;
  sub_1C2FF6CFC((uint64_t)v74 + *(int *)(v30 + 24), (uint64_t)v27, &qword_1EF819C90);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_1C2FF6CFC((uint64_t)v29, (uint64_t)v20, &qword_1EF819C90);
  sub_1C2FF6CFC((uint64_t)v27, v31, &qword_1EF819C90);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_1C2FF9138((uint64_t)v27, &qword_1EF819C90);
    sub_1C2FF9138((uint64_t)v29, &qword_1EF819C90);
    if (v32(v31, 1, v14) == 1)
    {
      sub_1C2FF9138((uint64_t)v20, &qword_1EF819C90);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &qword_1EF8AEF60;
    v34 = (uint64_t)v20;
LABEL_14:
    sub_1C2FF9138(v34, v33);
    goto LABEL_15;
  }
  sub_1C2FF6CFC((uint64_t)v20, (uint64_t)v24, &qword_1EF819C90);
  if (v32(v31, 1, v14) == 1)
  {
    sub_1C2FF9138((uint64_t)v27, &qword_1EF819C90);
    sub_1C2FF9138((uint64_t)v29, &qword_1EF819C90);
    sub_1C2FF6CC0((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    goto LABEL_6;
  }
  sub_1C2FF6C38(v31, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  v35 = static Siri_Nl_Core_Protocol_RequestID.== infix(_:_:)(v24, v17);
  sub_1C2FF6CC0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C2FF9138((uint64_t)v27, &qword_1EF819C90);
  sub_1C2FF9138((uint64_t)v29, &qword_1EF819C90);
  sub_1C2FF6CC0((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C2FF9138((uint64_t)v20, &qword_1EF819C90);
  if ((v35 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v36 = v72;
  v37 = v73;
  v38 = v69;
  sub_1C2FF6CFC((uint64_t)v73 + *(int *)(v72 + 28), v69, &qword_1EF8AEDA8);
  v39 = v74;
  v40 = v68;
  sub_1C2FF6CFC((uint64_t)v74 + *(int *)(v36 + 28), v68, &qword_1EF8AEDA8);
  v41 = v71;
  v42 = v71 + *(int *)(v66 + 48);
  sub_1C2FF6CFC(v38, v71, &qword_1EF8AEDA8);
  sub_1C2FF6CFC(v40, v42, &qword_1EF8AEDA8);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v44 = v70;
  if (v43(v41, 1, v70) != 1)
  {
    v45 = v65;
    sub_1C2FF6CFC(v41, v65, &qword_1EF8AEDA8);
    if (v43(v42, 1, v44) != 1)
    {
      v48 = v64;
      sub_1C2FF6C38(v42, v64, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      v49 = static Siri_Nl_Core_Protocol_TurnInput.== infix(_:_:)(v45, v48);
      sub_1C2FF6CC0(v48, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      sub_1C2FF9138(v40, &qword_1EF8AEDA8);
      sub_1C2FF9138(v38, &qword_1EF8AEDA8);
      sub_1C2FF6CC0(v45, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      sub_1C2FF9138(v41, &qword_1EF8AEDA8);
      if ((v49 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    sub_1C2FF9138(v40, &qword_1EF8AEDA8);
    sub_1C2FF9138(v38, &qword_1EF8AEDA8);
    sub_1C2FF6CC0(v45, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    goto LABEL_13;
  }
  sub_1C2FF9138(v40, &qword_1EF8AEDA8);
  sub_1C2FF9138(v38, &qword_1EF8AEDA8);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_13:
    v33 = &qword_1EF8AEF68;
    v34 = v41;
    goto LABEL_14;
  }
  sub_1C2FF9138(v41, &qword_1EF8AEDA8);
LABEL_18:
  if ((sub_1C3003394(*v37, *v39) & 1) != 0)
  {
    v50 = v72;
    v51 = (char *)v37 + *(int *)(v72 + 20);
    v53 = v62;
    v52 = v63;
    v54 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    v55 = v60;
    v54(v60, v51, v63);
    v56 = (char *)v39 + *(int *)(v50 + 20);
    v57 = v61;
    v54(v61, v56, v52);
    sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
    v46 = sub_1C3378BD8();
    v58 = *(void (**)(char *, uint64_t))(v53 + 8);
    v58(v57, v52);
    v58(v55, v52);
    return v46 & 1;
  }
LABEL_15:
  v46 = 0;
  return v46 & 1;
}

uint64_t sub_1C3232B38()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDC8, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1C3232B64()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDD0, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1C3232B90()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDB8, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1C3232BBC()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDD8, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1C3232BE8()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDE0, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1C3232C14()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDE8, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1C3232C40()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDC0, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1C3232C6C()
{
  return sub_1C2FF6DE0(&qword_1EF8AEDF0, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t)&protocol conformance descriptor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1C3232CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C318E9D0(a1, a2, a3, a4, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EF8AEDA8);
}

uint64_t sub_1C3232CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C318E9D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EF819C90);
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_NluRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C3378914();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v39 = v17;
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      v20 = v12;
      v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      v22 = *(int *)(v16 + 24);
      v40 = (char *)v14 + v22;
      v23 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24 = v40;
      v41 = v20;
      v20(v24, v23, v11);
      v25 = *(int *)(v16 + 28);
      v26 = (_OWORD *)((char *)v14 + v25);
      v27 = (_OWORD *)((char *)v15 + v25);
      v28 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        *v26 = *v27;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
        *((_BYTE *)v26 + 24) = *((_BYTE *)v27 + 24);
        v41((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v11);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v14, 0, 1, v16);
      v12 = v41;
    }
    v31 = a3[7];
    v32 = (char *)v7 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v12(v32, v33, v11);
      *(_QWORD *)&v32[*(int *)(v34 + 20)] = *(_QWORD *)&v33[*(int *)(v34 + 20)];
      v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
      swift_retain();
      v37(v32, 0, 1, v34);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nl_Core_Protocol_NluRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_1C3378914();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 24), v5);
    v9 = v7 + *(int *)(v8 + 28);
    v10 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      v6(v9 + *(int *)(v10 + 28), v5);
  }
  v11 = a1 + a2[7];
  v12 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v6(v11, v5);
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for Siri_Nl_Core_Protocol_NluRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v3 = a3;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(v3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v37 = v3;
    v38 = v15;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v10;
    v19 = v13[3];
    v12[2] = v13[2];
    v12[3] = v19;
    v20 = *(int *)(v14 + 24);
    v21 = (char *)v12 + v20;
    v22 = (char *)v13 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18(v21, v22, v9);
    v23 = *(int *)(v14 + 28);
    v24 = (_OWORD *)((char *)v12 + v23);
    v25 = (_OWORD *)((char *)v13 + v23);
    v26 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
      *((_BYTE *)v24 + 24) = *((_BYTE *)v25 + 24);
      v18((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v12, 0, 1, v14);
    v10 = v18;
    v3 = v37;
  }
  v29 = *(int *)(v3 + 28);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v10(v30, v31, v9);
    *(_QWORD *)&v30[*(int *)(v32 + 20)] = *(_QWORD *)&v31[*(int *)(v32 + 20)];
    v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56);
    swift_retain();
    v35(v30, 0, 1, v32);
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nl_Core_Protocol_NluRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v54;
  _QWORD *v55;
  int *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;

  v4 = a2;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)v4 + v6;
  v9 = sub_1C3378914();
  v59 = *(_QWORD *)(v9 - 8);
  v58 = *(void (**)(char *, char *, uint64_t))(v59 + 24);
  v58(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)v4 + v10;
  v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v58(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      v33 = *(int *)(v13 + 28);
      v34 = (uint64_t)&v11[v33];
      v35 = &v12[v33];
      v36 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
          v41 = *((_QWORD *)v35 + 2);
          *(_BYTE *)(v34 + 24) = v35[24];
          *(_QWORD *)(v34 + 16) = v41;
          (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v34 + *(int *)(v36 + 28), &v35[*(int *)(v36 + 28)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          *(_QWORD *)v34 = *(_QWORD *)v35;
          *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
          v54 = *((_QWORD *)v35 + 2);
          *(_BYTE *)(v34 + 24) = v35[24];
          *(_QWORD *)(v34 + 16) = v54;
          v58((char *)(v34 + *(int *)(v36 + 28)), &v35[*(int *)(v36 + 28)], v9);
          goto LABEL_14;
        }
        sub_1C2FF6CC0(v34, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80) - 8) + 64);
      v31 = (void *)v34;
      v32 = v35;
LABEL_8:
      memcpy(v31, v32, v30);
      goto LABEL_14;
    }
    sub_1C2FF6CC0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90) - 8) + 64);
    v31 = v11;
    v32 = v12;
    goto LABEL_8;
  }
  if (v17)
    goto LABEL_7;
  v55 = v4;
  v56 = a3;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  v18 = *(int *)(v13 + 24);
  v19 = &v11[v18];
  v20 = &v12[v18];
  v21 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v20;
  v23 = v9;
  v21(v19, v22, v9);
  v24 = *(int *)(v13 + 28);
  v25 = &v11[v24];
  v26 = &v12[v24];
  v27 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  v28 = *(_QWORD *)(v27 - 8);
  v57 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
    v42 = *((_QWORD *)v26 + 2);
    v25[24] = v26[24];
    *((_QWORD *)v25 + 2) = v42;
    v21(&v25[*(int *)(v27 + 28)], &v26[*(int *)(v27 + 28)], v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v4 = v55;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  a3 = v56;
  v9 = v57;
LABEL_14:
  v43 = a3[7];
  v44 = (char *)a1 + v43;
  v45 = (char *)v4 + v43;
  v46 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (!v50)
    {
      v58(v44, v45, v9);
      *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_1C2FF6CC0((uint64_t)v44, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    goto LABEL_19;
  }
  if (v50)
  {
LABEL_19:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v44, v45, v9);
  *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
  v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56);
  swift_retain();
  v51(v44, 0, 1, v46);
  return a1;
}

_QWORD *initializeWithTake for Siri_Nl_Core_Protocol_NluRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    v18 = *(int *)(v14 + 28);
    v31 = v10;
    v19 = (_OWORD *)((char *)v12 + v18);
    v20 = (_OWORD *)((char *)v13 + v18);
    v21 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    v30 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v20, 1, v21))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v19 = *v20;
      *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
      *((_BYTE *)v19 + 24) = *((_BYTE *)v20 + 24);
      v31((char *)v19 + *(int *)(v21 + 28), (char *)v20 + *(int *)(v21 + 28), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    v10 = v31;
  }
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v10(v24, v25, v9);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

_QWORD *assignWithTake for Siri_Nl_Core_Protocol_NluRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v52 = *(_QWORD *)(v9 - 8);
  v51 = *(void (**)(char *, char *, uint64_t))(v52 + 40);
  v51(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v26 = *((_QWORD *)v12 + 1);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = v26;
      swift_bridgeObjectRelease();
      v27 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = v27;
      swift_bridgeObjectRelease();
      v28 = v9;
      v51(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      v29 = *(int *)(v13 + 28);
      v30 = &v11[v29];
      v31 = &v12[v29];
      v32 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34(v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
          v30[24] = v31[24];
          (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v28);
          v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56);
          v9 = v28;
          v37(v30, 0, 1, v32);
          goto LABEL_16;
        }
      }
      else
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
          v30[24] = v31[24];
          v9 = v28;
          v51(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v28);
          goto LABEL_16;
        }
        sub_1C2FF6CC0((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
      }
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      v9 = v28;
      goto LABEL_16;
    }
    sub_1C2FF6CC0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
    goto LABEL_7;
  v18 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v18;
  v50 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  v50(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
  v19 = *(int *)(v13 + 28);
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = v9;
  v23 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  v49 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v23))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v20[24] = v21[24];
    v50(&v20[*(int *)(v23 + 28)], &v21[*(int *)(v23 + 28)], v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v20, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  v9 = v22;
LABEL_16:
  v39 = a3[7];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      v51(v40, v41, v9);
      *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
      swift_release();
      return a1;
    }
    sub_1C2FF6CC0((uint64_t)v40, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    goto LABEL_21;
  }
  if (v46)
  {
LABEL_21:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v40, v41, v9);
  *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3233EF0(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C3378914();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1C3233FC8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_1C3378914();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDA8);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_1C3234090()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1C3378914();
  if (v0 <= 0x3F)
  {
    sub_1C2FF90EC(319, &qword_1EF8AEE60, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    if (v1 <= 0x3F)
    {
      sub_1C2FF90EC(319, qword_1EF8AEE68, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_NluResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C3378914();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v43 = v17;
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v21 = *(int *)(v16 + 24);
      v22 = (char *)v14 + v21;
      v44 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v22;
      v24 = v44;
      v45 = v11;
      v25 = v12;
      v12(v23, v24, v11);
      v26 = *(int *)(v16 + 28);
      v27 = (_OWORD *)((char *)v14 + v26);
      v28 = (_OWORD *)((char *)v15 + v26);
      v29 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        *v27 = *v28;
        *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
        *((_BYTE *)v27 + 24) = *((_BYTE *)v28 + 24);
        v25((char *)v27 + *(int *)(v29 + 28), (char *)v28 + *(int *)(v29 + 28), v45);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v14, 0, 1, v16);
      v12 = v25;
      v11 = v45;
    }
    v32 = a3[8];
    v33 = (uint64_t *)((char *)v7 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      *v33 = *v34;
      *((_BYTE *)v33 + 8) = *((_BYTE *)v34 + 8);
      v38 = v34[3];
      v33[2] = v34[2];
      v33[3] = v38;
      v39 = *(int *)(v35 + 24);
      v40 = (char *)v33 + v39;
      v41 = (char *)v34 + v39;
      swift_bridgeObjectRetain();
      v12(v40, v41, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nl_Core_Protocol_NluResponse(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_1C3378914();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 24), v5);
    v8 = v6 + *(int *)(v7 + 28);
    v9 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
      v13(v8 + *(int *)(v9 + 28), v5);
  }
  v10 = a1 + a2[8];
  v11 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10 + *(int *)(v11 + 24), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for Siri_Nl_Core_Protocol_NluResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1C3378914();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(v3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v44 = v3;
    v45 = v16;
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v20 = *(int *)(v15 + 24);
    v21 = (char *)v13 + v20;
    v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v21;
    v24 = v22;
    v25 = v10;
    v26 = v11;
    v11(v23, v24, v10);
    v27 = *(int *)(v15 + 28);
    v28 = (_OWORD *)((char *)v13 + v27);
    v29 = (_OWORD *)((char *)v14 + v27);
    v30 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
      *((_BYTE *)v28 + 24) = *((_BYTE *)v29 + 24);
      v26((char *)v28 + *(int *)(v30 + 28), (char *)v29 + *(int *)(v30 + 28), v25);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v13, 0, 1, v15);
    v11 = v26;
    v10 = v25;
    v3 = v44;
  }
  v33 = *(int *)(v3 + 32);
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    *v34 = *v35;
    *((_BYTE *)v34 + 8) = *((_BYTE *)v35 + 8);
    v39 = v35[3];
    v34[2] = v35[2];
    v34[3] = v39;
    v40 = *(int *)(v36 + 24);
    v41 = (char *)v34 + v40;
    v42 = (char *)v35 + v40;
    swift_bridgeObjectRetain();
    v11(v41, v42, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nl_Core_Protocol_NluResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v62 = *(_QWORD *)(v9 - 8);
  v61 = *(void (**)(char *, char *, uint64_t))(v62 + 24);
  v61(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v61(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      v31 = *(int *)(v13 + 28);
      v32 = (uint64_t)&v11[v31];
      v33 = &v12[v31];
      v34 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, v34);
      v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
          v39 = *((_QWORD *)v33 + 2);
          *(_BYTE *)(v32 + 24) = v33[24];
          *(_QWORD *)(v32 + 16) = v39;
          (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v32 + *(int *)(v34 + 28), &v33[*(int *)(v34 + 28)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
          v57 = *((_QWORD *)v33 + 2);
          *(_BYTE *)(v32 + 24) = v33[24];
          *(_QWORD *)(v32 + 16) = v57;
          v61((char *)(v32 + *(int *)(v34 + 28)), &v33[*(int *)(v34 + 28)], v9);
          goto LABEL_14;
        }
        sub_1C2FF6CC0(v32, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80) - 8) + 64);
      v29 = (void *)v32;
      v30 = v33;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    sub_1C2FF6CC0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90) - 8) + 64);
    v29 = v11;
    v30 = v12;
    goto LABEL_8;
  }
  if (v17)
    goto LABEL_7;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  v18 = *(int *)(v13 + 24);
  v19 = &v11[v18];
  v58 = a3;
  v59 = &v12[v18];
  v20 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v59;
  v60 = v9;
  v20(v19, v21, v9);
  v22 = *(int *)(v13 + 28);
  v23 = &v11[v22];
  v24 = &v12[v22];
  v25 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
    v40 = *((_QWORD *)v24 + 2);
    v23[24] = v24[24];
    *((_QWORD *)v23 + 2) = v40;
    v20(&v23[*(int *)(v25 + 28)], &v24[*(int *)(v25 + 28)], v60);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  a3 = v58;
  v9 = v60;
LABEL_14:
  v41 = a3[8];
  v42 = (uint64_t)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46((uint64_t)v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      v56 = *(_QWORD *)v43;
      *(_BYTE *)(v42 + 8) = v43[8];
      *(_QWORD *)v42 = v56;
      *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
      *(_QWORD *)(v42 + 24) = *((_QWORD *)v43 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v61((char *)(v42 + *(int *)(v44 + 24)), &v43[*(int *)(v44 + 24)], v9);
      return a1;
    }
    sub_1C2FF6CC0(v42, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
    goto LABEL_19;
  }
  if (v48)
  {
LABEL_19:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
    memcpy((void *)v42, v43, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    return a1;
  }
  v49 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = v43[8];
  *(_QWORD *)v42 = v49;
  *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
  *(_QWORD *)(v42 + 24) = *((_QWORD *)v43 + 3);
  v50 = *(int *)(v44 + 24);
  v51 = v42 + v50;
  v52 = &v43[v50];
  v53 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 16);
  swift_bridgeObjectRetain();
  v53(v51, v52, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  return a1;
}

_OWORD *initializeWithTake for Siri_Nl_Core_Protocol_NluResponse(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    v18 = *(int *)(v14 + 28);
    v31 = v10;
    v19 = (_OWORD *)((char *)v12 + v18);
    v20 = (_OWORD *)((char *)v13 + v18);
    v21 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    v30 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v20, 1, v21))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v19 = *v20;
      *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
      *((_BYTE *)v19 + 24) = *((_BYTE *)v20 + 24);
      v31((char *)v19 + *(int *)(v21 + 28), (char *)v20 + *(int *)(v21 + 28), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    v10 = v31;
  }
  v23 = a3[8];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    *((_BYTE *)v24 + 8) = *((_BYTE *)v25 + 8);
    *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
    v10((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

_QWORD *assignWithTake for Siri_Nl_Core_Protocol_NluResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v53 = *(_QWORD *)(v9 - 8);
  v52 = *(void (**)(char *, char *, uint64_t))(v53 + 40);
  v52(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v26 = *((_QWORD *)v12 + 1);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = v26;
      swift_bridgeObjectRelease();
      v27 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = v27;
      swift_bridgeObjectRelease();
      v28 = v9;
      v52(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      v29 = *(int *)(v13 + 28);
      v30 = &v11[v29];
      v31 = &v12[v29];
      v32 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34(v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
          v30[24] = v31[24];
          (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v28);
          v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56);
          v9 = v28;
          v37(v30, 0, 1, v32);
          goto LABEL_16;
        }
      }
      else
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
          v30[24] = v31[24];
          v9 = v28;
          v52(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v28);
          goto LABEL_16;
        }
        sub_1C2FF6CC0((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
      }
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      v9 = v28;
      goto LABEL_16;
    }
    sub_1C2FF6CC0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
    goto LABEL_7;
  v18 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v18;
  v51 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v51(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
  v19 = *(int *)(v13 + 28);
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = v9;
  v23 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  v50 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v21, 1, v23))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C80);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v20[24] = v21[24];
    v51(&v20[*(int *)(v23 + 28)], &v21[*(int *)(v23 + 28)], v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v20, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  v9 = v22;
LABEL_16:
  v39 = a3[8];
  v40 = (uint64_t)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44((uint64_t)v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *(_BYTE *)(v40 + 8) = v41[8];
      v49 = *((_QWORD *)v41 + 3);
      *(_QWORD *)(v40 + 16) = *((_QWORD *)v41 + 2);
      *(_QWORD *)(v40 + 24) = v49;
      swift_bridgeObjectRelease();
      v52((char *)(v40 + *(int *)(v42 + 24)), &v41[*(int *)(v42 + 24)], v9);
      return a1;
    }
    sub_1C2FF6CC0(v40, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
    goto LABEL_21;
  }
  if (v46)
  {
LABEL_21:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
    memcpy((void *)v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = v41[8];
  *(_OWORD *)(v40 + 16) = *((_OWORD *)v41 + 1);
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v40 + *(int *)(v42 + 24), &v41[*(int *)(v42 + 24)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3235420(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C3378914();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1C32354F8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_1C3378914();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819C90);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AEDB0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_1C32355C0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1C3378914();
  if (v0 <= 0x3F)
  {
    sub_1C2FF90EC(319, &qword_1EF8AEE60, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    if (v1 <= 0x3F)
    {
      sub_1C2FF90EC(319, qword_1EF8AEF08, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t AddressOntologyNode.OccupantNode.__allocating_init(name:multicardinal:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject();
  if (qword_1EF80AA70 != -1)
    swift_once();
  v7 = qword_1EF8AEF70;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = a3 & 1;
  *(_QWORD *)(v6 + 40) = v7;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t static AddressOntologyNode.OccupantNode.occupantFirstNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantLastNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantNickNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantRelationshipNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantSelfReferenceNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantNamePrefixNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4D0);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantNamePostfixNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4D8);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantCompanyNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  return swift_initStaticObject();
}

uint64_t sub_1C3235868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DFAE0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C338C4A0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4E8);
  inited = swift_initStaticObject();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 32) = inited;
  v3 = swift_initStaticObject();
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 72) = v3;
  v4 = swift_initStaticObject();
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 112) = v4;
  v5 = swift_initStaticObject();
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 152) = v5;
  v6 = swift_initStaticObject();
  *(_QWORD *)(v0 + 216) = v1;
  *(_QWORD *)(v0 + 224) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 192) = v6;
  v7 = swift_initStaticObject();
  *(_QWORD *)(v0 + 256) = v1;
  *(_QWORD *)(v0 + 264) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 232) = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4D0);
  v9 = swift_initStaticObject();
  *(_QWORD *)(v0 + 296) = v8;
  *(_QWORD *)(v0 + 304) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 272) = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4D8);
  v11 = swift_initStaticObject();
  *(_QWORD *)(v0 + 336) = v10;
  *(_QWORD *)(v0 + 344) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 312) = v11;
  result = swift_initStaticObject();
  *(_QWORD *)(v0 + 376) = v1;
  *(_QWORD *)(v0 + 384) = &protocol witness table for TerminalOntologyNode<A>;
  *(_QWORD *)(v0 + 352) = result;
  qword_1EF8AEF70 = v0;
  return result;
}

uint64_t static AddressOntologyNode.OccupantNode.childNodes.getter()
{
  if (qword_1EF80AA70 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t AddressOntologyNode.OccupantNode.init(name:multicardinal:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;

  if (qword_1EF80AA70 != -1)
    swift_once();
  v7 = qword_1EF8AEF70;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = a3 & 1;
  *(_QWORD *)(v3 + 40) = v7;
  swift_bridgeObjectRetain();
  return v3;
}

void AddressOntologyNode.OccupantNode.__allocating_init(name:multicardinal:childNodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AddressOntologyNode.OccupantNode.init(name:multicardinal:childNodes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t AddressOntologyNode.OccupantNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AddressOntologyNode.OccupantNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AddressOntologyNode.OccupantNode()
{
  return objc_opt_self();
}

uint64_t method lookup function for AddressOntologyNode.OccupantNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AddressOntologyNode.OccupantNode.__allocating_init(name:multicardinal:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1ED7CDD30);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1C311C2EC(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &qword_1EF7DE220, &qword_1EF7DE210, a1);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DE6F8);
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchingSpan.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1C3147678(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1C323F050) & 1;
}

uint64_t Com_Apple_Siri_Product_Proto_Value.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1C311C2EC(type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &qword_1EF7DDA10, &qword_1EF7DDA08, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

BOOL Com_Apple_Siri_Product_Proto_MatchingSpan.hasSerializedValue.getter()
{
  return sub_1C31128EC(&qword_1EF7DDB38, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C323641C(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.input.getter()
{
  return sub_1C3235CD8(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchedTerm.getter()
{
  return sub_1C3235CD8(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

uint64_t sub_1C3235CD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(*(_QWORD *)(v1
                             + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

BOOL Com_Apple_Siri_Product_Proto_MatchingSpan.hasPrefix.getter()
{
  return sub_1C3235D60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3235E4C(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix, a1);
}

BOOL Com_Apple_Siri_Product_Proto_MatchingSpan.hasSuffix.getter()
{
  return sub_1C3235D60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix);
}

BOOL sub_1C3235D60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v7 = *(_QWORD *)(v1 + *(int *)(v6 + 20)) + *a1;
  swift_beginAccess();
  sub_1C2FF6CFC(v7, (uint64_t)v5, &qword_1EF7DE730);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) != 1;
  sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE730);
  return v8;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3235E4C(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, a1);
}

uint64_t sub_1C3235E4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v9 = *(_QWORD *)(v2 + *(int *)(v8 + 20)) + *a1;
  swift_beginAccess();
  sub_1C2FF6CFC(v9, (uint64_t)v7, &qword_1EF7DE730);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8) != 1)
    return sub_1C2FF6C38((uint64_t)v7, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v10 = *(int *)(v8 + 20);
  if (qword_1EF7DE220 != -1)
    swift_once();
  *(_QWORD *)(a2 + v10) = qword_1EF7DE210;
  swift_retain();
  return sub_1C2FF9138((uint64_t)v7, &qword_1EF7DE730);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.start.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.end.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

uint64_t sub_1C3235FA4(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(*(_QWORD *)(v1
                                  + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0)
                                           + 20))
                      + *a1);
  swift_beginAccess();
  return *v2;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.startWithoutPrefix.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.endWithoutSuffix.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.confidence.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefixSuffixConfidence.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.explicit.getter()
{
  return sub_1C3236040(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isSuffixVariableMatch.getter()
{
  return sub_1C3236040(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

uint64_t sub_1C3236040(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPrefixVariableMatch.getter()
{
  return sub_1C3236040(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPayloadVariableMatch.getter()
{
  return sub_1C3236040(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.locale.getter()
{
  return sub_1C3235CD8(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.numWords.getter()
{
  return sub_1C3235FA4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.appID.getter()
{
  return sub_1C3235CD8(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matcherNames.getter()
{
  return sub_1C323614C();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.tags.getter()
{
  return sub_1C323614C();
}

uint64_t sub_1C323614C()
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationConfidences.getter()
{
  return sub_1C323614C();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationPhoneSequences.getter()
{
  return sub_1C323614C();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.metadata.getter()
{
  return sub_1C32361D4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesStartTime.getter()
{
  return sub_1C32361D4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

uint64_t sub_1C32361D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20)) + *a1;
  swift_beginAccess();
  return *(_QWORD *)v2;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesEndTime.getter()
{
  return sub_1C32361D4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  return sub_1C2FF6CFC(v3, a1, &qword_1EF7DD988);
}

BOOL Com_Apple_Siri_Product_Proto_ScalarValue.hasUnit.getter()
{
  return sub_1C31128EC(&qword_1ED7CDFF0, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.unit.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1ED7CDFF0);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_1C2FF6C38((uint64_t)v5, (uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E0DEE9D8];
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  return sub_1C2FF9138((uint64_t)v5, &qword_1ED7CDFF0);
}

BOOL Com_Apple_Siri_Product_Proto_ScalarValue.hasValue.getter()
{
  return sub_1C31128EC(&qword_1EF7DDB38, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C323641C(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, a1);
}

uint64_t sub_1C323641C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v9, &qword_1EF7DDB38);
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1)
    return sub_1C2FF6C38((uint64_t)v9, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v12 = *(int *)(v11 + 20);
  if (qword_1EF7DDA10 != -1)
    swift_once();
  *(_QWORD *)(a3 + v12) = qword_1EF7DDA08;
  swift_retain();
  return sub_1C2FF9138((uint64_t)v9, &qword_1EF7DDB38);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.doubleValue.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = (double *)&v19[-v7];
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v14, (uint64_t)v8, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v8, v12, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  *v8 = a1;
  v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C2FF6D40((uint64_t)v8, (uint64_t)v6, &qword_1EF7DD988);
  v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v6, v17, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.floatValue.setter(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = (float *)&v19[-v7];
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v14, (uint64_t)v8, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v8, v12, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  *v8 = a1;
  v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(float *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C2FF6D40((uint64_t)v8, (uint64_t)v6, &qword_1EF7DD988);
  v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v6, v17, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.intValue.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v14, (uint64_t)v8, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v8, v12, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  *v8 = a1;
  v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C2FF6D40((uint64_t)v8, (uint64_t)v6, &qword_1EF7DD988);
  v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v6, v17, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.longValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v14, (uint64_t)v8, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v8, v12, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  *v8 = a1;
  v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C2FF6D40((uint64_t)v8, (uint64_t)v6, &qword_1EF7DD988);
  v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v6, v17, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.stringValue.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C3236DB8(a1, a2, 4);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.dateTimeValue.setter(uint64_t a1)
{
  return sub_1C3236FE0(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, 5);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.scalarValue.setter(uint64_t a1)
{
  return sub_1C3236FE0(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, 6);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticTagValue.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C3236DB8(a1, a2, 7);
}

uint64_t sub_1C3236DB8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v24[4];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (_QWORD *)((char *)v24 - v11);
  v13 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v14 = *(_QWORD *)(v3 + v13);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v15 = swift_allocObject();
    v24[3] = a3;
    v16 = v15;
    v17 = v15
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v14
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v19, (uint64_t)v12, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v12, v17, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v3 + v13) = v16;
    swift_release();
  }
  v20 = *(_QWORD *)(v3 + v13);
  *v12 = a1;
  v12[1] = a2;
  v21 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 0, 1, v21);
  sub_1C2FF6D40((uint64_t)v12, (uint64_t)v10, &qword_1EF7DD988);
  v22 = v20
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v10, v22, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticValue.setter(uint64_t a1)
{
  return sub_1C3236FE0(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, 8);
}

uint64_t sub_1C3236FE0(uint64_t a1, uint64_t (*a2)(_QWORD), int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v24[4];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v24 - v11;
  v13 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v14 = *(_QWORD *)(v3 + v13);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v15 = swift_allocObject();
    v24[3] = a3;
    v16 = v15;
    v17 = v15
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v14
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v19, (uint64_t)v12, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v12, v17, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v3 + v13) = v16;
    swift_release();
  }
  v20 = *(_QWORD *)(v3 + v13);
  sub_1C2FF6C38(a1, (uint64_t)v12, a2);
  v21 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 0, 1, v21);
  sub_1C2FF6D40((uint64_t)v12, (uint64_t)v10, &qword_1EF7DD988);
  v22 = v20
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v10, v22, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1C311C2EC(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &qword_1EF80AAB0, &qword_1EF8AF0A8, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.value.setter(uint64_t a1)
{
  return sub_1C3237260(a1, &qword_1EF7DDB38, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.unit.setter(uint64_t a1)
{
  return sub_1C3237260(a1, &qword_1ED7CDFF0, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit);
}

uint64_t sub_1C3237260(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v21 - v13;
  v15 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
    swift_allocObject();
    v16 = swift_retain();
    *(_QWORD *)(v4 + v15) = sub_1C32436B8(v16);
    swift_release();
  }
  v17 = *(_QWORD *)(v4 + v15);
  sub_1C2FF6C38(a1, (uint64_t)v14, a3);
  v18 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 0, 1, v18);
  sub_1C2FF6D40((uint64_t)v14, (uint64_t)v12, a2);
  v19 = v17 + *a4;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v12, v19, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    v8 = sub_1C32452EC(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v11 = swift_retain();
    v12 = sub_1C32452EC(v11);
    swift_release();
    *(_QWORD *)(v2 + v10) = v12;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  sub_1C2FF6C38(a1, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_1C2FF6D40((uint64_t)v9, (uint64_t)v7, &qword_1EF7DDB38);
  v15 = v13
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v7, v15, &qword_1EF7DDB38);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.input.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C323763C(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchedTerm.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C323763C(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

uint64_t sub_1C323763C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = v3;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(v5 + v8) = v10;
    swift_release();
  }
  v11 = (_QWORD *)(*(_QWORD *)(v5 + v8) + *a3);
  swift_beginAccess();
  *v11 = a1;
  v11[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.setter(uint64_t a1)
{
  return sub_1C3237720(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.setter(uint64_t a1)
{
  return sub_1C3237720(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix);
}

uint64_t sub_1C3237720(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v4 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - v10;
  v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v13 = *(int *)(v12 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v14 = swift_retain();
    v15 = sub_1C32452EC(v14);
    swift_release();
    *(_QWORD *)(v4 + v13) = v15;
    swift_release();
  }
  v16 = *(_QWORD *)(v4 + v13);
  sub_1C2FF6C38(a1, (uint64_t)v11, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  sub_1C2FF6D40((uint64_t)v11, (uint64_t)v9, &qword_1EF7DE730);
  v17 = v16 + *a2;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v9, v17, &qword_1EF7DE730);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.start.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.end.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

uint64_t sub_1C32378C4(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    v8 = sub_1C32452EC(v7);
    swift_release();
    *(_QWORD *)(v4 + v6) = v8;
    swift_release();
  }
  v9 = (_DWORD *)(*(_QWORD *)(v4 + v6) + *a2);
  result = swift_beginAccess();
  *v9 = a1;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.startWithoutPrefix.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.endWithoutSuffix.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.confidence.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefixSuffixConfidence.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.explicit.setter(char a1)
{
  return sub_1C32379C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isSuffixVariableMatch.setter(char a1)
{
  return sub_1C32379C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

uint64_t sub_1C32379C4(char a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    v8 = sub_1C32452EC(v7);
    swift_release();
    *(_QWORD *)(v4 + v6) = v8;
    swift_release();
  }
  v9 = (_BYTE *)(*(_QWORD *)(v4 + v6) + *a2);
  result = swift_beginAccess();
  *v9 = a1 & 1;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPrefixVariableMatch.setter(char a1)
{
  return sub_1C32379C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPayloadVariableMatch.setter(char a1)
{
  return sub_1C32379C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.locale.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C323763C(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.numWords.setter(int a1)
{
  return sub_1C32378C4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchType.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = v1;
  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    v7 = sub_1C32452EC(v6);
    swift_release();
    *(_QWORD *)(v2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v5)
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  result = swift_beginAccess();
  *(_QWORD *)v8 = v3;
  *(_BYTE *)(v8 + 8) = v4;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.appID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C323763C(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matcherNames.setter(uint64_t a1)
{
  return sub_1C3237B94(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.tags.setter(uint64_t a1)
{
  return sub_1C3237B94(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
}

uint64_t sub_1C3237B94(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    v8 = sub_1C32452EC(v7);
    swift_release();
    *(_QWORD *)(v4 + v6) = v8;
    swift_release();
  }
  v9 = (_QWORD *)(*(_QWORD *)(v4 + v6) + *a2);
  swift_beginAccess();
  *v9 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationConfidences.setter(uint64_t a1)
{
  return sub_1C3237B94(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationPhoneSequences.setter(uint64_t a1)
{
  return sub_1C3237B94(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.metadata.setter(uint64_t a1)
{
  return sub_1C3237C84(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesStartTime.setter(uint64_t a1)
{
  return sub_1C3237C84(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

uint64_t sub_1C3237C84(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    v8 = sub_1C32452EC(v7);
    swift_release();
    *(_QWORD *)(v4 + v6) = v8;
    swift_release();
  }
  v9 = (_QWORD *)(*(_QWORD *)(v4 + v6) + *a2);
  result = swift_beginAccess();
  *v9 = a1;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesEndTime.setter(uint64_t a1)
{
  return sub_1C3237C84(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

void Com_Apple_Siri_Product_Proto_MatchType.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t Com_Apple_Siri_Product_Proto_MatchType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0x10;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_1C3237D80@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Com_Apple_Siri_Product_Proto_MatchType.init(rawValue:)(*a1, a2);
}

uint64_t sub_1C3237D88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Com_Apple_Siri_Product_Proto_MatchType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C3237DAC()
{
  sub_1C3247D70();
  return sub_1C337895C();
}

void sub_1C3237DE4()
{
  qword_1EF8AF040 = (uint64_t)&unk_1E7D0F9B8;
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchType.allCases.getter()
{
  if (qword_1EF80AA78 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchType.allCases.setter(uint64_t a1)
{
  if (qword_1EF80AA78 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EF8AF040 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Com_Apple_Siri_Product_Proto_MatchType.allCases.modify())()
{
  if (qword_1EF80AA78 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1C3237F44@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1EF80AA78 != -1)
    swift_once();
  swift_beginAccess();
  *a1 = qword_1EF8AF040;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C3237FB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C3238010(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    v7 = sub_1C32452EC(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v3;
  return swift_bridgeObjectRelease();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.label.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1C3238148;
}

void sub_1C3238148(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      v8 = sub_1C32452EC(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      v12 = swift_retain();
      v13 = sub_1C32452EC(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 16) = v3;
    *(_QWORD *)(v14 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v5, &qword_1EF7DDB38);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = *(int *)(v6 + 20);
    if (qword_1EF7DDA10 != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = qword_1EF7DDA08;
    swift_retain();
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DDB38);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  return sub_1C323841C;
}

void sub_1C323841C(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_MatchingSpan.clearSerializedValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    v7 = sub_1C32452EC(v6);
    swift_release();
    *(_QWORD *)(v1 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v4, v10, &qword_1EF7DDB38);
  swift_endAccess();
  swift_release();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.input.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  swift_beginAccess();
  v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1C32385F0;
}

void sub_1C32385F0(uint64_t *a1, char a2)
{
  sub_1C32387CC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t sub_1C32385FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(*(_QWORD *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  swift_beginAccess();
  v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C3238668(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *a1;
  v7 = a1[1];
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    v11 = sub_1C32452EC(v10);
    swift_release();
    *(_QWORD *)(a2 + v9) = v11;
    swift_release();
  }
  v12 = (_QWORD *)(*(_QWORD *)(a2 + v9) + *a5);
  swift_beginAccess();
  *v12 = v8;
  v12[1] = v7;
  return swift_bridgeObjectRelease();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.matchedTerm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  swift_beginAccess();
  v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1C32387C0;
}

void sub_1C32387C0(uint64_t *a1, char a2)
{
  sub_1C32387CC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

void sub_1C32387CC(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  v6 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v7 = *(int *)(v4 + 96);
      v8 = *(_QWORD *)(v4 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      v9 = swift_retain();
      v10 = sub_1C32452EC(v9);
      swift_release();
      *(_QWORD *)(v8 + v7) = v10;
      swift_release();
    }
    v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *v11 = v5;
    v11[1] = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v12 = *(int *)(v4 + 96);
      v13 = *(_QWORD *)(v4 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      v14 = swift_retain();
      v15 = sub_1C32452EC(v14);
      swift_release();
      *(_QWORD *)(v13 + v12) = v15;
      swift_release();
    }
    v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *v16 = v5;
    v16[1] = v6;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(v6 + 20))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v5, &qword_1EF7DE730);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = *(int *)(v6 + 20);
    if (qword_1EF7DE220 != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = qword_1EF7DE210;
    swift_retain();
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE730);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  return sub_1C3238AB4;
}

void sub_1C3238AB4(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_MatchingSpan.clearPrefix()()
{
  sub_1C3238DA0(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix);
}

uint64_t sub_1C3238AD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v10 = *(_QWORD *)(a1 + *(int *)(v9 + 20)) + *a2;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v8, &qword_1EF7DE730);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) != 1)
    return sub_1C2FF6C38((uint64_t)v8, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v11 = *(int *)(v9 + 20);
  if (qword_1EF7DE220 != -1)
    swift_once();
  *(_QWORD *)(a3 + v11) = qword_1EF7DE210;
  swift_retain();
  return sub_1C2FF9138((uint64_t)v8, &qword_1EF7DE730);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(v6 + 20))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v5, &qword_1EF7DE730);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = *(int *)(v6 + 20);
    if (qword_1EF7DE220 != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = qword_1EF7DE210;
    swift_retain();
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE730);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  return sub_1C3238D80;
}

void sub_1C3238D80(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_MatchingSpan.clearSuffix()()
{
  sub_1C3238DA0(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix);
}

uint64_t sub_1C3238DA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v8 = *(int *)(v7 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(v3 + v8) = v10;
    swift_release();
  }
  v11 = *(_QWORD *)(v3 + v8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v12 = v11 + *a1;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v6, v12, &qword_1EF7DE730);
  swift_endAccess();
  return swift_release();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.start.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C3238F5C;
}

void sub_1C3238F5C(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t sub_1C3238F68(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t result;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(a2 + v8) = v10;
    swift_release();
  }
  v11 = (_DWORD *)(*(_QWORD *)(a2 + v8) + *a5);
  result = swift_beginAccess();
  *v11 = v7;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.end.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C32390A0;
}

void sub_1C32390A0(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

void sub_1C32390AC(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 84);
    v9 = *(_QWORD *)(v5 + 72);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    v11 = sub_1C32452EC(v10);
    swift_release();
    *(_QWORD *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  v12 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3);
  swift_beginAccess();
  *v12 = v6;
  free((void *)v5);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.startWithoutPrefix.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C3239210;
}

void sub_1C3239210(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.endWithoutSuffix.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C323929C;
}

void sub_1C323929C(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.confidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C3239328;
}

void sub_1C3239328(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.prefixSuffixConfidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C32393B4;
}

void sub_1C32393B4(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.explicit.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5;
  return sub_1C3239440;
}

void sub_1C3239440(uint64_t *a1, char a2)
{
  sub_1C3239590(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t sub_1C323944C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(a2 + v8) = v10;
    swift_release();
  }
  v11 = (_BYTE *)(*(_QWORD *)(a2 + v8) + *a5);
  result = swift_beginAccess();
  *v11 = v7;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.isSuffixVariableMatch.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5;
  return sub_1C3239584;
}

void sub_1C3239584(uint64_t *a1, char a2)
{
  sub_1C3239590(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

void sub_1C3239590(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v5 = *a1;
  v6 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 80);
    v9 = *(_QWORD *)(v5 + 72);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    v11 = sub_1C32452EC(v10);
    swift_release();
    *(_QWORD *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  v12 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess();
  *v12 = v6;
  free((void *)v5);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.isPrefixVariableMatch.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5;
  return sub_1C32396F0;
}

void sub_1C32396F0(uint64_t *a1, char a2)
{
  sub_1C3239590(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.isPayloadVariableMatch.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5;
  return sub_1C323977C;
}

void sub_1C323977C(uint64_t *a1, char a2)
{
  sub_1C3239590(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.locale.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  swift_beginAccess();
  v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1C3239810;
}

void sub_1C3239810(uint64_t *a1, char a2)
{
  sub_1C32387CC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.numWords.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1C323989C;
}

void sub_1C323989C(uint64_t *a1, char a2)
{
  sub_1C32390AC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t sub_1C32398A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1C3239910(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    v7 = sub_1C32452EC(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5)
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  result = swift_beginAccess();
  *(_QWORD *)v8 = v3;
  *(_BYTE *)(v8 + 8) = v4;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.matchType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  swift_beginAccess();
  v6 = *(_BYTE *)(v5 + 8);
  v3[9] = *(_QWORD *)v5;
  *((_BYTE *)v3 + 80) = v6;
  return sub_1C3239A58;
}

void sub_1C3239A58(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(v8 + v7) = v10;
    swift_release();
  }
LABEL_4:
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  swift_beginAccess();
  *(_QWORD *)v11 = v4;
  *(_BYTE *)(v11 + 8) = v5;
  free((void *)v3);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.appID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  swift_beginAccess();
  v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1C3239BCC;
}

void sub_1C3239BCC(uint64_t *a1, char a2)
{
  sub_1C32387CC(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.matcherNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1C3239C60;
}

void sub_1C3239C60(uint64_t *a1, char a2)
{
  sub_1C3239E34(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
}

uint64_t sub_1C3239C6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*(_QWORD *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C3239CD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(a2 + v8) = v10;
    swift_release();
  }
  v11 = (_QWORD *)(*(_QWORD *)(a2 + v8) + *a5);
  swift_beginAccess();
  *v11 = v7;
  return swift_bridgeObjectRelease();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.tags.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1C3239E28;
}

void sub_1C3239E28(uint64_t *a1, char a2)
{
  sub_1C3239E34(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
}

void sub_1C3239E34(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v6 = *(int *)(v4 + 88);
      v7 = *(_QWORD *)(v4 + 80);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      v8 = swift_retain();
      v9 = sub_1C32452EC(v8);
      swift_release();
      *(_QWORD *)(v7 + v6) = v9;
      swift_release();
    }
    v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *v10 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v11 = *(int *)(v4 + 88);
      v12 = *(_QWORD *)(v4 + 80);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      v13 = swift_retain();
      v14 = sub_1C32452EC(v13);
      swift_release();
      *(_QWORD *)(v12 + v11) = v14;
      swift_release();
    }
    v15 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *v15 = v5;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationConfidences.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1C323A034;
}

void sub_1C323A034(uint64_t *a1, char a2)
{
  sub_1C3239E34(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationPhoneSequences.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1C323A0C8;
}

void sub_1C323A0C8(uint64_t *a1, char a2)
{
  sub_1C3239E34(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.metadata.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_1C323A154;
}

void sub_1C323A154(uint64_t *a1, char a2)
{
  sub_1C323A2A4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t sub_1C323A160(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(a2 + v8) = v10;
    swift_release();
  }
  v11 = (_QWORD *)(*(_QWORD *)(a2 + v8) + *a5);
  result = swift_beginAccess();
  *v11 = v7;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesStartTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_1C323A298;
}

void sub_1C323A298(uint64_t *a1, char a2)
{
  sub_1C323A2A4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

void sub_1C323A2A4(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    v11 = sub_1C32452EC(v10);
    swift_release();
    *(_QWORD *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  v12 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3);
  swift_beginAccess();
  *v12 = v6;
  free((void *)v5);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesEndTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_1C323A408;
}

void sub_1C323A408(uint64_t *a1, char a2)
{
  sub_1C323A2A4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MatchingSpan.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t sub_1C323A42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  return sub_1C2FF6CFC(v3, a2, &qword_1EF7DD988);
}

uint64_t sub_1C323A498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2FF6CFC(a1, (uint64_t)v4, &qword_1EF7DD988);
  return Com_Apple_Siri_Product_Proto_Value.value.setter((uint64_t)v4);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = *(_QWORD *)(v1 + v6);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v8 = swift_allocObject();
    v9 = v8
       + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = v7
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v11, (uint64_t)v5, &qword_1EF7DD988);
    swift_beginAccess();
    sub_1C2FF6D84((uint64_t)v5, v9, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v1 + v6) = v8;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v6)
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84(a1, v12, &qword_1EF7DD988);
  swift_endAccess();
  return swift_release();
}

void (*Com_Apple_Siri_Product_Proto_Value.value.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[12] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988) - 8) + 64);
  v3[13] = malloc(v4);
  v5 = malloc(v4);
  v3[14] = v5;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  *((_DWORD *)v3 + 30) = v6;
  v7 = *(_QWORD *)(v1 + v6)
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v7, (uint64_t)v5, &qword_1EF7DD988);
  return sub_1C323A76C;
}

void sub_1C323A76C(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = *(void **)(v2 + 104);
    v3 = *(void **)(v2 + 112);
    sub_1C2FF6CFC((uint64_t)v3, (uint64_t)v4, &qword_1EF7DD988);
    Com_Apple_Siri_Product_Proto_Value.value.setter((uint64_t)v4);
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 120);
      v7 = *(_QWORD *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 104);
      v8 = *(_QWORD *)(v7 + v5);
      type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
      v9 = swift_allocObject();
      v10 = v9
          + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
      v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
      v12 = v8
          + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
      swift_beginAccess();
      sub_1C2FF6CFC(v12, v6, &qword_1EF7DD988);
      swift_beginAccess();
      sub_1C2FF6D84(v6, v10, &qword_1EF7DD988);
      swift_endAccess();
      *(_QWORD *)(v7 + v5) = v9;
      swift_release();
    }
    v4 = *(void **)(v2 + 104);
    v3 = *(void **)(v2 + 112);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + *(int *)(v2 + 120))
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    swift_retain();
    sub_1C2FF6D84((uint64_t)v3, v13, &qword_1EF7DD988);
    swift_endAccess();
    swift_release();
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

float Com_Apple_Siri_Product_Proto_Value.floatValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v4, (uint64_t)v3, &qword_1EF7DD988);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
    return 0.0;
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    return 0.0;
  }
  else
  {
    return *(float *)v3;
  }
}

uint64_t sub_1C323AA4C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v4);
  v6 = (int *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v7, (uint64_t)v6, &qword_1EF7DD988);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_1C2FF9138((uint64_t)v6, &qword_1EF7DD988);
  }
  else
  {
    result = swift_getEnumCaseMultiPayload();
    if (!(_DWORD)result)
    {
      v10 = *v6;
      goto LABEL_7;
    }
    result = sub_1C2FF6CC0((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  v10 = 0;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.floatValue.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = (int *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      v8 = *v5;
      goto LABEL_7;
    }
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  v8 = 0;
LABEL_7:
  *((_DWORD *)v3 + 10) = v8;
  return sub_1C323AC8C;
}

void sub_1C323AC8C(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 32);
  Com_Apple_Siri_Product_Proto_Value.floatValue.setter(*(float *)(*(_QWORD *)a1 + 40));
  free(v2);
  free(v1);
}

double Com_Apple_Siri_Product_Proto_Value.doubleValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v4, (uint64_t)v3, &qword_1EF7DD988);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return *(double *)v3;
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0.0;
}

uint64_t sub_1C323ADDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v7, (uint64_t)v6, &qword_1EF7DD988);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_1C2FF9138((uint64_t)v6, &qword_1EF7DD988);
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 1)
  {
    result = sub_1C2FF6CC0((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v10 = *v6;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.doubleValue.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[5] = v5;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v8 = *v5;
LABEL_7:
  v3[3] = v8;
  return sub_1C323B024;
}

void sub_1C323B024(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 40);
  Com_Apple_Siri_Product_Proto_Value.doubleValue.setter(*(double *)(*(_QWORD *)a1 + 24));
  free(v2);
  free(v1);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.intValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v1);
  v3 = (unsigned int *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v4, (uint64_t)v3, &qword_1EF7DD988);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return *v3;
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

uint64_t sub_1C323B174@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v4);
  v6 = (int *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v7, (uint64_t)v6, &qword_1EF7DD988);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_1C2FF9138((uint64_t)v6, &qword_1EF7DD988);
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 2)
  {
    result = sub_1C2FF6CC0((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v10 = *v6;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.intValue.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = (int *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v8 = *v5;
LABEL_7:
  *((_DWORD *)v3 + 10) = v8;
  return sub_1C323B3BC;
}

void sub_1C323B3BC(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 32);
  Com_Apple_Siri_Product_Proto_Value.intValue.setter(*(_DWORD *)(*(_QWORD *)a1 + 40));
  free(v2);
  free(v1);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.longValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v4, (uint64_t)v3, &qword_1EF7DD988);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
      return *(_QWORD *)v3;
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

uint64_t sub_1C323B50C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v7, (uint64_t)v6, &qword_1EF7DD988);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_1C2FF9138((uint64_t)v6, &qword_1EF7DD988);
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 3)
  {
    result = sub_1C2FF6CC0((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v10 = *v6;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.longValue.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[5] = v5;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v8 = *v5;
LABEL_7:
  v3[3] = v8;
  return sub_1C323B754;
}

void sub_1C323B754(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 40);
  Com_Apple_Siri_Product_Proto_Value.longValue.setter(*(_QWORD *)(*(_QWORD *)a1 + 24));
  free(v2);
  free(v1);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v4, (uint64_t)v3, &qword_1EF7DD988);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
      return *(_QWORD *)v3;
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

void (*Com_Apple_Siri_Product_Proto_Value.stringValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[6] = v5;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
LABEL_6:
    v8 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v8 = *v5;
  v9 = v5[1];
LABEL_7:
  v3[3] = v8;
  v3[4] = v9;
  return sub_1C323B9D4;
}

void sub_1C323B9D4(uint64_t a1, char a2)
{
  sub_1C323C278(a1, a2, (void (*)(uint64_t, uint64_t))Com_Apple_Siri_Product_Proto_Value.stringValue.setter);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.dateTimeValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
      return sub_1C2FF6C38((uint64_t)v5, a1, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0) + 20);
  if (qword_1EF80A718 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_1EF81A4F8;
  return swift_retain();
}

void (*Com_Apple_Siri_Product_Proto_Value.dateTimeValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v9, (uint64_t)v5, &qword_1EF7DD988);
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      sub_1C2FF6C38((uint64_t)v5, (uint64_t)v8, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
      return sub_1C323BCF0;
    }
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v11 = *(int *)(v6 + 20);
  if (qword_1EF80A718 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_1EF81A4F8;
  swift_retain();
  return sub_1C323BCF0;
}

void sub_1C323BCF0(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_Value.dateTimeValue.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.scalarValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
      return sub_1C2FF6C38((uint64_t)v5, a1, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if (qword_1EF80AAB0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_1EF8AF0A8;
  return swift_retain();
}

void (*Com_Apple_Siri_Product_Proto_Value.scalarValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v9, (uint64_t)v5, &qword_1EF7DD988);
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      sub_1C2FF6C38((uint64_t)v5, (uint64_t)v8, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
      return sub_1C323C014;
    }
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v11 = *(int *)(v6 + 20);
  if (qword_1EF80AAB0 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_1EF8AF0A8;
  swift_retain();
  return sub_1C323C014;
}

void sub_1C323C014(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_Value.scalarValue.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticTagValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v4, (uint64_t)v3, &qword_1EF7DD988);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 7)
      return *(_QWORD *)v3;
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

void (*Com_Apple_Siri_Product_Proto_Value.semanticTagValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[6] = v5;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
LABEL_6:
    v8 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 7)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  v8 = *v5;
  v9 = v5[1];
LABEL_7:
  v3[3] = v8;
  v3[4] = v9;
  return sub_1C323C26C;
}

void sub_1C323C26C(uint64_t a1, char a2)
{
  sub_1C323C278(a1, a2, (void (*)(uint64_t, uint64_t))Com_Apple_Siri_Product_Proto_Value.semanticTagValue.setter);
}

void sub_1C323C278(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = *(void **)(*(_QWORD *)a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    a3(v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    a3(*(_QWORD *)(*(_QWORD *)a1 + 24), v7);
  }
  free(v6);
  free(v4);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v6, (uint64_t)v5, &qword_1EF7DD988);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
      return sub_1C2FF6C38((uint64_t)v5, (uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

void (*Com_Apple_Siri_Product_Proto_Value.semanticValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v8, (uint64_t)v5, &qword_1EF7DD988);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DD988);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    v7[5] = 0xE000000000000000;
    v7[6] = MEMORY[0x1E0DEE9D8];
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    return sub_1C323C5CC;
  }
  if (swift_getEnumCaseMultiPayload() != 8)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  sub_1C2FF6C38((uint64_t)v5, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1C323C5CC;
}

void sub_1C323C5CC(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_Value.semanticValue.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t (*Com_Apple_Siri_Product_Proto_Value.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t static Com_Apple_Siri_Product_Proto_ScalarValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1C3147678(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(uint64_t, uint64_t))sub_1C3243DC0) & 1;
}

uint64_t sub_1C323C62C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  sub_1C2FF6CFC(v11, (uint64_t)v10, &qword_1EF7DDB38);
  v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12) != 1)
    return sub_1C2FF6C38((uint64_t)v10, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  v13 = *(int *)(v12 + 20);
  if (qword_1EF7DDA10 != -1)
    swift_once();
  *(_QWORD *)(a4 + v13) = qword_1EF7DDA08;
  swift_retain();
  return sub_1C2FF9138((uint64_t)v10, &qword_1EF7DDB38);
}

void (*Com_Apple_Siri_Product_Proto_ScalarValue.value.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20))
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v5, &qword_1EF7DDB38);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    v11 = *(int *)(v6 + 20);
    if (qword_1EF7DDA10 != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = qword_1EF7DDA08;
    swift_retain();
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DDB38);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  return sub_1C323C8EC;
}

void sub_1C323C8EC(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_ScalarValue.value.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_ScalarValue.clearValue()()
{
  sub_1C323CAA0(&qword_1EF7DDB38, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value);
}

void (*Com_Apple_Siri_Product_Proto_ScalarValue.unit.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20))
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v5, &qword_1ED7CDFF0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = MEMORY[0x1E0DEE9D8];
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    sub_1C2FF9138((uint64_t)v5, &qword_1ED7CDFF0);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  return sub_1C323CA70;
}

void sub_1C323CA70(uint64_t a1, char a2)
{
  sub_1C2FF0834(a1, a2, (void (*)(void *))Com_Apple_Siri_Product_Proto_ScalarValue.unit.setter, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_ScalarValue.clearUnit()()
{
  sub_1C323CAA0(&qword_1ED7CDFF0, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit);
}

uint64_t sub_1C323CAA0(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
    swift_allocObject();
    v11 = swift_retain();
    *(_QWORD *)(v3 + v10) = sub_1C32436B8(v11);
    swift_release();
  }
  v12 = *(_QWORD *)(v3 + v10);
  v13 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  v14 = v12 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_1C2FF6D84((uint64_t)v9, v14, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t (*Com_Apple_Siri_Product_Proto_ScalarValue.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.semanticValueClassName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.semanticValueClassName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.semanticValueClassName.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.tags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.tags.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return nullsub_1;
}

uint64_t sub_1C323CE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF048);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF048);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1C33BA2B0;
  v5 = v39 + v4;
  v6 = v39 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v39 + v4) = 0;
  *(_QWORD *)v6 = "None";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0DA38C8];
  v8 = sub_1C3378B78();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "StemAndStop";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "StemAndStopSuffix";
  *((_QWORD *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "SimpleStemAndStopSuffix";
  *((_QWORD *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "Stop";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "StopSuffix";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "Stem";
  *((_QWORD *)v20 + 1) = 4;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "StopWithoutSynonyms";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "CompareContains";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "ComparePrefix";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "Compare";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "Phonetic";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "IdentityContains";
  *((_QWORD *)v31 + 1) = 16;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "IdentityPrefix";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "IdentitySynonym";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "Identity";
  *((_QWORD *)v37 + 1) = 8;
  v37[16] = 2;
  v9();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AA80, (uint64_t)qword_1EF8AF048, a1);
}

uint64_t sub_1C323D288@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AA80, (uint64_t)qword_1EF8AF048, a1);
}

unint64_t static Com_Apple_Siri_Product_Proto_MatchingSpan.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t sub_1C323D2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v60;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF060);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF060);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1C33BA2C0;
  v5 = v60 + v4;
  v6 = v60 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v60 + v4) = 1;
  *(_QWORD *)v6 = "label";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0DA38C8];
  v8 = sub_1C3378B78();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v60 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "serializedValue";
  *(_QWORD *)(v10 + 8) = 15;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v60 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "input";
  *((_QWORD *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v60 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "matchedTerm";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v60 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "prefix";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v60 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "suffix";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v60 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "start";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v60 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "end";
  *((_QWORD *)v22 + 1) = 3;
  v22[16] = 2;
  v9();
  v23 = v60 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "startWithoutPrefix";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v60 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "endWithoutSuffix";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v60 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "confidence";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v60 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "prefixSuffixConfidence";
  *((_QWORD *)v29 + 1) = 22;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v60 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "explicit";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v60 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "isSuffixVariableMatch";
  *((_QWORD *)v33 + 1) = 21;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v60 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "isPrefixVariableMatch";
  *((_QWORD *)v35 + 1) = 21;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v60 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "isPayloadVariableMatch";
  *((_QWORD *)v37 + 1) = 22;
  v37[16] = 2;
  v9();
  v38 = v60 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "locale";
  *(_QWORD *)(v38 + 8) = 6;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v60 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "numWords";
  *((_QWORD *)v40 + 1) = 8;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v60 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "matchType";
  *((_QWORD *)v42 + 1) = 9;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v60 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "appId";
  *((_QWORD *)v44 + 1) = 5;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v60 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "matcherNames";
  *((_QWORD *)v46 + 1) = 12;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v60 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "tags";
  *((_QWORD *)v48 + 1) = 4;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v60 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "altInterpretationConfidences";
  *((_QWORD *)v50 + 1) = 28;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v60 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "altInterpretationPhoneSequences";
  *((_QWORD *)v52 + 1) = 31;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v60 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "metadata";
  *((_QWORD *)v54 + 1) = 8;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v60 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "preITNPhrasesStartTime";
  *((_QWORD *)v56 + 1) = 22;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v60 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "preITNPhrasesEndTime";
  *((_QWORD *)v58 + 1) = 20;
  v58[16] = 2;
  v9();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchingSpan._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(qword_1EF80AA88, (uint64_t)qword_1EF8AF060, a1);
}

uint64_t sub_1C323D954()
{
  uint64_t result;

  type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
  swift_allocObject();
  result = sub_1C323D990();
  qword_1EF7DE210 = result;
  return result;
}

uint64_t sub_1C323D990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v5 = v0
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, 1, 1, v6);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch) = 0;
  v8 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  *v8 = 0;
  v8[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords) = 0;
  v9 = v0
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags) = v11;
  v12 = OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences;
  *(_QWORD *)(v0 + v12) = sub_1C302C204(v11);
  v13 = OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences;
  *(_QWORD *)(v0 + v13) = sub_1C302C314(v11);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime) = 0;
  return v0;
}

uint64_t sub_1C323DB8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1C2FF9138(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, &qword_1EF7DDB38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C2FF9138(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix, &qword_1EF7DE730);
  sub_1C2FF9138(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, &qword_1EF7DE730);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C323DC88()
{
  sub_1C323DB8C();
  return swift_deallocClassInstance();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1C32452EC(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  sub_1C323DD74(v11, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1C323DD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  uint64_t *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  result = sub_1C3378980();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_1C323E030();
          break;
        case 2:
          v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
          v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value;
          v13 = &qword_1EF7DDAF0;
          v14 = &protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value;
          goto LABEL_13;
        case 3:
        case 4:
        case 17:
        case 20:
          sub_1C2FF3224();
          break;
        case 5:
          v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
          goto LABEL_12;
        case 6:
          v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
LABEL_12:
          v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan;
          v13 = &qword_1EF7DE6E8;
          v14 = &protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan;
LABEL_13:
          sub_1C2FF32A4(a2, a1, a3, a4, (uint64_t)v11, v12, v13, (uint64_t)v14);
          break;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 18:
          sub_1C323E0AC();
          break;
        case 13:
        case 14:
        case 15:
        case 16:
          sub_1C2FF3368();
          break;
        case 19:
          sub_1C323E12C();
          break;
        case 21:
          v15 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames;
          goto LABEL_19;
        case 22:
          v15 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags;
LABEL_19:
          v16 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DA37C0];
          goto LABEL_26;
        case 23:
          sub_1C323E1C0();
          break;
        case 24:
          sub_1C323E270();
          break;
        case 25:
          v15 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata;
          goto LABEL_25;
        case 26:
          v15 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime;
          goto LABEL_25;
        case 27:
          v15 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime;
LABEL_25:
          v16 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DA3800];
LABEL_26:
          sub_1C323E314(a2, a1, a3, a4, v15, v16);
          break;
        default:
          break;
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t sub_1C323E030()
{
  swift_beginAccess();
  sub_1C3378A34();
  return swift_endAccess();
}

uint64_t sub_1C323E0AC()
{
  swift_beginAccess();
  sub_1C3378A4C();
  return swift_endAccess();
}

uint64_t sub_1C323E12C()
{
  swift_beginAccess();
  sub_1C3247D70();
  sub_1C33789B0();
  return swift_endAccess();
}

uint64_t sub_1C323E1C0()
{
  swift_beginAccess();
  sub_1C33788E4();
  sub_1C33788D8();
  sub_1C3378974();
  return swift_endAccess();
}

uint64_t sub_1C323E270()
{
  swift_beginAccess();
  sub_1C33788E4();
  sub_1C3378974();
  return swift_endAccess();
}

uint64_t sub_1C323E314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C31373E4(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C323E3BC);
}

uint64_t sub_1C323E3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t *v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;

  v90 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  v6 = MEMORY[0x1E0C80A78](v5);
  v81 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v84 = (char *)&v80 - v8;
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v82 = *(_QWORD *)(v9 - 8);
  v83 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v80 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v85 = (char *)&v80 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v87 = a1;
  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v20 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    swift_bridgeObjectRetain();
    v23 = v86;
    sub_1C3378B3C();
    v24 = v23;
    if (v23)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v86;
  }
  v25 = v87
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  sub_1C2FF6CFC(v25, (uint64_t)v15, &qword_1EF7DDB38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1C2FF9138((uint64_t)v15, &qword_1EF7DDB38);
    v26 = (uint64_t)v85;
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v15, (uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    sub_1C2FF6DE0(&qword_1EF7DDAF0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
    sub_1C3378B6C();
    v26 = (uint64_t)v85;
    v27 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value;
    v28 = (uint64_t)v19;
    if (v24)
      return sub_1C2FF6CC0(v28, v27);
    sub_1C2FF6CC0((uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  v29 = v87;
  v30 = (uint64_t *)(v87
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  swift_beginAccess();
  v31 = *v30;
  v32 = v30[1];
  v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0)
    v33 = v31 & 0xFFFFFFFFFFFFLL;
  v34 = (uint64_t)v84;
  if (!v33)
    goto LABEL_16;
  swift_bridgeObjectRetain();
  sub_1C3378B3C();
  if (v24)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  v35 = (uint64_t *)(v29
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  swift_beginAccess();
  v36 = *v35;
  v37 = v35[1];
  v38 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0)
    v38 = v36 & 0xFFFFFFFFFFFFLL;
  if (v38)
  {
    swift_bridgeObjectRetain();
    sub_1C3378B3C();
    if (v24)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v40 = v29
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  swift_beginAccess();
  sub_1C2FF6CFC(v40, v34, &qword_1EF7DE730);
  v41 = v83;
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  if (v42(v34, 1, v83) == 1)
  {
    sub_1C2FF9138(v34, &qword_1EF7DE730);
  }
  else
  {
    sub_1C2FF6C38(v34, v26, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    v41 = v83;
    sub_1C2FF6DE0(&qword_1EF7DE6E8, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1C3378B6C();
    v27 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan;
    v28 = v26;
    if (v24)
      return sub_1C2FF6CC0(v28, v27);
    sub_1C2FF6CC0(v26, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  v43 = v87
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  swift_beginAccess();
  v44 = v43;
  v45 = v81;
  sub_1C2FF6CFC(v44, v81, &qword_1EF7DE730);
  if (v42(v45, 1, v41) != 1)
  {
    v46 = v80;
    sub_1C2FF6C38(v45, v80, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1C2FF6DE0(&qword_1EF7DE6E8, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1C3378B6C();
    v27 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan;
    v28 = v46;
    if (!v24)
    {
      sub_1C2FF6CC0(v46, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
      goto LABEL_32;
    }
    return sub_1C2FF6CC0(v28, v27);
  }
  sub_1C2FF9138(v45, &qword_1EF7DE730);
LABEL_32:
  v47 = v87;
  v48 = (_DWORD *)(v87
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  swift_beginAccess();
  if (!*v48 || (result = sub_1C3378B48(), !v24))
  {
    v49 = (_DWORD *)(v47
                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
    swift_beginAccess();
    if (!*v49 || (result = sub_1C3378B48(), !v24))
    {
      v50 = (_DWORD *)(v47
                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
      swift_beginAccess();
      if (!*v50 || (result = sub_1C3378B48(), !v24))
      {
        v51 = (_DWORD *)(v47
                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
        swift_beginAccess();
        if (!*v51 || (result = sub_1C3378B48(), !v24))
        {
          v52 = (_DWORD *)(v47
                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
          swift_beginAccess();
          if (!*v52 || (result = sub_1C3378B48(), !v24))
          {
            v53 = (_DWORD *)(v47
                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
            swift_beginAccess();
            if (!*v53 || (result = sub_1C3378B48(), !v24))
            {
              v54 = (_BYTE *)(v47
                            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
              swift_beginAccess();
              if (*v54 != 1 || (result = sub_1C3378AE8(), !v24))
              {
                v55 = (_BYTE *)(v47
                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
                swift_beginAccess();
                if (*v55 != 1 || (result = sub_1C3378AE8(), !v24))
                {
                  v56 = (_BYTE *)(v47
                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
                  swift_beginAccess();
                  if (*v56 != 1 || (result = sub_1C3378AE8(), !v24))
                  {
                    v57 = (_BYTE *)(v47
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
                    swift_beginAccess();
                    if (*v57 != 1 || (result = sub_1C3378AE8(), !v24))
                    {
                      v58 = (uint64_t *)(v47
                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
                      swift_beginAccess();
                      v59 = *v58;
                      v60 = v58[1];
                      v61 = HIBYTE(v60) & 0xF;
                      if ((v60 & 0x2000000000000000) == 0)
                        v61 = v59 & 0xFFFFFFFFFFFFLL;
                      if (v61)
                      {
                        swift_bridgeObjectRetain();
                        sub_1C3378B3C();
                        if (v24)
                          return swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      v62 = (_DWORD *)(v47
                                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
                      swift_beginAccess();
                      if (!*v62 || (result = sub_1C3378B48(), !v24))
                      {
                        v63 = (uint64_t *)(v47
                                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType);
                        swift_beginAccess();
                        if (!*v63
                          || (v64 = *((_BYTE *)v63 + 8),
                              v88 = *v63,
                              v89 = v64,
                              sub_1C3247D70(),
                              result = sub_1C3378AF4(),
                              !v24))
                        {
                          v65 = (uint64_t *)(v47
                                          + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
                          swift_beginAccess();
                          v66 = *v65;
                          v67 = v65[1];
                          v68 = HIBYTE(v67) & 0xF;
                          if ((v67 & 0x2000000000000000) == 0)
                            v68 = v66 & 0xFFFFFFFFFFFFLL;
                          if (v68)
                          {
                            swift_bridgeObjectRetain();
                            sub_1C3378B3C();
                            if (v24)
                              return swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                          }
                          v69 = v47
                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames;
                          swift_beginAccess();
                          if (!*(_QWORD *)(*(_QWORD *)v69 + 16)
                            || (swift_bridgeObjectRetain(), sub_1C3378B24(), result = swift_bridgeObjectRelease(), !v24))
                          {
                            v70 = v47
                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags;
                            swift_beginAccess();
                            if (!*(_QWORD *)(*(_QWORD *)v70 + 16)
                              || (swift_bridgeObjectRetain(), sub_1C3378B24(),
                                                              result = swift_bridgeObjectRelease(),
                                                              !v24))
                            {
                              v71 = v47
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences;
                              swift_beginAccess();
                              if (*(_QWORD *)(*(_QWORD *)v71 + 16))
                              {
                                sub_1C33788E4();
                                sub_1C33788D8();
                                swift_bridgeObjectRetain();
                                sub_1C3378AC4();
                                result = swift_bridgeObjectRelease();
                                v72 = v87;
                                if (v24)
                                  return result;
                              }
                              else
                              {
                                v72 = v87;
                              }
                              v73 = v72
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences;
                              swift_beginAccess();
                              if (*(_QWORD *)(*(_QWORD *)v73 + 16))
                              {
                                sub_1C33788E4();
                                swift_bridgeObjectRetain();
                                sub_1C3378AC4();
                                result = swift_bridgeObjectRelease();
                                v74 = v87;
                                if (v24)
                                  return result;
                              }
                              else
                              {
                                v74 = v87;
                              }
                              v75 = (_QWORD *)(v74
                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
                              swift_beginAccess();
                              if (*v75)
                              {
                                result = sub_1C3378B54();
                                v76 = v87;
                                if (v24)
                                  return result;
                              }
                              else
                              {
                                v76 = v87;
                              }
                              v77 = (_QWORD *)(v76
                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
                              swift_beginAccess();
                              if (*v77)
                              {
                                result = sub_1C3378B54();
                                v78 = v87;
                                if (v24)
                                  return result;
                              }
                              else
                              {
                                v78 = v87;
                              }
                              v79 = (uint64_t *)(v78
                                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
                              swift_beginAccess();
                              result = *v79;
                              if (*v79)
                                return sub_1C3378B54();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1C323F050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int *v73;
  int v74;
  _DWORD *v75;
  int *v76;
  int v77;
  _DWORD *v78;
  int *v79;
  int v80;
  _DWORD *v81;
  int *v82;
  int v83;
  _DWORD *v84;
  int *v85;
  int v86;
  _DWORD *v87;
  int *v88;
  int v89;
  _DWORD *v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  int v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  int *v107;
  int v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD **v118;
  _QWORD *v119;
  _QWORD **v120;
  _QWORD **v121;
  _QWORD *v122;
  _QWORD **v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  char v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;

  v152 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v149 = *(_QWORD *)(v152 - 8);
  MEMORY[0x1E0C80A78](v152);
  v147 = (uint64_t)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = __swift_instantiateConcreteTypeFromMangledName(qword_1EF8AF270);
  v5 = MEMORY[0x1E0C80A78](v153);
  v7 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v151 = (uint64_t)&v144 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  v10 = MEMORY[0x1E0C80A78](v9);
  v146 = (uint64_t)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v156 = (char *)&v144 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v148 = (uint64_t)&v144 - v15;
  MEMORY[0x1E0C80A78](v14);
  v154 = (uint64_t)&v144 - v16;
  v17 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v150 = (uint64_t)&v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF81A2B0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v144 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  v24 = MEMORY[0x1E0C80A78](v23);
  v155 = (uint64_t)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v144 - v26;
  swift_beginAccess();
  v158 = a1;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  if (v28 == *(_QWORD *)(a2 + 16) && v29 == *(_QWORD *)(a2 + 24)
    || (v30 = sub_1C3379184(), result = 0, (v30 & 1) != 0))
  {
    v145 = v7;
    v157 = a2;
    v32 = v158;
    v33 = v158
        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
    swift_beginAccess();
    sub_1C2FF6CFC(v33, (uint64_t)v27, &qword_1EF7DDB38);
    v34 = v157;
    v35 = v157
        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
    swift_beginAccess();
    v36 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_1C2FF6CFC((uint64_t)v27, (uint64_t)v22, &qword_1EF7DDB38);
    sub_1C2FF6CFC(v35, v36, &qword_1EF7DDB38);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (v37((uint64_t)v22, 1, v17) == 1)
    {
      swift_retain();
      swift_retain();
      sub_1C2FF9138((uint64_t)v27, &qword_1EF7DDB38);
      v38 = v32;
      if (v37(v36, 1, v17) == 1)
      {
        sub_1C2FF9138((uint64_t)v22, &qword_1EF7DDB38);
        v39 = (uint64_t)v156;
        goto LABEL_14;
      }
    }
    else
    {
      v40 = v155;
      sub_1C2FF6CFC((uint64_t)v22, v155, &qword_1EF7DDB38);
      if (v37(v36, 1, v17) != 1)
      {
        v43 = v150;
        sub_1C2FF6C38(v36, v150, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
        v38 = v158;
        swift_retain();
        swift_retain();
        v44 = sub_1C3147678(v40, v43, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1C3243040);
        sub_1C2FF6CC0(v43, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
        sub_1C2FF9138((uint64_t)v27, &qword_1EF7DDB38);
        v45 = v40;
        v39 = (uint64_t)v156;
        sub_1C2FF6CC0(v45, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
        sub_1C2FF9138((uint64_t)v22, &qword_1EF7DDB38);
        if ((v44 & 1) == 0)
          goto LABEL_11;
LABEL_14:
        v46 = (uint64_t *)(v38
                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
        swift_beginAccess();
        v47 = *v46;
        v48 = v46[1];
        v49 = (_QWORD *)(v34
                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
        swift_beginAccess();
        if ((v47 != *v49 || v48 != v49[1]) && (sub_1C3379184() & 1) == 0)
          goto LABEL_11;
        v50 = (uint64_t *)(v38
                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
        swift_beginAccess();
        v51 = *v50;
        v52 = v50[1];
        v53 = (_QWORD *)(v34
                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
        swift_beginAccess();
        if ((v51 != *v53 || v52 != v53[1]) && (sub_1C3379184() & 1) == 0)
          goto LABEL_11;
        v54 = v38
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
        swift_beginAccess();
        v55 = v154;
        sub_1C2FF6CFC(v54, v154, &qword_1EF7DE730);
        v56 = v34
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
        swift_beginAccess();
        v57 = v151;
        v58 = v151 + *(int *)(v153 + 48);
        sub_1C2FF6CFC(v55, v151, &qword_1EF7DE730);
        sub_1C2FF6CFC(v56, v58, &qword_1EF7DE730);
        v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
        v60 = v152;
        if (v59(v57, 1, v152) == 1)
        {
          sub_1C2FF9138(v55, &qword_1EF7DE730);
          v61 = v59(v58, 1, v60);
          v62 = (uint64_t)v145;
          if (v61 == 1)
          {
            sub_1C2FF9138(v57, &qword_1EF7DE730);
LABEL_27:
            v67 = v38
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
            swift_beginAccess();
            sub_1C2FF6CFC(v67, v39, &qword_1EF7DE730);
            v68 = v34
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
            swift_beginAccess();
            v69 = v62 + *(int *)(v153 + 48);
            sub_1C2FF6CFC(v39, v62, &qword_1EF7DE730);
            sub_1C2FF6CFC(v68, v69, &qword_1EF7DE730);
            if (v59(v62, 1, v60) == 1)
            {
              sub_1C2FF9138(v39, &qword_1EF7DE730);
              if (v59(v69, 1, v60) == 1)
              {
                sub_1C2FF9138(v62, &qword_1EF7DE730);
LABEL_34:
                v73 = (int *)(v38
                            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
                swift_beginAccess();
                v74 = *v73;
                v75 = (_DWORD *)(v34
                               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
                swift_beginAccess();
                if (v74 == *v75)
                {
                  v76 = (int *)(v38
                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
                  swift_beginAccess();
                  v77 = *v76;
                  v78 = (_DWORD *)(v34
                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
                  swift_beginAccess();
                  if (v77 == *v78)
                  {
                    v79 = (int *)(v38
                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
                    swift_beginAccess();
                    v80 = *v79;
                    v81 = (_DWORD *)(v34
                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
                    swift_beginAccess();
                    if (v80 == *v81)
                    {
                      v82 = (int *)(v38
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
                      swift_beginAccess();
                      v83 = *v82;
                      v84 = (_DWORD *)(v34
                                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
                      swift_beginAccess();
                      if (v83 == *v84)
                      {
                        v85 = (int *)(v38
                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
                        swift_beginAccess();
                        v86 = *v85;
                        v87 = (_DWORD *)(v34
                                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
                        swift_beginAccess();
                        if (v86 == *v87)
                        {
                          v88 = (int *)(v38
                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
                          swift_beginAccess();
                          v89 = *v88;
                          v90 = (_DWORD *)(v34
                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
                          swift_beginAccess();
                          if (v89 == *v90)
                          {
                            v91 = (unsigned __int8 *)(v38
                                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
                            swift_beginAccess();
                            v92 = *v91;
                            v93 = (unsigned __int8 *)(v34
                                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
                            swift_beginAccess();
                            if (v92 == *v93)
                            {
                              v94 = (unsigned __int8 *)(v38
                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
                              swift_beginAccess();
                              v95 = *v94;
                              v96 = (unsigned __int8 *)(v34
                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
                              swift_beginAccess();
                              if (v95 == *v96)
                              {
                                v97 = (unsigned __int8 *)(v38
                                                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
                                swift_beginAccess();
                                v98 = *v97;
                                v99 = (unsigned __int8 *)(v34
                                                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
                                swift_beginAccess();
                                if (v98 == *v99)
                                {
                                  v100 = (unsigned __int8 *)(v38
                                                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
                                  swift_beginAccess();
                                  v101 = *v100;
                                  v102 = (unsigned __int8 *)(v34
                                                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
                                  swift_beginAccess();
                                  if (v101 == *v102)
                                  {
                                    if ((v103 = (uint64_t *)(v158
                                                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale),
                                          swift_beginAccess(),
                                          v104 = *v103,
                                          v105 = v103[1],
                                          v106 = (_QWORD *)(v157
                                                          + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale),
                                          swift_beginAccess(),
                                          v104 == *v106)
                                      && v105 == v106[1]
                                      || (sub_1C3379184() & 1) != 0)
                                    {
                                      v107 = (int *)(v158
                                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
                                      swift_beginAccess();
                                      v108 = *v107;
                                      v109 = (_DWORD *)(v157
                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
                                      swift_beginAccess();
                                      if (v108 == *v109)
                                      {
                                        v110 = v158
                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
                                        swift_beginAccess();
                                        v111 = *(_QWORD *)v110;
                                        v112 = *(unsigned __int8 *)(v110 + 8);
                                        v113 = (uint64_t *)(v157
                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType);
                                        swift_beginAccess();
                                        if (sub_1C3055390(v111, v112, *v113))
                                        {
                                          if ((v114 = (uint64_t *)(v158
                                                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID),
                                                swift_beginAccess(),
                                                v115 = *v114,
                                                v116 = v114[1],
                                                v117 = (_QWORD *)(v157
                                                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID),
                                                swift_beginAccess(),
                                                v115 == *v117)
                                            && v116 == v117[1]
                                            || (sub_1C3379184() & 1) != 0)
                                          {
                                            v118 = (_QWORD **)(v158
                                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
                                            swift_beginAccess();
                                            v119 = *v118;
                                            v120 = (_QWORD **)(v157
                                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
                                            swift_beginAccess();
                                            if ((sub_1C30020E8(v119, *v120) & 1) != 0)
                                            {
                                              v121 = (_QWORD **)(v158
                                                               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
                                              swift_beginAccess();
                                              v122 = *v121;
                                              v123 = (_QWORD **)(v157
                                                               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
                                              swift_beginAccess();
                                              if ((sub_1C30020E8(v122, *v123) & 1) != 0)
                                              {
                                                v124 = (uint64_t *)(v158
                                                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
                                                swift_beginAccess();
                                                v125 = *v124;
                                                v126 = (uint64_t *)(v157
                                                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
                                                swift_beginAccess();
                                                v127 = *v126;
                                                swift_bridgeObjectRetain();
                                                swift_bridgeObjectRetain();
                                                v128 = sub_1C300B24C(v125, v127);
                                                swift_bridgeObjectRelease();
                                                swift_bridgeObjectRelease();
                                                if ((v128 & 1) != 0)
                                                {
                                                  v129 = (uint64_t *)(v158
                                                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
                                                  swift_beginAccess();
                                                  v130 = *v129;
                                                  v131 = (uint64_t *)(v157
                                                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
                                                  swift_beginAccess();
                                                  v132 = *v131;
                                                  swift_bridgeObjectRetain();
                                                  swift_bridgeObjectRetain();
                                                  v133 = sub_1C300B3E8(v130, v132);
                                                  swift_bridgeObjectRelease();
                                                  swift_bridgeObjectRelease();
                                                  if ((v133 & 1) != 0)
                                                  {
                                                    v134 = (uint64_t *)(v158
                                                                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
                                                    swift_beginAccess();
                                                    v135 = *v134;
                                                    v136 = (_QWORD *)(v157
                                                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
                                                    swift_beginAccess();
                                                    if (v135 == *v136)
                                                    {
                                                      v137 = (uint64_t *)(v158
                                                                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
                                                      swift_beginAccess();
                                                      v138 = *v137;
                                                      v139 = (_QWORD *)(v157
                                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
                                                      swift_beginAccess();
                                                      if (v138 == *v139)
                                                      {
                                                        v140 = (uint64_t *)(v158
                                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
                                                        swift_beginAccess();
                                                        v141 = *v140;
                                                        swift_release();
                                                        v142 = (uint64_t *)(v157
                                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
                                                        swift_beginAccess();
                                                        v143 = *v142;
                                                        swift_release();
                                                        return v141 == v143;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_11;
              }
            }
            else
            {
              v70 = v146;
              sub_1C2FF6CFC(v62, v146, &qword_1EF7DE730);
              if (v59(v69, 1, v60) != 1)
              {
                v71 = v147;
                sub_1C2FF6C38(v69, v147, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
                v72 = sub_1C3147678(v70, v71, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1C323F050);
                sub_1C2FF6CC0(v71, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
                sub_1C2FF9138(v39, &qword_1EF7DE730);
                sub_1C2FF6CC0(v70, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
                sub_1C2FF9138(v62, &qword_1EF7DE730);
                if ((v72 & 1) != 0)
                  goto LABEL_34;
LABEL_11:
                swift_release();
                swift_release();
                return 0;
              }
              sub_1C2FF9138(v39, &qword_1EF7DE730);
              sub_1C2FF6CC0(v70, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            }
            v41 = qword_1EF8AF270;
            v42 = v62;
LABEL_10:
            sub_1C2FF9138(v42, v41);
            goto LABEL_11;
          }
        }
        else
        {
          v63 = v148;
          sub_1C2FF6CFC(v57, v148, &qword_1EF7DE730);
          v64 = v59(v58, 1, v60);
          v62 = (uint64_t)v145;
          if (v64 != 1)
          {
            v65 = v147;
            sub_1C2FF6C38(v58, v147, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            v66 = sub_1C3147678(v63, v65, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1C323F050);
            sub_1C2FF6CC0(v65, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            sub_1C2FF9138(v154, &qword_1EF7DE730);
            sub_1C2FF6CC0(v63, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            v60 = v152;
            sub_1C2FF9138(v151, &qword_1EF7DE730);
            if ((v66 & 1) == 0)
              goto LABEL_11;
            goto LABEL_27;
          }
          sub_1C2FF9138(v154, &qword_1EF7DE730);
          sub_1C2FF6CC0(v63, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
        }
        v41 = qword_1EF8AF270;
        v42 = v57;
        goto LABEL_10;
      }
      swift_retain();
      swift_retain();
      sub_1C2FF9138((uint64_t)v27, &qword_1EF7DDB38);
      sub_1C2FF6CC0(v40, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    }
    v41 = &qword_1EF81A2B0;
    v42 = (uint64_t)v22;
    goto LABEL_10;
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &qword_1EF8AF0D8, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1C32400D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C313BEB4(a1, &qword_1EF7DE220, &qword_1EF7DE210, a2);
}

unint64_t sub_1C32400EC()
{
  return 0xD000000000000029;
}

uint64_t sub_1C3240108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MatchingSpan.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C324011C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MatchingSpan.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C3240130()
{
  sub_1C2FF6DE0(&qword_1EF8AF248, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  return sub_1C3378950();
}

uint64_t sub_1C3240180@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(qword_1EF80AA88, (uint64_t)qword_1EF8AF060, a1);
}

uint64_t sub_1C324019C()
{
  sub_1C2FF6DE0(&qword_1EF7DE6E8, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  return sub_1C3378AA0();
}

uint64_t sub_1C32401DC()
{
  sub_1C2FF6DE0(&qword_1EF7DE6E8, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  return sub_1C3378AAC();
}

unint64_t static Com_Apple_Siri_Product_Proto_Value.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t sub_1C324024C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF078);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF078);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1C338C4A0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 6;
  *(_QWORD *)v6 = "floatValue";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0DA38C8];
  v8 = sub_1C3378B78();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 7;
  *(_QWORD *)v10 = "doubleValue";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 8;
  *(_QWORD *)v12 = "intValue";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 9;
  *(_QWORD *)v14 = "longValue";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 10;
  *(_QWORD *)v16 = "stringValue";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 11;
  *(_QWORD *)v18 = "dateTimeValue";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 12;
  *(_QWORD *)v20 = "scalarValue";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 13;
  *(_QWORD *)v22 = "semanticTagValue";
  *((_QWORD *)v22 + 1) = 16;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 14;
  *(_QWORD *)v23 = "semanticValue";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_Value._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(qword_1EF80AA98, (uint64_t)qword_1EF8AF078, a1);
}

uint64_t sub_1C3240530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_1EF7DDA08 = v0;
  return result;
}

uint64_t sub_1C3240598()
{
  uint64_t v0;

  sub_1C2FF9138(v0+ OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, &qword_1EF7DD988);
  return swift_deallocClassInstance();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    v13 = swift_allocObject();
    v25 = v4;
    v14 = v13;
    v24 = a1;
    v15 = a2;
    v16 = a3;
    v17 = v13
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v12
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C2FF6CFC(v19, (uint64_t)v10, &qword_1EF7DD988);
    swift_beginAccess();
    v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1C2FF6D84((uint64_t)v10, v20, &qword_1EF7DD988);
    swift_endAccess();
    *(_QWORD *)(v3 + v11) = v14;
    swift_release();
  }
  v21 = swift_retain();
  sub_1C3240778(v21, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1C3240778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  result = sub_1C3378980();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 6:
          sub_1C32408F4(a1);
          break;
        case 7:
          sub_1C3240B00(a1);
          break;
        case 8:
          sub_1C3240D0C(a1);
          break;
        case 9:
          sub_1C3240F18(a1);
          break;
        case 10:
          v11 = a1;
          v12 = a2;
          v13 = a3;
          v14 = a4;
          v15 = 4;
          goto LABEL_5;
        case 11:
          sub_1C3241124(a1, a2, a3, a4);
          break;
        case 12:
          sub_1C32415B8(a1, a2, a3, a4);
          break;
        case 13:
          v11 = a1;
          v12 = a2;
          v13 = a3;
          v14 = a4;
          v15 = 7;
LABEL_5:
          sub_1C3241A4C(v11, v12, v13, v14, v15);
          break;
        case 14:
          sub_1C3241C60(a1, a2, a3, a4);
          break;
        default:
          break;
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t sub_1C32408F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  char v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v20 = (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v19 = (_DWORD *)((char *)&v17 - v7);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v9, &qword_1EF7DD988);
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v18 = *(_QWORD *)(v11 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v11);
  sub_1C2FF9138((uint64_t)v9, &qword_1EF7DD988);
  if (v12 == 1 || (result = sub_1C337898C(), !v1))
  {
    v21 = 0;
    v22 = 1;
    result = sub_1C33789BC();
    if (!v1 && (v22 & 1) == 0)
    {
      v14 = v19;
      *v19 = v21;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v11);
      v15 = (uint64_t)v14;
      v16 = v20;
      sub_1C2FF6D40(v15, v20, &qword_1EF7DD988);
      swift_beginAccess();
      sub_1C2FF6D84(v16, v10, &qword_1EF7DD988);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1C3240B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v21 = (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v18 = (uint64_t *)((char *)&v17 - v7);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v9, &qword_1EF7DD988);
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v17 = *(_QWORD *)(v11 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v11);
  sub_1C2FF9138((uint64_t)v9, &qword_1EF7DD988);
  if (v12 == 1 || (result = sub_1C337898C(), !v1))
  {
    v19 = 0;
    v20 = 1;
    result = sub_1C3378A10();
    if (!v1 && (v20 & 1) == 0)
    {
      v14 = v18;
      *v18 = v19;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v11);
      v15 = (uint64_t)v14;
      v16 = v21;
      sub_1C2FF6D40(v15, v21, &qword_1EF7DD988);
      swift_beginAccess();
      sub_1C2FF6D84(v16, v10, &qword_1EF7DD988);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1C3240D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  char v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v20 = (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v19 = (_DWORD *)((char *)&v17 - v7);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v9, &qword_1EF7DD988);
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v18 = *(_QWORD *)(v11 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v11);
  sub_1C2FF9138((uint64_t)v9, &qword_1EF7DD988);
  if (v12 == 1 || (result = sub_1C337898C(), !v1))
  {
    v21 = 0;
    v22 = 1;
    result = sub_1C33789C8();
    if (!v1 && (v22 & 1) == 0)
    {
      v14 = v19;
      *v19 = v21;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v11);
      v15 = (uint64_t)v14;
      v16 = v20;
      sub_1C2FF6D40(v15, v20, &qword_1EF7DD988);
      swift_beginAccess();
      sub_1C2FF6D84(v16, v10, &qword_1EF7DD988);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1C3240F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v4 = MEMORY[0x1E0C80A78](v3);
  v21 = (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v18 = (uint64_t *)((char *)&v17 - v7);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v10, (uint64_t)v9, &qword_1EF7DD988);
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v17 = *(_QWORD *)(v11 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v11);
  sub_1C2FF9138((uint64_t)v9, &qword_1EF7DD988);
  if (v12 == 1 || (result = sub_1C337898C(), !v1))
  {
    v19 = 0;
    v20 = 1;
    result = sub_1C33789E0();
    if (!v1 && (v20 & 1) == 0)
    {
      v14 = v18;
      *v18 = v19;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v11);
      v15 = (uint64_t)v14;
      v16 = v21;
      sub_1C2FF6D40(v15, v21, &qword_1EF7DD988);
      swift_beginAccess();
      sub_1C2FF6D84(v16, v10, &qword_1EF7DD988);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1C3241124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v57 = a4;
  v60 = a3;
  v58 = a1;
  v59 = a2;
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v51 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v11 = MEMORY[0x1E0C80A78](v10);
  v52 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v50 = (uint64_t)&v46 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - v15;
  v17 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v46 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF258);
  v25 = MEMORY[0x1E0C80A78](v24);
  v53 = (uint64_t)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v46 - v27;
  v54 = v5;
  v55 = v4;
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v29((char *)&v46 - v27, 1, 1, v4);
  v30 = v58
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v30, (uint64_t)v16, &qword_1EF7DD988);
  v49 = v18;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v58 = v17;
  if (v31(v16, 1, v17) == 1)
  {
    v48 = v30;
    sub_1C2FF9138((uint64_t)v16, &qword_1EF7DD988);
    v32 = v56;
    v33 = v55;
  }
  else
  {
    v47 = v29;
    sub_1C2FF6C38((uint64_t)v16, (uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    v36 = v56;
    sub_1C337898C();
    v32 = v36;
    if (v36)
    {
      sub_1C2FF6CC0((uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      goto LABEL_8;
    }
    v48 = v30;
    sub_1C2FF6C38((uint64_t)v23, (uint64_t)v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v33 = v55;
    if (EnumCaseMultiPayload == 5)
    {
      sub_1C2FF9138((uint64_t)v28, &qword_1EF8AF258);
      sub_1C2FF6C38((uint64_t)v21, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
      sub_1C2FF6C38((uint64_t)v9, (uint64_t)v28, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
      v47(v28, 0, 1, v33);
    }
    else
    {
      sub_1C2FF6CC0((uint64_t)v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    }
  }
  sub_1C2FF6DE0(&qword_1EF81A7A0, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_DateTime);
  sub_1C3378A70();
  if (v32)
  {
LABEL_8:
    v35 = (uint64_t)v28;
    return sub_1C2FF9138(v35, &qword_1EF8AF258);
  }
  v34 = v53;
  sub_1C2FF6D40((uint64_t)v28, v53, &qword_1EF8AF258);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v34, 1, v33) != 1)
  {
    v39 = v51;
    sub_1C2FF6C38(v34, v51, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    v40 = v39;
    v41 = v50;
    sub_1C2FF6C38(v40, v50, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    v42 = v58;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v41, 0, 1, v42);
    v43 = v41;
    v44 = v52;
    sub_1C2FF6D40(v43, v52, &qword_1EF7DD988);
    v45 = v48;
    swift_beginAccess();
    sub_1C2FF6D84(v44, v45, &qword_1EF7DD988);
    return swift_endAccess();
  }
  v35 = v34;
  return sub_1C2FF9138(v35, &qword_1EF8AF258);
}

uint64_t sub_1C32415B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v57 = a4;
  v60 = a3;
  v58 = a1;
  v59 = a2;
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v51 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v11 = MEMORY[0x1E0C80A78](v10);
  v52 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v50 = (uint64_t)&v46 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - v15;
  v17 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v46 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF260);
  v25 = MEMORY[0x1E0C80A78](v24);
  v53 = (uint64_t)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v46 - v27;
  v54 = v5;
  v55 = v4;
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v29((char *)&v46 - v27, 1, 1, v4);
  v30 = v58
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v30, (uint64_t)v16, &qword_1EF7DD988);
  v49 = v18;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v58 = v17;
  if (v31(v16, 1, v17) == 1)
  {
    v48 = v30;
    sub_1C2FF9138((uint64_t)v16, &qword_1EF7DD988);
    v32 = v56;
    v33 = v55;
  }
  else
  {
    v47 = v29;
    sub_1C2FF6C38((uint64_t)v16, (uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    v36 = v56;
    sub_1C337898C();
    v32 = v36;
    if (v36)
    {
      sub_1C2FF6CC0((uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      goto LABEL_8;
    }
    v48 = v30;
    sub_1C2FF6C38((uint64_t)v23, (uint64_t)v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v33 = v55;
    if (EnumCaseMultiPayload == 6)
    {
      sub_1C2FF9138((uint64_t)v28, &qword_1EF8AF260);
      sub_1C2FF6C38((uint64_t)v21, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
      sub_1C2FF6C38((uint64_t)v9, (uint64_t)v28, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
      v47(v28, 0, 1, v33);
    }
    else
    {
      sub_1C2FF6CC0((uint64_t)v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    }
  }
  sub_1C2FF6DE0(&qword_1EF8AF120, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
  sub_1C3378A70();
  if (v32)
  {
LABEL_8:
    v35 = (uint64_t)v28;
    return sub_1C2FF9138(v35, &qword_1EF8AF260);
  }
  v34 = v53;
  sub_1C2FF6D40((uint64_t)v28, v53, &qword_1EF8AF260);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v34, 1, v33) != 1)
  {
    v39 = v51;
    sub_1C2FF6C38(v34, v51, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    v40 = v39;
    v41 = v50;
    sub_1C2FF6C38(v40, v50, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    v42 = v58;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v41, 0, 1, v42);
    v43 = v41;
    v44 = v52;
    sub_1C2FF6D40(v43, v52, &qword_1EF7DD988);
    v45 = v48;
    swift_beginAccess();
    sub_1C2FF6D84(v44, v45, &qword_1EF7DD988);
    return swift_endAccess();
  }
  v35 = v34;
  return sub_1C2FF9138(v35, &qword_1EF8AF260);
}

uint64_t sub_1C3241A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a5;
  v28 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v8 = MEMORY[0x1E0C80A78](v7);
  v25 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v23 = (uint64_t *)((char *)&v22 - v11);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - v12;
  v14 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v14, (uint64_t)v13, &qword_1EF7DD988);
  v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  sub_1C2FF9138((uint64_t)v13, &qword_1EF7DD988);
  if (v17 == 1 || (result = sub_1C337898C(), !v5))
  {
    v26 = 0;
    v27 = 0;
    sub_1C3378A28();
    result = v27;
    if (v5)
    {
      return swift_bridgeObjectRelease();
    }
    else if (v27)
    {
      v19 = v23;
      *v23 = v26;
      v19[1] = result;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      v20 = (uint64_t)v19;
      v21 = v25;
      sub_1C2FF6D40(v20, v25, &qword_1EF7DD988);
      swift_beginAccess();
      sub_1C2FF6D84(v21, v14, &qword_1EF7DD988);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1C3241C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v57 = a4;
  v60 = a3;
  v58 = a1;
  v59 = a2;
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v51 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v11 = MEMORY[0x1E0C80A78](v10);
  v52 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v50 = (uint64_t)&v46 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - v15;
  v17 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v46 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v53 = (uint64_t)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v46 - v27;
  v54 = v5;
  v55 = v4;
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v29((char *)&v46 - v27, 1, 1, v4);
  v30 = v58
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v30, (uint64_t)v16, &qword_1EF7DD988);
  v49 = v18;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v58 = v17;
  if (v31(v16, 1, v17) == 1)
  {
    v48 = v30;
    sub_1C2FF9138((uint64_t)v16, &qword_1EF7DD988);
    v32 = v56;
    v33 = v55;
  }
  else
  {
    v47 = v29;
    sub_1C2FF6C38((uint64_t)v16, (uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    v36 = v56;
    sub_1C337898C();
    v32 = v36;
    if (v36)
    {
      sub_1C2FF6CC0((uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      goto LABEL_8;
    }
    v48 = v30;
    sub_1C2FF6C38((uint64_t)v23, (uint64_t)v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v33 = v55;
    if (EnumCaseMultiPayload == 8)
    {
      sub_1C2FF9138((uint64_t)v28, &qword_1ED7CDFF0);
      sub_1C2FF6C38((uint64_t)v21, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      sub_1C2FF6C38((uint64_t)v9, (uint64_t)v28, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      v47(v28, 0, 1, v33);
    }
    else
    {
      sub_1C2FF6CC0((uint64_t)v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    }
  }
  sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C3378A70();
  if (v32)
  {
LABEL_8:
    v35 = (uint64_t)v28;
    return sub_1C2FF9138(v35, &qword_1ED7CDFF0);
  }
  v34 = v53;
  sub_1C2FF6D40((uint64_t)v28, v53, &qword_1ED7CDFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v34, 1, v33) != 1)
  {
    v39 = v51;
    sub_1C2FF6C38(v34, v51, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    v40 = v39;
    v41 = v50;
    sub_1C2FF6C38(v40, v50, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    v42 = v58;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v41, 0, 1, v42);
    v43 = v41;
    v44 = v52;
    sub_1C2FF6D40(v43, v52, &qword_1EF7DD988);
    v45 = v48;
    swift_beginAccess();
    sub_1C2FF6D84(v44, v45, &qword_1EF7DD988);
    return swift_endAccess();
  }
  v35 = v34;
  return sub_1C2FF9138(v35, &qword_1ED7CDFF0);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C31373E4(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3242118);
}

uint64_t sub_1C3242118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6);
  if ((_DWORD)result != 1)
  {
    v8 = (char *)&loc_1C3242208 + 4 * byte_1C33BA2F4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1C3242358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    return sub_1C3378B00();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C324248C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    return sub_1C3378B30();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C32425C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    return sub_1C3378B0C();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C32426FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    return sub_1C3378B18();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C3242834(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 4)
  {
    sub_1C3378B3C();
    return swift_bridgeObjectRelease();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C3242980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v8, (uint64_t)v4, &qword_1EF7DD988);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 5)
  {
    sub_1C2FF6C38((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    sub_1C2FF6DE0(&qword_1EF81A7A0, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_DateTime);
    sub_1C3378B6C();
    return sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C3242B44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v8, (uint64_t)v4, &qword_1EF7DD988);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 6)
  {
    sub_1C2FF6C38((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    sub_1C2FF6DE0(&qword_1EF8AF120, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
    sub_1C3378B6C();
    return sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C3242D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v5, (uint64_t)v4, &qword_1EF7DD988);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 7)
  {
    sub_1C3378B3C();
    return swift_bridgeObjectRelease();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C3242E54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v8, (uint64_t)v4, &qword_1EF7DD988);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DD988);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 8)
  {
    sub_1C2FF6C38((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C3378B6C();
    return sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t static Com_Apple_Siri_Product_Proto_Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1C3147678(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1C3243040) & 1;
}

BOOL sub_1C3243040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v25 = (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF250);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DD988);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v24 - v14;
  v16 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v16, (uint64_t)v15, &qword_1EF7DD988);
  v17 = a2
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1C2FF6CFC((uint64_t)v15, (uint64_t)v9, &qword_1EF7DD988);
  sub_1C2FF6CFC(v17, v18, &qword_1EF7DD988);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v9, 1, v4) == 1)
  {
    sub_1C2FF9138((uint64_t)v15, &qword_1EF7DD988);
    if (v19(v18, 1, v4) == 1)
    {
      sub_1C2FF9138((uint64_t)v9, &qword_1EF7DD988);
      return 1;
    }
    goto LABEL_6;
  }
  sub_1C2FF6CFC((uint64_t)v9, (uint64_t)v13, &qword_1EF7DD988);
  if (v19(v18, 1, v4) == 1)
  {
    sub_1C2FF9138((uint64_t)v15, &qword_1EF7DD988);
    sub_1C2FF6CC0((uint64_t)v13, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
LABEL_6:
    sub_1C2FF9138((uint64_t)v9, &qword_1EF8AF250);
    return 0;
  }
  v20 = v25;
  sub_1C2FF6C38(v18, v25, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  _s12SiriOntology010Com_Apple_A20_Product_Proto_ValueV06OneOf_G0O2eeoiySbAE_AEtFZ_0((uint64_t)v13, v20);
  v22 = v21;
  sub_1C2FF6CC0(v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  sub_1C2FF9138((uint64_t)v15, &qword_1EF7DD988);
  sub_1C2FF6CC0((uint64_t)v13, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  sub_1C2FF9138((uint64_t)v9, &qword_1EF7DD988);
  return (v22 & 1) != 0;
}

uint64_t Com_Apple_Siri_Product_Proto_Value.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &qword_1EF8AF0E0, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1C3243314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C313BEB4(a1, &qword_1EF7DDA10, &qword_1EF7DDA08, a2);
}

unint64_t sub_1C3243330()
{
  return 0xD000000000000022;
}

uint64_t sub_1C324334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_Value.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C3243360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_Value.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C3243374()
{
  sub_1C2FF6DE0(&qword_1EF8AF240, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
  return sub_1C3378950();
}

uint64_t sub_1C32433C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(qword_1EF80AA98, (uint64_t)qword_1EF8AF078, a1);
}

uint64_t sub_1C32433E0()
{
  sub_1C2FF6DE0(&qword_1EF7DDAF0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
  return sub_1C3378AA0();
}

uint64_t sub_1C3243420()
{
  sub_1C2FF6DE0(&qword_1EF7DDAF0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
  return sub_1C3378AAC();
}

uint64_t sub_1C3243470(uint64_t a1, uint64_t a2)
{
  return sub_1C3147678(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1C3243040) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_ScalarValue.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t sub_1C32434B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF090);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF090);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3388730;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "value";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38C8];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "unit";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_ScalarValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAA8, (uint64_t)qword_1EF8AF090, a1);
}

uint64_t sub_1C3243620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  qword_1EF8AF0A8 = v0;
  return result;
}

uint64_t sub_1C32436B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v13, (uint64_t)v8, &qword_1EF7DDB38);
  swift_beginAccess();
  sub_1C2FF6D84((uint64_t)v8, v9, &qword_1EF7DDB38);
  swift_endAccess();
  v14 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C2FF6CFC(v14, (uint64_t)v5, &qword_1ED7CDFF0);
  swift_release();
  swift_beginAccess();
  sub_1C2FF6D84((uint64_t)v5, v11, &qword_1ED7CDFF0);
  swift_endAccess();
  return v1;
}

uint64_t sub_1C3243890()
{
  uint64_t v0;

  sub_1C2FF9138(v0+ OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, &qword_1EF7DDB38);
  sub_1C2FF9138(v0+ OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit, &qword_1ED7CDFF0);
  return swift_deallocClassInstance();
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = sub_1C32436B8(v8);
    swift_release();
  }
  v9 = swift_retain();
  sub_1C32439A8(v9, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1C32439A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;

  result = sub_1C3378980();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1C2FF32A4(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, &qword_1EF819318, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
      }
      else if (result == 1)
      {
        sub_1C2FF32A4(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &qword_1EF7DDAF0, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C31373E4(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3243AD8);
}

uint64_t sub_1C3243AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a4;
  v26 = a2;
  v27 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  v9 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v23 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v18 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v18, (uint64_t)v13, &qword_1EF7DDB38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1C2FF9138((uint64_t)v13, &qword_1EF7DDB38);
  }
  else
  {
    sub_1C2FF6C38((uint64_t)v13, (uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    sub_1C2FF6DE0(&qword_1EF7DDAF0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
    sub_1C3378B6C();
    result = sub_1C2FF6CC0((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    if (v4)
      return result;
  }
  v20 = v24
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C2FF6CFC(v20, (uint64_t)v8, &qword_1ED7CDFF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v25) == 1)
    return sub_1C2FF9138((uint64_t)v8, &qword_1ED7CDFF0);
  v21 = v23;
  sub_1C2FF6C38((uint64_t)v8, v23, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C3378B6C();
  return sub_1C2FF6CC0(v21, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

BOOL sub_1C3243DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a2;
  v47 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v41 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF819460);
  MEMORY[0x1E0C80A78](v44);
  v48 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v42 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v46 = (uint64_t)&v41 - v8;
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v43 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF81A2B0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v41 - v19;
  v21 = a1;
  v22 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C2FF6CFC(v22, (uint64_t)v20, &qword_1EF7DDB38);
  v23 = v49;
  v24 = v49
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  v25 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_1C2FF6CFC((uint64_t)v20, (uint64_t)v14, &qword_1EF7DDB38);
  sub_1C2FF6CFC(v24, v25, &qword_1EF7DDB38);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v14, 1, v9) != 1)
  {
    sub_1C2FF6CFC((uint64_t)v14, (uint64_t)v18, &qword_1EF7DDB38);
    if (v26(v25, 1, v9) != 1)
    {
      v27 = v25;
      v28 = v43;
      sub_1C2FF6C38(v27, v43, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
      swift_retain();
      swift_retain();
      v29 = sub_1C3147678((uint64_t)v18, v28, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1C3243040);
      sub_1C2FF6CC0(v28, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
      sub_1C2FF9138((uint64_t)v20, &qword_1EF7DDB38);
      sub_1C2FF6CC0((uint64_t)v18, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
      sub_1C2FF9138((uint64_t)v14, &qword_1EF7DDB38);
      if ((v29 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_1C2FF9138((uint64_t)v20, &qword_1EF7DDB38);
    sub_1C2FF6CC0((uint64_t)v18, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
LABEL_6:
    sub_1C2FF9138((uint64_t)v14, &qword_1EF81A2B0);
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  sub_1C2FF9138((uint64_t)v20, &qword_1EF7DDB38);
  if (v26(v25, 1, v9) != 1)
    goto LABEL_6;
  sub_1C2FF9138((uint64_t)v14, &qword_1EF7DDB38);
LABEL_9:
  v30 = v21
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  v31 = v46;
  sub_1C2FF6CFC(v30, v46, &qword_1ED7CDFF0);
  v32 = v23
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  v33 = v48;
  v34 = v48 + *(int *)(v44 + 48);
  sub_1C2FF6CFC(v31, v48, &qword_1ED7CDFF0);
  sub_1C2FF6CFC(v32, v34, &qword_1ED7CDFF0);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  v36 = v47;
  if (v35(v33, 1, v47) == 1)
  {
    swift_release();
    swift_release();
    sub_1C2FF9138(v31, &qword_1ED7CDFF0);
    if (v35(v34, 1, v36) == 1)
    {
      sub_1C2FF9138(v33, &qword_1ED7CDFF0);
      return 1;
    }
    goto LABEL_14;
  }
  v37 = v42;
  sub_1C2FF6CFC(v33, v42, &qword_1ED7CDFF0);
  if (v35(v34, 1, v36) == 1)
  {
    swift_release();
    swift_release();
    sub_1C2FF9138(v31, &qword_1ED7CDFF0);
    sub_1C2FF6CC0(v37, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
LABEL_14:
    sub_1C2FF9138(v33, &qword_1EF819460);
    return 0;
  }
  v39 = v41;
  sub_1C2FF6C38(v34, v41, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  v40 = _s12SiriOntology010Com_Apple_A28_Product_Proto_SemanticValueV2eeoiySbAC_ACtFZ_0(v37, v39);
  swift_release();
  swift_release();
  sub_1C2FF6CC0(v39, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C2FF9138(v31, &qword_1ED7CDFF0);
  sub_1C2FF6CC0(v37, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C2FF9138(v33, &qword_1ED7CDFF0);
  return (v40 & 1) != 0;
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &qword_1EF8AF0E8, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1C324439C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C313BEB4(a1, &qword_1EF80AAB0, &qword_1EF8AF0A8, a2);
}

unint64_t sub_1C32443B8()
{
  return 0xD000000000000028;
}

uint64_t sub_1C32443D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_ScalarValue.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C32443E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_ScalarValue.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C32443FC()
{
  sub_1C2FF6DE0(&qword_1EF8AF238, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
  return sub_1C3378950();
}

uint64_t sub_1C324444C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAA8, (uint64_t)qword_1EF8AF090, a1);
}

uint64_t sub_1C3244468()
{
  sub_1C2FF6DE0(&qword_1EF8AF120, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
  return sub_1C3378AA0();
}

uint64_t sub_1C32444A8()
{
  sub_1C2FF6DE0(&qword_1EF8AF120, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
  return sub_1C3378AAC();
}

uint64_t sub_1C32444F8(uint64_t a1, uint64_t a2)
{
  return sub_1C3147678(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(uint64_t, uint64_t))sub_1C3243DC0) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_SemanticValue.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1C324453C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF0B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF0B0);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338BE60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ontologyNodePojoClassName";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38C8];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "serializedValue";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "semanticValueClassName";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tags";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_SemanticValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(qword_1EF80AAB8, (uint64_t)qword_1EF8AF0B0, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C3378980();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          sub_1C3378A34();
          break;
        case 4:
          sub_1C33789F8();
          break;
        default:
          break;
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_1C3378B3C(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = sub_1C3378B3C(), !v1))
    {
      v7 = v0[5];
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = sub_1C3378B3C(), !v1))
      {
        if (!*(_QWORD *)(v0[6] + 16) || (result = sub_1C3378B24(), !v1))
        {
          type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
          return sub_1C33788FC();
        }
      }
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, &qword_1EF8AF0F0, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1C3244934@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E0DEE9D8];
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C324496C()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1C3244988()
{
  return Com_Apple_Siri_Product_Proto_SemanticValue.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C324499C()
{
  return Com_Apple_Siri_Product_Proto_SemanticValue.traverse<A>(visitor:)();
}

uint64_t sub_1C32449B0()
{
  sub_1C2FF6DE0(&qword_1EF8AF230, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1C3378950();
}

uint64_t sub_1C3244A00@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(qword_1EF80AAB8, (uint64_t)qword_1EF8AF0B0, a1);
}

uint64_t sub_1C3244A1C()
{
  sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1C3378AA0();
}

uint64_t sub_1C3244A5C()
{
  sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1C3378AAC();
}

uint64_t _s12SiriOntology010Com_Apple_A28_Product_Proto_SemanticValueV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_1C3378914();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (sub_1C3379184() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (sub_1C3379184() & 1) != 0))
    {
      if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
        || (v12 = 0, (sub_1C3379184() & 1) != 0))
      {
        if ((sub_1C30020E8(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48)) & 1) != 0)
        {
          v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
          v15 = a1 + *(int *)(v14 + 32);
          v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v16(v10, v15, v4);
          v16(v8, a2 + *(int *)(v14 + 32), v4);
          sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
          v12 = sub_1C3378BD8();
          v17 = *(void (**)(char *, uint64_t))(v5 + 8);
          v17(v8, v4);
          v17(v10, v4);
        }
        else
        {
          v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_1C3244C54(uint64_t a1, uint64_t a2)
{
  return sub_1C3147678(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1C323F050);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_Value(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DDB00);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DE0B0);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(uint64_t a1)
{
  return sub_1C2FE8350(a1, (uint64_t *)&unk_1EF7DDA20);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DD950);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF8AF168);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(uint64_t a1)
{
  return sub_1C2FE8350(a1, (uint64_t *)&unk_1EF7DE2D8);
}

void _s12SiriOntology010Com_Apple_A20_Product_Proto_ValueV06OneOf_G0O2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1E0C80A78](v2);
  v25[2] = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  MEMORY[0x1E0C80A78](v4);
  v25[1] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  MEMORY[0x1E0C80A78](v6);
  v25[0] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v25[5] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v12 = MEMORY[0x1E0C80A78](v11);
  v25[4] = (char *)v25 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v25[3] = (char *)v25 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF268);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v25 + *(int *)(v21 + 48) - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2FF6C7C(v26, (uint64_t)v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  sub_1C2FF6C7C(v27, (uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  v24 = (char *)sub_1C3244F60 + 4 * byte_1C33BA301[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_1C3244F60()
{
  uint64_t v0;
  float *v1;
  float *v2;
  BOOL v3;

  sub_1C2FF6C7C(v0, (uint64_t)v2, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1C2FF9138(v0, &qword_1EF8AF268);
    return 0;
  }
  else
  {
    v3 = *v2 == *v1;
    sub_1C2FF6CC0(v0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return v3;
}

uint64_t sub_1C32452EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _QWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE730);
  MEMORY[0x1E0C80A78](v3);
  v97 = (uint64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DDB38);
  MEMORY[0x1E0C80A78](v5);
  v93 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v7 = v1
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  v92 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  v10 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v11 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  v94 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  v95 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  v13();
  v96 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start) = 0;
  v98 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end) = 0;
  v99 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix) = 0;
  v100 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix) = 0;
  v101 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence) = 0;
  v102 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence) = 0;
  v103 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit) = 0;
  v104 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch) = 0;
  v105 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch) = 0;
  v106 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch) = 0;
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  v107 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  *v14 = 0;
  v14[1] = 0xE000000000000000;
  v108 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords) = 0;
  v15 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  v109 = v1
       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  v110 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  *v16 = 0;
  v16[1] = 0xE000000000000000;
  v111 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames) = MEMORY[0x1E0DEE9D8];
  v112 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags) = v17;
  v18 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  v113 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  *v18 = sub_1C302C204(v17);
  v19 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  v114 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  *v19 = sub_1C302C314(v17);
  v115 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata) = 0;
  v116 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime) = 0;
  v117 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime) = 0;
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v21;
  *(_QWORD *)(v1 + 24) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  v23 = v22;
  v24 = v93;
  sub_1C2FF6CFC(v23, v93, &qword_1EF7DDB38);
  v25 = v92;
  swift_beginAccess();
  sub_1C2FF6D84(v24, v25, &qword_1EF7DDB38);
  swift_endAccess();
  v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  swift_beginAccess();
  v28 = *v26;
  v27 = v26[1];
  swift_beginAccess();
  *v9 = v28;
  v9[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  swift_beginAccess();
  v31 = *v29;
  v30 = v29[1];
  swift_beginAccess();
  *v10 = v31;
  v10[1] = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = a1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  swift_beginAccess();
  v33 = v97;
  sub_1C2FF6CFC(v32, v97, &qword_1EF7DE730);
  v34 = v94;
  swift_beginAccess();
  sub_1C2FF6D84(v33, v34, &qword_1EF7DE730);
  swift_endAccess();
  v35 = a1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  swift_beginAccess();
  sub_1C2FF6CFC(v35, v33, &qword_1EF7DE730);
  v36 = v95;
  swift_beginAccess();
  sub_1C2FF6D84(v33, v36, &qword_1EF7DE730);
  swift_endAccess();
  v37 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  swift_beginAccess();
  LODWORD(v37) = *v37;
  v38 = v96;
  swift_beginAccess();
  *v38 = (_DWORD)v37;
  v39 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
  swift_beginAccess();
  LODWORD(v39) = *v39;
  v40 = v98;
  swift_beginAccess();
  *v40 = (_DWORD)v39;
  v41 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
  swift_beginAccess();
  LODWORD(v41) = *v41;
  v42 = v99;
  swift_beginAccess();
  *v42 = (_DWORD)v41;
  v43 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
  swift_beginAccess();
  LODWORD(v43) = *v43;
  v44 = v100;
  swift_beginAccess();
  *v44 = (_DWORD)v43;
  v45 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
  swift_beginAccess();
  LODWORD(v45) = *v45;
  v46 = v101;
  swift_beginAccess();
  *v46 = (_DWORD)v45;
  v47 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
  swift_beginAccess();
  LODWORD(v47) = *v47;
  v48 = v102;
  swift_beginAccess();
  *v48 = (_DWORD)v47;
  v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
  swift_beginAccess();
  LOBYTE(v49) = *v49;
  v50 = v103;
  swift_beginAccess();
  *v50 = (_BYTE)v49;
  v51 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
  swift_beginAccess();
  LOBYTE(v51) = *v51;
  v52 = v104;
  swift_beginAccess();
  *v52 = (_BYTE)v51;
  v53 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
  swift_beginAccess();
  LOBYTE(v53) = *v53;
  v54 = v105;
  swift_beginAccess();
  *v54 = (_BYTE)v53;
  v55 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
  swift_beginAccess();
  LOBYTE(v55) = *v55;
  v56 = v106;
  swift_beginAccess();
  *v56 = (_BYTE)v55;
  v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  swift_beginAccess();
  v59 = *v57;
  v58 = v57[1];
  v60 = v107;
  swift_beginAccess();
  *v60 = v59;
  v60[1] = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
  swift_beginAccess();
  LODWORD(v61) = *v61;
  v62 = v108;
  swift_beginAccess();
  *v62 = (_DWORD)v61;
  v63 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType);
  swift_beginAccess();
  v64 = *v63;
  LOBYTE(v63) = *((_BYTE *)v63 + 8);
  v65 = v109;
  swift_beginAccess();
  *(_QWORD *)v65 = v64;
  *(_BYTE *)(v65 + 8) = (_BYTE)v63;
  v66 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  swift_beginAccess();
  v68 = *v66;
  v67 = v66[1];
  v69 = v110;
  swift_beginAccess();
  *v69 = v68;
  v69[1] = v67;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
  swift_beginAccess();
  v71 = *v70;
  v72 = v111;
  swift_beginAccess();
  *v72 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
  swift_beginAccess();
  v74 = *v73;
  v75 = v112;
  swift_beginAccess();
  *v75 = v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  swift_beginAccess();
  v77 = *v76;
  v78 = v113;
  swift_beginAccess();
  *v78 = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  swift_beginAccess();
  v80 = *v79;
  v81 = v114;
  swift_beginAccess();
  *v81 = v80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v82 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
  swift_beginAccess();
  v83 = *v82;
  v84 = v115;
  swift_beginAccess();
  *v84 = v83;
  v85 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
  swift_beginAccess();
  v86 = *v85;
  v87 = v116;
  swift_beginAccess();
  *v87 = v86;
  v88 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
  swift_beginAccess();
  v89 = *v88;
  v90 = v117;
  swift_beginAccess();
  *v90 = v89;
  return v1;
}

unint64_t sub_1C3245E18()
{
  unint64_t result;

  result = qword_1EF7DDFD0;
  if (!qword_1EF7DDFD0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchType, &type metadata for Com_Apple_Siri_Product_Proto_MatchType);
    atomic_store(result, (unint64_t *)&qword_1EF7DDFD0);
  }
  return result;
}

unint64_t sub_1C3245E60()
{
  unint64_t result;

  result = qword_1EF7DDFE0;
  if (!qword_1EF7DDFE0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchType, &type metadata for Com_Apple_Siri_Product_Proto_MatchType);
    atomic_store(result, (unint64_t *)&qword_1EF7DDFE0);
  }
  return result;
}

unint64_t sub_1C3245EA8()
{
  unint64_t result;

  result = qword_1EF7DDFD8;
  if (!qword_1EF7DDFD8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchType, &type metadata for Com_Apple_Siri_Product_Proto_MatchType);
    atomic_store(result, (unint64_t *)&qword_1EF7DDFD8);
  }
  return result;
}

unint64_t sub_1C3245EF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8AF0F8;
  if (!qword_1EF8AF0F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF8AF100);
    result = MEMORY[0x1C3BD1B4C](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8AF0F8);
  }
  return result;
}

uint64_t sub_1C3245F3C()
{
  return sub_1C2FF6DE0(&qword_1EF7DE6F0, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1C3245F68()
{
  return sub_1C2FF6DE0(&qword_1EF7DE6E8, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1C3245F94()
{
  return sub_1C2FF6DE0(&qword_1EF8AF0D8, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1C3245FC0()
{
  return sub_1C2FF6DE0(&qword_1EF8AF108, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1C3245FEC()
{
  return sub_1C2FF6DE0(&qword_1EF7DDAF8, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1C3246018()
{
  return sub_1C2FF6DE0(&qword_1EF7DDAF0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1C3246044()
{
  return sub_1C2FF6DE0(&qword_1EF8AF0E0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1C3246070()
{
  return sub_1C2FF6DE0(&qword_1EF8AF110, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1C324609C()
{
  return sub_1C2FF6DE0(&qword_1EF8AF118, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1C32460C8()
{
  return sub_1C2FF6DE0(&qword_1EF8AF120, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1C32460F4()
{
  return sub_1C2FF6DE0(&qword_1EF8AF0E8, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1C3246120()
{
  return sub_1C2FF6DE0(&qword_1EF8AF128, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1C324614C()
{
  return sub_1C2FF6DE0(&qword_1EF8AF130, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1C3246178()
{
  return sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1C32461A4()
{
  return sub_1C2FF6DE0(&qword_1EF8AF0F0, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1C32461D0()
{
  return sub_1C2FF6DE0(&qword_1EF8AF138, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1C3246204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C323C62C(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, a2);
}

uint64_t sub_1C3246228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.setter);
}

uint64_t sub_1C324624C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C32385FC(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input, a2);
}

uint64_t sub_1C3246268(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238668(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t sub_1C3246284@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C32385FC(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm, a2);
}

uint64_t sub_1C32462A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238668(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

uint64_t sub_1C32462BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3238AD4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix, a2);
}

uint64_t sub_1C32462D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.setter);
}

uint64_t sub_1C32462FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3238AD4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, a2);
}

uint64_t sub_1C3246318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.setter);
}

uint64_t sub_1C324633C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start, a2);
}

uint64_t sub_1C3246348(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t sub_1C3246364@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end, a2);
}

uint64_t keypath_get_11Tm@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t result;

  v4 = (_DWORD *)(*(_QWORD *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1C32463D8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

uint64_t sub_1C32463F4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix, a2);
}

uint64_t sub_1C3246400(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

uint64_t sub_1C324641C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix, a2);
}

uint64_t sub_1C3246428(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

uint64_t sub_1C3246444@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence, a2);
}

uint64_t sub_1C3246450(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

uint64_t sub_1C324646C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence, a2);
}

uint64_t sub_1C3246478(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

uint64_t sub_1C3246494@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_23Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit, a2);
}

uint64_t sub_1C32464A0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323944C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t sub_1C32464BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_23Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch, a2);
}

uint64_t keypath_get_23Tm@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;

  v4 = (_BYTE *)(*(_QWORD *)(a1
                           + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
               + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1C3246530(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323944C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

uint64_t sub_1C324654C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_23Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch, a2);
}

uint64_t sub_1C3246558(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323944C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

uint64_t sub_1C3246574@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_23Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch, a2);
}

uint64_t sub_1C3246580(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323944C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

uint64_t sub_1C324659C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C32385FC(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale, a2);
}

uint64_t sub_1C32465B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238668(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

uint64_t sub_1C32465D4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords, a2);
}

uint64_t sub_1C32465E0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238F68(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t sub_1C3246604@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C32385FC(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID, a2);
}

uint64_t sub_1C3246620(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3238668(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

uint64_t sub_1C324663C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C3239C6C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames, a2);
}

uint64_t sub_1C3246658(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3239CD8(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
}

uint64_t sub_1C3246674@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C3239C6C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags, a2);
}

uint64_t sub_1C3246690(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3239CD8(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
}

uint64_t sub_1C32466AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C3239C6C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences, a2);
}

uint64_t sub_1C32466C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3239CD8(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
}

uint64_t sub_1C32466E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1C3239C6C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences, a2);
}

uint64_t sub_1C3246700(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3239CD8(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
}

uint64_t sub_1C324671C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata, a2);
}

uint64_t sub_1C3246728(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323A160(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t sub_1C3246744@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime, a2);
}

uint64_t keypath_get_47Tm@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(*(_QWORD *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1C32467B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323A160(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

uint64_t sub_1C32467D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime, a2);
}

uint64_t sub_1C32467E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C323A160(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

uint64_t sub_1C3246808(float *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.floatValue.setter(*a1);
}

uint64_t sub_1C3246830(double *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.doubleValue.setter(*a1);
}

uint64_t sub_1C3246858(int *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.intValue.setter(*a1);
}

uint64_t sub_1C3246880(uint64_t *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.longValue.setter(*a1);
}

uint64_t sub_1C32468A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Com_Apple_Siri_Product_Proto_Value.stringValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C32468CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_64Tm(a1, a2, a3, a4, Com_Apple_Siri_Product_Proto_Value.stringValue.setter);
}

uint64_t sub_1C32468D8@<X0>(uint64_t a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_Value.dateTimeValue.getter(a1);
}

uint64_t sub_1C32468F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_Value.dateTimeValue.setter);
}

uint64_t sub_1C324691C@<X0>(uint64_t a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_Value.scalarValue.getter(a1);
}

uint64_t sub_1C324693C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_Value.scalarValue.setter);
}

uint64_t sub_1C3246960@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Com_Apple_Siri_Product_Proto_Value.semanticTagValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C3246988(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_64Tm(a1, a2, a3, a4, Com_Apple_Siri_Product_Proto_Value.semanticTagValue.setter);
}

uint64_t keypath_set_64Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_1C32469D4@<X0>(_QWORD *a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_Value.semanticValue.getter(a1);
}

uint64_t sub_1C32469F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_Value.semanticValue.setter);
}

uint64_t sub_1C3246A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C323C62C(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, a2);
}

uint64_t sub_1C3246A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_ScalarValue.value.setter);
}

uint64_t sub_1C3246A60@<X0>(_QWORD *a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_ScalarValue.unit.getter(a1);
}

uint64_t sub_1C3246A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C2FF0628(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_ScalarValue.unit.setter);
}

ValueMetadata *type metadata accessor for Com_Apple_Siri_Product_Proto_MatchType()
{
  return &type metadata for Com_Apple_Siri_Product_Proto_MatchType;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MatchingSpan()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MatchingSpan()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
      case 7u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v10 = sub_1C3378914();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
        *(uint64_t *)((char *)a1 + *(int *)(v11 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v12 = sub_1C3378914();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
        *(uint64_t *)((char *)a1 + *(int *)(v13 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v13 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        v15 = a2[3];
        a1[2] = a2[2];
        a1[3] = v15;
        v16 = a2[5];
        a1[4] = a2[4];
        a1[5] = v16;
        a1[6] = a2[6];
        v17 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = sub_1C3378914();
        v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21(v18, v19, v20);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 4:
    case 7:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      v3 = sub_1C3378914();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
      goto LABEL_5;
    case 6:
      v4 = sub_1C3378914();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
LABEL_5:
      result = swift_release();
      break;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v6 = sub_1C3378914();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);

  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
    case 7u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 5u:
      v7 = sub_1C3378914();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
      *(_QWORD *)((char *)a1 + *(int *)(v8 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 20));
      swift_retain();
      goto LABEL_7;
    case 6u:
      v9 = sub_1C3378914();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
      *(_QWORD *)((char *)a1 + *(int *)(v10 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v10 + 20));
      swift_retain();
      goto LABEL_7;
    case 8u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      a1[6] = a2[6];
      v14 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = sub_1C3378914();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_1C2FF6CC0((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 5u:
        v6 = sub_1C3378914();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
        *(_QWORD *)((char *)a1 + *(int *)(v7 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 20));
        swift_retain();
        goto LABEL_8;
      case 6u:
        v8 = sub_1C3378914();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
        *(_QWORD *)((char *)a1 + *(int *)(v9 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v9 + 20));
        swift_retain();
        goto LABEL_8;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        v11 = (char *)a1 + v10;
        v12 = (char *)a2 + v10;
        v13 = sub_1C3378914();
        v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14(v11, v12, v13);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 8:
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      a1[2] = a2[2];
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_1C3378914();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
      break;
    case 6:
      v14 = sub_1C3378914();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
      *(_QWORD *)((char *)a1 + *(int *)(v15 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v15 + 20));
      swift_storeEnumTagMultiPayload();
      break;
    case 5:
      v7 = sub_1C3378914();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
      *(_QWORD *)((char *)a1 + *(int *)(v8 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 20));
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1C2FF6CC0((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 8:
        v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        a1[2] = a2[2];
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        v11 = (char *)a1 + v10;
        v12 = (char *)a2 + v10;
        v13 = sub_1C3378914();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        v14 = sub_1C3378914();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
        *(_QWORD *)((char *)a1 + *(int *)(v15 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v15 + 20));
        swift_storeEnumTagMultiPayload();
        break;
      case 5:
        v7 = sub_1C3378914();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
        *(_QWORD *)((char *)a1 + *(int *)(v8 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 20));
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1C32474DC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_ScalarValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_ScalarValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = *(int *)(a3 + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    a1[6] = a2[6];
    v11 = sub_1C3378914();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Com_Apple_Siri_Product_Proto_SemanticValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = *(int *)(a3 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  a1[6] = a2[6];
  v10 = sub_1C3378914();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

_QWORD *assignWithCopy for Com_Apple_Siri_Product_Proto_SemanticValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for Com_Apple_Siri_Product_Proto_SemanticValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_SemanticValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3247998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_SemanticValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3247A20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C3247A94()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3378914();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C3247B18()
{
  return type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
}

void sub_1C3247B20()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C2FF90EC(319, &qword_1EF7DDB40, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  if (v0 <= 0x3F)
  {
    sub_1C2FF90EC(319, &qword_1EF7DE738, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_1C3247C3C()
{
  return type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
}

void sub_1C3247C44()
{
  unint64_t v0;

  sub_1C2FF90EC(319, &qword_1EF7DD990, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1C3247CC0()
{
  return type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
}

void sub_1C3247CC8()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C2FF90EC(319, &qword_1EF7DDB40, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  if (v0 <= 0x3F)
  {
    sub_1C2FF90EC(319, &qword_1ED7CDFF8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

unint64_t sub_1C3247D70()
{
  unint64_t result;

  result = qword_1EF7DDFC8;
  if (!qword_1EF7DDFC8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MatchType, &type metadata for Com_Apple_Siri_Product_Proto_MatchType);
    atomic_store(result, (unint64_t *)&qword_1EF7DDFC8);
  }
  return result;
}

__n128 StreetAddressIntentNode.init(intentNode:ontologyNode:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

uint64_t StreetAddressIntentNode.intentNode.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t StreetAddressIntentNode.ontologyNode.getter()
{
  return swift_retain();
}

uint64_t static StreetAddressIntentNode.from(intentNode:ontologyNode:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = v4;
  a3[3] = v5;
  a3[4] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t StreetAddressIntentNode.streetName.getter()
{
  return sub_1C31ADB5C();
}

uint64_t StreetAddressIntentNode.streetNumber.getter()
{
  return sub_1C31ADB5C();
}

uint64_t StreetAddressIntentNode.streetType.getter()
{
  return sub_1C31E809C(&qword_1EF81A320, (uint64_t)&unk_1EF80B370, (uint64_t (*)(uint64_t))sub_1C31AD6F0);
}

uint64_t StreetAddressIntentNode.crossStreetName.getter()
{
  return sub_1C31ADB5C();
}

uint64_t StreetAddressIntentNode.crossStreetType.getter()
{
  return sub_1C31E809C(&qword_1EF81A320, (uint64_t)&unk_1EF80B3D0, (uint64_t (*)(uint64_t))sub_1C31AD6F0);
}

uint64_t StreetAddressIntentNode.crossStreetJoin.getter()
{
  return sub_1C31E809C(&qword_1EF81A318, (uint64_t)&unk_1EF80B400, (uint64_t (*)(uint64_t))sub_1C31AD844);
}

ValueMetadata *type metadata accessor for StreetAddressIntentNode()
{
  return &type metadata for StreetAddressIntentNode;
}

uint64_t sub_1C3247EEC(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for NonTerminalOntologyNode);
  return OntologyNode<>.isEqualTo(_:)(a1, a2);
}

uint64_t OntologyNode<>.isEqualTo(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  char v14;
  _BYTE v17[40];

  v4 = sub_1C3378E90();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v17[-v7 - 8];
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v6);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1C2FFCF44(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DF4F0);
  v12 = swift_dynamicCast();
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v12)
  {
    v13(v8, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, a2);
    v14 = sub_1C3378BD8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  }
  else
  {
    v13(v8, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t dispatch thunk of OntologyNode.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of OntologyNode.multicardinal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of OntologyNode.isEqualTo(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1C32480AC(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for TerminalOntologyNode<A>);
  return OntologyNode<>.isEqualTo(_:)(a1, a2);
}

uint64_t sub_1C32480EC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyOntologyNode()
{
  return objc_opt_self();
}

uint64_t sub_1C3248130()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)*v0;
  sub_1C3379208();
  v2 = v1[5];
  v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  v4 = v1[5];
  v5 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  sub_1C3379220();
  return sub_1C3379244();
}

uint64_t sub_1C32481F0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = (_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(*v0 + 40);
  v4 = *(_QWORD *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  return sub_1C3379220();
}

uint64_t sub_1C3248298()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1C3379208();
  v1 = *v0;
  v2 = (_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(*v0 + 40);
  v4 = *(_QWORD *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  sub_1C3379220();
  return sub_1C3379244();
}

uint64_t sub_1C3248354(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)a1 + 16), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v2 + 16, v3, v4) & 1;
}

unint64_t sub_1C32483AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF7DF1D0;
  if (!qword_1EF7DF1D0)
  {
    v1 = type metadata accessor for AnyOntologyNode();
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BACA8, v1);
    atomic_store(result, (unint64_t *)&qword_1EF7DF1D0);
  }
  return result;
}

uint64_t sub_1C32483F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for AnyOntologyNode();
  v7 = swift_allocObject();
  sub_1C2FFD1BC(&v9, v7 + 16);
  return v7;
}

uint64_t sub_1C324845C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_1C3379184();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1C3379184() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

double Entity<A>.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  __int128 v13[2];
  __int128 v14[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1C2FFCF44(a1, (uint64_t)v13);
    v10 = type metadata accessor for Entity(0, a2, v8, v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    sub_1C2FFD1BC(v13, (uint64_t)v14);
    sub_1C2FFD1BC(v14, a5);
  }
  else
  {
    type metadata accessor for Entity(255, a2, a3, a4);
    v12 = sub_1C3378E90();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    *(_QWORD *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t type metadata accessor for Entity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Entity);
}

uint64_t Entity.rawString.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t Entity.rawInt64.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t Entity.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4[2];

  sub_1C2FFCF44(v1, (uint64_t)v4);
  return sub_1C310E4B8(v4, a1);
}

double Entity.init(entityName:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  double result;
  uint64_t v8;

  a3[3] = (uint64_t)&type metadata for BuilderNode;
  a3[4] = (uint64_t)&off_1E7D1B810;
  v6 = swift_allocObject();
  *a3 = v6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0x797469746E45;
  *(_QWORD *)(v6 + 40) = 0xE600000000000000;
  result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_BYTE *)(v6 + 80) = 1;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 88) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = v8;
  *(_QWORD *)(v6 + 112) = v8;
  return result;
}

uint64_t sub_1C3248750()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double Entity<A>.init(entityName:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  double result;
  uint64_t v8;

  a3[3] = (uint64_t)&type metadata for BuilderNode;
  a3[4] = (uint64_t)&off_1E7D1B810;
  v6 = swift_allocObject();
  *a3 = v6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0x797469746E45;
  *(_QWORD *)(v6 + 40) = 0xE600000000000000;
  result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_BYTE *)(v6 + 80) = 1;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 88) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = v8;
  *(_QWORD *)(v6 + 112) = v8;
  return result;
}

double Entity<A>.init<A>(_:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  void (*v17)(_QWORD *, uint64_t);
  uint64_t v18;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];

  v9 = type metadata accessor for Entity(255, a3, a3, a4);
  v10 = sub_1C3378E90();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(v19, a1, v10);
  if (v19[3])
  {
    sub_1C2FFCF44((uint64_t)v19, (uint64_t)&v20);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v19, v9);
    sub_1C2FFD1BC(&v20, (uint64_t)v23);
    sub_1C2FFCF44((uint64_t)v23, (uint64_t)v19);
    v12 = sub_1C31DA920(v19, a2, a4, (uint64_t)&v20);
    (*(void (**)(_QWORD *, uint64_t, double))(v11 + 8))(a1, v10, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    if (*((_QWORD *)&v21 + 1))
    {
      result = *(double *)&v20;
      v16 = v21;
      *(_OWORD *)a5 = v20;
      *(_OWORD *)(a5 + 16) = v16;
      *(_QWORD *)(a5 + 32) = v22;
      return result;
    }
    type metadata accessor for Entity(255, a2, v13, v14);
    v18 = sub_1C3378E90();
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(&v20, v18);
  }
  else
  {
    v17 = *(void (**)(_QWORD *, uint64_t))(v11 + 8);
    v17(v19, v10);
    v17(a1, v10);
  }
  *(_QWORD *)(a5 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

uint64_t AddressOntologyNode.AddressReference.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1C3379028();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void *static AddressOntologyNode.AddressReference.allCases.getter()
{
  return &unk_1E7D10830;
}

uint64_t AddressOntologyNode.AddressReference.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x79627261656ELL;
  else
    return 6647407;
}

uint64_t sub_1C3248A38(char *a1, char *a2)
{
  return sub_1C3037770(*a1, *a2);
}

uint64_t sub_1C3248A44()
{
  sub_1C3379208();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  return sub_1C3379244();
}

uint64_t sub_1C3248AB8()
{
  sub_1C3378C38();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3248B08()
{
  sub_1C3379208();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  return sub_1C3379244();
}

uint64_t sub_1C3248B78@<X0>(char *a1@<X8>)
{
  return AddressOntologyNode.AddressReference.init(rawValue:)(a1);
}

void sub_1C3248B84(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6647407;
  if (*v1)
    v2 = 0x79627261656ELL;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1C3248BB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7D0FB28;
}

unint64_t sub_1C3248BCC()
{
  unint64_t result;

  result = qword_1EF8AF328;
  if (!qword_1EF8AF328)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.AddressReference, &type metadata for AddressOntologyNode.AddressReference);
    atomic_store(result, (unint64_t *)&qword_1EF8AF328);
  }
  return result;
}

unint64_t sub_1C3248C10(uint64_t a1)
{
  unint64_t result;

  result = sub_1C3248C34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C3248C34()
{
  unint64_t result;

  result = qword_1EF8AF330;
  if (!qword_1EF8AF330)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.AddressReference, &type metadata for AddressOntologyNode.AddressReference);
    atomic_store(result, (unint64_t *)&qword_1EF8AF330);
  }
  return result;
}

unint64_t sub_1C3248C7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8AF338;
  if (!qword_1EF8AF338)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF8AF340);
    result = MEMORY[0x1C3BD1B4C](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8AF338);
  }
  return result;
}

unint64_t sub_1C3248CC8(uint64_t a1)
{
  unint64_t result;

  result = sub_1C3248CEC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C3248CEC()
{
  unint64_t result;

  result = qword_1EF8AF348;
  if (!qword_1EF8AF348)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.AddressReference, &type metadata for AddressOntologyNode.AddressReference);
    atomic_store(result, (unint64_t *)&qword_1EF8AF348);
  }
  return result;
}

uint64_t _s16AddressReferenceOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C3248D7C + 4 * byte_1C33BAD65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C3248DB0 + 4 * byte_1C33BAD60[v4]))();
}

uint64_t sub_1C3248DB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C3248DB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C3248DC0);
  return result;
}

uint64_t sub_1C3248DCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C3248DD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C3248DD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C3248DE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddressOntologyNode.AddressReference()
{
  return &type metadata for AddressOntologyNode.AddressReference;
}

uint64_t UsoEntitySpan.overlaps(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if ((*(_BYTE *)(v1 + 132) & 1) != 0 || (*(_BYTE *)(v1 + 140) & 1) != 0)
    return 0;
  v3 = 0;
  if ((*(_BYTE *)(a1 + 132) & 1) == 0)
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 128) < *(_DWORD *)(a1 + 136) && *(_DWORD *)(a1 + 128) < *(_DWORD *)(v1 + 136);
    if ((*(_BYTE *)(a1 + 140) & 1) != 0)
      return 0;
    else
      return v3;
  }
  return v3;
}

uint64_t UsoEntitySpan.indexesMatch(_:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;

  v2 = *(unsigned __int8 *)(a1 + 140);
  v3 = *(unsigned __int8 *)(v1 + 132);
  v4 = *(unsigned __int8 *)(v1 + 140);
  if ((*(_BYTE *)(a1 + 132) & 1) != 0)
  {
    if (((v3 ^ 1 | v2) & 1) != 0)
      return v3 & v4;
  }
  else
  {
    if (*(_DWORD *)(a1 + 128) != *(_DWORD *)(v1 + 128))
      v3 = 1;
    if (((v3 | v2) & 1) != 0)
      return v4 & ~v3;
  }
  return (*(_DWORD *)(a1 + 136) == *(_DWORD *)(v1 + 136)) & ~v4;
}

SiriOntology::UsoEntitySpan::SpanSource_optional __swiftcall UsoEntitySpan.SpanSource.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 7;
  if ((unint64_t)rawValue < 7)
    v2 = rawValue;
  *v1 = v2;
  return (SiriOntology::UsoEntitySpan::SpanSource_optional)rawValue;
}

void __swiftcall AsrAlternative.init(value:probability:)(SiriOntology::AsrAlternative *__return_ptr retstr, Swift::String value, Swift::Float_optional *probability)
{
  retstr->value = value;
  LODWORD(retstr->probability.value) = (_DWORD)probability;
  retstr->probability.is_nil = BYTE4(probability) & 1;
}

uint64_t SpanProperty.init(key:valueString:valueInt:valueFloat:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_DWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 36) = BYTE4(a5) & 1;
  *(_DWORD *)(a7 + 40) = a6;
  *(_BYTE *)(a7 + 44) = BYTE4(a6) & 1;
  return result;
}

__n128 UsoEntitySpan.init(originAppId:sourceComponent:label:matchInfo:properties:startIndex:endIndex:alternatives:originEntityId:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, __n128 a12, uint64_t a13)
{
  __int128 v13;
  __int128 v14;
  __n128 result;
  char v16;

  v13 = a6[1];
  *(_OWORD *)(a9 + 40) = *a6;
  *(_OWORD *)(a9 + 56) = v13;
  v14 = a6[3];
  *(_OWORD *)(a9 + 72) = a6[2];
  result = a12;
  v16 = *a3;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v16;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 88) = v14;
  *(_OWORD *)(a9 + 104) = a6[4];
  *(_QWORD *)(a9 + 120) = a7;
  *(_DWORD *)(a9 + 128) = a8;
  *(_BYTE *)(a9 + 132) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 136) = a10;
  *(_BYTE *)(a9 + 140) = a11 & 1;
  *(__n128 *)(a9 + 144) = a12;
  *(_QWORD *)(a9 + 160) = a13;
  *(_BYTE *)(a9 + 168) = 3;
  *(_QWORD *)(a9 + 176) = 0;
  *(_BYTE *)(a9 + 184) = 1;
  return result;
}

BOOL MatchInfo.hasMatchSignals(_:)(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1C3248FA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1C3248FFC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

__n128 UsoEntitySpan.init(originAppId:sourceComponent:label:matchInfo:properties:startIndex:endIndex:alternatives:originEntityId:payloadAttachmentInfo:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, __n128 a12, uint64_t a13, char *a14)
{
  __int128 v14;
  __int128 v15;
  __n128 result;
  char v17;
  char v18;

  v14 = a6[1];
  *(_OWORD *)(a9 + 40) = *a6;
  *(_OWORD *)(a9 + 56) = v14;
  v15 = a6[3];
  *(_OWORD *)(a9 + 72) = a6[2];
  result = a12;
  v17 = *a3;
  v18 = *a14;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v17;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 88) = v15;
  *(_OWORD *)(a9 + 104) = a6[4];
  *(_QWORD *)(a9 + 120) = a7;
  *(_DWORD *)(a9 + 128) = a8;
  *(_BYTE *)(a9 + 132) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 136) = a10;
  *(_BYTE *)(a9 + 140) = a11 & 1;
  *(__n128 *)(a9 + 144) = a12;
  *(_QWORD *)(a9 + 160) = a13;
  *(_BYTE *)(a9 + 168) = v18;
  *(_QWORD *)(a9 + 176) = 0;
  *(_BYTE *)(a9 + 184) = 1;
  return result;
}

_DWORD *MatchInfo.init(matchSignals:matchScore:maxTokenCount:matchedTokenCount:maxStopWordCount:matchedStopWordCount:editDistance:maxAliasCount:matchedAliasCount:matchedAliasTypes:)@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12)
{
  *(_DWORD *)a9 = *result;
  *(_DWORD *)(a9 + 4) = a2;
  *(_BYTE *)(a9 + 8) = BYTE4(a2) & 1;
  *(_DWORD *)(a9 + 12) = a3;
  *(_BYTE *)(a9 + 16) = BYTE4(a3) & 1;
  *(_DWORD *)(a9 + 20) = a4;
  *(_BYTE *)(a9 + 24) = BYTE4(a4) & 1;
  *(_DWORD *)(a9 + 28) = a5;
  *(_BYTE *)(a9 + 32) = BYTE4(a5) & 1;
  *(_DWORD *)(a9 + 36) = a6;
  *(_BYTE *)(a9 + 40) = BYTE4(a6) & 1;
  *(_DWORD *)(a9 + 44) = a7;
  *(_BYTE *)(a9 + 48) = BYTE4(a7) & 1;
  *(_DWORD *)(a9 + 52) = a8;
  *(_BYTE *)(a9 + 56) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 60) = a10;
  *(_BYTE *)(a9 + 64) = a11 & 1;
  *(_QWORD *)(a9 + 72) = a12;
  return result;
}

uint64_t MatchInfo.init(matchSignalBitSet:matchScore:maxTokenCount:matchedTokenCount:maxStopWordCount:matchedStopWordCount:editDistance:maxAliasCount:matchedAliasCount:matchedAliasTypes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12)
{
  *(_DWORD *)a9 = result;
  *(_DWORD *)(a9 + 4) = a2;
  *(_BYTE *)(a9 + 8) = BYTE4(a2) & 1;
  *(_DWORD *)(a9 + 12) = a3;
  *(_BYTE *)(a9 + 16) = BYTE4(a3) & 1;
  *(_DWORD *)(a9 + 20) = a4;
  *(_BYTE *)(a9 + 24) = BYTE4(a4) & 1;
  *(_DWORD *)(a9 + 28) = a5;
  *(_BYTE *)(a9 + 32) = BYTE4(a5) & 1;
  *(_DWORD *)(a9 + 36) = a6;
  *(_BYTE *)(a9 + 40) = BYTE4(a6) & 1;
  *(_DWORD *)(a9 + 44) = a7;
  *(_BYTE *)(a9 + 48) = BYTE4(a7) & 1;
  *(_DWORD *)(a9 + 52) = a8;
  *(_BYTE *)(a9 + 56) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 60) = a10;
  *(_BYTE *)(a9 + 64) = a11 & 1;
  *(_QWORD *)(a9 + 72) = a12;
  return result;
}

SiriOntology::PayloadAttachmentInfo __swiftcall PayloadAttachmentInfo.init(attachmentType:)(SiriOntology::PayloadAttachmentInfo attachmentType)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)attachmentType.attachmentType.value;
  return attachmentType;
}

uint64_t UsoEntitySpan.SpanSource.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SiriOntology::UsoEntitySpan::SpanSource_optional sub_1C32491D8(Swift::Int *a1)
{
  return UsoEntitySpan.SpanSource.init(rawValue:)(*a1);
}

uint64_t sub_1C32491E0()
{
  sub_1C3250670();
  return sub_1C3378D64();
}

uint64_t sub_1C324923C()
{
  sub_1C3250670();
  return sub_1C3378D4C();
}

uint64_t UsoEntitySpan.originAppId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void UsoEntitySpan.sourceComponent.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t UsoEntitySpan.label.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UsoEntitySpan.matchInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(v1 + 104);
  v2 = *(_QWORD *)(v1 + 112);
  v4 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t UsoEntitySpan.properties.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t UsoEntitySpan.startIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 128) | ((unint64_t)*(unsigned __int8 *)(v0 + 132) << 32);
}

unint64_t UsoEntitySpan.endIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 136) | ((unint64_t)*(unsigned __int8 *)(v0 + 140) << 32);
}

uint64_t UsoEntitySpan.alternatives.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UsoEntitySpan.originEntityId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

void UsoEntitySpan.payloadAttachmentInfo.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 168);
}

uint64_t UsoEntitySpan.appBundleSemantic.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1;
  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    swift_bridgeObjectRetain();
    a1 = v2;
    v5 = v4;
    v6 = v3;
  }
  else
  {
    v5 = 0x6E776F6E6B6E75;
    v6 = 0xE700000000000000;
  }
  return sub_1C2FEA9F4(v5, v6, a1);
}

uint64_t UsoEntitySpan.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;

  v3 = *(unsigned __int8 *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 112);
  v6 = *(_QWORD *)(v1 + 120);
  v9 = *(unsigned __int8 *)(v1 + 132);
  v10 = *(unsigned __int8 *)(v1 + 140);
  v8 = *(_QWORD *)(v1 + 144);
  v11 = *(_QWORD *)(v1 + 160);
  v12 = *(unsigned __int8 *)(v1 + 168);
  v13 = *(_BYTE *)(v1 + 184);
  if (*(_QWORD *)(v1 + 8))
  {
    sub_1C3379220();
    swift_bridgeObjectRetain();
    sub_1C3378C38();
    swift_bridgeObjectRelease();
    if (v3 == 7)
      goto LABEL_3;
  }
  else
  {
    sub_1C3379220();
    if (v3 == 7)
    {
LABEL_3:
      sub_1C3379220();
      if (v4)
        goto LABEL_4;
LABEL_8:
      sub_1C3379220();
      if (v5)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  sub_1C3379220();
  sub_1C3379214();
  if (!v4)
    goto LABEL_8;
LABEL_4:
  sub_1C3379220();
  swift_bridgeObjectRetain();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_5:
    sub_1C3379220();
    MatchInfo.hash(into:)();
    goto LABEL_10;
  }
LABEL_9:
  sub_1C3379220();
LABEL_10:
  swift_bridgeObjectRetain();
  sub_1C300FCEC(a1, v6);
  swift_bridgeObjectRelease();
  if (v9)
  {
    sub_1C3379220();
    if (!v10)
    {
LABEL_12:
      sub_1C3379220();
      sub_1C337922C();
      goto LABEL_15;
    }
  }
  else
  {
    sub_1C3379220();
    sub_1C337922C();
    if (!v10)
      goto LABEL_12;
  }
  sub_1C3379220();
LABEL_15:
  swift_bridgeObjectRetain();
  sub_1C300FC38(a1, v8);
  swift_bridgeObjectRelease();
  if (v11)
  {
    sub_1C3379220();
    swift_bridgeObjectRetain();
    sub_1C3378C38();
    swift_bridgeObjectRelease();
    if (v12 == 3)
      goto LABEL_20;
  }
  else
  {
    sub_1C3379220();
    if (v12 == 3)
      goto LABEL_20;
  }
  sub_1C3379220();
  if (v12 != 2)
  {
    sub_1C3379220();
    sub_1C3379214();
    if ((v13 & 1) != 0)
      return sub_1C3379220();
    goto LABEL_23;
  }
LABEL_20:
  sub_1C3379220();
  if ((v13 & 1) != 0)
    return sub_1C3379220();
LABEL_23:
  sub_1C3379220();
  return sub_1C3379214();
}

uint64_t sub_1C324978C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C32497C8 + 4 * byte_1C33BAEA0[a1]))(0x70416E696769726FLL, 0xEB00000000644970);
}

uint64_t sub_1C32497C8()
{
  return 0x6F43656372756F73;
}

uint64_t sub_1C32497EC()
{
  return 0x6C6562616CLL;
}

uint64_t sub_1C3249800()
{
  return 0x666E49686374616DLL;
}

uint64_t sub_1C324981C()
{
  return 0x69747265706F7270;
}

uint64_t sub_1C3249838()
{
  return 0x646E497472617473;
}

uint64_t sub_1C3249858()
{
  return 0x7865646E49646E65;
}

uint64_t sub_1C3249870()
{
  return 0x74616E7265746C61;
}

unint64_t sub_1C3249890()
{
  return 0xD000000000000015;
}

uint64_t sub_1C32498B8()
{
  return 0x6E456E696769726FLL;
}

uint64_t sub_1C32498DC()
{
  unsigned __int8 *v0;

  return sub_1C324978C(*v0);
}

uint64_t sub_1C32498E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C324FA04(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C3249908(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1C3249914()
{
  sub_1C324D9FC();
  return sub_1C3379274();
}

uint64_t sub_1C324993C()
{
  sub_1C324D9FC();
  return sub_1C3379280();
}

uint64_t UsoEntitySpan.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDD10);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(unsigned __int8 *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v41 = *(_QWORD *)(v1 + 32);
  v42 = v7;
  v8 = *(_QWORD *)(v1 + 40);
  v39 = *(_QWORD *)(v1 + 48);
  v40 = v8;
  v30 = *(_QWORD *)(v1 + 56);
  v31 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v36 = *(_QWORD *)(v1 + 80);
  v37 = v9;
  v10 = *(_QWORD *)(v1 + 88);
  v34 = *(_QWORD *)(v1 + 96);
  v35 = v10;
  v33 = *(_QWORD *)(v1 + 104);
  v32 = *(_QWORD *)(v1 + 112);
  v29 = *(_QWORD *)(v1 + 120);
  v28 = *(unsigned int *)(v1 + 128);
  v27 = *(unsigned __int8 *)(v1 + 132);
  v26 = *(unsigned int *)(v1 + 136);
  v25 = *(unsigned __int8 *)(v1 + 140);
  v24 = *(_QWORD *)(v1 + 144);
  v22 = *(_QWORD *)(v1 + 152);
  v23 = *(_QWORD *)(v1 + 160);
  HIDWORD(v21) = *(unsigned __int8 *)(v1 + 168);
  v38 = *(_QWORD *)(v1 + 176);
  v11 = *(unsigned __int8 *)(v1 + 184);
  v12 = a1[3];
  v13 = a1;
  v15 = v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  sub_1C324D9FC();
  sub_1C337925C();
  LOBYTE(v44) = 0;
  v16 = v6;
  v17 = v43;
  sub_1C33790D0();
  if (!v17)
  {
    v18 = v39;
    v19 = v40;
    LODWORD(v43) = v11;
    LOBYTE(v44) = v54;
    v55 = 1;
    sub_1C324DA40();
    sub_1C3379100();
    LOBYTE(v44) = 2;
    sub_1C33790D0();
    v44 = v19;
    v45 = v18;
    v46 = v30;
    v47 = v31;
    v48 = v37;
    v49 = v36;
    v50 = v35;
    v51 = v34;
    v52 = v33;
    v53 = v32;
    v55 = 3;
    sub_1C324DA84();
    sub_1C3379100();
    v44 = v29;
    v55 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDC70);
    sub_1C319F1F8(&qword_1ED7CDC78, &qword_1ED7CDC70, (uint64_t (*)(void))sub_1C324DAC8, MEMORY[0x1E0DEAF10]);
    sub_1C3379130();
    LOBYTE(v44) = 5;
    v55 = v27;
    sub_1C3379118();
    LOBYTE(v44) = 6;
    v55 = v25;
    sub_1C3379118();
    v44 = v24;
    v55 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDCA0);
    sub_1C319F1F8(&qword_1ED7CDCA8, &qword_1ED7CDCA0, (uint64_t (*)(void))sub_1C324DB0C, MEMORY[0x1E0DEAF10]);
    sub_1C3379130();
    LOBYTE(v44) = 8;
    sub_1C33790D0();
    LOBYTE(v44) = BYTE4(v21);
    v55 = 9;
    sub_1C324DB50();
    sub_1C3379100();
    LOBYTE(v44) = 10;
    sub_1C33790F4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v16, v15);
}

uint64_t UsoEntitySpan.hashValue.getter()
{
  _BYTE v1[72];

  sub_1C3379208();
  UsoEntitySpan.hash(into:)((uint64_t)v1);
  return sub_1C3379244();
}

uint64_t UsoEntitySpan.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  __int16 v93;
  char v94;
  int v95;
  char v96;
  __int16 v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _BYTE v103[7];
  uint64_t v104;
  char v105;
  char v106;
  char v107;
  _BYTE v108[7];
  __int16 v109;
  char v110;
  char v111;
  __int16 v112;
  char v113;
  char v114;
  _DWORD v115[3];
  _QWORD *v116;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDD00);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = 1;
  v9 = a1[3];
  v116 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1C324D9FC();
  sub_1C3379250();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  v10 = v6;
  v62 = a2;
  LOBYTE(v75) = 0;
  v11 = sub_1C3379034();
  v13 = v12;
  LOBYTE(v64) = 1;
  sub_1C324DB94();
  swift_bridgeObjectRetain();
  sub_1C3379064();
  v14 = v75;
  LOBYTE(v75) = 2;
  v60 = sub_1C3379034();
  v61 = v11;
  LOBYTE(v64) = 3;
  v16 = v15;
  sub_1C324DBD8();
  swift_bridgeObjectRetain();
  sub_1C3379064();
  v63 = v16;
  v57 = v14;
  v58 = v76;
  v59 = v75;
  v55 = v78;
  v56 = v77;
  v53 = v80;
  v54 = v79;
  v51 = v82;
  v52 = v81;
  v17 = v84;
  v50 = v83;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDC70);
  LOBYTE(v64) = 4;
  sub_1C319F1F8(&qword_1ED7CDC80, &qword_1ED7CDC70, (uint64_t (*)(void))sub_1C324DC1C, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1C3379094();
  v49 = v17;
  v18 = v75;
  LOBYTE(v75) = 5;
  swift_bridgeObjectRetain();
  v19 = sub_1C337907C();
  v48 = v18;
  v114 = BYTE4(v19) & 1;
  LOBYTE(v75) = 6;
  v20 = sub_1C337907C();
  v45 = HIDWORD(v19) & 1;
  v46 = v20;
  v47 = HIDWORD(v20) & 1;
  v111 = BYTE4(v20) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDCA0);
  LOBYTE(v64) = 7;
  sub_1C319F1F8(&qword_1ED7CDCB0, &qword_1ED7CDCA0, (uint64_t (*)(void))sub_1C324DC60, MEMORY[0x1E0DEAF40]);
  sub_1C3379094();
  v21 = v75;
  LOBYTE(v75) = 8;
  v43 = v21;
  swift_bridgeObjectRetain();
  v42 = 0;
  v41 = sub_1C3379034();
  v23 = v22;
  LOBYTE(v18) = v47;
  LOBYTE(v64) = 9;
  sub_1C324DCA4();
  v44 = v23;
  swift_bridgeObjectRetain();
  sub_1C3379064();
  v40 = v75;
  v106 = 10;
  v39 = sub_1C3379058();
  LOBYTE(v23) = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  v25 = v23 & 1;
  v107 = v23 & 1;
  *(_QWORD *)&v64 = v61;
  *((_QWORD *)&v64 + 1) = v13;
  LOBYTE(v65) = v57;
  v26 = v63;
  *((_QWORD *)&v65 + 1) = v60;
  *(_QWORD *)&v66 = v63;
  *((_QWORD *)&v66 + 1) = v59;
  *(_QWORD *)&v67 = v58;
  *((_QWORD *)&v67 + 1) = v56;
  *(_QWORD *)&v68 = v55;
  *((_QWORD *)&v68 + 1) = v54;
  *(_QWORD *)&v69 = v53;
  *((_QWORD *)&v69 + 1) = v52;
  *(_QWORD *)&v70 = v51;
  v27 = v49;
  *((_QWORD *)&v70 + 1) = v50;
  *(_QWORD *)&v71 = v49;
  v28 = v48;
  *((_QWORD *)&v71 + 1) = v48;
  v38 = v19;
  LODWORD(v72) = v19;
  v29 = v44;
  BYTE4(v72) = v45;
  DWORD2(v72) = v46;
  BYTE12(v72) = v18;
  v30 = v43;
  *(_QWORD *)&v73 = v43;
  *((_QWORD *)&v73 + 1) = v41;
  *(_QWORD *)&v74[0] = v44;
  BYTE8(v74[0]) = v40;
  *(_QWORD *)&v74[1] = v39;
  BYTE8(v74[1]) = v25;
  sub_1C3029868((uint64_t)&v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v73;
  v32 = v62;
  v62[8] = v72;
  v32[9] = v31;
  v32[10] = v74[0];
  *(_OWORD *)((char *)v32 + 169) = *(_OWORD *)((char *)v74 + 9);
  v33 = v69;
  v32[4] = v68;
  v32[5] = v33;
  v34 = v71;
  v32[6] = v70;
  v32[7] = v34;
  v35 = v65;
  *v32 = v64;
  v32[1] = v35;
  v36 = v67;
  v32[2] = v66;
  v32[3] = v36;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  v75 = v61;
  v76 = v13;
  LOBYTE(v77) = v57;
  *(_DWORD *)((char *)&v77 + 1) = v115[0];
  HIDWORD(v77) = *(_DWORD *)((char *)v115 + 3);
  v78 = v60;
  v79 = v26;
  v80 = v59;
  v81 = v58;
  v82 = v56;
  v83 = v55;
  v84 = v54;
  v85 = v53;
  v86 = v52;
  v87 = v51;
  v88 = v50;
  v89 = v27;
  v90 = v28;
  v91 = v38;
  v92 = v114;
  v93 = v112;
  v94 = v113;
  v95 = v46;
  v96 = v111;
  v97 = v109;
  v98 = v110;
  v99 = v30;
  v100 = v41;
  v101 = v29;
  v102 = v40;
  *(_DWORD *)&v103[3] = *(_DWORD *)&v108[3];
  *(_DWORD *)v103 = *(_DWORD *)v108;
  v104 = v39;
  v105 = v107;
  return sub_1C30298D8((uint64_t)&v75);
}

uint64_t sub_1C324A730()
{
  _BYTE v1[72];

  sub_1C3379208();
  UsoEntitySpan.hash(into:)((uint64_t)v1);
  return sub_1C3379244();
}

uint64_t sub_1C324A770()
{
  _BYTE v1[72];

  sub_1C3379208();
  UsoEntitySpan.hash(into:)((uint64_t)v1);
  return sub_1C3379244();
}

uint64_t sub_1C324A7A8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return UsoEntitySpan.init(from:)(a1, a2);
}

uint64_t sub_1C324A7BC(_QWORD *a1)
{
  return UsoEntitySpan.encode(to:)(a1);
}

SiriOntology::MatchInfo::AliasType_optional __swiftcall MatchInfo.AliasType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 12;
  if ((unint64_t)rawValue < 0xC)
    v2 = rawValue;
  *v1 = v2;
  return (SiriOntology::MatchInfo::AliasType_optional)rawValue;
}

SiriOntology::MatchInfo::AliasType_optional sub_1C324A7E8(Swift::Int *a1)
{
  return MatchInfo.AliasType.init(rawValue:)(*a1);
}

uint64_t sub_1C324A7F0()
{
  sub_1C325062C();
  return sub_1C3378D64();
}

uint64_t sub_1C324A84C()
{
  sub_1C325062C();
  return sub_1C3378D4C();
}

uint64_t MatchInfo.MatchSignals.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t MatchInfo.MatchSignals.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static MatchInfo.MatchSignals.exactMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static MatchInfo.MatchSignals.partialMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static MatchInfo.MatchSignals.approximateMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static MatchInfo.MatchSignals.aliasMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void sub_1C324A8D8()
{
  off_1EF808AD0 = &unk_1E7CE6F68;
}

uint64_t static MatchInfo.MatchSignals.descriptions.getter()
{
  if (qword_1EF808AE0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

_DWORD *sub_1C324A92C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1C324A938()
{
  sub_1C3379208();
  sub_1C337922C();
  return sub_1C3379244();
}

uint64_t sub_1C324A97C()
{
  return sub_1C337922C();
}

uint64_t sub_1C324A9A4()
{
  sub_1C3379208();
  sub_1C337922C();
  return sub_1C3379244();
}

uint64_t sub_1C324A9E4()
{
  sub_1C324E068();
  return sub_1C3378D70();
}

uint64_t sub_1C324AA40()
{
  sub_1C324E068();
  return sub_1C3378D58();
}

void sub_1C324AA8C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1C324AA94@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1C324AAA8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1C324AABC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1C324AAD0(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1C324AB00@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1C324AB2C@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1C324AB50(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1C324AB64(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1C324AB78(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1C324AB8C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1C324ABA0(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1C324ABB4(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1C324ABC8(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1C324ABDC()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_1C324ABEC(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1C324AC00@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1C324AC10(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1C324AC1C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t MatchInfo.matchSignalBitSet.getter()
{
  unsigned int *v0;

  return *v0;
}

unint64_t MatchInfo.matchScore.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

unint64_t MatchInfo.maxTokenCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 32);
}

unint64_t MatchInfo.matchedTokenCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int8 *)(v0 + 24) << 32);
}

unint64_t MatchInfo.maxStopWordCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28) | ((unint64_t)*(unsigned __int8 *)(v0 + 32) << 32);
}

unint64_t MatchInfo.matchedStopWordCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32);
}

unint64_t MatchInfo.editDistance.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

unint64_t MatchInfo.maxAliasCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 52) | ((unint64_t)*(unsigned __int8 *)(v0 + 56) << 32);
}

unint64_t MatchInfo.matchedAliasCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60) | ((unint64_t)*(unsigned __int8 *)(v0 + 64) << 32);
}

uint64_t MatchInfo.matchedAliasTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MatchInfo.hash(into:)()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v1 = *(unsigned __int8 *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  v10 = *(unsigned __int8 *)(v0 + 48);
  v11 = *(unsigned __int8 *)(v0 + 56);
  v12 = *(unsigned __int8 *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  sub_1C337922C();
  if (v1 == 1)
  {
    sub_1C3379220();
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    sub_1C3379220();
    sub_1C337922C();
    if (!v2)
    {
LABEL_3:
      sub_1C3379220();
      sub_1C337922C();
      if (!v3)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  sub_1C3379220();
  if (!v3)
  {
LABEL_4:
    sub_1C3379220();
    sub_1C337922C();
    if (!v4)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  sub_1C3379220();
  if (!v4)
  {
LABEL_5:
    sub_1C3379220();
    sub_1C337922C();
    if (!v5)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  sub_1C3379220();
  if (!v5)
  {
LABEL_6:
    sub_1C3379220();
    sub_1C337922C();
    if (!v10)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  sub_1C3379220();
  if (!v10)
  {
LABEL_7:
    sub_1C3379220();
    sub_1C337922C();
    if (!v11)
      goto LABEL_8;
LABEL_16:
    sub_1C3379220();
    if (!v12)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_15:
  sub_1C3379220();
  if (v11)
    goto LABEL_16;
LABEL_8:
  sub_1C3379220();
  sub_1C337922C();
  if (!v12)
  {
LABEL_9:
    sub_1C3379220();
    sub_1C337922C();
    goto LABEL_18;
  }
LABEL_17:
  sub_1C3379220();
LABEL_18:
  result = sub_1C3379214();
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v6 + 32;
    do
    {
      ++v9;
      result = sub_1C3379214();
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1C324AF30(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C324AF68 + 4 * byte_1C33BAEAB[a1]))(0xD000000000000011, 0x80000001C341E030);
}

uint64_t sub_1C324AF68()
{
  return 0x6F6353686374616DLL;
}

uint64_t sub_1C324AF84()
{
  return 0x6E656B6F5478616DLL;
}

uint64_t sub_1C324B028()
{
  unsigned __int8 *v0;

  return sub_1C324AF30(*v0);
}

uint64_t sub_1C324B030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C324FEF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C324B054(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1C324B060()
{
  sub_1C324DCE8();
  return sub_1C3379274();
}

uint64_t sub_1C324B088()
{
  sub_1C324DCE8();
  return sub_1C3379280();
}

uint64_t MatchInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF350);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned int *)(v1 + 4);
  v30 = *(unsigned __int8 *)(v1 + 8);
  v26 = *(unsigned int *)(v1 + 12);
  v27 = v7;
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 16);
  v23 = *(unsigned int *)(v1 + 20);
  v24 = *(unsigned __int8 *)(v1 + 24);
  v25 = v7;
  v22 = *(unsigned int *)(v1 + 28);
  v21 = *(unsigned __int8 *)(v1 + 32);
  v20 = *(unsigned int *)(v1 + 36);
  v19 = *(unsigned __int8 *)(v1 + 40);
  v18 = *(unsigned int *)(v1 + 44);
  v17 = *(unsigned __int8 *)(v1 + 48);
  v16 = *(unsigned int *)(v1 + 52);
  v15 = *(unsigned __int8 *)(v1 + 56);
  v14 = *(unsigned int *)(v1 + 60);
  HIDWORD(v13) = *(unsigned __int8 *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DCE8();
  sub_1C337925C();
  LOBYTE(v29) = 0;
  v9 = v28;
  sub_1C3379148();
  if (!v9)
  {
    v10 = v24;
    v11 = v25;
    LOBYTE(v29) = 1;
    v31 = v30;
    sub_1C33790E8();
    LOBYTE(v29) = 2;
    v31 = v11;
    sub_1C3379118();
    LOBYTE(v29) = 3;
    v31 = v10;
    sub_1C3379118();
    LOBYTE(v29) = 4;
    v31 = v21;
    sub_1C3379118();
    LOBYTE(v29) = 5;
    v31 = v19;
    sub_1C3379118();
    LOBYTE(v29) = 6;
    v31 = v17;
    sub_1C3379118();
    LOBYTE(v29) = 7;
    v31 = v15;
    sub_1C3379118();
    LOBYTE(v29) = 8;
    v31 = BYTE4(v13);
    sub_1C3379118();
    v29 = v8;
    v31 = 9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF360);
    sub_1C319F1F8(&qword_1EF8AF368, &qword_1EF8AF360, (uint64_t (*)(void))sub_1C324DD2C, MEMORY[0x1E0DEAF10]);
    sub_1C3379130();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MatchInfo.hashValue.getter()
{
  sub_1C3379208();
  MatchInfo.hash(into:)();
  return sub_1C3379244();
}

uint64_t MatchInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF378);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DCE8();
  sub_1C3379250();
  if (!v2)
  {
    LOBYTE(v28) = 0;
    v9 = sub_1C33790B8();
    LOBYTE(v28) = 1;
    v10 = sub_1C337904C();
    LOBYTE(v28) = 2;
    v26 = sub_1C337907C();
    LOBYTE(v28) = 3;
    v25 = sub_1C337907C();
    LOBYTE(v28) = 4;
    v24 = sub_1C337907C();
    LOBYTE(v28) = 5;
    v23 = sub_1C337907C();
    LOBYTE(v28) = 6;
    v22 = sub_1C337907C();
    LOBYTE(v28) = 7;
    v21 = sub_1C337907C();
    LOBYTE(v28) = 8;
    v20 = sub_1C337907C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF360);
    v27 = 9;
    sub_1C319F1F8(&qword_1EF8AF380, &qword_1EF8AF360, (uint64_t (*)(void))sub_1C324DD70, MEMORY[0x1E0DEAF40]);
    sub_1C3379094();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v28;
    *(_DWORD *)a2 = v9;
    *(_DWORD *)(a2 + 4) = v10;
    *(_BYTE *)(a2 + 8) = BYTE4(v10) & 1;
    v13 = BYTE4(v26);
    *(_DWORD *)(a2 + 12) = v26;
    *(_BYTE *)(a2 + 16) = v13 & 1;
    v14 = BYTE4(v25);
    *(_DWORD *)(a2 + 20) = v25;
    *(_BYTE *)(a2 + 24) = v14 & 1;
    v15 = BYTE4(v24);
    *(_DWORD *)(a2 + 28) = v24;
    *(_BYTE *)(a2 + 32) = v15 & 1;
    v16 = BYTE4(v23);
    *(_DWORD *)(a2 + 36) = v23;
    *(_BYTE *)(a2 + 40) = v16 & 1;
    v17 = BYTE4(v22);
    *(_DWORD *)(a2 + 44) = v22;
    *(_BYTE *)(a2 + 48) = v17 & 1;
    v18 = BYTE4(v21);
    *(_DWORD *)(a2 + 52) = v21;
    *(_BYTE *)(a2 + 56) = v18 & 1;
    v19 = BYTE4(v20);
    *(_DWORD *)(a2 + 60) = v20;
    *(_BYTE *)(a2 + 64) = v19 & 1;
    *(_QWORD *)(a2 + 72) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C324B854()
{
  sub_1C3379208();
  MatchInfo.hash(into:)();
  return sub_1C3379244();
}

uint64_t sub_1C324B920()
{
  sub_1C3379208();
  MatchInfo.hash(into:)();
  return sub_1C3379244();
}

uint64_t sub_1C324B9E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MatchInfo.init(from:)(a1, a2);
}

uint64_t sub_1C324B9F8(_QWORD *a1)
{
  return MatchInfo.encode(to:)(a1);
}

uint64_t AsrAlternative.value.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t AsrAlternative.probability.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t AsrAlternative.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  swift_bridgeObjectRetain();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    return sub_1C3379220();
  sub_1C3379220();
  return sub_1C337922C();
}

uint64_t sub_1C324BAE8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C696261626F7270;
  else
    return 0x65756C6176;
}

uint64_t sub_1C324BB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C325031C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C324BB4C()
{
  sub_1C324DE38();
  return sub_1C3379274();
}

uint64_t sub_1C324BB74()
{
  sub_1C324DE38();
  return sub_1C3379280();
}

uint64_t AsrAlternative.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF390);
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned int *)(v1 + 16);
  v10 = *(unsigned __int8 *)(v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DE38();
  sub_1C337925C();
  v13 = 0;
  sub_1C3379124();
  if (!v2)
  {
    v12 = 1;
    v11 = v10;
    sub_1C33790E8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v4);
}

uint64_t AsrAlternative.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  sub_1C3379208();
  sub_1C3378C38();
  sub_1C3379220();
  if (v1 != 1)
    sub_1C337922C();
  return sub_1C3379244();
}

uint64_t AsrAlternative.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF3A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DE38();
  sub_1C3379250();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = 0;
  v9 = sub_1C3379088();
  v11 = v10;
  v15 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1C337904C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 20) = BYTE4(v12) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C324BF00()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  sub_1C3378C38();
  if (v1 == 1)
    return sub_1C3379220();
  sub_1C3379220();
  return sub_1C337922C();
}

uint64_t sub_1C324BF64()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  sub_1C3379208();
  sub_1C3378C38();
  sub_1C3379220();
  if (v1 != 1)
    sub_1C337922C();
  return sub_1C3379244();
}

uint64_t sub_1C324BFEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AsrAlternative.init(from:)(a1, a2);
}

uint64_t sub_1C324C000(_QWORD *a1)
{
  return AsrAlternative.encode(to:)(a1);
}

uint64_t SpanProperty.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpanProperty.valueString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t SpanProperty.valueInt.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

unint64_t SpanProperty.valueFloat.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32);
}

double SpanProperty.namespaceSemantic.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1C2FE97FC(v4, v3, &v6);
  result = *(double *)&v6;
  *a1 = v6;
  return result;
}

uint64_t SpanProperty.valueSemantic.getter@<X0>(__int128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain();
    result = sub_1C2FEB634(v4, v3, &v7);
    v6 = v7;
  }
  else
  {
    v6 = xmmword_1C33BBE30;
  }
  *a1 = v6;
  return result;
}

uint64_t SpanProperty.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 36);
  v3 = *(unsigned __int8 *)(v0 + 44);
  swift_bridgeObjectRetain();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1C3379220();
    swift_bridgeObjectRetain();
    sub_1C3378C38();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
LABEL_6:
    sub_1C3379220();
    sub_1C337922C();
    if (!v3)
      goto LABEL_4;
    return sub_1C3379220();
  }
  sub_1C3379220();
  if (!v2)
    goto LABEL_6;
LABEL_3:
  sub_1C3379220();
  if (!v3)
  {
LABEL_4:
    sub_1C3379220();
    return sub_1C337922C();
  }
  return sub_1C3379220();
}

uint64_t sub_1C324C25C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C324C284 + 4 * byte_1C33BAEB5[*v0]))(7955819, 0xE300000000000000);
}

uint64_t sub_1C324C284()
{
  return 0x72745365756C6176;
}

uint64_t sub_1C324C2A4()
{
  return 0x746E4965756C6176;
}

uint64_t sub_1C324C2BC()
{
  return 0x6F6C4665756C6176;
}

uint64_t sub_1C324C2D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C325041C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C324C2FC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1C324C308()
{
  sub_1C324DE7C();
  return sub_1C3379274();
}

uint64_t sub_1C324C330()
{
  sub_1C324DE7C();
  return sub_1C3379280();
}

uint64_t SpanProperty.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDD08);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v17 = *(_QWORD *)(v1 + 24);
  v18 = v7;
  v16 = *(unsigned int *)(v1 + 32);
  v15 = *(unsigned __int8 *)(v1 + 36);
  v14 = *(unsigned int *)(v1 + 40);
  v13 = *(unsigned __int8 *)(v1 + 44);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DE7C();
  sub_1C337925C();
  v25 = 0;
  v8 = v19;
  sub_1C3379124();
  if (!v8)
  {
    v9 = v15;
    v10 = v13;
    v24 = 1;
    sub_1C33790D0();
    v23 = 2;
    v22 = v9;
    sub_1C337910C();
    v21 = 3;
    v20 = v10;
    sub_1C33790E8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SpanProperty.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 36);
  v3 = *(unsigned __int8 *)(v0 + 44);
  sub_1C3379208();
  swift_bridgeObjectRetain();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1C3379220();
    swift_bridgeObjectRetain();
    sub_1C3378C38();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
LABEL_6:
    sub_1C3379220();
    sub_1C337922C();
    if (!v3)
      goto LABEL_4;
LABEL_7:
    sub_1C3379220();
    return sub_1C3379244();
  }
  sub_1C3379220();
  if (!v2)
    goto LABEL_6;
LABEL_3:
  sub_1C3379220();
  if (v3)
    goto LABEL_7;
LABEL_4:
  sub_1C3379220();
  sub_1C337922C();
  return sub_1C3379244();
}

uint64_t SpanProperty.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDCF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DE7C();
  sub_1C3379250();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = 0;
  v9 = sub_1C3379088();
  v11 = v10;
  v22 = v9;
  v25 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1C3379034();
  v14 = v13;
  v20 = v12;
  v24 = 2;
  swift_bridgeObjectRetain();
  v21 = v14;
  v19 = sub_1C3379070();
  v23 = 3;
  v16 = sub_1C337904C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v21;
  *(_QWORD *)a2 = v22;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v17;
  v18 = BYTE4(v19);
  *(_DWORD *)(a2 + 32) = v19;
  *(_BYTE *)(a2 + 36) = v18 & 1;
  *(_DWORD *)(a2 + 40) = v16;
  *(_BYTE *)(a2 + 44) = BYTE4(v16) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C324C89C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 36);
  v3 = *(unsigned __int8 *)(v0 + 44);
  sub_1C3379208();
  swift_bridgeObjectRetain();
  sub_1C3378C38();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1C3379220();
    swift_bridgeObjectRetain();
    sub_1C3378C38();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
LABEL_6:
    sub_1C3379220();
    sub_1C337922C();
    if (!v3)
      goto LABEL_4;
LABEL_7:
    sub_1C3379220();
    return sub_1C3379244();
  }
  sub_1C3379220();
  if (!v2)
    goto LABEL_6;
LABEL_3:
  sub_1C3379220();
  if (v3)
    goto LABEL_7;
LABEL_4:
  sub_1C3379220();
  sub_1C337922C();
  return sub_1C3379244();
}

uint64_t sub_1C324C9BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SpanProperty.init(from:)(a1, a2);
}

uint64_t sub_1C324C9D0(_QWORD *a1)
{
  return SpanProperty.encode(to:)(a1);
}

SiriOntology::PayloadAttachmentInfo::AttachmentType_optional __swiftcall PayloadAttachmentInfo.AttachmentType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SiriOntology::PayloadAttachmentInfo::AttachmentType_optional)rawValue;
}

uint64_t PayloadAttachmentInfo.AttachmentType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1C324CA0C()
{
  sub_1C32505E8();
  return sub_1C3378D64();
}

uint64_t sub_1C324CA68()
{
  sub_1C32505E8();
  return sub_1C3378D4C();
}

void PayloadAttachmentInfo.attachmentType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t PayloadAttachmentInfo.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 2)
    return sub_1C3379220();
  sub_1C3379220();
  return sub_1C3379214();
}

uint64_t static PayloadAttachmentInfo.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1C324CB48()
{
  return 0x656D686361747461;
}

uint64_t sub_1C324CB6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656D686361747461 && a2 == 0xEE0065707954746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1C3379184();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1C324CC24(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1C324CC30()
{
  sub_1C324DEC0();
  return sub_1C3379274();
}

uint64_t sub_1C324CC58()
{
  sub_1C324DEC0();
  return sub_1C3379280();
}

uint64_t PayloadAttachmentInfo.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF3A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DEC0();
  sub_1C337925C();
  v10 = v7;
  sub_1C324DF04();
  sub_1C3379100();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PayloadAttachmentInfo.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_1C3379208();
  sub_1C3379220();
  if (v1 != 2)
    sub_1C3379214();
  return sub_1C3379244();
}

uint64_t PayloadAttachmentInfo.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8AF3C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C324DEC0();
  sub_1C3379250();
  if (!v2)
  {
    sub_1C324DF48();
    sub_1C3379064();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C324CF04()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_1C3379208();
  sub_1C3379220();
  if (v1 != 2)
    sub_1C3379214();
  return sub_1C3379244();
}

uint64_t sub_1C324CF70()
{
  _BYTE *v0;

  if (*v0 == 2)
    return sub_1C3379220();
  sub_1C3379220();
  return sub_1C3379214();
}

uint64_t sub_1C324CFBC()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  sub_1C3379208();
  sub_1C3379220();
  if (v1 != 2)
    sub_1C3379214();
  return sub_1C3379244();
}

uint64_t sub_1C324D024@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return PayloadAttachmentInfo.init(from:)(a1, a2);
}

uint64_t sub_1C324D038(_QWORD *a1)
{
  return PayloadAttachmentInfo.encode(to:)(a1);
}

uint64_t sub_1C324D04C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2)
      return 1;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0)
      return 1;
  }
  return 0;
}

BOOL _s12SiriOntology12SpanPropertyV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  float v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  float v12;
  char v13;
  char v14;
  _BOOL8 result;
  char v16;
  char v17;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 36);
  v6 = *(float *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 44);
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a2 + 36);
  v12 = *(float *)(a2 + 40);
  v13 = *(_BYTE *)(a2 + 44);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v14 = sub_1C3379184(), result = 0, (v14 & 1) != 0))
  {
    if (v3)
    {
      if (!v8)
        return 0;
      if (v2 != v9 || v3 != v8)
      {
        v16 = sub_1C3379184();
        result = 0;
        if ((v16 & 1) == 0)
          return result;
      }
    }
    else if (v8)
    {
      return 0;
    }
    if ((v5 & 1) != 0)
    {
      if (!v11)
        return 0;
    }
    else
    {
      if (v4 == v10)
        v17 = v11;
      else
        v17 = 1;
      if ((v17 & 1) != 0)
        return 0;
    }
    if ((v7 & 1) == 0)
    {
      if (v6 == v12)
        v18 = v13;
      else
        v18 = 1;
      return (v18 & 1) == 0;
    }
    return (v13 & 1) != 0;
  }
  return result;
}

BOOL _s12SiriOntology9MatchInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v10;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(float *)(a1 + 4) == *(float *)(a2 + 4))
      v2 = *(_BYTE *)(a2 + 8);
    else
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
      v3 = *(_BYTE *)(a2 + 16);
    else
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
      v4 = *(_BYTE *)(a2 + 24);
    else
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28))
      v5 = *(_BYTE *)(a2 + 32);
    else
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36))
      v6 = *(_BYTE *)(a2 + 40);
    else
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 48))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44))
      v7 = *(_BYTE *)(a2 + 48);
    else
      v7 = 1;
    if ((v7 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52))
      v8 = *(_BYTE *)(a2 + 56);
    else
      v8 = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 64))
      return 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60))
      v10 = *(_BYTE *)(a2 + 64);
    else
      v10 = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  return sub_1C3002588(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
}

BOOL _s12SiriOntology13UsoEntitySpanV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  char v38;
  _BOOL8 result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  BOOL matched;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  int v124;
  char v125;
  int v126;
  char v127;
  int v128;
  char v129;
  int v130;
  char v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v3 = *(_QWORD *)(a1 + 8);
  v119 = *(unsigned __int8 *)(a1 + 16);
  v112 = *(_QWORD *)(a1 + 24);
  v116 = *(_QWORD *)(a1 + 32);
  v108 = *(_QWORD *)(a1 + 56);
  v109 = *(_QWORD *)(a1 + 48);
  v106 = *(_QWORD *)(a1 + 72);
  v107 = *(_QWORD *)(a1 + 64);
  v104 = *(_QWORD *)(a1 + 88);
  v105 = *(_QWORD *)(a1 + 80);
  v103 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 112);
  v101 = *(_QWORD *)(a1 + 40);
  v102 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_DWORD *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 132);
  v8 = *(_DWORD *)(a1 + 136);
  v9 = *(_BYTE *)(a1 + 140);
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(unsigned __int8 *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 176);
  v15 = *(_BYTE *)(a1 + 184);
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(unsigned __int8 *)(a2 + 16);
  v110 = *(_QWORD *)(a2 + 24);
  v114 = *(_QWORD *)(a2 + 32);
  v92 = *(_QWORD *)(a2 + 40);
  v93 = *(_QWORD *)(a2 + 48);
  v94 = *(_QWORD *)(a2 + 56);
  v95 = *(_QWORD *)(a2 + 64);
  v96 = *(_QWORD *)(a2 + 72);
  v97 = *(_QWORD *)(a2 + 80);
  v98 = *(_QWORD *)(a2 + 88);
  v99 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 112);
  v100 = *(_QWORD *)(a2 + 104);
  v19 = *(_DWORD *)(a2 + 128);
  v20 = *(unsigned __int8 *)(a2 + 132);
  v21 = *(_DWORD *)(a2 + 136);
  v22 = *(unsigned __int8 *)(a2 + 140);
  v23 = *(_QWORD *)(a2 + 144);
  v24 = *(_QWORD *)(a2 + 152);
  v25 = *(_QWORD *)(a2 + 160);
  v26 = *(unsigned __int8 *)(a2 + 168);
  v27 = *(_QWORD *)(a2 + 176);
  v28 = *(_BYTE *)(a2 + 184);
  if (!v3)
  {
    v91 = *(_QWORD *)(a2 + 120);
    if (v16)
      return 0;
    goto LABEL_8;
  }
  if (!v16)
    return 0;
  v91 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v16)
    goto LABEL_8;
  v64 = *(_QWORD *)(a1 + 120);
  v66 = *(_QWORD *)(a1 + 112);
  v61 = *(_QWORD *)(a2 + 176);
  v60 = *(unsigned __int8 *)(a1 + 168);
  v29 = *(_BYTE *)(a1 + 184);
  v30 = *(_QWORD *)(a1 + 176);
  v76 = *(_QWORD *)(a1 + 144);
  v70 = *(_DWORD *)(a2 + 136);
  v73 = *(_DWORD *)(a1 + 136);
  v85 = *(_DWORD *)(a2 + 128);
  v88 = *(_BYTE *)(a1 + 140);
  v67 = *(_QWORD *)(a1 + 160);
  v31 = *(unsigned __int8 *)(a2 + 168);
  v32 = *(_QWORD *)(a1 + 152);
  v33 = *(_QWORD *)(a2 + 160);
  v34 = *(_QWORD *)(a2 + 152);
  v35 = *(_DWORD *)(a1 + 128);
  v82 = *(_QWORD *)(a2 + 144);
  v79 = *(unsigned __int8 *)(a2 + 140);
  v62 = *(unsigned __int8 *)(a2 + 132);
  v36 = *(_BYTE *)(a1 + 132);
  v37 = sub_1C3379184();
  v7 = v36;
  v20 = v62;
  v21 = v70;
  v8 = v73;
  v22 = v79;
  v23 = v82;
  v6 = v35;
  v24 = v34;
  v25 = v33;
  v5 = v64;
  v4 = v66;
  v10 = v32;
  v19 = v85;
  v9 = v88;
  v26 = v31;
  v12 = v67;
  v11 = v76;
  v14 = v30;
  v15 = v29;
  v13 = v60;
  v27 = v61;
  v38 = v37;
  result = 0;
  if ((v38 & 1) != 0)
  {
LABEL_8:
    if (v119 == 7)
    {
      if (v17 != 7)
        return 0;
    }
    else
    {
      result = 0;
      if (v17 == 7 || v119 != v17)
        return result;
    }
    if (v116)
    {
      if (!v114)
        return 0;
      if (v112 != v110 || v116 != v114)
      {
        v65 = v5;
        v120 = v14;
        v68 = v12;
        v40 = v26;
        v77 = v11;
        v71 = v21;
        v74 = v8;
        v86 = v19;
        v89 = v9;
        v83 = v23;
        v80 = v22;
        v63 = v20;
        v41 = v10;
        v42 = v25;
        v43 = v24;
        v44 = v6;
        v117 = v7;
        v45 = sub_1C3379184();
        v5 = v65;
        v7 = v117;
        v6 = v44;
        v19 = v86;
        v9 = v89;
        v24 = v43;
        v25 = v42;
        v10 = v41;
        v20 = v63;
        v21 = v71;
        v8 = v74;
        v22 = v80;
        v23 = v83;
        v11 = v77;
        v26 = v40;
        v12 = v68;
        v14 = v120;
        v46 = v45;
        result = 0;
        if ((v46 & 1) == 0)
          return result;
      }
    }
    else if (v114)
    {
      return 0;
    }
    if (v4)
    {
      v47 = v101;
      v139 = v101;
      v140 = v109;
      v141 = v108;
      v142 = v107;
      v143 = v106;
      v144 = v105;
      v145 = v104;
      v146 = v103;
      v147 = v102;
      v148 = v4;
      if (v18)
      {
        v87 = v19;
        v90 = v9;
        v48 = v20;
        v72 = v21;
        v75 = v8;
        v81 = v22;
        v84 = v23;
        v49 = v7;
        v118 = v6;
        v78 = v11;
        v69 = v24;
        v115 = v25;
        v111 = v10;
        v113 = v26;
        v121 = v14;
        v122 = v92;
        v123 = v93 & 1;
        v124 = HIDWORD(v93);
        v125 = v94 & 1;
        v126 = HIDWORD(v94);
        v127 = v95 & 1;
        v128 = HIDWORD(v95);
        v129 = v96 & 1;
        v130 = HIDWORD(v96);
        v131 = v97 & 1;
        v132 = HIDWORD(v97);
        v133 = v98 & 1;
        v134 = HIDWORD(v98);
        v135 = v99 & 1;
        v136 = HIDWORD(v99);
        v137 = v100 & 1;
        v138 = v18;
        v50 = v5;
        matched = _s12SiriOntology9MatchInfoV2eeoiySbAC_ACtFZ_0((uint64_t)&v139, (uint64_t)&v122);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v5 = v50;
        if (!matched)
          return 0;
LABEL_25:
        if ((sub_1C30025E4(v5, v91) & 1) != 0)
        {
          if ((v49 & 1) != 0)
          {
            if (!v48)
              return 0;
          }
          else
          {
            if (v118 == v87)
              v53 = v48;
            else
              v53 = 1;
            if ((v53 & 1) != 0)
              return 0;
          }
          if ((v90 & 1) != 0)
          {
            v54 = v84;
            if (!v81)
              return 0;
          }
          else
          {
            v55 = v81;
            if (v75 != v72)
              v55 = 1;
            v54 = v84;
            if ((v55 & 1) != 0)
              return 0;
          }
          if ((sub_1C3002744(v78, v54) & 1) != 0)
          {
            if (v12)
            {
              v56 = v121;
              v57 = v113;
              if (!v115)
                return 0;
              if (v111 != v69 || v12 != v115)
              {
                v58 = sub_1C3379184();
                result = 0;
                if ((v58 & 1) == 0)
                  return result;
              }
            }
            else
            {
              v56 = v121;
              v57 = v113;
              if (v115)
                return 0;
            }
            if (v13 == 3)
            {
              if (v57 != 3)
                return 0;
            }
            else
            {
              if (v57 == 3)
                return 0;
              if (v13 == 2)
              {
                if (v57 != 2)
                  return 0;
              }
              else
              {
                result = 0;
                if (v57 == 2 || ((v57 ^ v13) & 1) != 0)
                  return result;
              }
            }
            if ((v15 & 1) == 0)
            {
              if (v56 == v27)
                v59 = v28;
              else
                v59 = 1;
              return (v59 & 1) == 0;
            }
            if ((v28 & 1) != 0)
              return 1;
          }
        }
        return 0;
      }
      swift_bridgeObjectRetain();
      v52 = v109;
      v18 = 0;
    }
    else
    {
      v87 = v19;
      v90 = v9;
      v48 = v20;
      v72 = v21;
      v75 = v8;
      v81 = v22;
      v84 = v23;
      v49 = v7;
      v118 = v6;
      v78 = v11;
      v69 = v24;
      v115 = v25;
      v111 = v10;
      v113 = v26;
      v121 = v14;
      v47 = v101;
      v52 = v109;
      if (!v18)
        goto LABEL_25;
    }
    v139 = v47;
    v140 = v52;
    v141 = v108;
    v142 = v107;
    v143 = v106;
    v144 = v105;
    v145 = v104;
    v146 = v103;
    v147 = v102;
    v148 = v4;
    v149 = v92;
    v150 = v93;
    v151 = v94;
    v152 = v95;
    v153 = v96;
    v154 = v97;
    v155 = v98;
    v156 = v99;
    v157 = v100;
    v158 = v18;
    swift_bridgeObjectRetain();
    sub_1C32506B4((uint64_t)&v139);
    return 0;
  }
  return result;
}

unint64_t sub_1C324D9FC()
{
  unint64_t result;

  result = qword_1ED7B85C0;
  if (!qword_1ED7B85C0)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBDD4, &type metadata for UsoEntitySpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7B85C0);
  }
  return result;
}

unint64_t sub_1C324DA40()
{
  unint64_t result;

  result = qword_1ED7B85B0;
  if (!qword_1ED7B85B0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for UsoEntitySpan.SpanSource, &type metadata for UsoEntitySpan.SpanSource);
    atomic_store(result, (unint64_t *)&qword_1ED7B85B0);
  }
  return result;
}

unint64_t sub_1C324DA84()
{
  unint64_t result;

  result = qword_1ED7CDC60;
  if (!qword_1ED7CDC60)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo, &type metadata for MatchInfo);
    atomic_store(result, (unint64_t *)&qword_1ED7CDC60);
  }
  return result;
}

unint64_t sub_1C324DAC8()
{
  unint64_t result;

  result = qword_1ED7B85A0;
  if (!qword_1ED7B85A0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for SpanProperty, &type metadata for SpanProperty);
    atomic_store(result, (unint64_t *)&qword_1ED7B85A0);
  }
  return result;
}

unint64_t sub_1C324DB0C()
{
  unint64_t result;

  result = qword_1ED7B85E8;
  if (!qword_1ED7B85E8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AsrAlternative, &type metadata for AsrAlternative);
    atomic_store(result, (unint64_t *)&qword_1ED7B85E8);
  }
  return result;
}

unint64_t sub_1C324DB50()
{
  unint64_t result;

  result = qword_1ED7B8F98;
  if (!qword_1ED7B8F98)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo, &type metadata for PayloadAttachmentInfo);
    atomic_store(result, (unint64_t *)&qword_1ED7B8F98);
  }
  return result;
}

unint64_t sub_1C324DB94()
{
  unint64_t result;

  result = qword_1ED7B85B8;
  if (!qword_1ED7B85B8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for UsoEntitySpan.SpanSource, &type metadata for UsoEntitySpan.SpanSource);
    atomic_store(result, (unint64_t *)&qword_1ED7B85B8);
  }
  return result;
}

unint64_t sub_1C324DBD8()
{
  unint64_t result;

  result = qword_1ED7CDC68;
  if (!qword_1ED7CDC68)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo, &type metadata for MatchInfo);
    atomic_store(result, (unint64_t *)&qword_1ED7CDC68);
  }
  return result;
}

unint64_t sub_1C324DC1C()
{
  unint64_t result;

  result = qword_1ED7B85A8;
  if (!qword_1ED7B85A8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for SpanProperty, &type metadata for SpanProperty);
    atomic_store(result, (unint64_t *)&qword_1ED7B85A8);
  }
  return result;
}

unint64_t sub_1C324DC60()
{
  unint64_t result;

  result = qword_1ED7B85F0;
  if (!qword_1ED7B85F0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AsrAlternative, &type metadata for AsrAlternative);
    atomic_store(result, (unint64_t *)&qword_1ED7B85F0);
  }
  return result;
}

unint64_t sub_1C324DCA4()
{
  unint64_t result;

  result = qword_1ED7B8FA0;
  if (!qword_1ED7B8FA0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo, &type metadata for PayloadAttachmentInfo);
    atomic_store(result, (unint64_t *)&qword_1ED7B8FA0);
  }
  return result;
}

unint64_t sub_1C324DCE8()
{
  unint64_t result;

  result = qword_1EF8AF358;
  if (!qword_1EF8AF358)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBD84, &type metadata for MatchInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF358);
  }
  return result;
}

unint64_t sub_1C324DD2C()
{
  unint64_t result;

  result = qword_1EF8AF370;
  if (!qword_1EF8AF370)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.AliasType, &type metadata for MatchInfo.AliasType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF370);
  }
  return result;
}

unint64_t sub_1C324DD70()
{
  unint64_t result;

  result = qword_1EF8AF388;
  if (!qword_1EF8AF388)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.AliasType, &type metadata for MatchInfo.AliasType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF388);
  }
  return result;
}

uint64_t _s12SiriOntology14AsrAlternativeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  float v2;
  char v3;
  float v4;
  char v5;
  BOOL v6;
  char v7;
  uint64_t result;
  char v9;

  v2 = *(float *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 20);
  v4 = *(float *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 20);
  v6 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v6 || (v7 = sub_1C3379184(), result = 0, (v7 & 1) != 0))
  {
    if ((v3 & 1) != 0)
    {
      if ((v5 & 1) == 0)
        return 0;
    }
    else
    {
      if (v2 == v4)
        v9 = v5;
      else
        v9 = 1;
      if ((v9 & 1) != 0)
        return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_1C324DE38()
{
  unint64_t result;

  result = qword_1EF8AF398;
  if (!qword_1EF8AF398)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBD34, &type metadata for AsrAlternative.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF398);
  }
  return result;
}

unint64_t sub_1C324DE7C()
{
  unint64_t result;

  result = qword_1ED7B8588;
  if (!qword_1ED7B8588)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBCE4, &type metadata for SpanProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7B8588);
  }
  return result;
}

unint64_t sub_1C324DEC0()
{
  unint64_t result;

  result = qword_1EF8AF3B0;
  if (!qword_1EF8AF3B0)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBC94, &type metadata for PayloadAttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3B0);
  }
  return result;
}

unint64_t sub_1C324DF04()
{
  unint64_t result;

  result = qword_1EF8AF3B8;
  if (!qword_1EF8AF3B8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo.AttachmentType, &type metadata for PayloadAttachmentInfo.AttachmentType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3B8);
  }
  return result;
}

unint64_t sub_1C324DF48()
{
  unint64_t result;

  result = qword_1EF8AF3C8;
  if (!qword_1EF8AF3C8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo.AttachmentType, &type metadata for PayloadAttachmentInfo.AttachmentType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3C8);
  }
  return result;
}

unint64_t sub_1C324DF90()
{
  unint64_t result;

  result = qword_1EF8AF3D0;
  if (!qword_1EF8AF3D0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for UsoEntitySpan.SpanSource, &type metadata for UsoEntitySpan.SpanSource);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3D0);
  }
  return result;
}

unint64_t sub_1C324DFD8()
{
  unint64_t result;

  result = qword_1EF8AF3D8;
  if (!qword_1EF8AF3D8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for UsoEntitySpan, &type metadata for UsoEntitySpan);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3D8);
  }
  return result;
}

unint64_t sub_1C324E020()
{
  unint64_t result;

  result = qword_1EF8AF3E0;
  if (!qword_1EF8AF3E0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.AliasType, &type metadata for MatchInfo.AliasType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3E0);
  }
  return result;
}

unint64_t sub_1C324E068()
{
  unint64_t result;

  result = qword_1EF8AF3E8;
  if (!qword_1EF8AF3E8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.MatchSignals, &type metadata for MatchInfo.MatchSignals);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3E8);
  }
  return result;
}

unint64_t sub_1C324E0B0()
{
  unint64_t result;

  result = qword_1EF8AF3F0;
  if (!qword_1EF8AF3F0)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.MatchSignals, &type metadata for MatchInfo.MatchSignals);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3F0);
  }
  return result;
}

unint64_t sub_1C324E0F8()
{
  unint64_t result;

  result = qword_1EF8AF3F8;
  if (!qword_1EF8AF3F8)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.MatchSignals, &type metadata for MatchInfo.MatchSignals);
    atomic_store(result, (unint64_t *)&qword_1EF8AF3F8);
  }
  return result;
}

unint64_t sub_1C324E140()
{
  unint64_t result;

  result = qword_1EF8AF400;
  if (!qword_1EF8AF400)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.MatchSignals, &type metadata for MatchInfo.MatchSignals);
    atomic_store(result, (unint64_t *)&qword_1EF8AF400);
  }
  return result;
}

unint64_t sub_1C324E188()
{
  unint64_t result;

  result = qword_1EF8AF408;
  if (!qword_1EF8AF408)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo, &type metadata for MatchInfo);
    atomic_store(result, (unint64_t *)&qword_1EF8AF408);
  }
  return result;
}

unint64_t sub_1C324E1D0()
{
  unint64_t result;

  result = qword_1EF8AF410;
  if (!qword_1EF8AF410)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AsrAlternative, &type metadata for AsrAlternative);
    atomic_store(result, (unint64_t *)&qword_1EF8AF410);
  }
  return result;
}

unint64_t sub_1C324E218()
{
  unint64_t result;

  result = qword_1EF8AF418;
  if (!qword_1EF8AF418)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for SpanProperty, &type metadata for SpanProperty);
    atomic_store(result, (unint64_t *)&qword_1EF8AF418);
  }
  return result;
}

unint64_t sub_1C324E260()
{
  unint64_t result;

  result = qword_1EF8AF420;
  if (!qword_1EF8AF420)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo.AttachmentType, &type metadata for PayloadAttachmentInfo.AttachmentType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF420);
  }
  return result;
}

unint64_t sub_1C324E2A8()
{
  unint64_t result;

  result = qword_1EF8AF428;
  if (!qword_1EF8AF428)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo, &type metadata for PayloadAttachmentInfo);
    atomic_store(result, (unint64_t *)&qword_1EF8AF428);
  }
  return result;
}

uint64_t destroy for UsoEntitySpan()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = v6;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v8 = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v10 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = v4;
  v5 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = v5;
  v6 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v6;
  v7 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v7;
  v8 = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = v8;
  v9 = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v9;
  v10 = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = v10;
  v11 = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v11;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v12;
  LOBYTE(v12) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = v12;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v13 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v13;
  return a1;
}

__n128 __swift_memcpy185_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  v7 = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = v7;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for UsoEntitySpan(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 185))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UsoEntitySpan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 185) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 120) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 185) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoEntitySpan()
{
  return &type metadata for UsoEntitySpan;
}

uint64_t storeEnumTagSinglePayload for UsoEntitySpan.SpanSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1C324E8A0 + 4 * byte_1C33BAEBE[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1C324E8D4 + 4 * byte_1C33BAEB9[v4]))();
}

uint64_t sub_1C324E8D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324E8DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324E8E4);
  return result;
}

uint64_t sub_1C324E8F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324E8F8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1C324E8FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324E904(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UsoEntitySpan.SpanSource()
{
  return &type metadata for UsoEntitySpan.SpanSource;
}

uint64_t destroy for MatchInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MatchInfo(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MatchInfo(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v4;
  v5 = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v5;
  v6 = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v6;
  v7 = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v7;
  v8 = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = v8;
  v9 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = v9;
  v10 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v10;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for MatchInfo(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchInfo()
{
  return &type metadata for MatchInfo;
}

uint64_t storeEnumTagSinglePayload for MatchInfo.AliasType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1C324EC58 + 4 * byte_1C33BAEC8[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1C324EC8C + 4 * byte_1C33BAEC3[v4]))();
}

uint64_t sub_1C324EC8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324EC94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324EC9CLL);
  return result;
}

uint64_t sub_1C324ECA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324ECB0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1C324ECB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324ECBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MatchInfo.AliasType()
{
  return &type metadata for MatchInfo.AliasType;
}

ValueMetadata *type metadata accessor for MatchInfo.MatchSignals()
{
  return &type metadata for MatchInfo.MatchSignals;
}

uint64_t sub_1C324ECEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsrAlternative(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AsrAlternative(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsrAlternative(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AsrAlternative(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AsrAlternative()
{
  return &type metadata for AsrAlternative;
}

uint64_t initializeWithCopy for SpanProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SpanProperty(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  v5 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v5;
  return a1;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SpanProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpanProperty(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 45))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpanProperty(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 45) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanProperty()
{
  return &type metadata for SpanProperty;
}

uint64_t getEnumTagSinglePayload for PayloadAttachmentInfo(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  if (*a1 <= 2u)
    v6 = 2;
  else
    v6 = *a1;
  v7 = v6 - 3;
  if (*a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PayloadAttachmentInfo(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C324F16C + 4 * byte_1C33BAED2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C324F1A0 + 4 * byte_1C33BAECD[v4]))();
}

uint64_t sub_1C324F1A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324F1B0);
  return result;
}

uint64_t sub_1C324F1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324F1C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C324F1C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F1D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PayloadAttachmentInfo()
{
  return &type metadata for PayloadAttachmentInfo;
}

ValueMetadata *type metadata accessor for PayloadAttachmentInfo.AttachmentType()
{
  return &type metadata for PayloadAttachmentInfo.AttachmentType;
}

uint64_t storeEnumTagSinglePayload for PayloadAttachmentInfo.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C324F240 + 4 * byte_1C33BAED7[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C324F260 + 4 * byte_1C33BAEDC[v4]))();
}

_BYTE *sub_1C324F240(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C324F260(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C324F268(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C324F270(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C324F278(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C324F280(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PayloadAttachmentInfo.CodingKeys()
{
  return &type metadata for PayloadAttachmentInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SpanProperty.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C324F2E8 + 4 * byte_1C33BAEE6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C324F31C + 4 * byte_1C33BAEE1[v4]))();
}

uint64_t sub_1C324F31C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324F32CLL);
  return result;
}

uint64_t sub_1C324F338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324F340);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C324F344(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F34C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpanProperty.CodingKeys()
{
  return &type metadata for SpanProperty.CodingKeys;
}

uint64_t _s12SiriOntology21PayloadAttachmentInfoV14AttachmentTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C324F3B4 + 4 * byte_1C33BAEF0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C324F3E8 + 4 * byte_1C33BAEEB[v4]))();
}

uint64_t sub_1C324F3E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F3F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324F3F8);
  return result;
}

uint64_t sub_1C324F404(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324F40CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C324F410(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F418(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AsrAlternative.CodingKeys()
{
  return &type metadata for AsrAlternative.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MatchInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1C324F480 + 4 * byte_1C33BAEFA[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1C324F4B4 + 4 * byte_1C33BAEF5[v4]))();
}

uint64_t sub_1C324F4B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F4BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324F4C4);
  return result;
}

uint64_t sub_1C324F4D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324F4D8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1C324F4DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F4E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MatchInfo.CodingKeys()
{
  return &type metadata for MatchInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UsoEntitySpan.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1C324F54C + 4 * byte_1C33BAF04[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1C324F580 + 4 * byte_1C33BAEFF[v4]))();
}

uint64_t sub_1C324F580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C324F590);
  return result;
}

uint64_t sub_1C324F59C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C324F5A4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1C324F5A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C324F5B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UsoEntitySpan.CodingKeys()
{
  return &type metadata for UsoEntitySpan.CodingKeys;
}

unint64_t sub_1C324F5D0()
{
  unint64_t result;

  result = qword_1EF8AF430;
  if (!qword_1EF8AF430)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BB98C, &type metadata for UsoEntitySpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF430);
  }
  return result;
}

unint64_t sub_1C324F618()
{
  unint64_t result;

  result = qword_1EF8AF438;
  if (!qword_1EF8AF438)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBA44, &type metadata for MatchInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF438);
  }
  return result;
}

unint64_t sub_1C324F660()
{
  unint64_t result;

  result = qword_1EF8AF440;
  if (!qword_1EF8AF440)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBAFC, &type metadata for AsrAlternative.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF440);
  }
  return result;
}

unint64_t sub_1C324F6A8()
{
  unint64_t result;

  result = qword_1EF8AF448;
  if (!qword_1EF8AF448)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBBB4, &type metadata for SpanProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF448);
  }
  return result;
}

unint64_t sub_1C324F6F0()
{
  unint64_t result;

  result = qword_1EF8AF450;
  if (!qword_1EF8AF450)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBC6C, &type metadata for PayloadAttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF450);
  }
  return result;
}

unint64_t sub_1C324F738()
{
  unint64_t result;

  result = qword_1EF8AF458;
  if (!qword_1EF8AF458)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBBDC, &type metadata for PayloadAttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF458);
  }
  return result;
}

unint64_t sub_1C324F780()
{
  unint64_t result;

  result = qword_1EF8AF460;
  if (!qword_1EF8AF460)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBC04, &type metadata for PayloadAttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF460);
  }
  return result;
}

unint64_t sub_1C324F7C8()
{
  unint64_t result;

  result = qword_1ED7B8598;
  if (!qword_1ED7B8598)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBB24, &type metadata for SpanProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7B8598);
  }
  return result;
}

unint64_t sub_1C324F810()
{
  unint64_t result;

  result = qword_1ED7B8590;
  if (!qword_1ED7B8590)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBB4C, &type metadata for SpanProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7B8590);
  }
  return result;
}

unint64_t sub_1C324F858()
{
  unint64_t result;

  result = qword_1EF8AF468;
  if (!qword_1EF8AF468)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBA6C, &type metadata for AsrAlternative.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF468);
  }
  return result;
}

unint64_t sub_1C324F8A0()
{
  unint64_t result;

  result = qword_1EF8AF470;
  if (!qword_1EF8AF470)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BBA94, &type metadata for AsrAlternative.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF470);
  }
  return result;
}

unint64_t sub_1C324F8E8()
{
  unint64_t result;

  result = qword_1EF8AF478;
  if (!qword_1EF8AF478)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BB9B4, &type metadata for MatchInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF478);
  }
  return result;
}

unint64_t sub_1C324F930()
{
  unint64_t result;

  result = qword_1EF8AF480;
  if (!qword_1EF8AF480)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BB9DC, &type metadata for MatchInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF8AF480);
  }
  return result;
}

unint64_t sub_1C324F978()
{
  unint64_t result;

  result = qword_1ED7B85D0;
  if (!qword_1ED7B85D0)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BB8FC, &type metadata for UsoEntitySpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7B85D0);
  }
  return result;
}

unint64_t sub_1C324F9C0()
{
  unint64_t result;

  result = qword_1ED7B85C8;
  if (!qword_1ED7B85C8)
  {
    result = MEMORY[0x1C3BD1B4C](&unk_1C33BB924, &type metadata for UsoEntitySpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7B85C8);
  }
  return result;
}

uint64_t sub_1C324FA04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x70416E696769726FLL && a2 == 0xEB00000000644970;
  if (v2 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43656372756F73 && a2 == 0xEF746E656E6F706DLL || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x666E49686374616DLL && a2 == 0xE90000000000006FLL || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69747265706F7270 && a2 == 0xEA00000000007365 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646E497472617473 && a2 == 0xEA00000000007865 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7865646E49646E65 && a2 == 0xE800000000000000 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74616E7265746C61 && a2 == 0xEC00000073657669 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E456E696769726FLL && a2 == 0xEE00644979746974 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C341E010 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C3414B40)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1C3379184();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1C324FEF0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001C341E030 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6353686374616DLL && a2 == 0xEA00000000006572 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656B6F5478616DLL && a2 == 0xED0000746E756F43 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C341E050 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C341E070 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001C341E090 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7473694474696465 && a2 == 0xEC00000065636E61 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7361696C4178616DLL && a2 == 0xED0000746E756F43 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C341E0B0 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C341E0D0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v5 = sub_1C3379184();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1C325031C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C696261626F7270 && a2 == 0xEB00000000797469)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1C3379184();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1C325041C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E4965756C6176 && a2 == 0xE800000000000000 || (sub_1C3379184() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6C4665756C6176 && a2 == 0xEA00000000007461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1C3379184();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1C32505E8()
{
  unint64_t result;

  result = qword_1EF8AF488;
  if (!qword_1EF8AF488)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for PayloadAttachmentInfo.AttachmentType, &type metadata for PayloadAttachmentInfo.AttachmentType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF488);
  }
  return result;
}

unint64_t sub_1C325062C()
{
  unint64_t result;

  result = qword_1EF8AF490;
  if (!qword_1EF8AF490)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for MatchInfo.AliasType, &type metadata for MatchInfo.AliasType);
    atomic_store(result, (unint64_t *)&qword_1EF8AF490);
  }
  return result;
}

unint64_t sub_1C3250670()
{
  unint64_t result;

  result = qword_1EF8AF498;
  if (!qword_1EF8AF498)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for UsoEntitySpan.SpanSource, &type metadata for UsoEntitySpan.SpanSource);
    atomic_store(result, (unint64_t *)&qword_1EF8AF498);
  }
  return result;
}

uint64_t sub_1C32506B4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2] = sub_1C302C434(MEMORY[0x1E0DEE9D8]);
  a1[3] = sub_1C302C450(v2);
  type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DDE90);
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.label.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.input.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.input.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.input.modify())()
{
  return nullsub_1;
}

double Com_Apple_Siri_Product_Proto_StatefulValue.confidence.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Com_Apple_Siri_Product_Proto_StatefulValue.confidence.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.confidence.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.inferred.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.inferred.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.inferred.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.path.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.path.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.path.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.tags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.tags.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  return sub_1C32508E4(v3, a1);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DE910);
}

uint64_t sub_1C32508E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  return sub_1C325095C(a1, v3);
}

uint64_t sub_1C325095C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.value.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1C32508E4(v0 + *(int *)(v4 + 40), (uint64_t)v3);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C2FF9138((uint64_t)v3, &qword_1EF7DE880);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1C2FF6CC0((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    return 0;
  }
  return *(_QWORD *)v3;
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DE848);
}

uint64_t sub_1C3250AC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1C32508E4(a1 + *(int *)(v7 + 40), (uint64_t)v6);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_1C2FF9138((uint64_t)v6, &qword_1EF7DE880);
  }
  else
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result != 1)
    {
      v10 = *v6;
      v11 = v6[1];
      goto LABEL_7;
    }
    result = sub_1C2FF6CC0((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  }
  v10 = 0;
  v11 = 0xE000000000000000;
LABEL_7:
  *a2 = v10;
  a2[1] = v11;
  return result;
}

uint64_t sub_1C3250BB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40));
  swift_bridgeObjectRetain();
  sub_1C2FF9138((uint64_t)v4, &qword_1EF7DE880);
  *v4 = v3;
  v4[1] = v2;
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.stringValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40));
  sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE880);
  *v5 = a1;
  v5[1] = a2;
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
}

void (*Com_Apple_Siri_Product_Proto_StatefulValue.stringValue.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  v5 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[3] = v5;
  v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  *((_DWORD *)v3 + 12) = v6;
  sub_1C32508E4(v1 + v6, (uint64_t)v5);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v3[4] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE880);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v9 = *v5;
      v10 = v5[1];
      goto LABEL_7;
    }
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  }
  v9 = 0;
  v10 = 0xE000000000000000;
LABEL_7:
  *v3 = v9;
  v3[1] = v10;
  return sub_1C3250DBC;
}

void sub_1C3250DBC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = *((int *)*a1 + 12);
  v8 = (void *)(*a1)[3];
  v9 = (_QWORD *)((*a1)[2] + v7);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1C2FF9138((uint64_t)v9, &qword_1EF7DE880);
    *v9 = v4;
    v9[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C2FF9138((*a1)[2] + v7, &qword_1EF7DE880);
    *v9 = v4;
    v9[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
  }
  free(v8);
  free(v2);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1C32508E4(v1 + *(int *)(v6 + 40), (uint64_t)v5);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE880);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return sub_1C2FF6C38((uint64_t)v5, (uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t sub_1C3250FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2FF6C7C(a1, (uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  v7 = a2 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  sub_1C2FF9138(v7, &qword_1EF7DE880);
  sub_1C2FF6C38((uint64_t)v6, v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  sub_1C2FF9138(v3, &qword_1EF7DE880);
  sub_1C2FF6C38(a1, v3, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  *((_DWORD *)v3 + 12) = v8;
  sub_1C32508E4(v1 + v8, (uint64_t)v5);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v3[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE880);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    v7[5] = 0xE000000000000000;
    v7[6] = MEMORY[0x1E0DEE9D8];
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    return sub_1C325128C;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1C2FF6CC0((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    goto LABEL_6;
  }
  sub_1C2FF6C38((uint64_t)v5, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1C325128C;
}

void sub_1C325128C(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = *(int *)(*(_QWORD *)a1 + 48);
  v6 = *(void **)(*(_QWORD *)a1 + 16);
  v7 = *(void **)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v5;
  if ((a2 & 1) != 0)
  {
    sub_1C2FF6C7C(*(_QWORD *)(*(_QWORD *)a1 + 24), (uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C2FF9138(v9, &qword_1EF7DE880);
    sub_1C2FF6C38((uint64_t)v6, v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  else
  {
    sub_1C2FF9138(**(_QWORD **)a1 + v5, &qword_1EF7DE880);
    sub_1C2FF6C38((uint64_t)v7, v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
  }
  free(v7);
  free(v6);
  free(v8);
  free(v2);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 44);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 44);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 56) = v2;
  v3 = a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.values.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValues.values.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C303BA80(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.unknownFields.setter(uint64_t a1)
{
  return sub_1C303BAD8(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValues.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(0);
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1C3040440((void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.id.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.id.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalState.id.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.states.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.states.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalState.states.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C303A584(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.unknownFields.setter(uint64_t a1)
{
  return sub_1C303A5DC(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalState.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.nodeName.modify())()
{
  return nullsub_1;
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.stateValues.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C303A584(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.unknownFields.setter(uint64_t a1)
{
  return sub_1C303A5DC(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.values.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C303BA80(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.unknownFields.setter(uint64_t a1)
{
  return sub_1C303BAD8(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(0);
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1C3040440((void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.domainName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.domainName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.domainName.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.nodeValueListMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.nodeValueListMap.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.nodeValueListMap.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.mcNodeValueListMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.mcNodeValueListMap.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.mcNodeValueListMap.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0) + 28);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0) + 28);
  v4 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
  return nullsub_1;
}

unint64_t static Com_Apple_Siri_Product_Proto_StatefulValue.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1C3251928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF4A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF4A0);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338C490;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "label";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38C8];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "input";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "confidence";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "inferred";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "path";
  *((_QWORD *)v17 + 1) = 4;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "tags";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "stringValue";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "semanticValue";
  *((_QWORD *)v23 + 1) = 13;
  v23[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_StatefulValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAC8, (uint64_t)qword_1EF8AF4A0, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_1C3378980();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          sub_1C3378A34();
          break;
        case 3:
          sub_1C3378A1C();
          break;
        case 4:
          sub_1C33789A4();
          break;
        case 5:
        case 6:
          sub_1C33789F8();
          break;
        case 7:
          sub_1C3251D3C(v5);
          break;
        case 8:
          sub_1C3251EBC(v5, a1, a2, a3);
          break;
        default:
          break;
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t sub_1C3251D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40));
  sub_1C32508E4((uint64_t)v6, (uint64_t)v5);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v14 = *(_QWORD *)(v7 - 8);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v5, 1, v7);
  sub_1C2FF9138((uint64_t)v5, &qword_1EF7DE880);
  if (v8 == 1 || (result = sub_1C337898C(), !v1))
  {
    v12 = 0;
    v13 = 0;
    result = sub_1C3378A28();
    v10 = v13;
    if (v1)
    {
      return swift_bridgeObjectRelease();
    }
    else if (v13)
    {
      v11 = v12;
      sub_1C2FF9138((uint64_t)v6, &qword_1EF7DE880);
      *v6 = v11;
      v6[1] = v10;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v7);
    }
  }
  return result;
}

uint64_t sub_1C3251EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a4;
  v51 = a3;
  v47 = a2;
  v50 = a1;
  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v43 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v39 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v39 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v44 = (uint64_t)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v39 - v23;
  v45 = v5;
  v46 = v4;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v39 - v23, 1, 1, v4);
  v26 = v50 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  sub_1C32508E4(v26, (uint64_t)v12);
  v42 = v14;
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v50 = v13;
  v28 = v27(v12, 1, v13);
  v41 = v26;
  if (v28 == 1)
  {
    sub_1C2FF9138((uint64_t)v12, &qword_1EF7DE880);
    v29 = v46;
    v30 = v49;
  }
  else
  {
    v40 = v25;
    sub_1C2FF6C38((uint64_t)v12, (uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    v33 = v49;
    sub_1C337898C();
    v30 = v33;
    if (v33)
    {
      sub_1C2FF6CC0((uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
      goto LABEL_8;
    }
    sub_1C2FF6C38((uint64_t)v19, (uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v29 = v46;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1C2FF9138((uint64_t)v24, &qword_1ED7CDFF0);
      sub_1C2FF6C38((uint64_t)v17, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      sub_1C2FF6C38((uint64_t)v9, (uint64_t)v24, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      v40(v24, 0, 1, v29);
    }
    else
    {
      sub_1C2FF6CC0((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    }
  }
  sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C3378A70();
  if (v30)
  {
LABEL_8:
    v32 = (uint64_t)v24;
    return sub_1C2FF9138(v32, &qword_1ED7CDFF0);
  }
  v31 = v44;
  sub_1C325748C((uint64_t)v24, v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v29) != 1)
  {
    v36 = v43;
    sub_1C2FF6C38(v31, v43, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    v37 = v41;
    sub_1C2FF9138(v41, &qword_1EF7DE880);
    sub_1C2FF6C38(v36, v37, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    v38 = v50;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v37, 0, 1, v38);
  }
  v32 = v31;
  return sub_1C2FF9138(v32, &qword_1ED7CDFF0);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 8);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v6 || (result = sub_1C3378B3C(), !v1))
  {
    v8 = *(_QWORD *)(v0 + 24);
    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v9 || (result = sub_1C3378B3C(), !v1))
    {
      if (*(double *)(v0 + 32) == 0.0 || (result = sub_1C3378B30(), !v1))
      {
        if (*(_BYTE *)(v0 + 40) != 1 || (result = sub_1C3378AE8(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) || (result = sub_1C3378B24(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16) || (result = sub_1C3378B24(), !v1))
            {
              v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
              sub_1C32508E4(v0 + *(int *)(v10 + 40), (uint64_t)v4);
              v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v4, 1, v11) == 1)return sub_1C33788FC();
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                sub_1C3252640(v0);
                result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
                if (!v1)
                  return sub_1C33788FC();
              }
              else
              {
                swift_bridgeObjectRelease();
                result = sub_1C325251C(v0);
                if (!v1)
                  return sub_1C33788FC();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C325251C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1C32508E4(a1 + *(int *)(v5 + 40), (uint64_t)v4);
  v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DE880);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1C3378B3C();
    return swift_bridgeObjectRelease();
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1C3252640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1C32508E4(a1 + *(int *)(v8 + 40), (uint64_t)v4);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C2FF9138((uint64_t)v4, &qword_1EF7DE880);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1C2FF6C38((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C2FF6DE0(&qword_1EF819318, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C3378B6C();
    return sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  result = sub_1C2FF6CC0((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, &qword_1EF8AF530, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1C32527FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 56) = v3;
  v4 = a2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C325287C()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1C3252898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1C32528D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1C3252918())()
{
  return nullsub_1;
}

uint64_t sub_1C325292C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_StatefulValue.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C3252940()
{
  return Com_Apple_Siri_Product_Proto_StatefulValue.traverse<A>(visitor:)();
}

uint64_t sub_1C3252954()
{
  sub_1C2FF6DE0(&qword_1EF8AF708, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
  return sub_1C3378950();
}

uint64_t sub_1C32529A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAC8, (uint64_t)qword_1EF8AF4A0, a1);
}

uint64_t sub_1C32529C0()
{
  sub_1C2FF6DE0(&qword_1EF7DE900, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
  return sub_1C3378AA0();
}

uint64_t sub_1C3252A00()
{
  sub_1C2FF6DE0(&qword_1EF7DE900, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
  return sub_1C3378AAC();
}

unint64_t static Com_Apple_Siri_Product_Proto_StatefulValues.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1C3252A70(uint64_t a1)
{
  return sub_1C3253714(a1, qword_1EF8AF4B8);
}

uint64_t static Com_Apple_Siri_Product_Proto_StatefulValues._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAD0, (uint64_t)qword_1EF8AF4B8, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C325385C(a1, a2, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, &qword_1EF7DE900, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3253958(a1, a2, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, &qword_1EF7DE900, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue, (void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t static Com_Apple_Siri_Product_Proto_StatefulValues.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_1C3049868(a1, a2, sub_1C3004E0C, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues) & 1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, &qword_1EF7DE9C0, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

unint64_t sub_1C3252B3C()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1C3252B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_StatefulValues.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C3252B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_StatefulValues.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C3252B80()
{
  sub_1C2FF6DE0(&qword_1EF8AF700, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return sub_1C3378950();
}

uint64_t sub_1C3252BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAD0, (uint64_t)qword_1EF8AF4B8, a1);
}

uint64_t sub_1C3252BEC()
{
  sub_1C2FF6DE0(&qword_1EF7DE9B8, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return sub_1C3378AA0();
}

uint64_t sub_1C3252C2C()
{
  sub_1C2FF6DE0(&qword_1EF7DE9B8, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return sub_1C3378AAC();
}

uint64_t sub_1C3252C7C(_QWORD *a1, char *a2)
{
  return sub_1C3049868(a1, a2, sub_1C3004E0C, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalState.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1C3252CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF4D0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF4D0);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3388730;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38C8];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "states";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAD8, (uint64_t)qword_1EF8AF4D0, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C3378980();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
        sub_1C2FF6DE0(&qword_1EF7DE900, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
        sub_1C3378A64();
      }
      else if (result == 1)
      {
        sub_1C33789D4();
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = sub_1C3378B0C(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0),
          sub_1C2FF6DE0(&qword_1EF7DE900, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue), result = sub_1C3378B60(), !v1))
    {
      type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
      return sub_1C33788FC();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, &qword_1EF8AF538, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1C325304C@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C3253078()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1C3253094()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalState.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C32530A8()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalState.traverse<A>(visitor:)();
}

uint64_t sub_1C32530BC()
{
  sub_1C2FF6DE0(&qword_1EF8AF6F8, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
  return sub_1C3378950();
}

uint64_t sub_1C325310C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAD8, (uint64_t)qword_1EF8AF4D0, a1);
}

uint64_t sub_1C3253128()
{
  sub_1C2FF6DE0(&qword_1EF8AF540, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
  return sub_1C3378AA0();
}

uint64_t sub_1C3253168()
{
  sub_1C2FF6DE0(&qword_1EF8AF540, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
  return sub_1C3378AAC();
}

unint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.protoMessageName.getter()
{
  return 0xD000000000000034;
}

uint64_t sub_1C32531D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF4E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF4E8);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3388730;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "nodeName";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38C8];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "stateValues";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAE0, (uint64_t)qword_1EF8AF4E8, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C3378980();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
        sub_1C2FF6DE0(&qword_1EF8AF540, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
        sub_1C3378A64();
      }
      else if (result == 1)
      {
        sub_1C3378A34();
      }
      result = sub_1C3378980();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_1C3378B3C(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0),
          sub_1C2FF6DE0(&qword_1EF8AF540, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState), result = sub_1C3378B60(), !v1))
    {
      type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
      return sub_1C33788FC();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, &qword_1EF8AF548, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1C3253578@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x1E0DEE9D8];
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C32535A8()
{
  return 0xD000000000000034;
}

uint64_t sub_1C32535C4()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C32535D8()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.traverse<A>(visitor:)();
}

uint64_t sub_1C32535EC()
{
  sub_1C2FF6DE0(&qword_1EF8AF6F0, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
  return sub_1C3378950();
}

uint64_t sub_1C325363C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAE0, (uint64_t)qword_1EF8AF4E8, a1);
}

uint64_t sub_1C3253658()
{
  sub_1C2FF6DE0(&qword_1EF8AF550, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
  return sub_1C3378AA0();
}

uint64_t sub_1C3253698()
{
  sub_1C2FF6DE0(&qword_1EF8AF550, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
  return sub_1C3378AAC();
}

unint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t sub_1C3253708(uint64_t a1)
{
  return sub_1C3253714(a1, qword_1EF8AF500);
}

uint64_t sub_1C3253714(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3388720;
  v8 = v7 + v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "values";
  *(_QWORD *)(v8 + 8) = 6;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x1E0DA38C8];
  v10 = sub_1C3378B78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAE8, (uint64_t)qword_1EF8AF500, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C325385C(a1, a2, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, &qword_1EF8AF550, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1C325385C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  while (1)
  {
    result = sub_1C3378980();
    if (v6 || (v11 & 1) != 0)
      break;
    if (result == 1)
    {
      a4(0);
      sub_1C2FF6DE0(a5, a4, a6);
      sub_1C3378A64();
    }
    v6 = 0;
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3253958(a1, a2, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, &qword_1EF8AF550, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (void (*)(_QWORD))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1C3253958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v13)(_QWORD);

  if (!*(_QWORD *)(*(_QWORD *)v7 + 16)
    || (v13 = a7, a4(0), sub_1C2FF6DE0(a5, a4, a6), result = sub_1C3378B60(), a7 = v13, !v8))
  {
    a7(0);
    return sub_1C33788FC();
  }
  return result;
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_1C3049868(a1, a2, sub_1C30040A4, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos) & 1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, &qword_1EF8AF558, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

unint64_t sub_1C3253A94()
{
  return 0xD000000000000035;
}

uint64_t sub_1C3253AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C3253AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C3253AD8()
{
  sub_1C2FF6DE0(&qword_1EF8AF6E8, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return sub_1C3378950();
}

uint64_t sub_1C3253B28@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAE8, (uint64_t)qword_1EF8AF500, a1);
}

uint64_t sub_1C3253B44()
{
  sub_1C2FF6DE0(&qword_1EF8AF560, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return sub_1C3378AA0();
}

uint64_t sub_1C3253B84()
{
  sub_1C2FF6DE0(&qword_1EF8AF560, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return sub_1C3378AAC();
}

uint64_t sub_1C3253BD4(_QWORD *a1, char *a2)
{
  return sub_1C3049868(a1, a2, sub_1C30040A4, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_NLState.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_1C3253C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1C3378B9C();
  __swift_allocate_value_buffer(v0, qword_1EF8AF518);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8AF518);
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED7B3428);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED7B33F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C338BE70;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "domainName";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0DA38C8];
  v9 = sub_1C3378B78();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "nodeValueListMap";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "mcNodeValueListMap";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1C3378B84();
}

uint64_t static Com_Apple_Siri_Product_Proto_NLState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF19A8(&qword_1EF80AAF0, (uint64_t)qword_1EF8AF518, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1C3378980();
    if (v0 || (v2 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        sub_1C3253F44();
        break;
      case 2:
        sub_1C3253E78();
        break;
      case 1:
        sub_1C3378A34();
        break;
    }
  }
  return result;
}

uint64_t sub_1C3253E78()
{
  sub_1C33788E4();
  type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(0);
  sub_1C2FF6DE0(&qword_1EF7DE9B8, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
  sub_1C2FF6DE0(&qword_1EF7DE9C0, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return sub_1C3378968();
}

uint64_t sub_1C3253F44()
{
  sub_1C33788E4();
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(0);
  sub_1C2FF6DE0(&qword_1EF8AF560, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  sub_1C2FF6DE0(&qword_1EF8AF558, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return sub_1C3378968();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_1C3378B3C(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (sub_1C33788E4(),
          type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(0),
          sub_1C2FF6DE0(&qword_1EF7DE9B8, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues), sub_1C2FF6DE0(&qword_1EF7DE9C0, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues), result = sub_1C3378AB8(), !v1))
    {
      if (!*(_QWORD *)(v0[3] + 16)
        || (sub_1C33788E4(),
            type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(0),
            sub_1C2FF6DE0(&qword_1EF8AF560, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos), sub_1C2FF6DE0(&qword_1EF8AF558, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos), result = sub_1C3378AB8(), !v1))
      {
        type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
        return sub_1C33788FC();
      }
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.hashValue.getter()
{
  return sub_1C2FF55C4(type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, &qword_1EF8AF568, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1C3254248@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2] = sub_1C302C434(MEMORY[0x1E0DEE9D8]);
  a1[3] = sub_1C302C450(v2);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1C32542A4()
{
  return 0xD000000000000024;
}

uint64_t sub_1C32542C0()
{
  return Com_Apple_Siri_Product_Proto_NLState.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C32542D4()
{
  return Com_Apple_Siri_Product_Proto_NLState.traverse<A>(visitor:)();
}

uint64_t sub_1C32542E8()
{
  sub_1C2FF6DE0(&qword_1EF8AF6E0, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
  return sub_1C3378950();
}

uint64_t sub_1C3254338@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2FF1C98(&qword_1EF80AAF0, (uint64_t)qword_1EF8AF518, a1);
}

uint64_t sub_1C3254354()
{
  sub_1C2FF6DE0(&qword_1EF7DDE80, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
  return sub_1C3378AA0();
}

uint64_t sub_1C3254394()
{
  sub_1C2FF6DE0(&qword_1EF7DDE80, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
  return sub_1C3378AAC();
}

uint64_t _s12SiriOntology010Com_Apple_A38_Product_Proto_MultiCardinalStateComboV2eeoiySbAC_ACtFZ_0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_1C3378914();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (sub_1C3379184() & 1) != 0))
  {
    if ((sub_1C300429C(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
      v14 = (char *)a1 + *(int *)(v13 + 24);
      v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, &a2[*(int *)(v13 + 24)], v4);
      sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
      v12 = sub_1C3378BD8();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A33_Product_Proto_MultiCardinalStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_1C3378914();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (sub_1C3004E0C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
    v12 = a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 24), v4);
    sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
    v14 = sub_1C3378BD8();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A28_Product_Proto_StatefulValueV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v4 = sub_1C3378914();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v40 - v7;
  v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8196A8);
  MEMORY[0x1E0C80A78](v12);
  v45 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v40 - v21;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v23 = 0, (sub_1C3379184() & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      || (v23 = 0, (sub_1C3379184() & 1) != 0))
    {
      if (*(double *)(a1 + 32) == *(double *)(a2 + 32)
        && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
        && (sub_1C30020E8(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48)) & 1) != 0
        && (sub_1C30020E8(*(_QWORD **)(a1 + 56), *(_QWORD **)(a2 + 56)) & 1) != 0)
      {
        v24 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
        sub_1C32508E4(a1 + *(int *)(v24 + 40), (uint64_t)v22);
        v40 = v24;
        v25 = *(int *)(v24 + 40);
        v26 = (uint64_t)v45;
        sub_1C32508E4(a2 + v25, (uint64_t)v20);
        v27 = v26 + *(int *)(v12 + 48);
        sub_1C32508E4((uint64_t)v22, v26);
        sub_1C32508E4((uint64_t)v20, v27);
        v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
        if (v28(v26, 1, v8) == 1)
        {
          sub_1C2FF9138((uint64_t)v20, &qword_1EF7DE880);
          v26 = (uint64_t)v45;
          sub_1C2FF9138((uint64_t)v22, &qword_1EF7DE880);
          if (v28(v27, 1, v8) == 1)
          {
            sub_1C2FF9138(v26, &qword_1EF7DE880);
LABEL_20:
            v31 = v40;
            v32 = v41;
            v33 = a1 + *(int *)(v40 + 44);
            v35 = v43;
            v34 = v44;
            v36 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
            v36(v41, v33, v44);
            v37 = a2 + *(int *)(v31 + 44);
            v38 = v42;
            v36(v42, v37, v34);
            sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
            v23 = sub_1C3378BD8();
            v39 = *(void (**)(char *, uint64_t))(v35 + 8);
            v39(v38, v34);
            v39(v32, v34);
            return v23 & 1;
          }
        }
        else
        {
          sub_1C32508E4(v26, (uint64_t)v17);
          if (v28(v27, 1, v8) != 1)
          {
            sub_1C2FF6C38(v27, (uint64_t)v11, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
            v30 = _s12SiriOntology010Com_Apple_A28_Product_Proto_StatefulValueV06OneOf_H0O2eeoiySbAE_AEtFZ_0((uint64_t)v17, (uint64_t)v11);
            sub_1C2FF6CC0((uint64_t)v11, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
            sub_1C2FF9138((uint64_t)v20, &qword_1EF7DE880);
            sub_1C2FF9138((uint64_t)v22, &qword_1EF7DE880);
            sub_1C2FF6CC0((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
            sub_1C2FF9138(v26, &qword_1EF7DE880);
            if ((v30 & 1) != 0)
              goto LABEL_20;
            goto LABEL_17;
          }
          sub_1C2FF9138((uint64_t)v20, &qword_1EF7DE880);
          sub_1C2FF9138((uint64_t)v22, &qword_1EF7DE880);
          sub_1C2FF6CC0((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
        }
        sub_1C2FF9138(v26, &qword_1EF8196A8);
      }
LABEL_17:
      v23 = 0;
    }
  }
  return v23 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A28_Product_Proto_StatefulValueV06OneOf_H0O2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v24;

  v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v24 - v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8196A0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v16[*(int *)(v14 + 48)];
  sub_1C2FF6C7C(a1, (uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  sub_1C2FF6C7C(a2, (uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1C2FF6C7C((uint64_t)v16, (uint64_t)v12, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    v20 = *v12;
    v19 = v12[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      if (v20 == *(_QWORD *)v17 && v19 == *((_QWORD *)v17 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v22 = sub_1C3379184();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          sub_1C2FF6CC0((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
          goto LABEL_8;
        }
      }
      sub_1C2FF6CC0((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
      v18 = 1;
      return v18 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1C2FF9138((uint64_t)v16, &qword_1EF8196A0);
LABEL_8:
    v18 = 0;
    return v18 & 1;
  }
  sub_1C2FF6C7C((uint64_t)v16, (uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1C2FF6CC0((uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    goto LABEL_7;
  }
  sub_1C2FF6C38((uint64_t)v17, (uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  v18 = static Com_Apple_Siri_Product_Proto_SemanticValue.== infix(_:_:)(v10, v6);
  sub_1C2FF6CC0((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C2FF6CC0((uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C2FF6CC0((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  return v18 & 1;
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DE9D8);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF8AF608);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF8AF6A0);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(uint64_t a1)
{
  return sub_1C2FE8350(a1, qword_1EF7DED00);
}

uint64_t _s12SiriOntology010Com_Apple_A22_Product_Proto_NLStateV2eeoiySbAC_ACtFZ_0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_1C3378914();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (sub_1C3379184() & 1) != 0))
  {
    if ((sub_1C300BC0C(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0 && (sub_1C300CAD8(a1[3], *((_QWORD *)a2 + 3)) & 1) != 0)
    {
      v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
      v14 = (char *)a1 + *(int *)(v13 + 28);
      v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, &a2[*(int *)(v13 + 28)], v4);
      sub_1C2FF6DE0(&qword_1EF819450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3710], MEMORY[0x1E0DA3720]);
      v12 = sub_1C3378BD8();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t sub_1C3254F14()
{
  return sub_1C2FF6DE0(&qword_1EF7DE908, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1C3254F40()
{
  return sub_1C2FF6DE0(&qword_1EF7DE900, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1C3254F6C()
{
  return sub_1C2FF6DE0(&qword_1EF8AF530, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1C3254F98()
{
  return sub_1C2FF6DE0(&qword_1EF8AF570, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1C3254FC4()
{
  return sub_1C2FF6DE0(&qword_1EF7DE9D0, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1C3254FF0()
{
  return sub_1C2FF6DE0(&qword_1EF7DE9B8, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1C325501C()
{
  return sub_1C2FF6DE0(&qword_1EF7DE9C0, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1C3255048()
{
  return sub_1C2FF6DE0(&qword_1EF7DE9C8, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1C3255074()
{
  return sub_1C2FF6DE0(&qword_1EF8AF578, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1C32550A0()
{
  return sub_1C2FF6DE0(&qword_1EF8AF540, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1C32550CC()
{
  return sub_1C2FF6DE0(&qword_1EF8AF538, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1C32550F8()
{
  return sub_1C2FF6DE0(&qword_1EF8AF580, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1C3255124()
{
  return sub_1C2FF6DE0(&qword_1EF8AF588, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1C3255150()
{
  return sub_1C2FF6DE0(&qword_1EF8AF550, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1C325517C()
{
  return sub_1C2FF6DE0(&qword_1EF8AF548, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1C32551A8()
{
  return sub_1C2FF6DE0(&qword_1EF8AF590, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1C32551D4()
{
  return sub_1C2FF6DE0(&qword_1EF8AF598, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1C3255200()
{
  return sub_1C2FF6DE0(&qword_1EF8AF560, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1C325522C()
{
  return sub_1C2FF6DE0(&qword_1EF8AF558, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1C3255258()
{
  return sub_1C2FF6DE0(&qword_1EF8AF5A0, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1C3255284()
{
  return sub_1C2FF6DE0(&qword_1EF7DDE88, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1C32552B0()
{
  return sub_1C2FF6DE0(&qword_1EF7DDE80, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1C32552DC()
{
  return sub_1C2FF6DE0(&qword_1EF8AF568, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1C3255308()
{
  return sub_1C2FF6DE0(&qword_1EF8AF5A8, type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, (uint64_t)&protocol conformance descriptor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1C325533C@<X0>(_QWORD *a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.getter(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v8 = a2[7];
    v9 = *(int *)(a3 + 40);
    __dst = (_QWORD *)(a1 + v9);
    v10 = (uint64_t *)((char *)a2 + v9);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v17 = v10[1];
      *__dst = *v10;
      __dst[1] = v17;
      if (EnumCaseMultiPayload == 1)
      {
        v30 = v11;
        v18 = v10[3];
        __dst[2] = v10[2];
        __dst[3] = v18;
        v19 = v10[5];
        __dst[4] = v10[4];
        __dst[5] = v19;
        __dst[6] = v10[6];
        v20 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        v28 = (char *)v10 + v20;
        v29 = (char *)__dst + v20;
        v21 = sub_1C3378914();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v11 = v30;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22(v29, v28, v21);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    v23 = *(int *)(a3 + 44);
    v24 = (char *)v4 + v23;
    v25 = (uint64_t)a2 + v23;
    v26 = sub_1C3378914();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return v4;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v4 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v8 = sub_1C3378914();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    }
  }
  v9 = a1 + *(int *)(a2 + 44);
  v10 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  _QWORD *__dst;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(int *)(a3 + 40);
  __dst = (_QWORD *)(a1 + v8);
  v9 = (_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
    memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v15 = v9[1];
    *__dst = *v9;
    __dst[1] = v15;
    if (EnumCaseMultiPayload == 1)
    {
      v16 = v10;
      v17 = v9[3];
      __dst[2] = v9[2];
      __dst[3] = v17;
      v18 = v9[5];
      __dst[4] = v9[4];
      __dst[5] = v18;
      __dst[6] = v9[6];
      v19 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v27 = (char *)v9 + v19;
      v28 = (char *)__dst + v19;
      v20 = sub_1C3378914();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v10 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21(v28, v27, v20);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  v22 = *(int *)(a3 + 44);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t assignWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  char *v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *v7 = *v8;
      v7[1] = v8[1];
      if (EnumCaseMultiPayload == 1)
      {
        v7[2] = v8[2];
        v7[3] = v8[3];
        v7[4] = v8[4];
        v7[5] = v8[5];
        v7[6] = v8[6];
        v15 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        v27 = (char *)v8 + v15;
        v29 = (char *)v7 + v15;
        v16 = sub_1C3378914();
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26(v29, v27, v16);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_14;
    }
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_1C2FF6CC0((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    v18 = swift_getEnumCaseMultiPayload();
    *v7 = *v8;
    v7[1] = v8[1];
    if (v18 == 1)
    {
      v7[2] = v8[2];
      v7[3] = v8[3];
      v7[4] = v8[4];
      v7[5] = v8[5];
      v7[6] = v8[6];
      v19 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v30 = (char *)v8 + v19;
      v31 = (char *)v7 + v19;
      v20 = sub_1C3378914();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v31, v30, v20);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v21 = *(int *)(a3 + 44);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(int *)(a3 + 40);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = v9[1];
      *v8 = *v9;
      v8[1] = v13;
      v8[2] = v9[2];
      *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
      v14 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v15 = (char *)v8 + v14;
      v16 = (char *)v9 + v14;
      v17 = sub_1C3378914();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(v11 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v18 = *(int *)(a3 + 44);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_1C2FF6CC0(v9, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v22 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)v9 = *(_OWORD *)v10;
        *(_OWORD *)(v9 + 16) = v22;
        *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
        *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
        v23 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        v24 = v9 + v23;
        v25 = v10 + v23;
        v26 = sub_1C3378914();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v21 = *(_QWORD *)(v12 + 64);
      goto LABEL_8;
    }
    sub_1C2FF6CC0(v9, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
LABEL_7:
    v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880) - 8) + 64);
LABEL_8:
    memcpy((void *)v9, (const void *)v10, v21);
    goto LABEL_14;
  }
  if (v15)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v16;
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
    v17 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    v18 = v9 + v17;
    v19 = v10 + v17;
    v20 = sub_1C3378914();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)v9, (const void *)v10, *(_QWORD *)(v12 + 64));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_14:
  v27 = *(int *)(a3 + 44);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3255FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_1C3378914();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3256084(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7DE880);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_1C3378914();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1C3256124()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C32561DC();
  if (v0 <= 0x3F)
  {
    sub_1C3378914();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1C32561DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF7DE888)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(255);
    v0 = sub_1C3378E90();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF7DE888);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      v9 = a2[5];
      a1[4] = a2[4];
      a1[5] = v9;
      a1[6] = a2[6];
      v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_1C3378914();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    v5 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return result;
}

_QWORD *initializeWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[6] = a2[6];
    v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C3378914();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_1C2FF6CC0((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = sub_1C3378914();
      v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    a1[2] = a2[2];
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    v7 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1C3378914();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1C2FF6CC0((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      v7 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_1C3378914();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1C3256778()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValues()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValues()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1C3378914();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3256A94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C3256B08()
{
  return sub_1C3256F30();
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1C3378914();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1C3378914();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1C3378914();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3256EB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C3256F24()
{
  return sub_1C3256F30();
}

uint64_t sub_1C3256F30()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3378914();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_NLState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1C3378914();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_NLState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1C3378914();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Com_Apple_Siri_Product_Proto_NLState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for Com_Apple_Siri_Product_Proto_NLState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Com_Apple_Siri_Product_Proto_NLState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for Com_Apple_Siri_Product_Proto_NLState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1C3378914();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_NLState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C325730C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_NLState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C3257394(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C3378914();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C3257408()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3378914();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C325748C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7CDFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Edge.kind.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Edge.fromIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Edge.toIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Edge.enumeration.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t Edge.name.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  *a1 = v1[3];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Edge.hash(into:)()
{
  sub_1C3379238();
  sub_1C3379238();
  sub_1C337922C();
  return Name.hash(into:)();
}

uint64_t Edge.hashValue.getter()
{
  sub_1C3379208();
  sub_1C3379238();
  sub_1C3379238();
  sub_1C337922C();
  Name.hash(into:)();
  return sub_1C3379244();
}

uint64_t sub_1C3257684()
{
  sub_1C3379208();
  sub_1C3379238();
  sub_1C3379238();
  sub_1C337922C();
  Name.hash(into:)();
  return sub_1C3379244();
}

uint64_t sub_1C3257720()
{
  sub_1C3379238();
  sub_1C3379238();
  sub_1C337922C();
  return Name.hash(into:)();
}

uint64_t sub_1C32577A4()
{
  sub_1C3379208();
  sub_1C3379238();
  sub_1C3379238();
  sub_1C337922C();
  Name.hash(into:)();
  return sub_1C3379244();
}

uint64_t _s12SiriOntology4EdgeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    v5 = *(_QWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 40);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_OWORD *)(a1 + 40);
    v13[0] = *(_OWORD *)(a1 + 24);
    v13[1] = v9;
    v14 = v8;
    v11[0] = v7;
    v11[1] = v6;
    v12 = v5;
    v4 = _s12SiriOntology4NameV2eeoiySbAC_ACtFZ_0(v13, v11);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

unint64_t sub_1C32578C0()
{
  unint64_t result;

  result = qword_1EF8AF710;
  if (!qword_1EF8AF710)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for Edge, &type metadata for Edge);
    atomic_store(result, (unint64_t *)&qword_1EF8AF710);
  }
  return result;
}

uint64_t destroy for Edge()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Edge(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Edge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Edge()
{
  return &type metadata for Edge;
}

uint64_t AddressOntologyNode.CrossStreetJoin.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1C3379028();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static AddressOntologyNode.CrossStreetJoin.allCases.getter()
{
  return &unk_1E7D10890;
}

uint64_t AddressOntologyNode.CrossStreetJoin.rawValue.getter()
{
  return 0x72745373736F7263;
}

uint64_t sub_1C3257BC4()
{
  sub_1C3379208();
  sub_1C3378C38();
  return sub_1C3379244();
}

uint64_t sub_1C3257C20()
{
  return sub_1C3378C38();
}

uint64_t sub_1C3257C44()
{
  sub_1C3379208();
  sub_1C3378C38();
  return sub_1C3379244();
}

uint64_t sub_1C3257C9C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1C3379028();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1C3257CEC(_QWORD *a1@<X8>)
{
  *a1 = 0x72745373736F7263;
  a1[1] = 0xEF6E696F4A746565;
}

void sub_1C3257D14(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7D0FD48;
}

unint64_t sub_1C3257D28()
{
  unint64_t result;

  result = qword_1EF8AF718;
  if (!qword_1EF8AF718)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.CrossStreetJoin, &type metadata for AddressOntologyNode.CrossStreetJoin);
    atomic_store(result, (unint64_t *)&qword_1EF8AF718);
  }
  return result;
}

unint64_t sub_1C3257D6C(uint64_t a1)
{
  unint64_t result;

  result = sub_1C3257D90();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C3257D90()
{
  unint64_t result;

  result = qword_1EF8AF720;
  if (!qword_1EF8AF720)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.CrossStreetJoin, &type metadata for AddressOntologyNode.CrossStreetJoin);
    atomic_store(result, (unint64_t *)&qword_1EF8AF720);
  }
  return result;
}

unint64_t sub_1C3257DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8AF728;
  if (!qword_1EF8AF728)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF8AF730);
    result = MEMORY[0x1C3BD1B4C](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8AF728);
  }
  return result;
}

unint64_t sub_1C3257E24(uint64_t a1)
{
  unint64_t result;

  result = sub_1C3257E48();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C3257E48()
{
  unint64_t result;

  result = qword_1EF8AF738;
  if (!qword_1EF8AF738)
  {
    result = MEMORY[0x1C3BD1B4C](&protocol conformance descriptor for AddressOntologyNode.CrossStreetJoin, &type metadata for AddressOntologyNode.CrossStreetJoin);
    atomic_store(result, (unint64_t *)&qword_1EF8AF738);
  }
  return result;
}

uint64_t _s15CrossStreetJoinOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C3257ECC + 4 * asc_1C33BC96C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C3257EEC + 4 * byte_1C33BC971[v4]))();
}

_BYTE *sub_1C3257ECC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C3257EEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C3257EF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C3257EFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C3257F04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C3257F0C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AddressOntologyNode.CrossStreetJoin()
{
  return &type metadata for AddressOntologyNode.CrossStreetJoin;
}

void siri::ontology::CompactIdToSetMap::initWithIdToSetMap(std::vector<int> *a1, _QWORD *a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  std::vector<int>::size_type v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  unint64_t v11;
  unint64_t v12;
  int *value;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  std::vector<int>::pointer v18;
  std::vector<int>::pointer v19;
  char *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int v24;
  int *v25;
  std::vector<int>::pointer v26;
  std::vector<int>::pointer v27;
  unint64_t v28;
  std::vector<int>::pointer v29;
  int8x8_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  unint64_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  std::vector<int>::pointer v47;
  int *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  std::vector<int>::pointer v63;
  std::vector<int>::pointer v64;
  int v65;
  std::vector<int>::pointer v66;
  int64_t v67;
  uint64_t v68;
  std::vector<int>::pointer v69;
  std::vector<int>::pointer v70;
  int *v71;
  int v72;
  char *v73;
  std::vector<int>::value_type __x;

  v4 = (uint64_t *)a2[2];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v6 <= *((_DWORD *)v4 + 4))
        v6 = *((_DWORD *)v4 + 4);
      v5 += *((_DWORD *)v4 + 12);
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    v7 = v6 + 1;
    v8 = v5;
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  __x = 0;
  std::vector<int>::resize(a1 + 1, v7, &__x);
  begin = a1->__begin_;
  end = a1->__end_;
  v11 = end - a1->__begin_;
  if (v8 > v11)
  {
    v12 = v8 - v11;
    value = a1->__end_cap_.__value_;
    if (v8 - v11 > value - end)
    {
      if (v8 >> 62)
        goto LABEL_89;
      v14 = (char *)value - (char *)begin;
      v15 = v14 >> 1;
      if (v14 >> 1 <= v8)
        v15 = v8;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v16);
      v18 = a1->__begin_;
      v19 = a1->__end_;
      v20 = &v17[4 * v11];
      v22 = (int *)&v17[4 * v21];
      bzero(v20, 4 * v12);
      v23 = (int *)&v20[4 * v12];
      while (v19 != v18)
      {
        v24 = *--v19;
        *((_DWORD *)v20 - 1) = v24;
        v20 -= 4;
      }
      a1->__begin_ = (std::vector<int>::pointer)v20;
      a1->__end_ = v23;
      a1->__end_cap_.__value_ = v22;
      if (v18)
        operator delete(v18);
      goto LABEL_25;
    }
    bzero(a1->__end_, 4 * v12);
    v25 = &end[v12];
    goto LABEL_22;
  }
  if (v8 < v11)
  {
    v25 = &begin[v8];
LABEL_22:
    a1->__end_ = v25;
  }
LABEL_25:
  v27 = a1[1].__begin_;
  v26 = a1[1].__end_;
  if (v26 == v27)
    return;
  v28 = 0;
  do
  {
    v29 = a1->__end_;
    v27[v28] = (unint64_t)((char *)v29 - (char *)a1->__begin_) >> 2;
    v30 = (int8x8_t)a2[1];
    if (!*(_QWORD *)&v30)
      goto LABEL_87;
    v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v32 = v28;
      if (*(_QWORD *)&v30 <= v28)
        v32 = v28 % *(_QWORD *)&v30;
    }
    else
    {
      v32 = (*(_QWORD *)&v30 - 1) & v28;
    }
    v33 = *(uint64_t ***)(*a2 + 8 * v32);
    if (!v33)
      goto LABEL_87;
    v34 = *v33;
    if (!v34)
      goto LABEL_87;
    while (1)
    {
      v35 = v34[1];
      if (v35 == v28)
        break;
      if (v31.u32[0] > 1uLL)
      {
        if (v35 >= *(_QWORD *)&v30)
          v35 %= *(_QWORD *)&v30;
      }
      else
      {
        v35 &= *(_QWORD *)&v30 - 1;
      }
      if (v35 != v32)
        goto LABEL_87;
LABEL_42:
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_87;
    }
    if (v28 != *((_DWORD *)v34 + 4))
      goto LABEL_42;
    v36 = a1->__begin_;
    v37 = (char *)v29 - (char *)a1->__begin_;
    v38 = (uint64_t *)v34[5];
    if (!v38)
      goto LABEL_86;
    v39 = -1;
    v40 = 2;
    v41 = 4;
    v42 = v38;
    do
    {
      v43 = v39;
      v44 = v41;
      v45 = v40;
      v42 = (_QWORD *)*v42;
      ++v39;
      v41 += 4;
      ++v40;
    }
    while (v42);
    v46 = v43 + 2;
    v47 = (std::vector<int>::pointer)((char *)v36 + v37);
    v48 = a1->__end_cap_.__value_;
    if (v39 >= v48 - v29)
    {
      v53 = (v37 >> 2) + v46;
      if (!(v53 >> 62))
      {
        v54 = (char *)v48 - (char *)v36;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v55);
        }
        else
        {
          v57 = 0;
          v56 = 0;
        }
        v60 = &v57[4 * (v37 >> 2)];
        v61 = &v60[4 * v46];
        v62 = v60;
        do
        {
          *(_DWORD *)v62 = *((_DWORD *)v38 + 4);
          v62 += 4;
          v38 = (uint64_t *)*v38;
          v44 -= 4;
        }
        while (v44);
        v63 = a1->__begin_;
        if (a1->__begin_ != v47)
        {
          v64 = v47;
          do
          {
            v65 = *--v64;
            *((_DWORD *)v60 - 1) = v65;
            v60 -= 4;
          }
          while (v64 != v63);
        }
        v66 = a1->__end_;
        v67 = (char *)v66 - (char *)v47;
        if (v66 != v47)
        {
          v68 = v56;
          memmove(v61, v47, (char *)v66 - (char *)v47);
          v56 = v68;
        }
        v69 = a1->__begin_;
        a1->__begin_ = (std::vector<int>::pointer)v60;
        a1->__end_ = (std::vector<int>::pointer)&v61[v67];
        a1->__end_cap_.__value_ = (int *)&v57[4 * v56];
        if (v69)
          operator delete(v69);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    v49 = v38;
    do
    {
      v49 = (uint64_t *)*v49;
      --v45;
    }
    while (v45 > 1);
    v50 = (char *)v29 - (char *)v47;
    v51 = v29 - v47;
    if (v51 > v39)
    {
      v52 = v29;
      goto LABEL_79;
    }
    v49 = v38;
    if (v50 >= 1)
    {
      v58 = v51 + 1;
      v49 = v38;
      do
      {
        v49 = (uint64_t *)*v49;
        --v58;
      }
      while (v58 > 1);
    }
    if (v49)
    {
      v59 = v49;
      v52 = v29;
      do
      {
        *v52++ = *((_DWORD *)v59 + 4);
        v59 = (uint64_t *)*v59;
      }
      while (v59);
    }
    else
    {
      v52 = v29;
    }
    a1->__end_ = v52;
    if (v50 >= 1)
    {
LABEL_79:
      v70 = &v52[-v46];
      v71 = v52;
      while (v70 < v29)
      {
        v72 = *v70++;
        *v71++ = v72;
      }
      v73 = (char *)&v47[v46];
      a1->__end_ = v71;
      if (v52 != (int *)v73)
        memmove(&v52[-(((char *)v52 - v73) >> 2)], v47, (char *)v52 - v73);
      for (; v38 != v49; v38 = (uint64_t *)*v38)
        *v47++ = *((_DWORD *)v38 + 4);
    }
LABEL_86:
    std::__sort<std::__less<int,int> &,int *>();
    v27 = a1[1].__begin_;
    v26 = a1[1].__end_;
LABEL_87:
    ++v28;
  }
  while (v28 < v26 - v27);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v7;
  int *value;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  std::vector<int>::size_type v17;
  int *v18;
  int *v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer i;
  int v22;
  int *v23;
  std::vector<int>::size_type v24;

  begin = this->__begin_;
  end = this->__end_;
  v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      v23 = &end[__sz - v7];
      v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v10 = (char *)value - (char *)begin;
      v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz)
        v11 = __sz;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v12);
      v15 = (int *)&v13[4 * v7];
      v16 = (int *)&v13[4 * __sz];
      v17 = 4 * __sz - 4 * v7;
      v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      v19 = (int *)&v13[4 * v14];
      v20 = this->__begin_;
      for (i = this->__end_; i != v20; --i)
      {
        v22 = *(i - 1);
        *--v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7CE6A60, MEMORY[0x1E0DE42D0]);
}

void sub_1C3258540(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t siri::ontology::CompactIdToSetMap::getSetForKey(siri::ontology::CompactIdToSetMap *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = *((_QWORD *)this + 3);
  v3 = (*((_QWORD *)this + 4) - v2) >> 2;
  if ((int)v3 <= (int)a2)
    return 0;
  if (v3 <= a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)this + 4 * *(int *)(v2 + 4 * a2);
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7CE6A68, MEMORY[0x1E0DE42E0]);
}

void sub_1C325863C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

siri::ontology::UsoGraph *std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](siri::ontology::UsoGraph **a1, siri::ontology::UsoGraph *a2)
{
  siri::ontology::UsoGraph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    siri::ontology::UsoGraph::~UsoGraph(result);
    JUMPOUT(0x1C3BD1618);
  }
  return result;
}

void siri::ontology::OntologyNodeName::~OntologyNodeName(siri::ontology::OntologyNodeName *this)
{
  *(_QWORD *)this = off_1E7D21740;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 5);
  *(_QWORD *)this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E7D21740;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 5);
  *(_QWORD *)this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::OntologyNodeName::accept(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  return (**a2)(a2, a1);
}

uint64_t *siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    MEMORY[0x1C3BD1600](v2, 0x1000C8052888210);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    MEMORY[0x1C3BD1600](v3, 0x1000C8000313F17);
  return a1;
}

void siri::ontology::OntologyVerbName::~OntologyVerbName(siri::ontology::OntologyVerbName *this)
{
  *(_QWORD *)this = off_1E7D21298;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 8);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  *(_QWORD *)this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E7D21298;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 8);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  *(_QWORD *)this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::OntologyVerbName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1);
}

void siri::ontology::OntologyTaskName::~OntologyTaskName(void **this)
{
  *this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::OntologyTaskName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void siri::ontology::OntologyEdgeName::~OntologyEdgeName(void **this)
{
  *this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E7D21768;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::OntologyEdgeName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

uint64_t siri::ontology::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a2 + 8);
  v7 = (unsigned __int8 *)(a2 + 8);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  uint64_t result;

  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a2 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 16);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v10 = *(unsigned __int8 *)(a1 + 63);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 63);
  else
    v11 = *(_QWORD *)(a1 + 48);
  v12 = *(unsigned __int8 *)(a2 + 63);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 48);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 40);
  v17 = *(unsigned __int8 **)(a2 + 40);
  v16 = (unsigned __int8 *)(a2 + 40);
  v15 = v17;
  if (v13 >= 0)
    v18 = v16;
  else
    v18 = v15;
  if ((v10 & 0x80) != 0)
    return memcmp(*v14, v18, *(_QWORD *)(a1 + 48)) == 0;
  if (!*(_BYTE *)(a1 + 63))
    return 1;
  v19 = v10 - 1;
  do
  {
    v21 = *(unsigned __int8 *)v14;
    v14 = (const void **)((char *)v14 + 1);
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

BOOL siri::ontology::operator<(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  int v15;

  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_DWORD *)(a2 + 36);
  if (v2 != v3)
    return v2 < v3;
  v6 = *(_QWORD *)(a2 + 8);
  v4 = a2 + 8;
  v5 = v6;
  v7 = *(char *)(v4 + 23);
  v10 = *(_QWORD *)(a1 + 8);
  v8 = a1 + 8;
  v9 = v10;
  v11 = *(char *)(v8 + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  if (v11 < 0)
    v8 = v9;
  if (v7 >= 0)
    v13 = *(unsigned __int8 *)(v4 + 23);
  else
    v13 = *(_QWORD *)(v4 + 8);
  if (v7 < 0)
    v4 = v5;
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = memcmp((const void *)v8, (const void *)v4, v14);
  if (v15)
    return v15 < 0;
  else
    return v12 < v13;
}

uint64_t siri::ontology::operator!=(uint64_t a1, uint64_t a2)
{
  return siri::ontology::operator==(a1, a2) ^ 1;
}

BOOL siri::ontology::OntologyUnitName::isType(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 32) == a2;
}

BOOL siri::ontology::OntologyNodeName::existArgumentToEntity(siri::ontology::OntologyNodeName *this, int a2, int a3)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  v4 = *((_DWORD *)this + 15);
  v5 = *((int *)this + 14);
  v6 = &v3[2 * v5];
  if ((_DWORD)v5)
  {
    v7 = *((int *)this + 14);
    do
    {
      v8 = v7 >> 1;
      v9 = &v3[2 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 1;
      v7 += ~(v7 >> 1);
      if ((int)v11 < a2)
        v3 = v10;
      else
        v7 = v8;
    }
    while (v7);
    if (v3 != v6 && *v3 == a2)
      return v3[1] == a3;
  }
  if (v4 == (_DWORD)v5)
    return 0;
  v12 = v4 - (int)v5;
  v13 = &v6[2 * v12];
  v3 = v6;
  do
  {
    v14 = v12 >> 1;
    v15 = &v3[2 * (v12 >> 1)];
    v17 = *v15;
    v16 = v15 + 1;
    v12 += ~(v12 >> 1);
    if ((int)v17 < a2)
      v3 = v16;
    else
      v12 = v14;
  }
  while (v12);
  return v3 != v13 && *v3 == a2 && v3[1] == a3;
}

BOOL siri::ontology::OntologyNodeName::existSetArgumentToEntity(siri::ontology::OntologyNodeName *this, int a2, int a3)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  v3 = *((int *)this + 14);
  v4 = *((_DWORD *)this + 15) - v3;
  if (!v4)
    return 0;
  v5 = (_DWORD *)(*((_QWORD *)this + 5) + 8 * v3);
  v6 = v4;
  v7 = &v5[2 * v4];
  do
  {
    v8 = v6 >> 1;
    v9 = &v5[2 * (v6 >> 1)];
    v11 = *v9;
    v10 = v9 + 1;
    v6 += ~(v6 >> 1);
    if ((int)v11 < a2)
      v5 = v10;
    else
      v6 = v8;
  }
  while (v6);
  return v5 != v7 && *v5 == a2 && v5[1] == a3;
}

BOOL siri::ontology::OntologyNodeName::hasArgument(siri::ontology::OntologyNodeName *this, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v2 = (_DWORD *)*((_QWORD *)this + 5);
  v3 = *((int *)this + 14);
  v4 = &v2[2 * v3];
  if (!(_DWORD)v3)
    goto LABEL_8;
  do
  {
    v5 = v3 >> 1;
    v6 = &v2[2 * (v3 >> 1)];
    v8 = *v6;
    v7 = v6 + 1;
    v3 += ~(v3 >> 1);
    if ((int)v8 < a2)
      v2 = v7;
    else
      v3 = v5;
  }
  while (v3);
  if (v2 == v4 || *v2 != a2)
LABEL_8:
    v2 = v4;
  return v2 != v4;
}

BOOL siri::ontology::OntologyNodeName::hasSetArgument(siri::ontology::OntologyNodeName *this, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;

  v2 = *((int *)this + 14);
  v3 = (_DWORD *)(*((_QWORD *)this + 5) + 8 * v2);
  v4 = *((_DWORD *)this + 15) - v2;
  v5 = &v3[2 * v4];
  if (!v4)
    goto LABEL_9;
  v6 = v4;
  do
  {
    v7 = v6 >> 1;
    v8 = &v3[2 * (v6 >> 1)];
    v10 = *v8;
    v9 = v8 + 1;
    v6 += ~(v6 >> 1);
    if ((int)v10 < a2)
      v3 = v9;
    else
      v6 = v7;
  }
  while (v6);
  if (v3 == v5 || *v3 != a2)
LABEL_9:
    v3 = v5;
  return v3 != v5;
}

BOOL siri::ontology::OntologyNodeName::hasVerb(siri::ontology::OntologyNodeName *this, int a2)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;

  v2 = *((int *)this + 16);
  if (!(_DWORD)v2)
    return 0;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  v4 = &v3[v2];
  do
  {
    v5 = v2 >> 1;
    v6 = &v3[v2 >> 1];
    v8 = *v6;
    v7 = v6 + 1;
    v2 += ~(v2 >> 1);
    if (v8 < a2)
      v3 = v7;
    else
      v2 = v5;
  }
  while (v2);
  return v3 != v4 && *v3 <= a2;
}

uint64_t siri::ontology::OntologyNodeName::getSuperclasses(siri::ontology::OntologyNodeName *this)
{
  return *((_QWORD *)this + 6) + 4 * *((int *)this + 16);
}

uint64_t siri::ontology::OntologyNodeName::getOriginEntityForDefinedValue(siri::ontology::OntologyNodeName *this)
{
  uint64_t v1;
  _BYTE v3[24];
  _BYTE v4[24];
  _QWORD v5[3];

  if (*((_DWORD *)this + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "OntologyException");
    std::operator+<char>();
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v5, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/OntologyUnitName.cpp", 79, "getOriginEntityForDefinedValue", (uint64_t)v4);
  }
  v1 = *((int *)this + 16);
  if (*((_DWORD *)this + 17) - (_DWORD)v1 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "OntologyException");
    std::operator+<char>();
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v5, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/OntologyUnitName.cpp", 84, "getOriginEntityForDefinedValue", (uint64_t)v3);
  }
  return *(unsigned int *)(*((_QWORD *)this + 6) + 4 * v1);
}

void sub_1C325A2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  _QWORD *exception;
  _QWORD v11[3];
  _QWORD v12[3];

  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v12, a2);
  std::string::basic_string[abi:ne180100]<0>(v11, a4);
  siri::ontology::OntologyBaseException::OntologyBaseException((uint64_t)exception, a1, (uint64_t)v12, a3, (uint64_t)v11, a5);
  *exception = &off_1E7D21880;
}

void sub_1C325A46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void siri::ontology::OntologyBaseException::~OntologyBaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E7D218A8;
  if (SHIBYTE(this[13].__vftable) < 0)
    operator delete(this[11].__vftable);
  if (SHIBYTE(this[10].__vftable) < 0)
    operator delete(this[8].__vftable);
  if (SHIBYTE(this[6].__vftable) < 0)
    operator delete(this[4].__vftable);
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::OntologyBaseException::what(siri::ontology::OntologyBaseException *this)
{
  uint64_t result;

  result = (uint64_t)this + 88;
  if (*((char *)this + 111) < 0)
    return *(_QWORD *)result;
  return result;
}

void siri::ontology::OntologyException::~OntologyException(std::exception *this)
{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1C3BD1618);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

BOOL siri::ontology::OntologyNodeName::hasDefinedValue(siri::ontology::OntologyNodeName *this, int a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v2 = *((int *)this + 17);
  v3 = *((_DWORD *)this + 18) - v2;
  if (!v3)
    return 0;
  v4 = (_DWORD *)(*((_QWORD *)this + 6) + 4 * v2);
  v5 = v3;
  v6 = &v4[v3];
  do
  {
    v7 = v5 >> 1;
    v8 = &v4[v5 >> 1];
    v10 = *v8;
    v9 = v8 + 1;
    v5 += ~(v5 >> 1);
    if (v10 < a2)
      v4 = v9;
    else
      v5 = v7;
  }
  while (v5);
  return v4 != v6 && *v4 <= a2;
}

BOOL siri::ontology::OntologyNodeName::hasOperator(siri::ontology::OntologyNodeName *this, int a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v2 = *((int *)this + 18);
  v3 = *((_DWORD *)this + 19) - v2;
  if (!v3)
    return 0;
  v4 = (_DWORD *)(*((_QWORD *)this + 6) + 4 * v2);
  v5 = v3;
  v6 = &v4[v3];
  do
  {
    v7 = v5 >> 1;
    v8 = &v4[v5 >> 1];
    v10 = *v8;
    v9 = v8 + 1;
    v5 += ~(v5 >> 1);
    if (v10 < a2)
      v4 = v9;
    else
      v5 = v7;
  }
  while (v5);
  return v4 != v6 && *v4 <= a2;
}

BOOL siri::ontology::OntologyVerbName::existArgumentToEntity(siri::ontology::OntologyVerbName *this, int a2, int a3)
{
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;

  v3 = *((int *)this + 20);
  if (!(_DWORD)v3)
    return 0;
  v4 = (_DWORD *)*((_QWORD *)this + 8);
  v5 = &v4[2 * v3];
  do
  {
    v6 = v3 >> 1;
    v7 = &v4[2 * (v3 >> 1)];
    v9 = *v7;
    v8 = v7 + 1;
    v3 += ~(v3 >> 1);
    if ((int)v9 < a2)
      v4 = v8;
    else
      v3 = v6;
  }
  while (v3);
  return v4 != v5 && *v4 == a2 && v4[1] == a3;
}

BOOL siri::ontology::OntologyVerbName::hasArgument(siri::ontology::OntologyVerbName *this, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v2 = (_DWORD *)*((_QWORD *)this + 8);
  v3 = *((int *)this + 20);
  v4 = &v2[2 * v3];
  if (!(_DWORD)v3)
    goto LABEL_8;
  do
  {
    v5 = v3 >> 1;
    v6 = &v2[2 * (v3 >> 1)];
    v8 = *v6;
    v7 = v6 + 1;
    v3 += ~(v3 >> 1);
    if ((int)v8 < a2)
      v2 = v7;
    else
      v3 = v5;
  }
  while (v3);
  if (v2 == v4 || *v2 != a2)
LABEL_8:
    v2 = v4;
  return v2 != v4;
}

_QWORD *siri::ontology::projectName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "uso");
}

_QWORD *siri::ontology::projectVersion@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "3.0.0");
}

_QWORD *siri::ontology::gitRevision@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "3.0.0");
}

void sub_1C325AD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;

  if (v33 && a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);

  _Unwind_Resume(a1);
}

void sub_1C325C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;
  void *a70;
  char a72;
  char a73;

  if (a21)
    std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](a21);
  if (a69 && a68 < 0)
    operator delete(__p);
  if (a73)
  {
    if (a72 < 0)
      operator delete(a70);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3BD1618);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1C325C768(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *--v2;
    *v2 = 0;
    *(_QWORD *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BD1618);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::AsrAlternative>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BD1618);
}

void siri::ontology::UsoEntitySpan::~UsoEntitySpan(void **this)
{
  uint64_t v2;
  void **v3;

  if (*((_BYTE *)this + 176) && *((char *)this + 175) < 0)
    operator delete(this[19]);
  v3 = this + 16;
  std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 11;
  std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((_BYTE *)this + 80))
  {
    v2 = (uint64_t)this[9];
    this[9] = 0;
    if (v2)
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v2);
  }
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

void std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](void ***a1)
{
  void **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::ontology::UsoEntitySpan::~UsoEntitySpan(result);
    JUMPOUT(0x1C3BD1618);
  }
  return result;
}

__n128 siri::ontology::UsoEntitySpan::UsoEntitySpan(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 *a9, __n128 *a10)
{
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a4 + 24))
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 40) = v11;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a5 + 8))
  {
    v12 = *a5;
    *a5 = 0;
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a1 + 112) = a7;
  *(_QWORD *)(a1 + 120) = a8;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  result = *a9;
  *(__n128 *)(a1 + 128) = *a9;
  *(_QWORD *)(a1 + 144) = a9[1].n128_u64[0];
  a9->n128_u64[0] = 0;
  a9->n128_u64[1] = 0;
  a9[1].n128_u64[0] = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (a10[1].n128_u8[8])
  {
    result = *a10;
    *(_QWORD *)(a1 + 168) = a10[1].n128_u64[0];
    *(__n128 *)(a1 + 152) = result;
    a10->n128_u64[1] = 0;
    a10[1].n128_u64[0] = 0;
    a10->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 176) = 1;
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

char *std::vector<siri::ontology::MatchInfo::AliasType>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1C325CE50(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1C3BD1618](v2, 0x10A0C403D23BABBLL);

  _Unwind_Resume(a1);
}

void sub_1C325D318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**__p)(siri::ontology::OntologyException *__hidden this), uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;
  const siri::ontology::OntologyBaseException *exception_ptr;
  uint64_t *v33;
  id v34;

  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a2 == 1)
  {
    exception_ptr = (const siri::ontology::OntologyBaseException *)__cxa_get_exception_ptr(a1);
    siri::ontology::OntologyBaseException::OntologyBaseException((siri::ontology::OntologyBaseException *)&__p, exception_ptr);
    __p = &off_1E7D21880;
    __cxa_begin_catch(a1);
    if (a28 >= 0)
      v33 = (uint64_t *)&a23;
    else
      v33 = a23;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v33);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("OntologyException"), objc_claimAutoreleasedReturnValue(), 0);
    v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_exception_throw(v34);
  }

  _Unwind_Resume(a1);
}

void sub_1C325D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(siri::ontology::OntologyException *__hidden this), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  const siri::ontology::OntologyBaseException *exception_ptr;
  uint64_t *v28;
  id v29;

  if (a2 == 1)
  {
    exception_ptr = (const siri::ontology::OntologyBaseException *)__cxa_get_exception_ptr(a1);
    siri::ontology::OntologyBaseException::OntologyBaseException((siri::ontology::OntologyBaseException *)&a9, exception_ptr);
    a9 = &off_1E7D21880;
    __cxa_begin_catch(a1);
    if (a25 >= 0)
      v28 = (uint64_t *)&a20;
    else
      v28 = a20;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v28);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("OntologyException"), objc_claimAutoreleasedReturnValue(), 0);
    v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_exception_throw(v29);
  }

  _Unwind_Resume(a1);
}

void sub_1C325D780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C325D824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

siri::ontology::OntologyBaseException *siri::ontology::OntologyBaseException::OntologyBaseException(siri::ontology::OntologyBaseException *this, const siri::ontology::OntologyBaseException *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)this = &off_1E7D218A8;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v6;
  }
  v7 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1C325D9B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_1C325FB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void siri::ontology::UsoOperatorNode::~UsoOperatorNode(siri::ontology::UsoOperatorNode *this)
{
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::UsoOperatorNode::getNodeType(siri::ontology::UsoOperatorNode *this)
{
  return 5;
}

uint64_t siri::ontology::UsoOperatorNode::isValidSuccessorWithEdge(UsoGraphNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  siri::ontology::oname::graph::ontology_init *v6;
  _QWORD *v7;
  uint64_t v8;
  const siri::ontology::UsoGraphEdge *v9;
  const void *v10;
  int v11;
  siri::ontology::OntologyNodeName **v12;
  siri::ontology::OntologyNodeName **v13;
  siri::ontology::UsoEntityNode *v14;
  int v15;
  _BOOL8 isValidSetSuccessorWithEdge;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char v22[24];
  char v23[24];
  char v24[24];
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD *v27;

  if (*((_DWORD *)this[1].var0 + 9) && *((_DWORD *)a3 + 15))
  {
    siri::ontology::UsoGraph::getPredecessorsWithEdges((siri::ontology::UsoGraph *)this->var1, this, &v26);
    v7 = v26;
    if (v27 == v26)
    {
      v17 = 1;
      v7 = v27;
      if (!v27)
        return v17;
      goto LABEL_30;
    }
    if ((unint64_t)((char *)v27 - (char *)v26) >= 0x11)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "OntologyException");
      std::operator+<char>();
      siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 803, "isValidSuccessorWithEdge", (uint64_t)v24);
    }
    v8 = siri::ontology::oname::graph::ontology_init::Argument_operand(v6);
    if (!siri::ontology::operator==((uint64_t)a3 + 24, v8))
    {
      v17 = 0;
      if (!v7)
        return v17;
      goto LABEL_30;
    }
    v10 = (const void *)*v7;
    v9 = (const siri::ontology::UsoGraphEdge *)v7[1];
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 16))(*v7);
    if (v11 == 1)
    {
      if (!v18)
        __cxa_bad_cast();
      v19 = v18;
      if (!v20)
        __cxa_bad_cast();
      if (*(_DWORD *)(v20[3] + 36)
        && *(_DWORD *)(v19[3] + 36)
        && *((_DWORD *)v9 + 15)
        && (*((_DWORD *)this[1].var0 + 8) - 5) >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "OntologyException");
        std::operator+<char>();
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 872, "isValidSuccessorWithEdge", (uint64_t)v22);
      }
    }
    else
    {
      if (v11 != 2)
      {
LABEL_22:
        v17 = 0;
LABEL_30:
        operator delete(v7);
        return v17;
      }
      if (!v12)
        __cxa_bad_cast();
      v13 = v12;
      if (!v14)
        __cxa_bad_cast();
      if (*(_DWORD *)(*((_QWORD *)v14 + 3) + 36) && *((_DWORD *)v13[3] + 9) && *((_DWORD *)v9 + 15))
      {
        v15 = *((_DWORD *)this[1].var0 + 8);
        if (v15 == 6)
        {
          isValidSetSuccessorWithEdge = siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(v14, a2, v9, 1);
          goto LABEL_33;
        }
        if (v15 != 5)
        {
          std::string::basic_string[abi:ne180100]<0>(v25, "OntologyException");
          std::operator+<char>();
          siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 843, "isValidSuccessorWithEdge", (uint64_t)v23);
        }
        if (siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(v14, a2, v9, 0))
        {
          isValidSetSuccessorWithEdge = siri::ontology::OntologyNodeName::hasOperator(v13[3], *((_DWORD *)this[1].var0 + 9));
LABEL_33:
          v17 = isValidSetSuccessorWithEdge;
          goto LABEL_30;
        }
        goto LABEL_22;
      }
    }
    v17 = 1;
    goto LABEL_30;
  }
  return 1;
}

void sub_1C326024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v33;

  if (a21 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    std::string::basic_string[abi:ne180100]<0>(&a25, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)&a25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 848, "isValidSuccessorWithEdge", "The successor of operator node should be an entity node or its derived class");
  }
  v33 = *(void **)(v30 - 72);
  if (v33)
    operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_1C3260390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void *v26;

  if (a24 < 0)
    operator delete(__p);
  __cxa_end_catch();
  v26 = *(void **)(v24 - 72);
  if (v26)
    operator delete(v26);
  _Unwind_Resume(a1);
}

void sub_1C32603B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  v29 = *(void **)(v27 - 72);
  if (v29)
    operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_1C32603E8()
{
  JUMPOUT(0x1C32603F4);
}

siri::ontology::UsoGraph **siri::ontology::UsoOperatorNode::copy(siri::ontology::UsoGraph **this)
{
  siri::ontology::UsoGraph **OperatorNode;

  OperatorNode = (siri::ontology::UsoGraph **)siri::ontology::UsoGraph::createOperatorNode(this[1], this[3]);
  siri::ontology::UsoGraph::addSuccessors(OperatorNode[1], this, (const siri::ontology::UsoGraphNode *)OperatorNode);
  return OperatorNode;
}

_QWORD *siri::ontology::UsoOperatorNode::copyToGraph(const siri::ontology::OntologyNodeName **this, siri::ontology::UsoGraph *a2)
{
  return siri::ontology::UsoGraph::createOperatorNode(a2, this[3]);
}

void siri::ontology::UsoOperatorNode::toString(siri::ontology::UsoOperatorNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
  }
}

uint64_t siri::ontology::UsoOperatorNode::operator==(uint64_t a1, void *lpsrc)
{
  uint64_t result;

  if (result)
  {
    result = siri::ontology::operator==(*(_QWORD *)(a1 + 24), *(_QWORD *)(result + 24));
    if ((_DWORD)result)
      return *(_QWORD *)(a1 + 16) == *((_QWORD *)lpsrc + 2);
  }
  return result;
}

uint64_t siri::ontology::UsoGraphNode::operator!=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1) ^ 1;
}

BOOL siri::ontology::UsoGraphNode::operator<(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
}

uint64_t siri::ontology::UsoGraphNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoGraphNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoGraphNode::operator>=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) ^ 1;
}

uint64_t siri::ontology::UsoOperatorNode::checkValidOntologyNameType(uint64_t this)
{
  _QWORD v1[3];

  if ((*(_DWORD *)(*(_QWORD *)(this + 24) + 32) - 5) > 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v1, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v1, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 767, "checkValidOntologyNameType", "UsoOperatorNode can only take OPERATOR, LIST_OPERATOR ontology name types");
  }
  return this;
}

void sub_1C32605F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5)
{
  _QWORD *exception;
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];

  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v13, a2);
  std::string::basic_string[abi:ne180100]<0>(v12, a4);
  std::string::basic_string[abi:ne180100]<0>(v11, a5);
  siri::ontology::OntologyBaseException::OntologyBaseException((uint64_t)exception, a1, (uint64_t)v13, a3, (uint64_t)v12, (uint64_t)v11);
  *exception = &off_1E7D21880;
}

void sub_1C32606BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

_QWORD *siri::ontology::UsoGraph::createOperatorNode(siri::ontology::UsoGraph *this, const siri::ontology::OntologyNodeName *a2)
{
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7D20DC0;
  v4[1] = this;
  v4[2] = 0;
  v4[3] = a2;
  siri::ontology::UsoOperatorNode::checkValidOntologyNameType((uint64_t)v4);
  v6 = v4;
  siri::ontology::UsoGraph::addNode((float *)this, (unint64_t *)&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return v4;
}

void sub_1C32607C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::addNode(float *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *i;
  unint64_t v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  int64x2_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _QWORD v69[5];

  v5 = *a2;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v8 = (unint64_t *)(*(_QWORD *)a1 + 40);
  if (v7 >= *v8)
  {
    v10 = *(_QWORD *)(v6 + 24);
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v10) >> 3);
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v8 - v10) >> 3) > v12)
      v12 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v8 - v10) >> 3);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v8 - v10) >> 3)) >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v12;
    v69[4] = v8;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(v13);
    else
      v14 = 0;
    v15 = v13 + 56 * v11;
    v69[0] = v13;
    v69[1] = v15;
    v69[3] = v13 + 56 * v14;
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_QWORD *)(v15 + 48) = v5;
    v69[2] = v15 + 56;
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer((uint64_t *)(v6 + 24), v69);
    v9 = *(_QWORD *)(v6 + 32);
    std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer((uint64_t)v69);
  }
  else
  {
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_QWORD *)(v7 + 48) = v5;
    v9 = v7 + 56;
  }
  *(_QWORD *)(v6 + 32) = v9;
  v16 = *(_QWORD *)(v6 + 24);
  v17 = *a2;
  v18 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v17 + 16) = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v16) >> 3) - 1;
  v19 = 0x9DDFEA08EB382D69 * (((8 * v17) + 8) ^ HIDWORD(v17));
  v20 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v19 >> 47) ^ v19);
  v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
  if (v18)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      if (v21 >= v18)
        v2 = v21 % v18;
    }
    else
    {
      v2 = v21 & (v18 - 1);
    }
    v23 = *(_QWORD **)(*((_QWORD *)a1 + 6) + 8 * v2);
    if (v23)
    {
      for (i = (_QWORD *)*v23; i; i = (_QWORD *)*i)
      {
        v25 = i[1];
        if (v25 == v21)
        {
          if (i[2] == v17)
            goto LABEL_86;
        }
        else
        {
          if (v22.u32[0] > 1uLL)
          {
            if (v25 >= v18)
              v25 %= v18;
          }
          else
          {
            v25 &= v18 - 1;
          }
          if (v25 != v2)
            break;
        }
      }
    }
  }
  v26 = operator new(0x18uLL);
  *v26 = 0;
  v26[1] = v21;
  v26[2] = v17;
  v27 = (float)(unint64_t)(*((_QWORD *)a1 + 9) + 1);
  v28 = a1[20];
  if (!v18 || (float)(v28 * (float)v18) < v27)
  {
    v29 = 1;
    if (v18 >= 3)
      v29 = (v18 & (v18 - 1)) != 0;
    v30 = v29 | (2 * v18);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v18 = *((_QWORD *)a1 + 7);
    }
    if (*(_QWORD *)&prime > v18)
      goto LABEL_42;
    if (*(_QWORD *)&prime < v18)
    {
      v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 9) / a1[20]);
      if (v18 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v18)
      {
        v18 = *((_QWORD *)a1 + 7);
      }
      else
      {
        if (prime)
        {
LABEL_42:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = (void *)*((_QWORD *)a1 + 6);
          *((_QWORD *)a1 + 6) = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *((int8x8_t *)a1 + 7) = prime;
          do
            *(_QWORD *)(*((_QWORD *)a1 + 6) + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = (_QWORD *)*((_QWORD *)a1 + 8);
          if (v36)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)a1 + 6) + 8 * v37) = a1 + 16;
            v42 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  v44 = *((_QWORD *)a1 + 6);
                  if (!*(_QWORD *)(v44 + 8 * v43))
                  {
                    *(_QWORD *)(v44 + 8 * v43) = v36;
                    goto LABEL_67;
                  }
                  *v36 = *v42;
                  *v42 = **(_QWORD **)(*((_QWORD *)a1 + 6) + 8 * v43);
                  **(_QWORD **)(*((_QWORD *)a1 + 6) + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_67:
                v36 = v42;
                v42 = (_QWORD *)*v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v18 = (unint64_t)prime;
          goto LABEL_71;
        }
        v68 = (void *)*((_QWORD *)a1 + 6);
        *((_QWORD *)a1 + 6) = 0;
        if (v68)
          operator delete(v68);
        v18 = 0;
        *((_QWORD *)a1 + 7) = 0;
      }
    }
LABEL_71:
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v21 >= v18)
        v2 = v21 % v18;
      else
        v2 = v21;
    }
    else
    {
      v2 = (v18 - 1) & v21;
    }
  }
  v45 = *((_QWORD *)a1 + 6);
  v46 = *(_QWORD **)(v45 + 8 * v2);
  if (v46)
  {
    *v26 = *v46;
LABEL_84:
    *v46 = v26;
    goto LABEL_85;
  }
  *v26 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v26;
  *(_QWORD *)(v45 + 8 * v2) = a1 + 16;
  if (*v26)
  {
    v47 = *(_QWORD *)(*v26 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v47 >= v18)
        v47 %= v18;
    }
    else
    {
      v47 &= v18 - 1;
    }
    v46 = (_QWORD *)(*((_QWORD *)a1 + 6) + 8 * v47);
    goto LABEL_84;
  }
LABEL_85:
  ++*((_QWORD *)a1 + 9);
LABEL_86:
  v49 = (unint64_t *)*((_QWORD *)a1 + 4);
  v48 = *((_QWORD *)a1 + 5);
  if ((unint64_t)v49 >= v48)
  {
    v52 = *((_QWORD *)a1 + 3);
    v53 = ((uint64_t)v49 - v52) >> 3;
    if ((unint64_t)(v53 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v54 = v48 - v52;
    v55 = v54 >> 2;
    if (v54 >> 2 <= (unint64_t)(v53 + 1))
      v55 = v53 + 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
      v56 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    if (v56)
    {
      if (v56 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v57 = (char *)operator new(8 * v56);
    }
    else
    {
      v57 = 0;
    }
    v58 = &v57[8 * v53];
    v59 = *a2;
    *a2 = 0;
    *(_QWORD *)v58 = v59;
    v51 = v58 + 8;
    v61 = (_QWORD *)*((_QWORD *)a1 + 3);
    v60 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (v60 == v61)
    {
      v63 = vdupq_n_s64((unint64_t)v60);
    }
    else
    {
      do
      {
        v62 = *--v60;
        *v60 = 0;
        *((_QWORD *)v58 - 1) = v62;
        v58 -= 8;
      }
      while (v60 != v61);
      v63 = *(int64x2_t *)(a1 + 6);
    }
    *((_QWORD *)a1 + 3) = v58;
    *((_QWORD *)a1 + 4) = v51;
    *((_QWORD *)a1 + 5) = &v57[8 * v56];
    v65 = (_QWORD *)v63.i64[1];
    v64 = (_QWORD *)v63.i64[0];
    while (v65 != v64)
    {
      v67 = *--v65;
      v66 = v67;
      *v65 = 0;
      if (v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    }
    if (v64)
      operator delete(v64);
  }
  else
  {
    v50 = *a2;
    *a2 = 0;
    *v49 = v50;
    v51 = v49 + 1;
  }
  *((_QWORD *)a1 + 4) = v51;
}

void sub_1C3260E40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

uint64_t *std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 56) = 0;
    *(_QWORD *)(v4 - 48) = 0;
    v4 -= 56;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 56);
    v2 -= 56;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void siri::ontology::UsoGraph::addSuccessors(siri::ontology::UsoGraph *this, siri::ontology::UsoGraph **a2, const siri::ontology::UsoGraphNode *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string::size_type **v14;
  std::string::size_type *v15;
  std::string::size_type *v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string v30;
  std::string v31;
  void (**v32)(siri::ontology::OntologyEdgeName *__hidden);
  std::string v33;
  uint64_t v34;
  __int128 v35;
  std::string::size_type v36;
  __int128 v37;
  int v38;
  void (**v39)(siri::ontology::OntologyEdgeName *__hidden);
  std::string __p;
  uint64_t v41;
  __int128 v42;
  std::string::size_type v43;
  __int128 v44;
  std::string::size_type v45;

  v6 = (_QWORD *)((char *)this + 48);
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>((_QWORD *)this + 6, (unint64_t)a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "OntologyException");
    (*((void (**)(std::string *__return_ptr, siri::ontology::UsoGraph **))*a2 + 6))(&v31, a2);
    v26 = std::string::insert(&v31, 0, "Attempting to process a node not owned by this graph: ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v45 = v26->__r_.__value_.__r.__words[2];
    v44 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v37, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 332, "addSuccessors", (uint64_t)&v44);
  }
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(v6, (unint64_t)a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "OntologyException");
    (*(void (**)(std::string *__return_ptr, const siri::ontology::UsoGraphNode *))(*(_QWORD *)a3 + 48))(&v31, a3);
    v28 = std::string::insert(&v31, 0, "Attempting to process a node not owned by this graph: ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43 = v28->__r_.__value_.__r.__words[2];
    v42 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v37, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 337, "addSuccessors", (uint64_t)&v42);
  }
  v7 = *(_QWORD *)this;
  v8 = *(_QWORD *)(*(_QWORD *)this + 24);
  v9 = (uint64_t *)(v8 + 56 * *((_QWORD *)a3 + 2));
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != v11)
  {
    do
    {
      v12 = *(_QWORD *)(v10 + 8);
      v37 = *(_OWORD *)(v12 + 32);
      v38 = *(_DWORD *)(v12 + 48);
      if (*(char *)(v12 + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 64), *(_QWORD *)(v12 + 72));
      else
        __p = *(std::string *)(v12 + 64);
      v41 = *(_QWORD *)(v12 + 88);
      v39 = off_1E7D217A0;
      siri::ontology::UsoGraph::getSuccessors(a2[1], (const UsoGraphNode *)a2, (const siri::ontology::OntologyEdgeName *)&v39, &v31);
      v13 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
      if (v31.__r_.__value_.__r.__words[0])
        operator delete(v31.__r_.__value_.__l.__data_);
      if ((_QWORD)v13 != *((_QWORD *)&v13 + 1))
      {
        std::string::basic_string[abi:ne180100]<0>(&v31, "OntologyException");
        (*(void (**)(std::string *__return_ptr, const siri::ontology::UsoGraphNode *))(*(_QWORD *)a3 + 48))(&v30, a3);
        v24 = std::string::insert(&v30, 0, "Can't add successors with the same edge to the target node ");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v36 = v24->__r_.__value_.__r.__words[2];
        v35 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v31, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 350, "addSuccessors", (uint64_t)&v35);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 += 16;
    }
    while (v10 != v11);
    v8 = *(_QWORD *)(v7 + 24);
  }
  v14 = (std::string::size_type **)(v8 + 56 * (_QWORD)a2[2]);
  v15 = *v14;
  v16 = v14[1];
  if (*v14 != v16)
  {
    do
    {
      v17 = v15[1];
      v37 = *(_OWORD *)(v17 + 32);
      v38 = *(_DWORD *)(v17 + 48);
      if (*(char *)(v17 + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 64), *(_QWORD *)(v17 + 72));
      else
        __p = *(std::string *)(v17 + 64);
      v18 = *(_QWORD *)(v17 + 88);
      v19 = *v15;
      v20 = *((_QWORD *)a3 + 2);
      v31.__r_.__value_.__r.__words[0] = v20;
      v31.__r_.__value_.__l.__size_ = v19;
      LODWORD(v31.__r_.__value_.__r.__words[2]) = v38;
      v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v20 = *((_QWORD *)a3 + 2);
      }
      else
      {
        v33 = __p;
      }
      v34 = v18;
      v32 = off_1E7D217A0;
      v22 = *(uint64_t **)this;
      if (v20 <= v19)
        v23 = v19;
      else
        v23 = v20;
      if (v23 >= 0x6DB6DB6DB6DB6DB7 * ((v22[4] - *(_QWORD *)(*(_QWORD *)this + 24)) >> 3))
        std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize((uint64_t *)(*(_QWORD *)this + 24), v23 + 1);
      boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>((uint64_t)&v30, v20, v19, (__int128 *)&v31, v22);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v33.__r_.__value_.__l.__data_);
        if (v21 < 0)
LABEL_31:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (v21 < 0)
      {
        goto LABEL_31;
      }
      v15 += 2;
    }
    while (v15 != v16);
  }
}

void sub_1C32613A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (*(char *)(v49 - 121) < 0)
    operator delete(*(void **)(v49 - 144));
  if (a21 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void siri::ontology::UsoGraph::getSuccessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, const siri::ontology::OntologyEdgeName *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  void (***v10)(siri::ontology::OntologyEdgeName *__hidden);
  uint64_t v11;
  void (***v12)(siri::ontology::OntologyEdgeName *__hidden);
  const siri::ontology::OntologyEdgeName *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (**v27)(siri::ontology::OntologyEdgeName *__hidden);
  std::string __p;
  uint64_t v29;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v26 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 24) + 56 * a2->var2;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (*(_QWORD **)v5 != v7)
  {
    v9 = 0;
    v10 = &v27;
    v25 = *(_QWORD **)(v5 + 8);
    do
    {
      v11 = v6[1];
      if (*(char *)(v11 + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 64), *(_QWORD *)(v11 + 72));
      else
        __p = *(std::string *)(v11 + 64);
      v29 = *(_QWORD *)(v11 + 88);
      v27 = off_1E7D217A0;
      if (siri::ontology::operator==((uint64_t)v10, (uint64_t)a3))
      {
        v12 = v10;
        v13 = a3;
        v14 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 56 * *v6 + 48);
        v15 = a4[2];
        if ((unint64_t)v9 >= v15)
        {
          v17 = (_QWORD *)*a4;
          v18 = ((uint64_t)v9 - *a4) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v15 - (_QWORD)v17;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v21);
          else
            v22 = 0;
          v23 = (_QWORD *)(v21 + 8 * v18);
          *v23 = v14;
          v16 = v23 + 1;
          if (v9 != v17)
          {
            do
            {
              v24 = *--v9;
              *--v23 = v24;
            }
            while (v9 != v17);
            v9 = (_QWORD *)*a4;
          }
          *a4 = v23;
          a4[1] = v16;
          a4[2] = v21 + 8 * v22;
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = v14;
          v16 = v9 + 1;
        }
        a4[1] = v16;
        v9 = v16;
        a3 = v13;
        v10 = v12;
        v7 = v25;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 2;
    }
    while (v6 != v7);
  }
}

void sub_1C326175C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);
  if (v21)
  {
    *(_QWORD *)(v20 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[5];

  v4 = *a1;
  v5 = (_OWORD *)a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v16 = (_OWORD *)(v4 + 56 * a2);
      while (v5 != v16)
      {
        v5 = (_OWORD *)((char *)v5 - 56);
        std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100]((uint64_t)v5);
      }
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      v17 = (char *)v5 + 56 * v7;
      v18 = 56 * a2 - 8 * (((uint64_t)v5 - *a1) >> 3);
      do
      {
        v5[1] = 0uLL;
        v5[2] = 0uLL;
        *v5 = 0uLL;
        v5 = (_OWORD *)((char *)v5 + 56);
        v18 -= 56;
      }
      while (v18);
      a1[1] = (uint64_t)v17;
    }
    else
    {
      if (a2 > 0x492492492492492)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19[4] = a1 + 2;
      v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x249249249249249)
        v11 = 0x492492492492492;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(v11);
      v13 = &v12[56 * v6];
      v19[0] = v12;
      v19[1] = v13;
      v19[3] = &v12[56 * v14];
      v15 = 56 * a2 - 56 * v6;
      do
      {
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_OWORD *)v13 + 2) = 0uLL;
        *(_OWORD *)v13 = 0uLL;
        v13 += 56;
        v15 -= 56;
      }
      while (v15);
      v19[2] = &v12[56 * a2];
      std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer(a1, v19);
      std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer((uint64_t)v19);
    }
  }
}

void boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v10;
  char *v11;
  __int128 v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char **v19;
  char v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  std::string __p;

  *(_QWORD *)&v24 = a2;
  *((_QWORD *)&v24 + 1) = a3;
  v25 = *a4;
  v26 = *((_DWORD *)a4 + 4);
  if (*((char *)a4 + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a4 + 4), *((_QWORD *)a4 + 5));
  else
    __p = *(std::string *)(a4 + 2);
  v10 = *((_QWORD *)a4 + 7);
  v11 = (char *)operator new(0x60uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = v25;
  *((_OWORD *)v11 + 1) = v24;
  *((_OWORD *)v11 + 2) = v12;
  *((_DWORD *)v11 + 12) = v26;
  *((_QWORD *)v11 + 7) = off_1E7D21768;
  v13 = (std::string *)(v11 + 64);
  v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v11 + 10) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v11 + 11) = v10;
  *((_QWORD *)v11 + 7) = off_1E7D217A0;
  v15 = *a5;
  *(_QWORD *)v11 = *a5;
  *((_QWORD *)v11 + 1) = a5;
  *(_QWORD *)(v15 + 8) = v11;
  *a5 = (uint64_t)v11;
  v16 = a5[3];
  ++a5[2];
  *(_QWORD *)&v23 = a3;
  *((_QWORD *)&v23 + 1) = v11;
  v17 = boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>((char **)(v16 + 56 * a2), &v23);
  if (v18)
  {
    v19 = (char **)(a5[3] + 56 * a3 + 24);
    *(_QWORD *)&v23 = a2;
    *((_QWORD *)&v23 + 1) = v11;
    boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>(v19, &v23);
    v20 = 1;
  }
  else
  {
    v21 = v17;
    v22 = *(_QWORD *)v11;
    *(_QWORD *)(v22 + 8) = *((_QWORD *)v11 + 1);
    **((_QWORD **)v11 + 1) = v22;
    --a5[2];
    std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::__delete_node[abi:ne180100]<>(v11);
    v20 = 0;
    v11 = (char *)*((_QWORD *)v21 + 1);
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v11 + 32;
  *(_BYTE *)(a1 + 24) = v20;
  if (v14 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C3261AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  operator delete(__p);
  _Unwind_Resume(a1);
}

char *boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

void std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::__delete_node[abi:ne180100]<>(char *__p)
{
  *((_QWORD *)__p + 7) = off_1E7D21768;
  if (__p[87] < 0)
    operator delete(*((void **)__p + 8));
  operator delete(__p);
}

void siri::ontology::UsoGraph::getPredecessorsWithEdges(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 24) + 56 * a2->var2;
  v6 = *(_QWORD **)(v5 + 24);
  v7 = *(_QWORD **)(v5 + 32);
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 56 * *v6 + 48);
      v10 = v6[1] + 32;
      v11 = a3[2];
      if ((unint64_t)v8 >= v11)
      {
        v13 = (_QWORD *)*a3;
        v14 = ((uint64_t)v8 - *a3) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v11 - (_QWORD)v13;
        if (v16 >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>,std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>(v17);
        else
          v18 = 0;
        v19 = (_QWORD *)(v17 + 16 * v14);
        *v19 = v9;
        v19[1] = v10;
        v20 = v19;
        if (v8 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v8 - 1);
            v20 -= 2;
            v8 -= 2;
          }
          while (v8 != v13);
          v8 = (_QWORD *)*a3;
        }
        v12 = v19 + 2;
        *a3 = v20;
        a3[1] = v19 + 2;
        a3[2] = v17 + 16 * v18;
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v8[1] = v10;
        v12 = v8 + 2;
      }
      a3[1] = v12;
      v6 += 2;
      v8 = v12;
    }
    while (v6 != v7);
  }
}

void sub_1C3261DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3, char a4)
{
  int v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  siri::ontology::OntologyNodeName *v15;
  _BOOL8 result;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  siri::ontology::OntologyNodeName *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int OriginEntityForDefinedValue;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];

  if (!*(_DWORD *)(*((_QWORD *)this + 3) + 36) || !*((_DWORD *)a3 + 15))
    return 1;
  v8 = (*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2);
  if ((v8 - 2) >= 3)
  {
    if (v8 != 5)
      return 0;
    if (v17)
    {
      v18 = v17[3];
      if (!*(_DWORD *)(v18 + 36))
        return 1;
      v19 = *(_DWORD *)(v18 + 32);
      if (v19 == 6)
        return siri::ontology::OntologyNodeName::hasSetArgument(*((siri::ontology::OntologyNodeName **)this + 3), *((_DWORD *)a3 + 15));
      if (v19 != 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v38, "OntologyException");
        std::operator+<char>();
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v38, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1159, "isValidSetSuccessorWithEdge", (uint64_t)&v37);
      }
      return siri::ontology::OntologyNodeName::hasArgument(*((siri::ontology::OntologyNodeName **)this + 3), *((_DWORD *)a3 + 15));
    }
LABEL_33:
    __cxa_bad_cast();
  }
  if (!v9)
    goto LABEL_33;
  v10 = v9;
  v11 = *((_QWORD *)v9 + 3);
  v12 = *(_DWORD *)(v11 + 36);
  if (!v12)
    return 1;
  if (*(_DWORD *)(v11 + 32) == 3)
  {
    v13 = siri::ontology::oname::graph::ontology_init::Argument_definedValue(v9);
    v14 = siri::ontology::operator==((uint64_t)a3 + 24, v13);
    v15 = (siri::ontology::OntologyNodeName *)*((_QWORD *)this + 3);
    if (v14)
      return siri::ontology::OntologyNodeName::hasDefinedValue(v15, v12);
    v29 = *((_DWORD *)a3 + 15);
    OriginEntityForDefinedValue = siri::ontology::OntologyNodeName::getOriginEntityForDefinedValue(*((siri::ontology::OntologyNodeName **)v10 + 3));
    return siri::ontology::OntologyNodeName::existArgumentToEntity(v15, v29, OriginEntityForDefinedValue);
  }
  v20 = (siri::ontology::OntologyNodeName *)*((_QWORD *)this + 3);
  v21 = *((_DWORD *)a3 + 15);
  v22 = *(_DWORD *)(v11 + 36);
  if ((a4 & 1) != 0)
  {
    if (!siri::ontology::OntologyNodeName::existSetArgumentToEntity(v20, v21, v22))
    {
      v23 = *(int *)(v11 + 64);
      v24 = *(int *)(v11 + 68);
      if ((_DWORD)v24 != (_DWORD)v23)
      {
        v25 = (int *)(*(_QWORD *)(v11 + 48) + 4 * v23);
        v26 = 4 * v24 - 4 * v23 - 4;
        do
        {
          v27 = *v25++;
          result = siri::ontology::OntologyNodeName::existSetArgumentToEntity(v20, v21, v27);
          if ((result & 1) != 0)
            break;
          v28 = v26;
          v26 -= 4;
        }
        while (v28);
        return result;
      }
      return 0;
    }
    return 1;
  }
  if (siri::ontology::OntologyNodeName::existArgumentToEntity(v20, v21, v22))
    return 1;
  v31 = *(int *)(v11 + 64);
  v32 = *(int *)(v11 + 68);
  if ((_DWORD)v32 == (_DWORD)v31)
    return 0;
  v33 = (int *)(*(_QWORD *)(v11 + 48) + 4 * v31);
  v34 = 4 * v32 - 4 * v31 - 4;
  do
  {
    v35 = *v33++;
    result = siri::ontology::OntologyNodeName::existArgumentToEntity(v20, v21, v35);
    if ((result & 1) != 0)
      break;
    v36 = v34;
    v34 -= 4;
  }
  while (v36);
  return result;
}

void sub_1C3262078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>,std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void siri::ontology::UsoEntityNode::~UsoEntityNode(siri::ontology::UsoEntityNode *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1C3BD1618);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t siri::ontology::UsoEntityNode::getNodeType(siri::ontology::UsoEntityNode *this)
{
  return 2;
}

BOOL siri::ontology::UsoEntityNode::isValidSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, 0);
}

siri::ontology::UsoGraph **siri::ontology::UsoEntityNode::copy(siri::ontology::UsoGraph **this)
{
  siri::ontology::UsoGraph **EntityNode;

  EntityNode = (siri::ontology::UsoGraph **)siri::ontology::UsoGraph::createEntityNode(this[1], this[3]);
  siri::ontology::UsoGraph::addSuccessors(EntityNode[1], this, (const siri::ontology::UsoGraphNode *)EntityNode);
  return EntityNode;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::copyToGraph(const siri::ontology::OntologyNodeName **this, siri::ontology::UsoGraph *a2)
{
  siri::ontology::UsoEntityNode *EntityNode;
  const UsoIdentifier **v4;
  const UsoIdentifier **v5;
  const UsoIdentifier *v6;
  siri::ontology::UsoUtteranceAlignment **v7;
  siri::ontology::UsoUtteranceAlignment **v8;
  siri::ontology::UsoUtteranceAlignment *v9;
  siri::ontology::UsoEntitySpan **v10;
  siri::ontology::UsoEntitySpan **v11;
  siri::ontology::UsoEntitySpan *v12;

  EntityNode = siri::ontology::UsoGraph::createEntityNode(a2, this[3]);
  v4 = (const UsoIdentifier **)this[4];
  v5 = (const UsoIdentifier **)this[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    siri::ontology::UsoEntityNode::addIdentifier(EntityNode, v6);
  }
  v7 = (siri::ontology::UsoUtteranceAlignment **)this[7];
  v8 = (siri::ontology::UsoUtteranceAlignment **)this[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    siri::ontology::UsoEntityNode::addUtteranceAlignment(EntityNode, v9);
  }
  v11 = (siri::ontology::UsoEntitySpan **)this[10];
  v10 = (siri::ontology::UsoEntitySpan **)this[11];
  while (v11 != v10)
  {
    v12 = *v11++;
    siri::ontology::UsoEntityNode::addEntitySpan((int64x2_t *)EntityNode, v12);
  }
  return EntityNode;
}

void siri::ontology::UsoEntityNode::toString(siri::ontology::UsoEntityNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
  }
}

uint64_t *siri::ontology::UsoEntityNode::operator==(_QWORD *a1, void *lpsrc)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  const void **v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if (result)
  {
    v5 = result;
    v7 = a1[4];
    v6 = a1[5];
    v8 = v6 - v7;
    v9 = result[4];
    if (v6 - v7 != result[5] - v9)
      return 0;
    if (v6 != v7)
    {
      v10 = 0;
      v11 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1)
        v12 = 1;
      else
        v12 = v8 >> 3;
      do
      {
        if (v10 == v11)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v13 = *(unsigned __int8 **)(v7 + 8 * v10);
        v14 = *(_QWORD *)(v9 + 8 * v10);
        v15 = *(unsigned __int8 *)(v14 + 23);
        if ((v15 & 0x80u) == 0)
          v16 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 23);
        else
          v16 = *(unsigned __int8 **)(v14 + 8);
        v17 = (unsigned __int8 *)v13[23];
        v18 = (char)v17;
        if ((char)v17 < 0)
          v17 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
        if (v16 != v17)
          return 0;
        if (v18 >= 0)
          v19 = *(unsigned __int8 **)(v7 + 8 * v10);
        else
          v19 = *(unsigned __int8 **)v13;
        if ((v15 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v14, v19, *(_QWORD *)(v14 + 8)))
            return 0;
        }
        else if (*(_BYTE *)(v14 + 23))
        {
          v20 = *(unsigned __int8 **)(v9 + 8 * v10);
          while (*v20 == *v19)
          {
            ++v20;
            ++v19;
            if (!--v15)
              goto LABEL_24;
          }
          return 0;
        }
LABEL_24:
        v21 = *(unsigned __int8 *)(v14 + 47);
        if ((v21 & 0x80u) == 0)
          v22 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 47);
        else
          v22 = *(unsigned __int8 **)(v14 + 32);
        v23 = (unsigned __int8 *)v13[47];
        v24 = (char)v23;
        if ((char)v23 < 0)
          v23 = (unsigned __int8 *)*((_QWORD *)v13 + 4);
        if (v22 != v23)
          return 0;
        v25 = (const void **)(v14 + 24);
        if (v24 >= 0)
          v26 = v13 + 24;
        else
          v26 = (unsigned __int8 *)*((_QWORD *)v13 + 3);
        if ((v21 & 0x80) != 0)
        {
          if (memcmp(*v25, v26, *(_QWORD *)(v14 + 32)))
            return 0;
        }
        else if (*(_BYTE *)(v14 + 47))
        {
          while (*(unsigned __int8 *)v25 == *v26)
          {
            v25 = (const void **)((char *)v25 + 1);
            ++v26;
            if (!--v21)
              goto LABEL_39;
          }
          return 0;
        }
LABEL_39:
        result = (uint64_t *)std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v14 + 48), v13 + 48);
        if (!(_DWORD)result)
          return result;
        if (*(_BYTE *)(v14 + 88) && v13[88])
        {
          if (*(double *)(v14 + 80) != *((double *)v13 + 10))
            return 0;
        }
        else if ((*(_BYTE *)(v14 + 88) != 0) != (v13[88] != 0))
        {
          return 0;
        }
        if (*(_BYTE *)(v14 + 100) && v13[100])
        {
          if (*(_DWORD *)(v14 + 96) != *((_DWORD *)v13 + 24))
            return 0;
        }
        else if ((*(_BYTE *)(v14 + 100) != 0) != (v13[100] != 0))
        {
          return 0;
        }
        if (*(_BYTE *)(v14 + 108) && v13[108])
        {
          if (*(_DWORD *)(v14 + 104) != *((_DWORD *)v13 + 26))
            return 0;
        }
        else if ((*(_BYTE *)(v14 + 108) != 0) != (v13[108] != 0))
        {
          return 0;
        }
        if (*(_BYTE *)(v14 + 116) && v13[116])
        {
          if (*(_DWORD *)(v14 + 112) != *((_DWORD *)v13 + 28))
            return 0;
        }
        else if ((*(_BYTE *)(v14 + 116) != 0) != (v13[116] != 0))
        {
          return 0;
        }
      }
      while (++v10 != v12);
    }
    v28 = (char *)a1[7];
    v27 = (char *)a1[8];
    v29 = (_QWORD *)v5[7];
    if (v27 - v28 != v5[8] - (_QWORD)v29)
      return 0;
    while (v28 != v27)
    {
      if (*(_QWORD *)v28 != *v29)
        return 0;
      v28 += 8;
      ++v29;
    }
    v30 = a1[10];
    v31 = a1[11];
    if (v31 - v30 != v5[11] - v5[10])
      return 0;
    if (v31 != v30)
    {
      v32 = 0;
      do
      {
        v33 = v5[10];
        if (v32 >= (v5[11] - v33) >> 3)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        if ((siri::ontology::UsoEntitySpan::operator==(*(_QWORD *)(v33 + 8 * v32), *(_QWORD *)(v30 + 8 * v32)) & 1) == 0)
          return 0;
        ++v32;
        v30 = a1[10];
      }
      while (v32 < (a1[11] - v30) >> 3);
    }
    result = (uint64_t *)siri::ontology::operator==(a1[3], v5[3]);
    if ((_DWORD)result)
      return (uint64_t *)(a1[2] == *((_QWORD *)lpsrc + 2));
  }
  return result;
}

uint64_t siri::ontology::UsoEntityNode::operator!=(_QWORD *a1, void *a2)
{
  return siri::ontology::UsoEntityNode::operator==(a1, a2) ^ 1;
}

uint64_t siri::ontology::UsoEntityNode::operator<(uint64_t a1, void *lpsrc)
{
  uint64_t result;

  if (result)
  {
    result = siri::ontology::operator<(*(_QWORD *)(a1 + 24), *(_QWORD *)(result + 24));
    if ((_DWORD)result)
      return *(_QWORD *)(a1 + 16) < *((_QWORD *)lpsrc + 2);
  }
  return result;
}

uint64_t siri::ontology::UsoEntityNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoEntityNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoEntityNode::operator>=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoEntityNode::operator<(a1, a2) ^ 1;
}

uint64_t siri::ontology::UsoEntityNode::checkValidOntologyNameType(uint64_t this)
{
  _QWORD v1[3];

  if (*(_DWORD *)(*(_QWORD *)(this + 24) + 32) > 3u)
  {
    std::string::basic_string[abi:ne180100]<0>(v1, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v1, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 897, "checkValidOntologyNameType", "UsoEntityNode can only take ENTITY, DEFINED_VALUE, EMPTY ontology name types");
  }
  return this;
}

void sub_1C3262770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoEntitySpan::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char *v22;
  unsigned __int8 **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  BOOL v35;

  if (std::operator!=[abi:ne180100]<std::string,std::string>((unsigned __int8 *)a1, (unsigned __int8 *)a2))
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 36);
  if (*(_BYTE *)(a1 + 36))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 36) != 0) != (v4 != 0))
      return 0;
  }
  else if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
  {
    return 0;
  }
  if (std::operator!=[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a1 + 40), (unsigned __int8 *)(a2 + 40)))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 116) && *(_BYTE *)(a2 + 116))
  {
    if (*(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 116) != 0) != (*(_BYTE *)(a2 + 116) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 124) && *(_BYTE *)(a2 + 124))
  {
    if (*(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 124) != 0) != (*(_BYTE *)(a2 + 124) != 0))
  {
    return 0;
  }
  if (std::operator!=[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a1 + 152), (unsigned __int8 *)(a2 + 152)))
  {
    return 0;
  }
  if (!*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a2 + 80))
      return 0;
    goto LABEL_29;
  }
  if (!*(_BYTE *)(a2 + 80))
    return 0;
  result = siri::ontology::MatchInfo::operator==(*(_QWORD *)(a2 + 72), *(_QWORD *)(a1 + 72));
  if ((_DWORD)result)
  {
LABEL_29:
    v8 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v9 = v7 - v8;
    v10 = *(_QWORD *)(a2 + 88);
    if (v7 - v8 == *(_QWORD *)(a2 + 96) - v10)
    {
      if (v7 != v8)
      {
        v11 = 0;
        v12 = v9 >> 3;
        if ((unint64_t)(v9 >> 3) <= 1)
          v13 = 1;
        else
          v13 = v9 >> 3;
        do
        {
          if (v11 == v12)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v14 = *(unsigned __int8 **)(v8 + 8 * v11);
          v15 = *(_QWORD *)(v10 + 8 * v11);
          v16 = *(unsigned __int8 *)(v15 + 23);
          if ((v16 & 0x80u) == 0)
            v17 = (unsigned __int8 *)*(unsigned __int8 *)(v15 + 23);
          else
            v17 = *(unsigned __int8 **)(v15 + 8);
          v18 = (unsigned __int8 *)v14[23];
          v19 = (char)v18;
          if ((char)v18 < 0)
            v18 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
          if (v17 != v18)
            return 0;
          if (v19 >= 0)
            v20 = *(unsigned __int8 **)(v8 + 8 * v11);
          else
            v20 = *(unsigned __int8 **)v14;
          if ((v16 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v15, v20, *(_QWORD *)(v15 + 8)))
              return 0;
          }
          else if (*(_BYTE *)(v15 + 23))
          {
            v21 = *(unsigned __int8 **)(v10 + 8 * v11);
            while (*v21 == *v20)
            {
              ++v21;
              ++v20;
              if (!--v16)
                goto LABEL_51;
            }
            return 0;
          }
LABEL_51:
          result = std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v15 + 24), v14 + 24);
          if (!(_DWORD)result)
            return result;
          if (*(_BYTE *)(v15 + 60) && v14[60])
          {
            if (*(_DWORD *)(v15 + 56) != *((_DWORD *)v14 + 14))
              return 0;
          }
          else if ((*(_BYTE *)(v15 + 60) != 0) != (v14[60] != 0))
          {
            return 0;
          }
          if (*(_BYTE *)(v15 + 68) && v14[68])
          {
            if (*(float *)(v15 + 64) != *((float *)v14 + 16))
              return 0;
          }
          else if ((*(_BYTE *)(v15 + 68) != 0) != (v14[68] != 0))
          {
            return 0;
          }
        }
        while (++v11 != v13);
      }
      v24 = a1 + 128;
      v23 = *(unsigned __int8 ***)(a1 + 128);
      v22 = *(char **)(v24 + 8);
      v25 = v22 - (char *)v23;
      v27 = a2 + 128;
      v26 = *(unsigned __int8 ***)(a2 + 128);
      if (v22 - (char *)v23 == *(_QWORD *)(v27 + 8) - (_QWORD)v26)
      {
        if (v22 == (char *)v23)
          return 1;
        v28 = v25 >> 3;
        if ((unint64_t)(v25 >> 3) <= 1)
          v29 = 1;
        else
          v29 = v25 >> 3;
        v30 = v29 - 1;
        do
        {
          if (!v28)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v32 = *v23++;
          v31 = v32;
          v33 = *v26++;
          result = siri::ontology::AsrAlternative::operator==(v33, v31);
          v35 = v30-- != 0;
          if (!(_DWORD)result)
            break;
          --v28;
        }
        while (v35);
        return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL std::operator!=[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (a1[24])
    v2 = a2[24] == 0;
  else
    v2 = 1;
  if (v2)
    return (a1[24] != 0) ^ (a2[24] != 0);
  v3 = a1[23];
  if ((v3 & 0x80u) == 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = a2[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (v4 != v5)
    return 1;
  if (v6 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v3 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v7 = v3 - 1;
    do
    {
      v9 = *a1++;
      v8 = v9;
      v10 = *a2++;
      v2 = v8 == v10;
      v3 = v8 != v10;
    }
    while (v2 && v7-- != 0);
  }
  return v3;
}

BOOL siri::ontology::MatchInfo::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  BOOL v10;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 8) != 0) != (v2 != 0))
      return 0;
  }
  else if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a2 + 16))
  {
    if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 16) != 0) != (*(_BYTE *)(a2 + 16) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a2 + 24))
  {
    if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 24) != 0) != (*(_BYTE *)(a2 + 24) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 32) != 0) != (*(_BYTE *)(a2 + 32) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 40) && *(_BYTE *)(a2 + 40))
  {
    if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 40) != 0) != (*(_BYTE *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a2 + 48))
  {
    if (*(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 48) != 0) != (*(_BYTE *)(a2 + 48) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a2 + 56))
  {
    if (*(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 56) != 0) != (*(_BYTE *)(a2 + 56) != 0))
  {
    return 0;
  }
  if (!*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a2 + 64))
  {
    if ((*(_BYTE *)(a1 + 64) != 0) == (*(_BYTE *)(a2 + 64) != 0))
      goto LABEL_45;
    return 0;
  }
  if (*(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
    return 0;
LABEL_45:
  v5 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v6 = *(int **)(a2 + 72);
  if (v4 - v5 != *(_QWORD *)(a2 + 80) - (_QWORD)v6)
    return 0;
  if (v5 == v4)
    return 1;
  v7 = v5 + 4;
  do
  {
    v8 = *v6++;
    result = *(_DWORD *)(v7 - 4) == v8;
    v10 = *(_DWORD *)(v7 - 4) != v8 || v7 == v4;
    v7 += 4;
  }
  while (!v10);
  return result;
}

BOOL siri::ontology::AsrAlternative::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  float *v6;
  unsigned __int8 *v8;
  _BOOL8 result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = (float *)a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      goto LABEL_18;
    return 0;
  }
  if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  result = (a1[28] != 0) == (*((_BYTE *)v6 + 28) != 0);
  if (a1[28])
  {
    if (*((_BYTE *)v6 + 28))
      return *((float *)a1 + 6) == v6[6];
  }
  return result;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;

  if (a1[24])
    v2 = a2[24] == 0;
  else
    v2 = 1;
  if (v2)
    return (a1[24] != 0) == (a2[24] != 0);
  v4 = a1[23];
  if ((v4 & 0x80u) == 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a1++;
    v9 = v10;
    v12 = *a2++;
    v11 = v12;
    v14 = v8-- != 0;
    v2 = v9 == v11;
    v3 = v9 == v11;
  }
  while (v2 && v14);
  return v3;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoGraph::createEntityNode(siri::ontology::UsoGraph *this, const siri::ontology::OntologyNodeName *a2)
{
  siri::ontology::UsoEntityNode *v4;
  siri::ontology::UsoEntityNode *v6;

  v4 = (siri::ontology::UsoEntityNode *)operator new();
  siri::ontology::UsoEntityNode::UsoEntityNode(v4, this, a2);
  v6 = v4;
  siri::ontology::UsoGraph::addNode((float *)this, (unint64_t *)&v6);
  if (v6)
    (*(void (**)(siri::ontology::UsoEntityNode *))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_1C3262FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoEntityNode::addIdentifier(siri::ontology::UsoEntityNode *this, const UsoIdentifier *a2)
{
  std::string *v4;
  uint64_t result;
  unint64_t v6;
  std::string **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string **v15;
  _QWORD v16[5];

  v4 = (std::string *)operator new();
  result = (uint64_t)siri::ontology::UsoIdentifier::UsoIdentifier(v4, a2);
  v6 = *((_QWORD *)this + 6);
  v7 = (std::string **)*((_QWORD *)this + 5);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v16[4] = (char *)this + 48;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
    else
      v14 = 0;
    v15 = (std::string **)(v13 + 8 * v10);
    v16[0] = v13;
    v16[1] = v15;
    v16[3] = v13 + 8 * v14;
    *v15 = v4;
    v16[2] = v15 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer((_QWORD *)this + 4, v16);
    v8 = (_QWORD *)*((_QWORD *)this + 5);
    result = std::__split_buffer<std::unique_ptr<siri::ontology::UsoIdentifier>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 5) = v8;
  return result;
}

void sub_1C32630F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *siri::ontology::UsoEntityNode::addUtteranceAlignment(siri::ontology::UsoEntityNode *this, siri::ontology::UsoUtteranceAlignment *a2)
{
  siri::ontology::UsoUtteranceAlignment *v4;
  char *v5;
  siri::ontology::UsoUtteranceSpan **v6;
  siri::ontology::UsoUtteranceSpan **v7;
  unint64_t v8;
  siri::ontology::UsoUtteranceAlignment **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  siri::ontology::UsoUtteranceAlignment **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  siri::ontology::UsoUtteranceAlignment *v21;
  int64x2_t v22;
  unint64_t v23;
  siri::ontology::UsoUtteranceAlignment *v25;
  char *v26;
  int64x2_t v27;
  unint64_t v28;
  char *v29;

  v4 = (siri::ontology::UsoUtteranceAlignment *)operator new();
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  siri::ontology::UsoUtteranceAlignment::getSpans(a2, &v26);
  v5 = v26;
  v6 = (siri::ontology::UsoUtteranceSpan **)v27.i64[0];
  if (v26 != (char *)v27.i64[0])
  {
    v7 = (siri::ontology::UsoUtteranceSpan **)v26;
    do
      siri::ontology::UsoUtteranceAlignment::addSpan(v4, *v7++);
    while (v7 != v6);
  }
  if (v5)
    operator delete(v5);
  v25 = v4;
  v8 = *((_QWORD *)this + 9);
  v9 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)this + 7);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = (char *)this + 72;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v15);
    else
      v16 = 0;
    v17 = (siri::ontology::UsoUtteranceAlignment **)(v15 + 8 * v12);
    v18 = v15 + 8 * v16;
    v28 = v18;
    v25 = 0;
    *v17 = v4;
    v10 = v17 + 1;
    v27.i64[1] = (uint64_t)(v17 + 1);
    v20 = (_QWORD *)*((_QWORD *)this + 7);
    v19 = (_QWORD *)*((_QWORD *)this + 8);
    if (v19 == v20)
    {
      v22 = vdupq_n_s64((unint64_t)v19);
    }
    else
    {
      do
      {
        v21 = (siri::ontology::UsoUtteranceAlignment *)*--v19;
        *v19 = 0;
        *--v17 = v21;
      }
      while (v19 != v20);
      v22 = *(int64x2_t *)((char *)this + 56);
      v10 = (_QWORD *)v27.i64[1];
      v18 = v28;
    }
    *((_QWORD *)this + 7) = v17;
    *((_QWORD *)this + 8) = v10;
    v27 = v22;
    v23 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v18;
    v28 = v23;
    v26 = (char *)v22.i64[0];
    std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    v25 = 0;
    *v9 = v4;
    v10 = v9 + 1;
  }
  *((_QWORD *)this + 8) = v10;
  return std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)&v25);
}

void sub_1C32632C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoEntityNode::addEntitySpan(int64x2_t *this, siri::ontology::UsoEntitySpan *a2)
{
  siri::ontology::UsoEntitySpan *v4;
  uint64_t result;
  unint64_t v6;
  siri::ontology::UsoEntitySpan **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  siri::ontology::UsoEntitySpan **v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  siri::ontology::UsoEntitySpan *v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  int64x2_t *v25;

  v4 = (siri::ontology::UsoEntitySpan *)operator new();
  result = (uint64_t)siri::ontology::UsoEntitySpan::UsoEntitySpan(v4, a2);
  v6 = this[6].u64[0];
  v7 = (siri::ontology::UsoEntitySpan **)this[5].i64[1];
  if ((unint64_t)v7 >= v6)
  {
    v8 = this[5].i64[0];
    v9 = ((uint64_t)v7 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v25 = this + 6;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v12);
    else
      v13 = 0;
    v14 = (siri::ontology::UsoEntitySpan **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v24 = v15;
    *v14 = v4;
    v16 = v14 + 1;
    v23.i64[1] = (uint64_t)(v14 + 1);
    v18 = (_QWORD *)this[5].i64[0];
    v17 = (_QWORD *)this[5].i64[1];
    if (v17 == v18)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = (siri::ontology::UsoEntitySpan *)*--v17;
        *v17 = 0;
        *--v14 = v19;
      }
      while (v17 != v18);
      v20 = this[5];
      v16 = (_QWORD *)v23.i64[1];
      v15 = v24;
    }
    this[5].i64[0] = (uint64_t)v14;
    this[5].i64[1] = (uint64_t)v16;
    v23 = v20;
    v21 = this[6].i64[0];
    this[6].i64[0] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    result = std::__split_buffer<std::unique_ptr<siri::ontology::UsoEntitySpan>>::~__split_buffer((uint64_t)&v22);
    this[5].i64[1] = (uint64_t)v16;
  }
  else
  {
    *v7 = v4;
    this[5].i64[1] = (uint64_t)(v7 + 1);
  }
  return result;
}

void sub_1C326347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

siri::ontology::UsoEntitySpan *siri::ontology::UsoEntitySpan::UsoEntitySpan(siri::ontology::UsoEntitySpan *this, const siri::ontology::UsoEntitySpan *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  const siri::ontology::SpanProperty **v12;
  char *v13;
  char *v14;
  const siri::ontology::AsrAlternative **v15;
  char *v17;
  char *v18;

  v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this, (__int128 *)a2);
  v4[1].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 40), (__int128 *)((char *)a2 + 40));
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  v5 = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = v5;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 152), (__int128 *)((char *)a2 + 152));
  if (*((_BYTE *)a2 + 80))
  {
    v6 = *((_QWORD *)a2 + 9);
    v7 = operator new();
    siri::ontology::MatchInfo::MatchInfo(v7, v6);
    if (*((_BYTE *)this + 80))
    {
      v8 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v7;
      if (v8)
        std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v8);
    }
    else
    {
      *((_QWORD *)this + 9) = v7;
      *((_BYTE *)this + 80) = 1;
    }
  }
  else if (*((_BYTE *)this + 80))
  {
    v9 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v9)
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v9);
    *((_BYTE *)this + 80) = 0;
  }
  siri::ontology::UsoEntitySpan::getSpanProperties(a2, &v17);
  v10 = v17;
  v11 = v18;
  if (v17 != v18)
  {
    v12 = (const siri::ontology::SpanProperty **)v17;
    do
      siri::ontology::UsoEntitySpan::addSpanProperty(this, *v12++);
    while (v12 != (const siri::ontology::SpanProperty **)v11);
  }
  if (v10)
    operator delete(v10);
  siri::ontology::UsoEntitySpan::getAlternatives(a2, &v17);
  v14 = v17;
  v13 = v18;
  if (v17 != v18)
  {
    v15 = (const siri::ontology::AsrAlternative **)v17;
    do
      siri::ontology::UsoEntitySpan::addAlternative(this, *v15++);
    while (v15 != (const siri::ontology::AsrAlternative **)v13);
  }
  if (v14)
    operator delete(v14);
  return this;
}

void sub_1C3263650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1C3BD1618](v7, 0x1010C400E9420BALL);
  if (*(_BYTE *)(v4 + 176) && *(char *)(v4 + 175) < 0)
    operator delete(*v6);
  std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(_BYTE *)(v4 + 80))
  {
    v9 = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v4 + 72) = 0;
    if (v9)
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v9);
  }
  if (*(_BYTE *)(v4 + 64) && *(char *)(v4 + 63) < 0)
    operator delete(*v5);
  if (*(_BYTE *)(v4 + 24))
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoEntitySpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100]((void ***)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t siri::ontology::MatchInfo::MatchInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  v3 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 60) = v3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v5 = *(_BYTE **)(a2 + 72);
  v4 = *(_BYTE **)(a2 + 80);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<siri::ontology::MatchInfo::AliasType>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 72), v6 >> 2);
    v7 = *(char **)(a1 + 80);
    memmove(v7, v5, v6);
    *(_QWORD *)(a1 + 80) = &v7[4 * (v6 >> 2)];
  }
  return a1;
}

void sub_1C326382C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntitySpan::getSpanProperties(siri::ontology::UsoEntitySpan *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 11);
  v3 = (uint64_t *)*((_QWORD *)this + 12);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = *a2;
        v10 = (v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v14 = (char *)operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            v16 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C3263970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntitySpan::getAlternatives(siri::ontology::UsoEntitySpan *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 16);
  v3 = (uint64_t *)*((_QWORD *)this + 17);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = *a2;
        v10 = (v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v14 = (char *)operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            v16 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C3263ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoEntitySpan::addSpanProperty(siri::ontology::UsoEntitySpan *this, const siri::ontology::SpanProperty *a2)
{
  std::string *v4;
  std::string *v5;
  uint64_t result;
  unint64_t v7;
  std::string **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string **v16;
  _QWORD v17[5];

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
  result = (uint64_t)std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v5 + 1, (__int128 *)((char *)a2 + 24));
  *(_OWORD *)&v5[2].__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)a2 + 56);
  v7 = *((_QWORD *)this + 13);
  v8 = (std::string **)*((_QWORD *)this + 12);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *((_QWORD *)this + 11);
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = (char *)this + 104;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
    else
      v15 = 0;
    v16 = (std::string **)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *v16 = v5;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer((_QWORD *)this + 11, v17);
    v9 = (_QWORD *)*((_QWORD *)this + 12);
    result = std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 12) = v9;
  return result;
}

void sub_1C3263C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntitySpan::addAlternative(siri::ontology::UsoEntitySpan *this, const siri::ontology::AsrAlternative *a2)
{
  std::string *v4;
  std::string *v5;
  unint64_t v6;
  std::string **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string **v15;
  _QWORD v16[5];

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
  v5[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  v6 = *((_QWORD *)this + 18);
  v7 = (std::string **)*((_QWORD *)this + 17);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 16);
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v16[4] = (char *)this + 144;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
    else
      v14 = 0;
    v15 = (std::string **)(v13 + 8 * v10);
    v16[0] = v13;
    v16[1] = v15;
    v16[3] = v13 + 8 * v14;
    *v15 = v5;
    v16[2] = v15 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer((_QWORD *)this + 16, v16);
    v8 = (_QWORD *)*((_QWORD *)this + 17);
    std::__split_buffer<std::unique_ptr<siri::ontology::AsrAlternative>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 17) = v8;
}

void sub_1C3263D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1012C40F498771DLL);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (void **)(v1 + 8);
    std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C3BD1618);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x1C3BD1618](v6, 0x1000C405AAC83ABLL);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::ontology::UsoUtteranceAlignment::getSpans(siri::ontology::UsoUtteranceAlignment *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = *a2;
        v10 = (v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v14 = (char *)operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            v16 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C326400C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *siri::ontology::UsoUtteranceAlignment::addSpan(siri::ontology::UsoUtteranceAlignment *this, siri::ontology::UsoUtteranceSpan *a2)
{
  _OWORD *result;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];

  result = (_OWORD *)operator new();
  v5 = result;
  v6 = *((_QWORD *)this + 3);
  v7 = *((_OWORD *)a2 + 1);
  *result = *(_OWORD *)a2;
  result[1] = v7;
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)v8 >= v6)
  {
    v10 = *((_QWORD *)this + 1);
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = (char *)this + 24;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
    else
      v15 = 0;
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *v16 = v5;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer((_QWORD *)this + 1, v17);
    v9 = (_QWORD *)*((_QWORD *)this + 2);
    result = (_OWORD *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v8 = result;
    v9 = v8 + 1;
    *((_QWORD *)this + 2) = v9;
  }
  *((_QWORD *)this + 2) = v9;
  return result;
}

void sub_1C3264130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1000C405AAC83ABLL);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x1C3BD1618](v4, 0x1000C405AAC83ABLL);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *siri::ontology::UsoIdentifier::UsoIdentifier(std::string *this, const UsoIdentifier *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)&a2->var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->var0.var0.var0.var0.var1.var0, a2->var0.var0.var0.var0.var1.var1);
  }
  else
  {
    v4 = *(_OWORD *)a2->var0.var0.var0.var0.var0.var0;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->var0.var0.var0.var0.var1 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(a2->var0.var0.var1.var0[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, (const std::string::value_type *)a2->var0.var0.var1.var0[0], a2->var0.var0.var1.var0[1]);
  }
  else
  {
    v5 = *(_OWORD *)a2->var0.var0.var1.var0;
    this[1].__r_.__value_.__r.__words[2] = a2->var0.var0.var1.var0[2];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 2, (__int128 *)a2[1].var0.var0.var0.var0.var0.var0);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *(_OWORD *)&a2[1].var0.var0.var1.var0[1];
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)a2[2].var0.var0.var0.var0.var1.var0;
  this[4].__r_.__value_.__l.__size_ = a2[2].var0.var0.var0.var0.var1.var1;
  this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)&a2[2].var0.var0.var0.var0.var1 + 2);
  return this;
}

void sub_1C326426C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoIdentifier>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BD1618);
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::UsoEntityNode(siri::ontology::UsoEntityNode *this, siri::ontology::UsoGraph *a2, const siri::ontology::OntologyNodeName *a3)
{
  *(_QWORD *)this = &off_1E7D20E40;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  siri::ontology::UsoEntityNode::checkValidOntologyNameType((uint64_t)this);
  return this;
}

void sub_1C32643BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  a10 = (void **)(v10 + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v12;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::ontology::UsoRootNode::~UsoRootNode(siri::ontology::UsoRootNode *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::UsoRootNode::getNodeType(siri::ontology::UsoRootNode *this)
{
  return 0;
}

uint64_t siri::ontology::UsoRootNode::isValidSuccessorWithEdge(siri::ontology::UsoRootNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uint64_t v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uint64_t v11;

  v4 = (char *)a3 + 24;
  v5 = siri::ontology::oname::graph::ontology_init::Argument_task(this);
  result = siri::ontology::operator==((uint64_t)v4, v5);
  if (!(_DWORD)result
    || (result = (*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2), (_DWORD)result != 1))
  {
    v7 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)result);
    v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==((uint64_t)v4, v7);
    if ((_DWORD)v8)
    {
      v8 = (siri::ontology::oname::graph::ontology_init *)(*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2);
      if ((_DWORD)v8 == 2)
        return 1;
    }
    v9 = siri::ontology::oname::graph::ontology_init::Argument_entity(v8);
    v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==((uint64_t)v4, v9);
    if ((_DWORD)v10
      && (v10 = (siri::ontology::oname::graph::ontology_init *)(*((uint64_t (**)(const UsoGraphNode *))a2->var0
                                                                + 2))(a2),
          (_DWORD)v10 == 3))
    {
      return 1;
    }
    else
    {
      v11 = siri::ontology::oname::graph::ontology_init::Argument_entity(v10);
      result = siri::ontology::operator==((uint64_t)v4, v11);
      if ((_DWORD)result)
        return (*((unsigned int (**)(const UsoGraphNode *))a2->var0 + 2))(a2) == 4;
    }
  }
  return result;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoRootNode::copyToGraph(siri::ontology::UsoRootNode *this, siri::ontology::UsoGraph *a2)
{
  siri::ontology::UsoEntityNode *v3;
  const UsoIdentifier **v4;
  const UsoIdentifier **v5;
  const UsoIdentifier *v6;
  siri::ontology::UsoUtteranceAlignment **v7;
  siri::ontology::UsoUtteranceAlignment **v8;
  siri::ontology::UsoUtteranceAlignment *v9;
  siri::ontology::UsoEntitySpan **v10;
  siri::ontology::UsoEntitySpan **v11;
  siri::ontology::UsoEntitySpan *v12;

  v3 = (siri::ontology::UsoEntityNode *)*((_QWORD *)a2 + 11);
  v4 = (const UsoIdentifier **)*((_QWORD *)this + 4);
  v5 = (const UsoIdentifier **)*((_QWORD *)this + 5);
  while (v4 != v5)
  {
    v6 = *v4++;
    siri::ontology::UsoEntityNode::addIdentifier(v3, v6);
  }
  v7 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 7);
  v8 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 8);
  while (v7 != v8)
  {
    v9 = *v7++;
    siri::ontology::UsoEntityNode::addUtteranceAlignment(v3, v9);
  }
  v11 = (siri::ontology::UsoEntitySpan **)*((_QWORD *)this + 10);
  v10 = (siri::ontology::UsoEntitySpan **)*((_QWORD *)this + 11);
  while (v11 != v10)
  {
    v12 = *v11++;
    siri::ontology::UsoEntityNode::addEntitySpan((int64x2_t *)v3, v12);
  }
  return v3;
}

void siri::ontology::UsoRootNode::toString(siri::ontology::UsoRootNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
  }
}

uint64_t siri::ontology::UsoRootNode::checkValidOntologyNameType(uint64_t this)
{
  _QWORD v1[3];

  if (*(_DWORD *)(*(_QWORD *)(this + 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v1, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v1, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1281, "checkValidOntologyNameType", "UsoRootNode can only take ROOT ontology name type");
  }
  return this;
}

void sub_1C3264818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoTaskNode::~UsoTaskNode(siri::ontology::UsoTaskNode *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::UsoTaskNode::getNodeType(siri::ontology::UsoTaskNode *this)
{
  return 1;
}

BOOL siri::ontology::UsoTaskNode::isValidSuccessorWithEdge(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  siri::ontology::OntologyVerbName *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 24) + 36) || !*(_DWORD *)(*(_QWORD *)(a1 + 104) + 36))
    return 1;
  v6 = (*(uint64_t (**)(const void *))(*(_QWORD *)a2 + 16))(a2);
  if ((v6 - 2) >= 3)
  {
    if (v6 == 5)
      return siri::ontology::OntologyVerbName::hasArgument(*(siri::ontology::OntologyVerbName **)(a1 + 104), *(_DWORD *)(a3 + 60));
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = v7[3];
    v9 = *(_DWORD *)(v8 + 36);
    if (!v9)
      return 1;
    v10 = *(_DWORD *)(a3 + 60);
    if (!v10)
      return 1;
    v11 = *(siri::ontology::OntologyVerbName **)(a1 + 104);
    if (siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, v9))
      return 1;
    v12 = *(_QWORD *)(a1 + 24);
    if (siri::ontology::operator==(v12, v8))
    {
      if (siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, -1))
        return 1;
    }
    v14 = *(int *)(v8 + 64);
    v15 = *(int *)(v8 + 68);
    if ((_DWORD)v15 != (_DWORD)v14)
    {
      v16 = (int *)(*(_QWORD *)(v8 + 48) + 4 * v14);
      v17 = 4 * v15 - 4 * v14;
      while (1)
      {
        v18 = *v16;
        if (siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, *v16)
          || *(_DWORD *)(v12 + 36) == v18 && siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, -1))
        {
          break;
        }
        result = 0;
        ++v16;
        v17 -= 4;
        if (!v17)
          return result;
      }
      return 1;
    }
  }
  return 0;
}

siri::ontology::UsoGraph **siri::ontology::UsoTaskNode::copy(siri::ontology::UsoGraph **this)
{
  siri::ontology::UsoGraph **TaskNode;

  TaskNode = (siri::ontology::UsoGraph **)siri::ontology::UsoGraph::createTaskNode(this[1], this[3], this[13]);
  siri::ontology::UsoGraph::addSuccessors(TaskNode[1], this, (const siri::ontology::UsoGraphNode *)TaskNode);
  return TaskNode;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoTaskNode::copyToGraph(const siri::ontology::OntologyNodeName **this, siri::ontology::UsoGraph *a2)
{
  siri::ontology::UsoEntityNode *TaskNode;
  const UsoIdentifier **v4;
  const UsoIdentifier **v5;
  const UsoIdentifier *v6;
  siri::ontology::UsoUtteranceAlignment **v7;
  siri::ontology::UsoUtteranceAlignment **v8;
  siri::ontology::UsoUtteranceAlignment *v9;
  siri::ontology::UsoEntitySpan **v10;
  siri::ontology::UsoEntitySpan **v11;
  siri::ontology::UsoEntitySpan *v12;

  TaskNode = siri::ontology::UsoGraph::createTaskNode(a2, this[3], this[13]);
  v4 = (const UsoIdentifier **)this[4];
  v5 = (const UsoIdentifier **)this[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    siri::ontology::UsoEntityNode::addIdentifier(TaskNode, v6);
  }
  v7 = (siri::ontology::UsoUtteranceAlignment **)this[7];
  v8 = (siri::ontology::UsoUtteranceAlignment **)this[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    siri::ontology::UsoEntityNode::addUtteranceAlignment(TaskNode, v9);
  }
  v11 = (siri::ontology::UsoEntitySpan **)this[10];
  v10 = (siri::ontology::UsoEntitySpan **)this[11];
  while (v11 != v10)
  {
    v12 = *v11++;
    siri::ontology::UsoEntityNode::addEntitySpan((int64x2_t *)TaskNode, v12);
  }
  return TaskNode;
}

void siri::ontology::UsoTaskNode::toString(siri::ontology::UsoTaskNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string v19;

  v4 = *((_QWORD *)this + 13);
  if (*(char *)(v4 + 31) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 31);
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v5 + 2);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v5)
  {
    v9 = *(char **)(v4 + 8);
    v8 = (char *)(v4 + 8);
    v7 = v9;
    if (v8[23] >= 0)
      v10 = v8;
    else
      v10 = v7;
    memmove(v6, v10, v5);
  }
  strcpy((char *)v6 + v5, "::");
  v11 = *((_QWORD *)this + 3);
  v14 = *(const std::string::value_type **)(v11 + 8);
  v12 = v11 + 8;
  v13 = v14;
  v15 = *(char *)(v12 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v12;
  else
    v16 = v13;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v12 + 23);
  else
    v17 = *(_QWORD *)(v12 + 8);
  v18 = std::string::append(&v19, v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1C3264C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *siri::ontology::UsoTaskNode::operator==(_QWORD *a1, void *lpsrc)
{
  _QWORD *v4;

  if (v4 && siri::ontology::operator==(a1[13], v4[13]))
    return siri::ontology::UsoEntityNode::operator==(a1, lpsrc);
  else
    return 0;
}

uint64_t siri::ontology::UsoTaskNode::checkValidOntologyNameType(uint64_t this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  int *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  const std::string::value_type *v15;
  const std::string::value_type *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  _QWORD *v22;
  std::string v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;
  _QWORD v27[3];

  v1 = *(_QWORD *)(this + 24);
  if (*(_DWORD *)(v1 + 36))
  {
    v2 = *(_DWORD *)(*(_QWORD *)(this + 104) + 36);
    if (v2)
    {
      if (*(_DWORD *)(v1 + 32) != 2)
      {
        v22 = std::string::basic_string[abi:ne180100]<0>(v27, "OntologyException");
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v22, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1195, "checkValidOntologyNameType", "UsoTaskNode can only take ENTITY + VERB ontology name types");
      }
      v3 = *(int *)(v1 + 64);
      if (!(_DWORD)v3)
        goto LABEL_13;
      v4 = *(_DWORD **)(v1 + 48);
      v5 = &v4[v3];
      do
      {
        v6 = v3 >> 1;
        v7 = &v4[v3 >> 1];
        v9 = *v7;
        v8 = v7 + 1;
        v3 += ~(v3 >> 1);
        if (v9 < v2)
          v4 = v8;
        else
          v3 = v6;
      }
      while (v3);
      if (v4 == v5 || *v4 > v2)
      {
LABEL_13:
        v10 = this;
        std::string::basic_string[abi:ne180100]<0>(v27, "OntologyException");
        std::operator+<char>();
        v11 = std::string::append(&v23, "::");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = *(_QWORD *)(v10 + 104);
        v16 = *(const std::string::value_type **)(v13 + 8);
        v14 = v13 + 8;
        v15 = v16;
        v17 = *(char *)(v14 + 23);
        if (v17 >= 0)
          v18 = (const std::string::value_type *)v14;
        else
          v18 = v15;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(v14 + 23);
        else
          v19 = *(_QWORD *)(v14 + 8);
        v20 = std::string::append(&v24, v18, v19);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v26 = v20->__r_.__value_.__r.__words[2];
        v25 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v27, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1200, "checkValidOntologyNameType", (uint64_t)&v25);
      }
    }
  }
  return this;
}

void sub_1C3264E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoGraph::createTaskNode(siri::ontology::UsoGraph *this, const siri::ontology::OntologyNodeName *a2, const siri::ontology::OntologyVerbName *a3)
{
  siri::ontology::UsoEntityNode *v6;
  siri::ontology::UsoEntityNode *v8;

  v6 = (siri::ontology::UsoEntityNode *)operator new();
  siri::ontology::UsoEntityNode::UsoEntityNode(v6, this, a2);
  *(_QWORD *)v6 = &off_1E7D20F58;
  *((_QWORD *)v6 + 13) = a3;
  siri::ontology::UsoTaskNode::checkValidOntologyNameType((uint64_t)v6);
  v8 = v6;
  siri::ontology::UsoGraph::addNode((float *)this, (unint64_t *)&v8);
  if (v8)
    (*(void (**)(siri::ontology::UsoEntityNode *))(*(_QWORD *)v8 + 8))(v8);
  return v6;
}

void sub_1C3264FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoStringNode::~UsoStringNode(void **this)
{
  void **v2;

  *this = off_1E7D20FD8;
  if (*((_BYTE *)this + 128) && *((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = &off_1E7D20E40;
  v2 = this + 10;
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 7;
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 4;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *this = off_1E7D20FD8;
  if (*((_BYTE *)this + 128) && *((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = &off_1E7D20E40;
  v2 = this + 10;
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 7;
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 4;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::UsoStringNode::getNodeType(siri::ontology::UsoStringNode *this)
{
  return 3;
}

uint64_t siri::ontology::UsoStringNode::isValidSuccessorWithEdge()
{
  return 0;
}

unint64_t siri::ontology::UsoStringNode::copy(siri::ontology::UsoStringNode *this)
{
  return siri::ontology::UsoGraph::createStringNode(*((siri::ontology::UsoGraph **)this + 1), (__int128 *)((char *)this + 104));
}

siri::ontology::UsoEntityNode *siri::ontology::UsoStringNode::copyToGraph(siri::ontology::UsoStringNode *this, siri::ontology::UsoGraph *a2)
{
  siri::ontology::UsoEntityNode *StringNode;
  const UsoIdentifier **v4;
  const UsoIdentifier **v5;
  const UsoIdentifier *v6;
  siri::ontology::UsoUtteranceAlignment **v7;
  siri::ontology::UsoUtteranceAlignment **v8;
  siri::ontology::UsoUtteranceAlignment *v9;
  siri::ontology::UsoEntitySpan **v10;
  siri::ontology::UsoEntitySpan **v11;
  siri::ontology::UsoEntitySpan *v12;

  StringNode = (siri::ontology::UsoEntityNode *)siri::ontology::UsoGraph::createStringNode(a2, (__int128 *)((char *)this + 104));
  v4 = (const UsoIdentifier **)*((_QWORD *)this + 4);
  v5 = (const UsoIdentifier **)*((_QWORD *)this + 5);
  while (v4 != v5)
  {
    v6 = *v4++;
    siri::ontology::UsoEntityNode::addIdentifier(StringNode, v6);
  }
  v7 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 7);
  v8 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 8);
  while (v7 != v8)
  {
    v9 = *v7++;
    siri::ontology::UsoEntityNode::addUtteranceAlignment(StringNode, v9);
  }
  v11 = (siri::ontology::UsoEntitySpan **)*((_QWORD *)this + 10);
  v10 = (siri::ontology::UsoEntitySpan **)*((_QWORD *)this + 11);
  while (v11 != v10)
  {
    v12 = *v11++;
    siri::ontology::UsoEntityNode::addEntitySpan((int64x2_t *)StringNode, v12);
  }
  return StringNode;
}

void siri::ontology::UsoStringNode::toString(siri::ontology::UsoStringNode *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  std::string v24;
  std::string v25;

  v3 = (_QWORD *)a2;
  if (*((_BYTE *)this + 128))
  {
    v4 = *((_QWORD *)this + 3);
    if (*(char *)(v4 + 31) >= 0)
      v5 = *(unsigned __int8 *)(v4 + 31);
    else
      v5 = *(_QWORD *)(v4 + 16);
    v6 = &v24;
    std::string::basic_string[abi:ne180100]((uint64_t)&v24, v5 + 2);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if (v5)
    {
      v9 = *(char **)(v4 + 8);
      v8 = (char *)(v4 + 8);
      v7 = v9;
      if (v8[23] >= 0)
        v10 = v8;
      else
        v10 = v7;
      memmove(v6, v10, v5);
    }
    strcpy((char *)v6 + v5, "(\"");
    if (!*((_BYTE *)this + 128))
      std::__throw_bad_optional_access[abi:ne180100]();
    v11 = *((char *)this + 127);
    if (v11 >= 0)
      v12 = (char *)this + 104;
    else
      v12 = (const std::string::value_type *)*((_QWORD *)this + 13);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)this + 127);
    else
      v13 = *((_QWORD *)this + 14);
    v14 = std::string::append(&v24, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v25, "\")");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v3[2] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)v3 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *((_QWORD *)this + 3);
    if (*(char *)(v18 + 31) >= 0)
      v19 = *(unsigned __int8 *)(v18 + 31);
    else
      v19 = *(_QWORD *)(v18 + 16);
    std::string::basic_string[abi:ne180100](a2, v19 + 2);
    if (*((char *)v3 + 23) < 0)
      v3 = (_QWORD *)*v3;
    if (v19)
    {
      v22 = *(char **)(v18 + 8);
      v21 = (char *)(v18 + 8);
      v20 = v22;
      if (v21[23] >= 0)
        v23 = v21;
      else
        v23 = v20;
      memmove(v3, v23, v19);
    }
    strcpy((char *)v3 + v19, "()");
  }
}

void sub_1C3265404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *siri::ontology::UsoStringNode::operator==(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v4;

  if (v4
    && std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a1 + 104), v4 + 104))
  {
    return siri::ontology::UsoEntityNode::operator==((_QWORD *)a1, lpsrc);
  }
  else
  {
    return 0;
  }
}

uint64_t siri::ontology::UsoStringNode::operator!=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoStringNode::operator==(a1, a2) ^ 1;
}

_BYTE *siri::ontology::UsoStringNode::operator<(uint64_t a1, void *lpsrc)
{
  _BYTE *result;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  const void *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;

  if (result)
  {
    if (!result[128])
      return 0;
    if (!*(_BYTE *)(a1 + 128))
      return (_BYTE *)(*(_QWORD *)(a1 + 16) < *((_QWORD *)lpsrc + 2));
    v5 = result + 104;
    v6 = result[127];
    v7 = (char *)*((_QWORD *)result + 13);
    v8 = *((_QWORD *)result + 14);
    v9 = *(char *)(a1 + 127);
    v10 = v9 >= 0 ? *(unsigned __int8 *)(a1 + 127) : *(_QWORD *)(a1 + 112);
    v11 = v9 >= 0 ? (const void *)(a1 + 104) : *(const void **)(a1 + 104);
    v12 = (v6 & 0x80u) == 0 ? v6 : v8;
    v13 = (v6 & 0x80u) == 0 ? v5 : v7;
    v14 = v12 >= v10 ? v10 : v12;
    v15 = memcmp(v11, v13, v14);
    v16 = v10 < v12;
    if (v15)
      v16 = v15 < 0;
    if (v16)
      return (_BYTE *)(*(_QWORD *)(a1 + 16) < *((_QWORD *)lpsrc + 2));
    else
      return 0;
  }
  return result;
}

uint64_t siri::ontology::UsoStringNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoStringNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoStringNode::operator>=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoStringNode::operator<(a1, a2) ^ 1;
}

uint64_t siri::ontology::UsoStringNode::checkValidOntologyNameType(siri::ontology::UsoStringNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[3];

  v1 = *((_QWORD *)this + 3);
  v2 = siri::ontology::oname::graph::ontology_init::primitive_String(this);
  result = siri::ontology::operator==(v1, v2);
  if ((result & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v4, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1314, "checkValidOntologyNameType", "UsoStringNode's entity must be primitive_String");
  }
  return result;
}

void sub_1C3265658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t siri::ontology::UsoGraph::createStringNode(siri::ontology::UsoGraph *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v6;
  std::string __p;
  char v8;

  v4 = operator new();
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, a2);
  siri::ontology::UsoStringNode::UsoStringNode(v4, a1, (__int128 *)&__p);
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = v4;
  siri::ontology::UsoGraph::addNode((float *)a1, &v6);
  if (v6)
    (*(void (**)(unint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_1C326571C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoStringNode::UsoStringNode(uint64_t a1, siri::ontology::UsoGraph *a2, __int128 *a3)
{
  const siri::ontology::OntologyNodeName *v6;

  v6 = (const siri::ontology::OntologyNodeName *)siri::ontology::oname::graph::ontology_init::primitive_String((siri::ontology::oname::graph::ontology_init *)a1);
  siri::ontology::UsoEntityNode::UsoEntityNode((siri::ontology::UsoEntityNode *)a1, a2, v6);
  *(_QWORD *)a1 = off_1E7D20FD8;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 104), a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return a1;
}

void sub_1C32657EC(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[128])
  {
    if (v1[127] < 0)
      operator delete(*v2);
  }
  siri::ontology::UsoEntityNode::~UsoEntityNode((siri::ontology::UsoEntityNode *)v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoIntNode::~UsoIntNode(siri::ontology::UsoIntNode *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7D20E40;
  v2 = (void **)((char *)this + 32);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1C3BD1618);
}

uint64_t siri::ontology::UsoIntNode::getNodeType(siri::ontology::UsoIntNode *this)
{
  return 4;
}

uint64_t siri::ontology::UsoIntNode::isValidSuccessorWithEdge()
{
  return 0;
}

siri::ontology::oname::graph::ontology_init *siri::ontology::UsoIntNode::copy(siri::ontology::UsoIntNode *this)
{
  return siri::ontology::UsoGraph::createIntNode(*((siri::ontology::UsoGraph **)this + 1), *((_QWORD *)this + 13), *((_QWORD *)this + 14));
}

siri::ontology::UsoEntityNode *siri::ontology::UsoIntNode::copyToGraph(siri::ontology::UsoIntNode *this, siri::ontology::UsoGraph *a2)
{
  siri::ontology::UsoEntityNode *IntNode;
  const UsoIdentifier **v4;
  const UsoIdentifier **v5;
  const UsoIdentifier *v6;
  siri::ontology::UsoUtteranceAlignment **v7;
  siri::ontology::UsoUtteranceAlignment **v8;
  siri::ontology::UsoUtteranceAlignment *v9;
  siri::ontology::UsoEntitySpan **v10;
  siri::ontology::UsoEntitySpan **v11;
  siri::ontology::UsoEntitySpan *v12;

  IntNode = siri::ontology::UsoGraph::createIntNode(a2, *((_QWORD *)this + 13), *((_QWORD *)this + 14));
  v4 = (const UsoIdentifier **)*((_QWORD *)this + 4);
  v5 = (const UsoIdentifier **)*((_QWORD *)this + 5);
  while (v4 != v5)
  {
    v6 = *v4++;
    siri::ontology::UsoEntityNode::addIdentifier(IntNode, v6);
  }
  v7 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 7);
  v8 = (siri::ontology::UsoUtteranceAlignment **)*((_QWORD *)this + 8);
  while (v7 != v8)
  {
    v9 = *v7++;
    siri::ontology::UsoEntityNode::addUtteranceAlignment(IntNode, v9);
  }
  v11 = (siri::ontology::UsoEntitySpan **)*((_QWORD *)this + 10);
  v10 = (siri::ontology::UsoEntitySpan **)*((_QWORD *)this + 11);
  while (v11 != v10)
  {
    v12 = *v11++;
    siri::ontology::UsoEntityNode::addEntitySpan((int64x2_t *)IntNode, v12);
  }
  return IntNode;
}

void siri::ontology::UsoIntNode::toString(siri::ontology::UsoIntNode *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  std::string __p;
  std::string v24;
  std::string v25;

  v3 = (_QWORD *)a2;
  if (*((_BYTE *)this + 112))
  {
    v4 = *((_QWORD *)this + 3);
    if (*(char *)(v4 + 31) >= 0)
      v5 = *(unsigned __int8 *)(v4 + 31);
    else
      v5 = *(_QWORD *)(v4 + 16);
    v6 = &v24;
    std::string::basic_string[abi:ne180100]((uint64_t)&v24, v5 + 1);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if (v5)
    {
      v9 = *(char **)(v4 + 8);
      v8 = (char *)(v4 + 8);
      v7 = v9;
      if (v8[23] >= 0)
        v10 = v8;
      else
        v10 = v7;
      memmove(v6, v10, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 40;
    if (!*((_BYTE *)this + 112))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::to_string(&__p, *((_QWORD *)this + 13));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v25, ")");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v3[2] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v3 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *((_QWORD *)this + 3);
    if (*(char *)(v17 + 31) >= 0)
      v18 = *(unsigned __int8 *)(v17 + 31);
    else
      v18 = *(_QWORD *)(v17 + 16);
    std::string::basic_string[abi:ne180100](a2, v18 + 2);
    if (*((char *)v3 + 23) < 0)
      v3 = (_QWORD *)*v3;
    if (v18)
    {
      v21 = *(char **)(v17 + 8);
      v20 = (char *)(v17 + 8);
      v19 = v21;
      if (v20[23] >= 0)
        v22 = v20;
      else
        v22 = v19;
      memmove(v3, v22, v18);
    }
    strcpy((char *)v3 + v18, "()");
  }
}

void sub_1C3265B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *siri::ontology::UsoIntNode::operator==(uint64_t a1, void *lpsrc)
{
  _QWORD *v4;
  int v5;
  BOOL v6;

  if (!v4)
    return 0;
  v5 = *((unsigned __int8 *)v4 + 112);
  if (*(_BYTE *)(a1 + 112))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(a1 + 104) == v4[13])
      return siri::ontology::UsoEntityNode::operator==((_QWORD *)a1, lpsrc);
    return 0;
  }
  if ((*(_BYTE *)(a1 + 112) != 0) != (v5 != 0))
    return 0;
  return siri::ontology::UsoEntityNode::operator==((_QWORD *)a1, lpsrc);
}

uint64_t siri::ontology::UsoIntNode::operator!=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoIntNode::operator==(a1, a2) ^ 1;
}

_BYTE *siri::ontology::UsoIntNode::operator<(uint64_t a1, void *lpsrc)
{
  _BYTE *result;

  if (result)
  {
    if (!result[112] || *(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 104) >= *((_QWORD *)result + 13))
      return 0;
    else
      return (_BYTE *)(*(_QWORD *)(a1 + 16) < *((_QWORD *)lpsrc + 2));
  }
  return result;
}

uint64_t siri::ontology::UsoIntNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoIntNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoIntNode::operator>=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoIntNode::operator<(a1, a2) ^ 1;
}

uint64_t siri::ontology::UsoIntNode::checkValidOntologyNameType(siri::ontology::UsoIntNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[3];

  v1 = *((_QWORD *)this + 3);
  v2 = siri::ontology::oname::graph::ontology_init::primitive_Integer(this);
  result = siri::ontology::operator==(v1, v2);
  if ((result & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v4, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1344, "checkValidOntologyNameType", "UsoIntNode's entity must be primitive_Integer");
  }
  return result;
}

void sub_1C3265D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

siri::ontology::oname::graph::ontology_init *siri::ontology::UsoGraph::createIntNode(siri::ontology::UsoGraph *a1, uint64_t a2, uint64_t a3)
{
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v8;

  v6 = (siri::ontology::oname::graph::ontology_init *)operator new();
  siri::ontology::UsoIntNode::UsoIntNode(v6, a1, a2, a3);
  v8 = v6;
  siri::ontology::UsoGraph::addNode((float *)a1, (unint64_t *)&v8);
  if (v8)
    (*(void (**)(siri::ontology::oname::graph::ontology_init *))(*(_QWORD *)v8 + 8))(v8);
  return v6;
}

void sub_1C3265E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

siri::ontology::oname::graph::ontology_init *siri::ontology::UsoIntNode::UsoIntNode(siri::ontology::oname::graph::ontology_init *a1, siri::ontology::UsoGraph *a2, uint64_t a3, uint64_t a4)
{
  const siri::ontology::OntologyNodeName *v8;
  siri::ontology::UsoEntityNode *v9;

  v8 = (const siri::ontology::OntologyNodeName *)siri::ontology::oname::graph::ontology_init::primitive_Integer(a1);
  v9 = siri::ontology::UsoEntityNode::UsoEntityNode(a1, a2, v8);
  *(_QWORD *)a1 = &off_1E7D21058;
  *((_QWORD *)a1 + 13) = a3;
  *((_QWORD *)a1 + 14) = a4;
  siri::ontology::UsoIntNode::checkValidOntologyNameType(v9);
  return a1;
}

void sub_1C3265EDC(_Unwind_Exception *a1)
{
  siri::ontology::UsoEntityNode *v1;

  siri::ontology::UsoEntityNode::~UsoEntityNode(v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::~UsoGraph(siri::ontology::UsoGraph *this)
{
  uint64_t v2;
  void **v3;

  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)this + 48);
  v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](v2);
}

void std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  void **v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    MEMORY[0x1C3BD1618](v2, 0xC400A2AC0F1);
  v3 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear((_QWORD *)a1);
  JUMPOUT(0x1C3BD1618);
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      v4 = (_QWORD *)result[1];
      std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::__delete_node[abi:ne180100]<>((char *)result);
      result = v4;
    }
  }
  return result;
}

uint64_t siri::ontology::UsoGraph::UsoGraph(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::adjacency_list(v4);
  *(_QWORD *)a1 = v4;
  v5 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  siri::ontology::UsoGraph::createRootNode((siri::ontology::UsoGraph *)a1);
  return a1;
}

void sub_1C32661B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v15;

  v13 = v11;
  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100](v12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)(v10 + 6));
  a10 = v13;
  std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v15 = *v10;
  *v10 = 0;
  if (v15)
    std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::adjacency_list(uint64_t a1)
{
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = operator new();
  return a1;
}

void sub_1C3266254(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(v1);
  _Unwind_Resume(a1);
}

siri::ontology::UsoEntityNode *siri::ontology::UsoGraph::createRootNode(siri::ontology::UsoGraph *this)
{
  const siri::ontology::OntologyNodeName *v2;
  siri::ontology::UsoEntityNode *v3;
  siri::ontology::UsoEntityNode *v5;

  v2 = (const siri::ontology::OntologyNodeName *)siri::ontology::oname::graph::ontology_init::Root(this);
  v3 = (siri::ontology::UsoEntityNode *)operator new();
  siri::ontology::UsoEntityNode::UsoEntityNode(v3, this, v2);
  *(_QWORD *)v3 = &off_1E7D20EC0;
  siri::ontology::UsoRootNode::checkValidOntologyNameType((uint64_t)v3);
  *((_QWORD *)this + 11) = v3;
  v5 = v3;
  siri::ontology::UsoGraph::addNode((float *)this, (unint64_t *)&v5);
  if (v5)
    (*(void (**)(siri::ontology::UsoEntityNode *))(*(_QWORD *)v5 + 8))(v5);
  return v3;
}

void sub_1C3266304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear((_QWORD *)a1);
  return a1;
}

uint64_t siri::ontology::UsoGraph::UsoGraph(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::adjacency_list(v4);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t **)(*a2 + 128);
  v6 = *v5;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v5 + 2);
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = a2[1];
  *(_QWORD *)(a1 + 96) = *a2;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)(a1 + 104) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  siri::ontology::UsoGraph::createRootNode((siri::ontology::UsoGraph *)a1);
  return a1;
}

void sub_1C3266474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v17;

  v14 = v13;
  v15 = v11;
  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100](v12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v15);
  a10 = v14;
  std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = *v10;
  *v10 = 0;
  if (v17)
    std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::getPredecessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, const siri::ontology::OntologyEdgeName *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  void (***v10)(siri::ontology::OntologyEdgeName *__hidden);
  uint64_t v11;
  void (***v12)(siri::ontology::OntologyEdgeName *__hidden);
  const siri::ontology::OntologyEdgeName *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (**v27)(siri::ontology::OntologyEdgeName *__hidden);
  std::string __p;
  uint64_t v29;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v26 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 24) + 56 * a2->var2;
  v6 = *(_QWORD **)(v5 + 24);
  v7 = *(_QWORD **)(v5 + 32);
  if (v6 != v7)
  {
    v9 = 0;
    v10 = &v27;
    v25 = *(_QWORD **)(v5 + 32);
    do
    {
      v11 = v6[1];
      if (*(char *)(v11 + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 64), *(_QWORD *)(v11 + 72));
      else
        __p = *(std::string *)(v11 + 64);
      v29 = *(_QWORD *)(v11 + 88);
      v27 = off_1E7D217A0;
      if (siri::ontology::operator==((uint64_t)v10, (uint64_t)a3))
      {
        v12 = v10;
        v13 = a3;
        v14 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 56 * *v6 + 48);
        v15 = a4[2];
        if ((unint64_t)v9 >= v15)
        {
          v17 = (_QWORD *)*a4;
          v18 = ((uint64_t)v9 - *a4) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v15 - (_QWORD)v17;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v21);
          else
            v22 = 0;
          v23 = (_QWORD *)(v21 + 8 * v18);
          *v23 = v14;
          v16 = v23 + 1;
          if (v9 != v17)
          {
            do
            {
              v24 = *--v9;
              *--v23 = v24;
            }
            while (v9 != v17);
            v9 = (_QWORD *)*a4;
          }
          *a4 = v23;
          a4[1] = v16;
          a4[2] = v21 + 8 * v22;
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = v14;
          v16 = v9 + 1;
        }
        a4[1] = v16;
        v9 = v16;
        a3 = v13;
        v10 = v12;
        v7 = v25;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 2;
    }
    while (v6 != v7);
  }
}

void sub_1C32666BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);
  if (v21)
  {
    *(_QWORD *)(v20 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoGraph::getSuccessor(siri::ontology::UsoGraph *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)this + 24);
  v4 = v3 + 56 * a2->var2;
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  if (*(_QWORD **)v4 == v6)
    return 0;
  while (!siri::ontology::UsoGraphEdge::operator==(v5[1] + 32, (uint64_t)a3))
  {
    v5 += 2;
    if (v5 == v6)
      return 0;
  }
  return *(_QWORD *)(v3 + 56 * *v5 + 48);
}

uint64_t siri::ontology::UsoGraphEdge::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = siri::ontology::operator==(a1 + 24, a2 + 24);
  if ((_DWORD)result)
    return *(_QWORD *)a1 == *(_QWORD *)a2
        && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
        && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t siri::ontology::UsoGraph::getPredecessor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = v3 + 56 * *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD **)(v4 + 24);
  v6 = *(_QWORD **)(v4 + 32);
  if (v5 == v6)
    return 0;
  while (!siri::ontology::UsoGraphEdge::operator==(v5[1] + 32, a3))
  {
    v5 += 2;
    if (v5 == v6)
      return 0;
  }
  return *(_QWORD *)(v3 + 56 * *v5 + 48);
}

void siri::ontology::UsoGraph::getSuccessorsWithEdges(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 24) + 56 * a2->var2;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (*(_QWORD **)v5 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 56 * *v6 + 48);
      v10 = v6[1] + 32;
      v11 = a3[2];
      if ((unint64_t)v8 >= v11)
      {
        v13 = (_QWORD *)*a3;
        v14 = ((uint64_t)v8 - *a3) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v11 - (_QWORD)v13;
        if (v16 >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>,std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>(v17);
        else
          v18 = 0;
        v19 = (_QWORD *)(v17 + 16 * v14);
        *v19 = v9;
        v19[1] = v10;
        v20 = v19;
        if (v8 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v8 - 1);
            v20 -= 2;
            v8 -= 2;
          }
          while (v8 != v13);
          v8 = (_QWORD *)*a3;
        }
        v12 = v19 + 2;
        *a3 = v20;
        a3[1] = v19 + 2;
        a3[2] = v17 + 16 * v18;
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v8[1] = v10;
        v12 = v8 + 2;
      }
      a3[1] = v12;
      v6 += 2;
      v8 = v12;
    }
    while (v6 != v7);
  }
}

void sub_1C32669B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::getSuccessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 24) + 56 * a2->var2;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (*(_QWORD **)v5 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 56 * *v6 + 48);
      v10 = a3[2];
      if ((unint64_t)v8 >= v10)
      {
        v12 = (_QWORD *)*a3;
        v13 = ((uint64_t)v8 - *a3) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)v12;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v16);
        else
          v17 = 0;
        v18 = (_QWORD *)(v16 + 8 * v13);
        *v18 = v9;
        v11 = v18 + 1;
        if (v8 != v12)
        {
          do
          {
            v19 = *--v8;
            *--v18 = v19;
          }
          while (v8 != v12);
          v8 = (_QWORD *)*a3;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = v16 + 8 * v17;
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v11 = v8 + 1;
      }
      a3[1] = v11;
      v6 += 2;
      v8 = v11;
    }
    while (v6 != v7);
  }
}

void sub_1C3266B0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::getRepeatedSuccessorEdgeGroupsAsMap(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  int8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;

  siri::ontology::UsoGraph::getSuccessorsWithEdges(this, a2, &v59);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_DWORD *)a3 + 8) = 1065353216;
  v5 = v59;
  v6 = v60;
  if (v59 == v60)
    goto LABEL_133;
  v7 = a3 + 2;
  do
  {
    v8 = v5[1];
    v9 = *(_DWORD *)(v8 + 60);
    v10 = a3[1];
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v3 = v9;
        if (v10 <= v9)
          v3 = v9 % v10;
      }
      else
      {
        v3 = (v10 - 1) & v9;
      }
      v12 = *(void ***)(*a3 + 8 * v3);
      if (v12)
      {
        v13 = *v12;
        if (*v12)
        {
          do
          {
            v14 = v13[1];
            if (v14 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v9)
                goto LABEL_75;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v10)
                  v14 %= v10;
              }
              else
              {
                v14 &= v10 - 1;
              }
              if (v14 != v3)
                break;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
    }
    v13 = operator new(0x30uLL);
    *v13 = 0;
    v13[1] = v9;
    *((_DWORD *)v13 + 4) = v9;
    v13[4] = 0;
    v13[5] = 0;
    v13[3] = 0;
    v15 = (float)(unint64_t)(a3[3] + 1);
    v16 = *((float *)a3 + 8);
    if (!v10 || (float)(v16 * (float)v10) < v15)
    {
      v17 = (v10 & (v10 - 1)) != 0;
      if (v10 < 3)
        v17 = 1;
      v18 = v17 | (2 * v10);
      v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19)
        prime = (int8x8_t)v19;
      else
        prime = (int8x8_t)v18;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v10 = a3[1];
      }
      if (*(_QWORD *)&prime > v10)
        goto LABEL_31;
      if (*(_QWORD *)&prime < v10)
      {
        v27 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
        if (v10 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
        {
          v27 = std::__next_prime(v27);
        }
        else
        {
          v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2)
            v27 = v29;
        }
        if (*(_QWORD *)&prime <= v27)
          prime = (int8x8_t)v27;
        if (*(_QWORD *)&prime >= v10)
        {
          v10 = a3[1];
        }
        else
        {
          if (prime)
          {
LABEL_31:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = operator new(8 * *(_QWORD *)&prime);
            v22 = (void *)*a3;
            *a3 = (uint64_t)v21;
            if (v22)
              operator delete(v22);
            v23 = 0;
            a3[1] = (uint64_t)prime;
            do
              *(_QWORD *)(*a3 + 8 * v23++) = 0;
            while (*(_QWORD *)&prime != v23);
            v24 = (_QWORD *)*v7;
            if (*v7)
            {
              v25 = v24[1];
              v26 = (uint8x8_t)vcnt_s8(prime);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                if (v25 >= *(_QWORD *)&prime)
                  v25 %= *(_QWORD *)&prime;
              }
              else
              {
                v25 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*a3 + 8 * v25) = v7;
              v30 = (_QWORD *)*v24;
              if (*v24)
              {
                do
                {
                  v31 = v30[1];
                  if (v26.u32[0] > 1uLL)
                  {
                    if (v31 >= *(_QWORD *)&prime)
                      v31 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v31 &= *(_QWORD *)&prime - 1;
                  }
                  if (v31 != v25)
                  {
                    if (!*(_QWORD *)(*a3 + 8 * v31))
                    {
                      *(_QWORD *)(*a3 + 8 * v31) = v24;
                      goto LABEL_56;
                    }
                    *v24 = *v30;
                    *v30 = **(_QWORD **)(*a3 + 8 * v31);
                    **(_QWORD **)(*a3 + 8 * v31) = v30;
                    v30 = v24;
                  }
                  v31 = v25;
LABEL_56:
                  v24 = v30;
                  v30 = (_QWORD *)*v30;
                  v25 = v31;
                }
                while (v30);
              }
            }
            v10 = (unint64_t)prime;
            goto LABEL_60;
          }
          v47 = (void *)*a3;
          *a3 = 0;
          if (v47)
            operator delete(v47);
          v10 = 0;
          a3[1] = 0;
        }
      }
LABEL_60:
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9)
          v3 = v9 % v10;
        else
          v3 = v9;
      }
      else
      {
        v3 = (v10 - 1) & v9;
      }
    }
    v32 = *a3;
    v33 = *(_QWORD **)(*a3 + 8 * v3);
    if (v33)
    {
      *v13 = *v33;
LABEL_73:
      *v33 = v13;
      goto LABEL_74;
    }
    *v13 = *v7;
    *v7 = v13;
    *(_QWORD *)(v32 + 8 * v3) = v7;
    if (*v13)
    {
      v34 = *(_QWORD *)(*v13 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v34 >= v10)
          v34 %= v10;
      }
      else
      {
        v34 &= v10 - 1;
      }
      v33 = (_QWORD *)(*a3 + 8 * v34);
      goto LABEL_73;
    }
LABEL_74:
    ++a3[3];
LABEL_75:
    v36 = (_QWORD *)v13[4];
    v35 = v13[5];
    if ((unint64_t)v36 >= v35)
    {
      v37 = v13[3];
      v38 = ((uint64_t)v36 - v37) >> 3;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v35 - v37;
      v40 = v39 >> 2;
      if (v39 >> 2 <= (unint64_t)(v38 + 1))
        v40 = v38 + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
        v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v41);
      else
        v42 = 0;
      v43 = (_QWORD *)(v41 + 8 * v38);
      *v43 = v8;
      v3 = (unint64_t)(v43 + 1);
      v45 = (char *)v13[3];
      v44 = (char *)v13[4];
      if (v44 != v45)
      {
        do
        {
          v46 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *--v43 = v46;
        }
        while (v44 != v45);
        v44 = (char *)v13[3];
      }
      v13[3] = v43;
      v13[4] = v3;
      v13[5] = v41 + 8 * v42;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *v36 = v8;
      v3 = (unint64_t)(v36 + 1);
    }
    v13[4] = v3;
    v5 += 2;
  }
  while (v5 != v6);
  v48 = (_QWORD *)*v7;
  if (*v7)
  {
    while (1)
    {
      v49 = (_QWORD *)*v48;
      if (v48[4] - v48[3] <= 0xFuLL)
        break;
LABEL_131:
      v48 = v49;
      if (!v49)
        goto LABEL_132;
    }
    v50 = (int8x8_t)a3[1];
    v51 = v48[1];
    v52 = (uint8x8_t)vcnt_s8(v50);
    v52.i16[0] = vaddlv_u8(v52);
    if (v52.u32[0] > 1uLL)
    {
      if (v51 >= *(_QWORD *)&v50)
        v51 %= *(_QWORD *)&v50;
    }
    else
    {
      v51 &= *(_QWORD *)&v50 - 1;
    }
    v53 = *(_QWORD **)(*a3 + 8 * v51);
    do
    {
      v54 = v53;
      v53 = (_QWORD *)*v53;
    }
    while (v53 != v48);
    if (v54 == v7)
      goto LABEL_140;
    v55 = v54[1];
    if (v52.u32[0] > 1uLL)
    {
      if (v55 >= *(_QWORD *)&v50)
        v55 %= *(_QWORD *)&v50;
    }
    else
    {
      v55 &= *(_QWORD *)&v50 - 1;
    }
    v56 = (_QWORD *)*v48;
    if (v55 == v51)
    {
LABEL_123:
      if (v56)
        goto LABEL_124;
    }
    else
    {
LABEL_140:
      if (!v49)
        goto LABEL_122;
      v57 = v49[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v57 >= *(_QWORD *)&v50)
          v57 %= *(_QWORD *)&v50;
      }
      else
      {
        v57 &= *(_QWORD *)&v50 - 1;
      }
      v56 = (_QWORD *)*v48;
      if (v57 != v51)
      {
LABEL_122:
        *(_QWORD *)(*a3 + 8 * v51) = 0;
        v56 = (_QWORD *)*v48;
        goto LABEL_123;
      }
LABEL_124:
      v58 = v56[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v58 >= *(_QWORD *)&v50)
          v58 %= *(_QWORD *)&v50;
      }
      else
      {
        v58 &= *(_QWORD *)&v50 - 1;
      }
      if (v58 != v51)
      {
        *(_QWORD *)(*a3 + 8 * v58) = v54;
        v56 = (_QWORD *)*v48;
      }
    }
    *v54 = v56;
    *v48 = 0;
    --a3[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](1, v48);
    goto LABEL_131;
  }
LABEL_132:
  v5 = v59;
LABEL_133:
  if (v5)
    operator delete(v5);
}

void sub_1C3267170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;
  _QWORD *v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](1, v11);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void siri::ontology::UsoGraph::getPredecessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 24) + 56 * a2->var2;
  v6 = *(_QWORD **)(v5 + 24);
  v7 = *(_QWORD **)(v5 + 32);
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 56 * *v6 + 48);
      v10 = a3[2];
      if ((unint64_t)v8 >= v10)
      {
        v12 = (_QWORD *)*a3;
        v13 = ((uint64_t)v8 - *a3) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)v12;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v16);
        else
          v17 = 0;
        v18 = (_QWORD *)(v16 + 8 * v13);
        *v18 = v9;
        v11 = v18 + 1;
        if (v8 != v12)
        {
          do
          {
            v19 = *--v8;
            *--v18 = v19;
          }
          while (v8 != v12);
          v8 = (_QWORD *)*a3;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = v16 + 8 * v17;
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v11 = v8 + 1;
      }
      a3[1] = v11;
      v6 += 2;
      v8 = v11;
    }
    while (v6 != v7);
  }
}

void sub_1C3267398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::setSuccessor(_QWORD *a1, uint64_t a2, _QWORD *a3, const UsoGraphNode *a4)
{
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t var2;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  _QWORD v69[2];
  unsigned __int8 v70;
  std::string v71;
  _QWORD v72[2];
  unsigned __int8 v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  __int128 v79;
  std::string::size_type v80;
  __int128 v81;
  std::string::size_type v82;
  __int128 v83;
  int v84;
  void (**v85)(siri::ontology::OntologyEdgeName *__hidden);
  std::string __p;
  uint64_t v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  __int128 v94;
  std::string::size_type v95;
  __int128 v96;
  std::string::size_type v97;
  std::string v98;
  __int128 v99;
  std::string::size_type v100;

  v8 = a1 + 6;
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(a1 + 6, (unint64_t)a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v83, "OntologyException");
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*a3 + 48))(&v98, a3);
    v26 = std::string::insert(&v98, 0, "Attempting to process a node not owned by this graph: ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v100 = v26->__r_.__value_.__r.__words[2];
    v99 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v83, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 372, "setSuccessor", (uint64_t)&v99);
  }
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(v8, (unint64_t)a4))
  {
    std::string::basic_string[abi:ne180100]<0>(&v83, "OntologyException");
    (*((void (**)(std::string *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(&v98, a4);
    v28 = std::string::insert(&v98, 0, "Attempting to process a node not owned by this graph: ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v97 = v28->__r_.__value_.__r.__words[2];
    v96 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v83, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 377, "setSuccessor", (uint64_t)&v96);
  }
  if (((*(uint64_t (**)(_QWORD *, const UsoGraphNode *, uint64_t))(*a3 + 24))(a3, a4, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v83, "OntologyException");
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*a3 + 48))(&v90, a3);
    v30 = std::string::insert(&v90, 0, "Grammatically invalid (source, edge, sucessor) tuple: ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v91, ", ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 55) < 0)
      std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
    else
      v89 = *(std::string *)(a2 + 32);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v89;
    else
      v47 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    else
      size = v89.__r_.__value_.__l.__size_;
    v49 = std::string::append(&v92, (const std::string::value_type *)v47, size);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v93, ", ");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    (*((void (**)(std::string *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(&v88, a4);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v88;
    else
      v53 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    else
      v54 = v88.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v98, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v95 = v55->__r_.__value_.__r.__words[2];
    v94 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v83, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 382, "setSuccessor", (uint64_t)&v94);
  }
  v9 = (uint64_t *)*a1;
  v10 = a3[2];
  v11 = *(_QWORD *)(*a1 + 24);
  v12 = (uint64_t *)(v11 + 56 * v10);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 != v14)
  {
    do
    {
      v15 = *(_QWORD *)(v13 + 8);
      v83 = *(_OWORD *)(v15 + 32);
      v84 = *(_DWORD *)(v15 + 48);
      if (*(char *)(v15 + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 64), *(_QWORD *)(v15 + 72));
      else
        __p = *(std::string *)(v15 + 64);
      v87 = *(_QWORD *)(v15 + 88);
      v85 = off_1E7D217A0;
      if (siri::ontology::UsoGraphEdge::operator==((uint64_t)&v83, a2))
      {
        std::string::basic_string[abi:ne180100]<0>(&v98, "OntologyException");
        (*((void (**)(std::string *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(&v93, a4);
        v20 = std::string::insert(&v93, 0, "Can't add a successor with the same edge ");
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v82 = v20->__r_.__value_.__r.__words[2];
        v81 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v98, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 392, "setSuccessor", (uint64_t)&v81);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v13 += 16;
    }
    while (v13 != v14);
    v10 = a3[2];
    v9 = (uint64_t *)*a1;
    v11 = *(_QWORD *)(*a1 + 24);
  }
  var2 = a4->var2;
  if (v10 <= var2)
    v17 = a4->var2;
  else
    v17 = v10;
  if (v17 >= 0x6DB6DB6DB6DB6DB7 * ((v9[4] - v11) >> 3))
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize(v9 + 3, v17 + 1);
  boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>((uint64_t)&v83, v10, var2, (__int128 *)a2, v9);
  if ((*((unsigned int (**)(const UsoGraphNode *))a4->var0 + 2))(a4) == 5)
  {
    siri::ontology::UsoGraph::getSuccessorsWithEdges((siri::ontology::UsoGraph *)a4->var1, a4, &v83);
    v18 = v83;
    if ((_QWORD)v83 != *((_QWORD *)&v83 + 1))
    {
      v19 = (_QWORD *)v83;
      do
      {
        if (((*((uint64_t (**)(const UsoGraphNode *, _QWORD, _QWORD))a4->var0 + 3))(a4, *v19, v19[1]) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v98, "OntologyException");
          (*(void (**)(std::string *__return_ptr, _QWORD *))(*a3 + 48))(&v75, a3);
          v22 = std::string::insert(&v75, 0, "Grammatically invalid operator connection: (");
          v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          v24 = std::string::append(&v76, ", ");
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v77.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 55) < 0)
            std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
          else
            v74 = *(std::string *)(a2 + 32);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v74;
          else
            v34 = (std::string *)v74.__r_.__value_.__r.__words[0];
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          else
            v35 = v74.__r_.__value_.__l.__size_;
          v36 = std::string::append(&v77, (const std::string::value_type *)v34, v35);
          v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v78.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          v38 = std::string::append(&v78, ", ");
          v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          (*((void (**)(_QWORD *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(v72, a4);
          if ((v73 & 0x80u) == 0)
            v40 = (const std::string::value_type *)v72;
          else
            v40 = (const std::string::value_type *)v72[0];
          if ((v73 & 0x80u) == 0)
            v41 = v73;
          else
            v41 = v72[1];
          v42 = std::string::append(&v88, v40, v41);
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          v44 = std::string::append(&v89, ", ");
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v90.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          v46 = v19[1];
          if (*(char *)(v46 + 55) < 0)
            std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v46 + 32), *(_QWORD *)(v46 + 40));
          else
            v71 = *(std::string *)(v46 + 32);
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = &v71;
          else
            v57 = (std::string *)v71.__r_.__value_.__r.__words[0];
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v58 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
          else
            v58 = v71.__r_.__value_.__l.__size_;
          v59 = std::string::append(&v90, (const std::string::value_type *)v57, v58);
          v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v91.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          v61 = std::string::append(&v91, ", ");
          v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*v19 + 48))(v69);
          if ((v70 & 0x80u) == 0)
            v63 = (const std::string::value_type *)v69;
          else
            v63 = (const std::string::value_type *)v69[0];
          if ((v70 & 0x80u) == 0)
            v64 = v70;
          else
            v64 = v69[1];
          v65 = std::string::append(&v92, v63, v64);
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          v67 = std::string::append(&v93, ")");
          v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v80 = v67->__r_.__value_.__r.__words[2];
          v79 = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v98, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 405, "setSuccessor", (uint64_t)&v79);
        }
        v19 += 2;
      }
      while (v19 != *((_QWORD **)&v18 + 1));
    }
    if ((_QWORD)v18)
      operator delete((void *)v18);
  }
}

void sub_1C3267B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void *v81;
  uint64_t v82;

  if (a66 < 0)
    operator delete(__p);
  if (*(char *)(v82 - 233) < 0)
    operator delete(*(void **)(v82 - 256));
  if (a15 < 0)
    operator delete(a10);
  if (a81 < 0)
    operator delete(a80);
  if (a79 < 0)
    operator delete(a78);
  if (a21 < 0)
    operator delete(a16);
  if (a77 < 0)
    operator delete(a76);
  if (a75 < 0)
    operator delete(a74);
  if (a27 < 0)
    operator delete(a22);
  if (a73 < 0)
    operator delete(a72);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v82 - 137) < 0)
    operator delete(*(void **)(v82 - 160));
  if (v81)
    operator delete(v81);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::getNodes(siri::ontology::UsoGraph *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = (_QWORD *)*a2;
        v10 = ((uint64_t)v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            v16 = *--v5;
            *--v15 = v16;
          }
          while (v5 != v9);
          v5 = (_QWORD *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = v6;
        v8 = v5 + 1;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C3267F70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::getEdges(siri::ontology::UsoGraph *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v3 != *(_QWORD *)this)
  {
    v5 = 0;
    do
    {
      v6 = v3 + 32;
      v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = (_QWORD *)*a2;
        v10 = ((uint64_t)v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            v16 = *--v5;
            *--v15 = v16;
          }
          while (v5 != v9);
          v5 = (_QWORD *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = v6;
        v8 = v5 + 1;
      }
      a2[1] = v8;
      v3 = *(_QWORD *)(v3 + 8);
      v5 = v8;
    }
    while (v3 != v2);
  }
}

void sub_1C32680A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoGraph::findNode(siri::ontology::UsoGraph *this, const UsoGraphNode *a2, const siri::ontology::OntologyUnitName *a3)
{
  uint64_t v4;
  unint64_t var2;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v26;
  const char *v27;
  unsigned int *v28;
  unsigned int *v29[3];
  _BYTE *v30;
  unsigned int *v31;
  _OWORD v32[2];
  __int128 v33;
  unsigned int *v34;
  _BYTE *v35;
  unsigned int *v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int *v39;
  unint64_t v40;
  char v41[8];
  const siri::ontology::OntologyUnitName *v42;

  v4 = *(_QWORD *)this;
  var2 = a2->var2;
  v28 = (unsigned int *)(0x6DB6DB6DB6DB6DB7
                       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 32) - *(_QWORD *)(*(_QWORD *)this + 24)) >> 3));
  v6 = (void *)operator new[]();
  bzero(v6, ((unint64_t)v28 + 3) >> 2);
  boost::detail::shared_count::shared_count<unsigned char *,boost::checked_array_deleter<unsigned char>>(v29, (uint64_t)v6);
  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  v7 = v28;
  v29[1] = v28;
  v30 = v6;
  v31 = v29[0];
  if (v29[0])
  {
    v8 = v29[0] + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v34 = v28;
    v35 = v30;
    v36 = v31;
    if (v31)
    {
      v10 = v31 + 2;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v34 = v28;
    v35 = v6;
    v36 = 0;
  }
  v12 = *(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24);
  if (v12)
  {
    v13 = 0;
    v14 = v12 / 56;
    do
    {
      if ((unint64_t)v34 <= v13)
        __assert_rtn("put", "two_bit_color_map.hpp", 88, "(std::size_t)i < pm.n");
      v35[v13 >> 2] &= ~(3 << (2 * (v13 & 3)));
      ++v13;
    }
    while (v14 != v13);
    v7 = v34;
  }
  v37 = (unint64_t)v7;
  v38 = v35;
  v39 = v36;
  if (v36)
  {
    v15 = v36 + 2;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v42 = a3;
  v40 = var2;
  if (v37 <= var2)
    goto LABEL_33;
  v38[var2 >> 2] = v38[var2 >> 2] & ~(3 << (2 * (var2 & 3))) | (1 << (2 * (var2 & 3)));
  siri::ontology::FindTargetVisitor::discover_vertex((uint64_t)v41, var2, v4);
  std::deque<unsigned long>::push_back(v32, &v40);
  v17 = *((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v32[0] + 1) + (((unint64_t)v33 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v33 & 0x1FF));
      *(_QWORD *)&v33 = v33 + 1;
      *((_QWORD *)&v33 + 1) = v17 - 1;
      if ((unint64_t)v33 >= 0x400)
      {
        operator delete(**((void ***)&v32[0] + 1));
        *((_QWORD *)&v32[0] + 1) += 8;
        *(_QWORD *)&v33 = v33 - 512;
      }
      v19 = *(_QWORD *)(v4 + 24) + 56 * v18;
      v20 = *(unint64_t **)v19;
      v21 = *(unint64_t **)(v19 + 8);
      while (v20 != v21)
      {
        v40 = *v20;
        v22 = v40;
        if (v37 <= v40)
        {
          v26 = 74;
          v27 = "get";
          goto LABEL_31;
        }
        v23 = v38[v40 >> 2];
        v24 = 3 << (2 * (v40 & 3));
        if ((v24 & v23) == 0)
        {
          v38[v40 >> 2] = v23 & ~(_BYTE)v24 | (1 << (2 * (v40 & 3)));
          siri::ontology::FindTargetVisitor::discover_vertex((uint64_t)v41, v22, v4);
          std::deque<unsigned long>::push_back(v32, &v40);
        }
        v20 += 2;
      }
      if (v37 <= v18)
        break;
      v38[v18 >> 2] |= 3 << (2 * (v18 & 3));
      v17 = *((_QWORD *)&v33 + 1);
      if (!*((_QWORD *)&v33 + 1))
        goto LABEL_29;
    }
LABEL_33:
    v26 = 88;
    v27 = "put";
LABEL_31:
    __assert_rtn(v27, "two_bit_color_map.hpp", v26, "(std::size_t)i < pm.n");
  }
LABEL_29:
  boost::detail::shared_count::~shared_count(&v39);
  boost::detail::shared_count::~shared_count(&v36);
  boost::detail::shared_count::~shared_count(&v31);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)v32);
  boost::detail::shared_count::~shared_count(v29);
  return 0;
}

void sub_1C3268484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  unsigned int **v19;
  unsigned int **v20;
  unsigned int **v21;

  boost::detail::shared_count::~shared_count(v21);
  boost::detail::shared_count::~shared_count(v19);
  boost::detail::shared_count::~shared_count(v20);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&a19);
  boost::detail::shared_count::~shared_count(a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1C3268408);
  }
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<unsigned char *,boost::checked_array_deleter<unsigned char>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &off_1E7D210D8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1C3268568(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x1C3BD1600](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_1C3268590(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t siri::ontology::FindTargetVisitor::discover_vertex(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *exception;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a3 + 24) + 56 * a2;
  v4 = *(const void **)(v3 + 48);
  if (v4)
  {
    v5 = result;
    if (v6)
    {
      v7 = v6;
      result = siri::ontology::operator==(v6[13], *(_QWORD *)(v5 + 8));
      if ((_DWORD)result)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = v7[2];
        goto LABEL_9;
      }
    }
    else
    {
      if (result)
      {
        v10 = result;
        result = siri::ontology::operator==(*(_QWORD *)(result + 24), *(_QWORD *)(v5 + 8));
        if ((_DWORD)result)
        {
          exception = __cxa_allocate_exception(8uLL);
          v9 = *(_QWORD *)(v10 + 16);
LABEL_9:
          *exception = v9;
        }
      }
    }
  }
  return result;
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      a1[4] = v8 - 512;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v109 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v109;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v106 = v36;
      v109 = v38;
      operator delete(v30);
      v36 = v106;
    }
    v38 = v109;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v107 = v36;
            v111 = v38;
            operator delete(v78);
            v36 = v107;
            v38 = v111;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v108 = *((_QWORD *)&v36 + 1);
            v110 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v108;
            *(_QWORD *)&v38 = v110;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1C3268D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::~sp_counted_impl_pd()
{
  JUMPOUT(0x1C3BD1618);
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    JUMPOUT(0x1C3BD1600);
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001C33BCD21))
    return a1 + 24;
  else
    return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t siri::ontology::UsoGraph::deepCopyToGraph(siri::ontology::UsoGraph *this, const siri::ontology::UsoGraphNode *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  int v33;
  const char *v34;
  const siri::ontology::UsoGraphNode *v35;
  _OWORD v36[2];
  int v37;
  unsigned int *v38;
  _BYTE *v39;
  unsigned int *v40[3];
  _BYTE *v41;
  unsigned int *v42;
  _OWORD v43[2];
  __int128 v44;
  unsigned int *v45;
  _BYTE *v46;
  unsigned int *v47;
  unint64_t v48;
  _BYTE *v49;
  unsigned int *v50;
  char v51[8];
  siri::ontology::UsoGraph *v52;
  _OWORD *v53;
  unint64_t v54[3];
  unint64_t v55;

  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v6 = (*(uint64_t (**)(const siri::ontology::UsoGraphNode *, siri::ontology::UsoGraph *))(*(_QWORD *)a2 + 40))(a2, a3);
  *(_QWORD *)&v43[0] = *((_QWORD *)a2 + 2);
  *((_QWORD *)&v43[0] + 1) = v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,siri::ontology::UsoGraphNode &>>((float *)v36, *(unint64_t *)&v43[0], v43);
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)a2 + 2);
  v38 = (unsigned int *)(0x6DB6DB6DB6DB6DB7
                       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 32) - *(_QWORD *)(*(_QWORD *)this + 24)) >> 3));
  v9 = ((unint64_t)v38 + 3) >> 2;
  v10 = (void *)operator new[]();
  bzero(v10, v9);
  v39 = v10;
  boost::detail::shared_count::shared_count<unsigned char *,boost::checked_array_deleter<unsigned char>>(v40, (uint64_t)v10);
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v11 = v38;
  v40[1] = v38;
  v41 = v39;
  v42 = v40[0];
  if (v40[0])
  {
    v12 = v40[0] + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v45 = v11;
    v46 = v41;
    v47 = v42;
    if (v42)
    {
      v14 = v42 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v45 = v38;
    v46 = v39;
    v47 = 0;
  }
  v16 = *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24);
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 56;
    do
    {
      if ((unint64_t)v45 <= v17)
        __assert_rtn("put", "two_bit_color_map.hpp", 88, "(std::size_t)i < pm.n");
      v46[v17 >> 2] &= ~(3 << (2 * (v17 & 3)));
      ++v17;
    }
    while (v18 != v17);
    v11 = v45;
  }
  v52 = a3;
  v53 = v36;
  v48 = (unint64_t)v11;
  v49 = v46;
  v50 = v47;
  if (v47)
  {
    v19 = v47 + 2;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v54[0] = v8;
  if (v48 <= v8)
  {
    v33 = 88;
    v34 = "put";
    goto LABEL_34;
  }
  v35 = a2;
  v49[v8 >> 2] = v49[v8 >> 2] & ~(3 << (2 * (v8 & 3))) | (1 << (2 * (v8 & 3)));
  std::deque<unsigned long>::push_back(v43, v54);
  v21 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + (((unint64_t)v44 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v44 & 0x1FF));
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v21 - 1;
      if ((unint64_t)v44 >= 0x400)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 512;
      }
      v23 = *(_QWORD *)(v7 + 24) + 56 * v22;
      v25 = *(unint64_t **)v23;
      v24 = *(unint64_t **)(v23 + 8);
      while (v25 != v24)
      {
        v26 = v25[1];
        v55 = *v25;
        v27 = v55;
        if (v48 <= v55)
        {
          v33 = 74;
          v34 = "get";
          goto LABEL_34;
        }
        v28 = v55 >> 2;
        v29 = 2 * (v55 & 3);
        if (((3 << v29) & v49[v55 >> 2]) == 0)
        {
          v54[0] = v22;
          v54[1] = v55;
          v54[2] = v26 + 32;
          siri::ontology::CopyGraphVisitor::tree_edge((uint64_t)v51, v54, v7);
          if (v48 <= v27)
            goto LABEL_33;
          v49[v28] = v49[v28] & ~(3 << v29) | (1 << v29);
          std::deque<unsigned long>::push_back(v43, &v55);
        }
        v25 += 2;
      }
      if (v48 <= v22)
        break;
      v49[v22 >> 2] |= 3 << (2 * (v22 & 3));
      v21 = *((_QWORD *)&v44 + 1);
      if (!*((_QWORD *)&v44 + 1))
        goto LABEL_30;
    }
LABEL_33:
    v33 = 88;
    v34 = "put";
LABEL_34:
    __assert_rtn(v34, "two_bit_color_map.hpp", v33, "(std::size_t)i < pm.n");
  }
LABEL_30:
  boost::detail::shared_count::~shared_count(&v50);
  boost::detail::shared_count::~shared_count(&v47);
  boost::detail::shared_count::~shared_count(&v42);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)v43);
  boost::detail::shared_count::~shared_count(v40);
  v30 = std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::find<unsigned long long>(v36, *((_QWORD *)v35 + 2));
  if (!v30)
    __assert_rtn("deepCopyToGraph", "UsoGraph.cpp", 454, "it != sourceToCopiedNodeMap.end()");
  v31 = v30[3];
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v36);
  return v31;
}

void sub_1C3269298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int **a11, unsigned int **a12, unsigned int **a13, unsigned int **a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::detail::shared_count::~shared_count(a11);
  boost::detail::shared_count::~shared_count(a12);
  boost::detail::shared_count::~shared_count(a14);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&a29);
  boost::detail::shared_count::~shared_count(a13);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,siri::ontology::UsoGraphNode &>>(float *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v5;
  *((_OWORD *)v12 + 1) = *a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v22)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v30[v5] = a1 + 4;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_1C32696D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void siri::ontology::CopyGraphVisitor::tree_edge(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const UsoGraphNode *v9;
  float *v10;
  unint64_t v11;
  __int128 v12;
  int v13;
  void (**v14)(siri::ontology::OntologyEdgeName *__hidden);
  std::string __p;
  uint64_t v16;

  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::find<unsigned long long>(*(_QWORD **)(a1 + 16), *a2);
  if (!v6)
    __assert_rtn("tree_edge", "UsoGraph.cpp", 1395, "edgeSourceNodeInTargetGraph != mSourceToCopiedNodeMap.end()");
  v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 56 * a2[1] + 48);
  if (!v8)
    __assert_rtn("tree_edge", "UsoGraph.cpp", 1399, "targetNode");
  v9 = (const UsoGraphNode *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 8));
  v10 = *(float **)(a1 + 16);
  *(_QWORD *)&v12 = a2[1];
  *((_QWORD *)&v12 + 1) = v9;
  std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,siri::ontology::UsoGraphNode &>>(v10, v12, &v12);
  v11 = a2[2];
  v12 = *(_OWORD *)v11;
  v13 = *(_DWORD *)(v11 + 16);
  if (*(char *)(v11 + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
  else
    __p = *(std::string *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 56);
  v14 = off_1E7D217A0;
  siri::ontology::UsoGraphNode::setSuccessor((siri::ontology::UsoGraphNode *)v7[3], (const siri::ontology::OntologyEdgeName *)&v14, v9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C32698F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraphNode::setSuccessor(siri::ontology::UsoGraphNode *this, const siri::ontology::OntologyEdgeName *a2, const UsoGraphNode *a3, int a4)
{
  _QWORD *v6;
  _QWORD v7[6];
  char v8;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  siri::ontology::UsoGraphEdge::UsoGraphEdge((siri::ontology::UsoGraphEdge *)v7, a2, *((_QWORD *)this + 2), a3->var2, a4);
  siri::ontology::UsoGraph::setSuccessor(v6, (uint64_t)v7, this, a3);
  v7[3] = off_1E7D21768;
  if (v8 < 0)
    operator delete((void *)v7[4]);
}

void sub_1C3269988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

siri::ontology::UsoGraphEdge *siri::ontology::UsoGraphEdge::UsoGraphEdge(siri::ontology::UsoGraphEdge *this, const siri::ontology::OntologyEdgeName *a2, uint64_t a3, uint64_t a4, int a5)
{
  std::string *v7;
  __int128 v8;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_DWORD *)this + 4) = a5;
  *((_QWORD *)this + 3) = off_1E7D21768;
  v7 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = off_1E7D217A0;
  return this;
}

uint64_t siri::ontology::UsoGraph::prettyPrint(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *i;
  siri::ontology::UsoIdentifier **v6;
  siri::ontology::UsoIdentifier **v7;
  _QWORD *v8;
  __int128 *p_p;
  uint64_t v10;
  uint64_t **j;
  _QWORD *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *k;
  siri::ontology::UsoEntitySpan **v16;
  siri::ontology::UsoEntitySpan **v17;
  _QWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 __p;
  int v23;
  unsigned __int8 v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  int v36;

  v34 = 0u;
  v35 = 0u;
  v36 = 1065353216;
  v31 = 0u;
  v32 = 0u;
  v33 = 1065353216;
  v28 = 0u;
  v29 = 0u;
  v30 = 1065353216;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Root\n", 5);
  v4 = *a1;
  *((_QWORD *)&__p + 1) = a2;
  v23 = 4;
  v25 = &v34;
  v26 = &v31;
  v27 = &v28;
  boost::graph::detail::depth_first_search_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>>::operator()<boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor,siri::ontology::PrintGraphVisitor const>,boost::parameter::aux::empty_arg_list,std::integral_constant<BOOL,true>>>(v4, &__p);
  if (*((_QWORD *)&v35 + 1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Identifiers:", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    for (i = (_QWORD *)v35; i; i = (_QWORD *)*i)
    {
      v6 = (siri::ontology::UsoIdentifier **)i[3];
      v7 = (siri::ontology::UsoIdentifier **)i[4];
      while (v6 != v7)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    Identifier[nodeIndex=", 25);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
        siri::ontology::UsoIdentifier::toString((uint64_t *)&__p, *v6);
        if ((v24 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if ((v24 & 0x80u) == 0)
          v10 = v24;
        else
          v10 = *((_QWORD *)&__p + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]\n", 2);
        if ((char)v24 < 0)
          operator delete((void *)__p);
        ++v6;
      }
    }
  }
  if (*((_QWORD *)&v32 + 1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"UtteranceAlignments:", 20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    for (j = (uint64_t **)v32; j; j = (uint64_t **)*j)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    UtteranceAlignment[nodeIndex=", 33);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
      siri::ontology::UsoUtteranceAlignment::toString((uint64_t *)&__p, (siri::ontology::UsoUtteranceAlignment *)j[3]);
      if ((v24 & 0x80u) == 0)
        v13 = &__p;
      else
        v13 = (__int128 *)__p;
      if ((v24 & 0x80u) == 0)
        v14 = v24;
      else
        v14 = *((_QWORD *)&__p + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]\n", 2);
      if ((char)v24 < 0)
        operator delete((void *)__p);
    }
  }
  if (*((_QWORD *)&v29 + 1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"UsoEntitySpans:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    for (k = (_QWORD *)v29; k; k = (_QWORD *)*k)
    {
      v16 = (siri::ontology::UsoEntitySpan **)k[3];
      v17 = (siri::ontology::UsoEntitySpan **)k[4];
      while (v16 != v17)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    UsoEntitySpan[nodeIndex=", 28);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
        siri::ontology::UsoEntitySpan::toString((uint64_t *)&__p, *v16);
        if ((v24 & 0x80u) == 0)
          v19 = &__p;
        else
          v19 = (__int128 *)__p;
        if ((v24 & 0x80u) == 0)
          v20 = v24;
        else
          v20 = *((_QWORD *)&__p + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"]\n", 2);
        if ((char)v24 < 0)
          operator delete((void *)__p);
        ++v16;
      }
    }
  }
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&v28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&v31);
  return std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&v34);
}

void sub_1C3269DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&a20);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table(v26 - 128);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x1C3BD14BC](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C3BD14C8](v23);
  return a1;
}

void sub_1C326A048(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD14C8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C326A01CLL);
}

void sub_1C326A0A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::graph::detail::depth_first_search_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>>::operator()<boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor,siri::ontology::PrintGraphVisitor const>,boost::parameter::aux::empty_arg_list,std::integral_constant<BOOL,true>>>(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  _OWORD v21[3];
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;

  v3 = a2[1];
  v21[0] = *a2;
  v21[1] = v3;
  v21[2] = a2[2];
  v4 = operator new[]();
  v19 = v4;
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0x100000001;
  v6 = (unsigned int *)(v5 + 8);
  *(_QWORD *)v5 = &off_1E7D21148;
  *(_QWORD *)(v5 + 16) = v4;
  v20 = (unsigned int *)v5;
  v7 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  if (v7)
    v8 = 0;
  else
    v8 = -1;
  if (v7)
  {
    v9 = 0;
    v10 = v7 / 56;
    do
      *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](v4, v9++) = 0;
    while (v10 != v9);
    v12 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    if (v11 == v12)
    {
      v24 = v4;
      v25 = (unsigned int *)v5;
      do
        v13 = __ldxr(v6);
      while (__stxr(v13 + 1, v6));
      boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,siri::ontology::PrintGraphVisitor,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<siri::ontology::UsoGraphNode *,unsigned long>>,boost::detail::nontruth2>(a1, v8, (uint64_t)v21, &v24);
      boost::detail::shared_count::~shared_count(&v25);
      v12 = *(_QWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 32);
    }
    v14 = v11 - v12;
    if (v14)
    {
      v15 = 0;
      v16 = 0x6DB6DB6DB6DB6DB7 * (v14 >> 3);
      do
      {
        if (!*(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](v19, v15))
        {
          v22 = v19;
          v23 = v20;
          if (v20)
          {
            v17 = v20 + 2;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,siri::ontology::PrintGraphVisitor,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<siri::ontology::UsoGraphNode *,unsigned long>>,boost::detail::nontruth2>(a1, v15, (uint64_t)v21, &v22);
          boost::detail::shared_count::~shared_count(&v23);
        }
        ++v15;
      }
      while (v15 != v16);
    }
  }
  boost::detail::shared_count::~shared_count(&v20);
}

void sub_1C326A2BC(_Unwind_Exception *a1)
{
  unsigned int **v1;
  unsigned int **v2;

  boost::detail::shared_count::~shared_count(v2);
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoIdentifier::toString(siri::ontology::UsoIdentifier *this)
{
  _QWORD *v2;
  int v3;
  siri::ontology::UsoIdentifier *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  uint64_t v24;
  std::string v26;
  void *__p[2];
  int64_t v28;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"value=", 6);
  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = this;
  else
    v4 = *(siri::ontology::UsoIdentifier **)this;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = *((_QWORD *)this + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", appBundle=", 12);
  v6 = *((char *)this + 47);
  if (v6 >= 0)
    v7 = (char *)this + 24;
  else
    v7 = (char *)*((_QWORD *)this + 3);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 47);
  else
    v8 = *((_QWORD *)this + 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
  if (*((_BYTE *)this + 72))
  {
    std::operator+<char>();
    v9 = v28 >= 0 ? __p : (void **)__p[0];
    v10 = v28 >= 0 ? (void *)HIBYTE(v28) : __p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v9, (uint64_t)v10);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
  }
  if (*((_BYTE *)this + 88))
  {
    std::to_string(&v26, *((double *)this + 10));
    v11 = std::string::insert(&v26, 0, ", probability=");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v28 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v28 >= 0)
      v14 = HIBYTE(v28);
    else
      v14 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v13, v14);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 100))
  {
    switch(*((_DWORD *)this + 24))
    {
      case 0:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "unknown";
        goto LABEL_39;
      case 1:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "SiriVocab";
        goto LABEL_44;
      case 2:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "VocFile";
LABEL_39:
        v16 = 7;
        break;
      case 3:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "MentionResolver";
        v16 = 15;
        break;
      case 4:
        v16 = 19;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "ContextualSpanMatch";
        break;
      case 5:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "ParserCATI";
        v16 = 10;
        break;
      case 6:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "ParserSSU";
LABEL_44:
        v16 = 9;
        break;
      default:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", source component=", 19);
        v15 = "unsupported value";
        v16 = 17;
        break;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v15, v16);
  }
  if (*((_BYTE *)this + 108))
  {
    std::to_string(&v26, *((_DWORD *)this + 26));
    v17 = std::string::insert(&v26, 0, ", groupIndex=");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v28 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (v28 >= 0)
      v20 = HIBYTE(v28);
    else
      v20 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v19, v20);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 116))
  {
    std::to_string(&v26, *((_DWORD *)this + 28));
    v21 = std::string::insert(&v26, 0, ", interpretationGroup=");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v28 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v28 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if (v28 >= 0)
      v24 = HIBYTE(v28);
    else
      v24 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v23, v24);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326A714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoUtteranceAlignment::toString(siri::ontology::UsoUtteranceAlignment *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string::size_type size;
  siri::ontology::UsoUtteranceSpan **v5;
  siri::ontology::UsoUtteranceSpan **i;
  std::string *v7;
  std::string::size_type v8;
  std::string v10;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  if (*(_DWORD *)this == -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"spans=[", 7);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"asrHypothesisIndex=", 19);
    std::to_string(&v10, *(_DWORD *)this);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = &v10;
    else
      v3 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", spans=[", 9);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  v5 = (siri::ontology::UsoUtteranceSpan **)*((_QWORD *)this + 1);
  for (i = (siri::ontology::UsoUtteranceSpan **)*((_QWORD *)this + 2); v5 != i; ++v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"UtteranceSpan[", 14);
    siri::ontology::UsoUtteranceSpan::toString((uint64_t *)&v10, *v5);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v10;
    else
      v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      v8 = v10.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"]", 1);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"]", 1);
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326A958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoEntitySpan::toString(siri::ontology::UsoEntitySpan *this)
{
  _QWORD *v2;
  int v3;
  siri::ontology::UsoEntitySpan *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  uint64_t v27;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  uint64_t v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  void **v48;
  uint64_t v49;
  std::string v51;
  std::string v52;
  void *__p[2];
  int64_t v54;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  if (*((_BYTE *)this + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"originAppId=", 12);
    if (!*((_BYTE *)this + 24))
      goto LABEL_124;
    v3 = *((char *)this + 23);
    if (v3 >= 0)
      v4 = this;
    else
      v4 = *(siri::ontology::UsoEntitySpan **)this;
    if (v3 >= 0)
      v5 = *((unsigned __int8 *)this + 23);
    else
      v5 = *((_QWORD *)this + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
    v6 = (char *)this + 36;
    if (!*((_BYTE *)this + 36))
      goto LABEL_17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  }
  else
  {
    v6 = (char *)this + 36;
    if (!*((_BYTE *)this + 36))
    {
      if (!*((_BYTE *)this + 64))
      {
        if (!*((_BYTE *)this + 80))
        {
          v18 = (uint64_t *)((char *)this + 88);
          v19 = (_QWORD *)((char *)this + 96);
          if (*((_QWORD *)this + 11) == *((_QWORD *)this + 12))
          {
            if (!*((_BYTE *)this + 116))
            {
              if (!*((_BYTE *)this + 124))
              {
                v37 = (uint64_t *)((char *)this + 128);
                v38 = (_QWORD *)((char *)this + 136);
                if (*((_QWORD *)this + 16) == *((_QWORD *)this + 17))
                {
                  if (!*((_BYTE *)this + 176))
                    goto LABEL_115;
                  goto LABEL_107;
                }
                goto LABEL_87;
              }
              goto LABEL_75;
            }
            goto LABEL_63;
          }
          goto LABEL_43;
        }
        goto LABEL_29;
      }
      goto LABEL_19;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"sourceComponent=", 16);
  if (!*v6)
LABEL_124:
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = *((unsigned int *)this + 8);
  if (v7 > 6)
  {
    v8 = "unsupported value";
    v9 = 17;
  }
  else
  {
    v8 = off_1E7D21198[v7];
    v9 = *(_QWORD *)&asc_1C33BCDE0[8 * v7];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v8, v9);
LABEL_17:
  if (!*((_BYTE *)this + 64))
    goto LABEL_27;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  if (!*((_BYTE *)this + 64))
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_19:
  std::operator+<char>();
  if (v54 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v54 >= 0)
    v11 = HIBYTE(v54);
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v10, v11);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
LABEL_27:
  if (*((_BYTE *)this + 80))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 80))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_29:
    siri::ontology::MatchInfo::toString((uint64_t *)&v51, *((siri::ontology::MatchInfo **)this + 9));
    v12 = std::string::insert(&v51, 0, "matchInfo=[");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v52, "]");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v54 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (v54 >= 0)
      v17 = HIBYTE(v54);
    else
      v17 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v16, v17);
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
  }
  v18 = (uint64_t *)((char *)this + 88);
  v19 = (_QWORD *)((char *)this + 96);
  if (*((_QWORD *)this + 11) == *((_QWORD *)this + 12))
    goto LABEL_61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
LABEL_43:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"properties=[", 12);
  v20 = *v18;
  if (*v19 != *v18)
  {
    v21 = 0;
    do
    {
      siri::ontology::SpanProperty::toString((uint64_t *)&v51, *(siri::ontology::SpanProperty **)(v20 + 8 * v21));
      v22 = std::string::insert(&v51, 0, "{");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v52, "}");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v54 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (v54 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      if (v54 >= 0)
        v27 = HIBYTE(v54);
      else
        v27 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v26, v27);
      if (SHIBYTE(v54) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v20 = *v18;
      v28 = (*v19 - *v18) >> 3;
      if (v28 - 1 > v21)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
        v20 = *v18;
        v28 = (*v19 - *v18) >> 3;
      }
      ++v21;
    }
    while (v28 > v21);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"]", 1);
LABEL_61:
  if (*((_BYTE *)this + 116))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 116))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_63:
    std::to_string(&v52, *((_DWORD *)this + 28));
    v29 = std::string::insert(&v52, 0, "startIndex=");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v54 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    if (v54 >= 0)
      v32 = HIBYTE(v54);
    else
      v32 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v31, v32);
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (!*((_BYTE *)this + 124))
    goto LABEL_85;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  if (!*((_BYTE *)this + 124))
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_75:
  std::to_string(&v52, *((_DWORD *)this + 30));
  v33 = std::string::insert(&v52, 0, "endIndex=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v54 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0)
    v35 = __p;
  else
    v35 = (void **)__p[0];
  if (v54 >= 0)
    v36 = HIBYTE(v54);
  else
    v36 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v35, v36);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
LABEL_85:
  v37 = (uint64_t *)((char *)this + 128);
  v38 = (_QWORD *)((char *)this + 136);
  if (*((_QWORD *)this + 16) != *((_QWORD *)this + 17))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
LABEL_87:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"alternatives=[", 14);
    v39 = *v37;
    if (*v38 != *v37)
    {
      v40 = 0;
      do
      {
        siri::ontology::AsrAlternative::toString((uint64_t *)&v51, *(siri::ontology::AsrAlternative **)(v39 + 8 * v40));
        v41 = std::string::insert(&v51, 0, "{");
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append(&v52, "}");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v54 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0)
          v45 = __p;
        else
          v45 = (void **)__p[0];
        if (v54 >= 0)
          v46 = HIBYTE(v54);
        else
          v46 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v45, v46);
        if (SHIBYTE(v54) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        v39 = *v37;
        v47 = (*v38 - *v37) >> 3;
        if (v47 - 1 > v40)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
          v39 = *v37;
          v47 = (*v38 - *v37) >> 3;
        }
        ++v40;
      }
      while (v47 > v40);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"]", 1);
  }
  if (!*((_BYTE *)this + 176))
    goto LABEL_115;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  if (!*((_BYTE *)this + 176))
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_107:
  std::operator+<char>();
  if (v54 >= 0)
    v48 = __p;
  else
    v48 = (void **)__p[0];
  if (v54 >= 0)
    v49 = HIBYTE(v54);
  else
    v49 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v48, v49);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
LABEL_115:
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326B178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C326B348(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD1594](v1);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::MatchInfo::toString(siri::ontology::MatchInfo *this)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  uint64_t v37;
  std::string *v38;
  __int128 v39;
  void **v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t i;
  std::string v54;
  void *__p[2];
  int64_t v56;
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[5];

  v62[4] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    LODWORD(__p[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p[1], "ExactMatch");
    v57 = 2;
    std::string::basic_string[abi:ne180100]<0>(v58, "PartialMatch");
    v59 = 4;
    std::string::basic_string[abi:ne180100]<0>(v60, "ApproximateMatch");
    v61 = 8;
    std::string::basic_string[abi:ne180100]<0>(v62, "AliasMatch");
    std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::vector[abi:ne180100]((uint64_t)__p, 4uLL);
    for (i = 0; i != -16; i -= 4)
    {
      if (SHIBYTE(v62[i + 2]) < 0)
        operator delete((void *)v62[i]);
    }
    __cxa_atexit((void (*)(void *))std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::~vector[abi:ne180100], &siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS, &dword_1C2FD5000);
  }
  v3 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  if (!*(_DWORD *)this)
  {
    if (!*((_BYTE *)this + 8))
    {
      if (!*((_BYTE *)this + 16))
      {
        if (!*((_BYTE *)this + 24))
        {
          if (!*((_BYTE *)this + 32))
          {
            if (!*((_BYTE *)this + 40))
            {
              if (!*((_BYTE *)this + 48))
              {
                if (!*((_BYTE *)this + 56))
                {
                  if (!*((_BYTE *)this + 64))
                  {
                    v52 = *((_QWORD *)this + 9);
                    v42 = (uint64_t *)((char *)this + 72);
                    v44 = v42 + 1;
                    if (v52 == v42[1])
                      goto LABEL_125;
                    goto LABEL_116;
                  }
                  goto LABEL_104;
                }
                goto LABEL_92;
              }
              goto LABEL_80;
            }
            goto LABEL_68;
          }
          goto LABEL_56;
        }
        goto LABEL_44;
      }
      goto LABEL_32;
    }
    goto LABEL_20;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"matchSignalBitSet={", 19);
  v4 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
  v5 = qword_1EF8B1620;
  if (siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS != qword_1EF8B1620)
  {
    v6 = 0;
    do
    {
      if ((*(_DWORD *)v4 & *(_DWORD *)this) != 0)
      {
        if ((v6 & 1) != 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
        v7 = *(char *)(v4 + 31);
        if (v7 >= 0)
          v8 = v4 + 8;
        else
          v8 = *(_QWORD *)(v4 + 8);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 31);
        else
          v9 = *(_QWORD *)(v4 + 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
        v6 = 1;
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
  if (*((_BYTE *)this + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 8))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_20:
    std::to_string(&v54, *((float *)this + 1));
    v10 = std::string::insert(&v54, 0, "matchScore=");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v56 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v56 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v56 >= 0)
      v13 = HIBYTE(v56);
    else
      v13 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v12, v13);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 16))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_32:
    std::to_string(&v54, *((_DWORD *)this + 3));
    v14 = std::string::insert(&v54, 0, "maxTokenCount=");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v56 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v56 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (v56 >= 0)
      v17 = HIBYTE(v56);
    else
      v17 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v16, v17);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (!*((_BYTE *)this + 24))
    goto LABEL_54;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  if (!*((_BYTE *)this + 24))
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_44:
  std::to_string(&v54, *((_DWORD *)this + 5));
  v18 = std::string::insert(&v54, 0, "matchedTokenCount=");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v56 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v56 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (v56 >= 0)
    v21 = HIBYTE(v56);
  else
    v21 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v20, v21);
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
LABEL_54:
  if (*((_BYTE *)this + 32))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 32))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_56:
    std::to_string(&v54, *((_DWORD *)this + 7));
    v22 = std::string::insert(&v54, 0, "maxStopWordCount=");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v56 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (v56 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    if (v56 >= 0)
      v25 = HIBYTE(v56);
    else
      v25 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v24, v25);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (!*((_BYTE *)this + 40))
    goto LABEL_78;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  if (!*((_BYTE *)this + 40))
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_68:
  std::to_string(&v54, *((_DWORD *)this + 9));
  v26 = std::string::insert(&v54, 0, "matchedStopWordCount=");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v56 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v56 >= 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if (v56 >= 0)
    v29 = HIBYTE(v56);
  else
    v29 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v28, v29);
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
LABEL_78:
  if (*((_BYTE *)this + 48))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 48))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_80:
    std::to_string(&v54, *((_DWORD *)this + 11));
    v30 = std::string::insert(&v54, 0, "editDistance=");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v56 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (v56 >= 0)
      v32 = __p;
    else
      v32 = (void **)__p[0];
    if (v56 >= 0)
      v33 = HIBYTE(v56);
    else
      v33 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v32, v33);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (!*((_BYTE *)this + 56))
    goto LABEL_102;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  if (!*((_BYTE *)this + 56))
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_92:
  std::to_string(&v54, *((_DWORD *)this + 13));
  v34 = std::string::insert(&v54, 0, "maxAliasCount=");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v56 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v56 >= 0)
    v36 = __p;
  else
    v36 = (void **)__p[0];
  if (v56 >= 0)
    v37 = HIBYTE(v56);
  else
    v37 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v36, v37);
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
LABEL_102:
  if (*((_BYTE *)this + 64))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    if (!*((_BYTE *)this + 64))
      std::__throw_bad_optional_access[abi:ne180100]();
LABEL_104:
    std::to_string(&v54, *((_DWORD *)this + 15));
    v38 = std::string::insert(&v54, 0, "matchedAliasCount=");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v56 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (v56 >= 0)
      v40 = __p;
    else
      v40 = (void **)__p[0];
    if (v56 >= 0)
      v41 = HIBYTE(v56);
    else
      v41 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v40, v41);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  v43 = *((_QWORD *)this + 9);
  v42 = (uint64_t *)((char *)this + 72);
  v44 = v42 + 1;
  if (v43 == v42[1])
    goto LABEL_125;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
LABEL_116:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"matchedAliasTypes={", 19);
  v45 = *v42;
  if (*v44 != *v42)
  {
    v46 = 0;
    do
    {
      v47 = *(unsigned int *)(v45 + 4 * v46);
      if (v47 >= 0xC)
      {
        v48 = "unsupported value";
        v49 = 17;
      }
      else
      {
        v48 = off_1E7D211D0[v47];
        v49 = qword_1C33BCE18[v47];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v48, v49);
      v45 = *v42;
      v50 = (*v44 - *v42) >> 2;
      if (v50 - 1 > v46)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
        v45 = *v42;
        v50 = (*v44 - *v42) >> 2;
      }
      ++v46;
    }
    while (v50 > v46);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
LABEL_125:
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
}

void sub_1C326BC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  v23 = 0;
  while (1)
  {
    if (*(char *)(v21 + v23 + 127) < 0)
      operator delete(*(void **)(v21 + v23 + 104));
    v23 -= 32;
    if (v23 == -128)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::ontology::SpanProperty::toString(siri::ontology::SpanProperty *this)
{
  _QWORD *v2;
  int v3;
  siri::ontology::SpanProperty *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string v14;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"key=", 4);
  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = this;
  else
    v4 = *(siri::ontology::SpanProperty **)this;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = *((_QWORD *)this + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  if (*((_BYTE *)this + 48))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", valueString=", 14);
    if (!*((_BYTE *)this + 48))
      std::__throw_bad_optional_access[abi:ne180100]();
    v6 = *((char *)this + 47);
    if (v6 >= 0)
      v7 = (char *)this + 24;
    else
      v7 = (char *)*((_QWORD *)this + 3);
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)this + 47);
    else
      v8 = *((_QWORD *)this + 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
  }
  if (*((_BYTE *)this + 60))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", valueInt=", 11);
    if (!*((_BYTE *)this + 60))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::to_string(&v14, *((_DWORD *)this + 14));
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v14;
    else
      v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v9, size);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 68))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", valueFloat=", 13);
    if (!*((_BYTE *)this + 68))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::to_string(&v14, *((float *)this + 16));
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v14;
    else
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      v12 = v14.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v11, v12);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326BF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::AsrAlternative::toString(siri::ontology::AsrAlternative *this)
{
  _QWORD *v2;
  int v3;
  siri::ontology::AsrAlternative *v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;
  std::string v11;
  void *__p[2];
  int64_t v13;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"value=", 6);
  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = this;
  else
    v4 = *(siri::ontology::AsrAlternative **)this;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = *((_QWORD *)this + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  if (*((_BYTE *)this + 28))
  {
    std::to_string(&v11, *((float *)this + 6));
    v6 = std::string::insert(&v11, 0, ", probability=");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v13 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (v13 >= 0)
      v9 = HIBYTE(v13);
    else
      v9 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v8, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326C0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::vector[abi:ne180100](uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS = 0;
  qword_1EF8B1620 = 0;
  qword_1EF8B1628 = 0;
  if (a2)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v3 = result;
    siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS = (uint64_t)operator new(32 * a2);
    qword_1EF8B1620 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    qword_1EF8B1628 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS + 32 * a2;
    v12 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    v13 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    v4 = v3 + 32 * a2;
    v10[0] = &qword_1EF8B1628;
    v10[1] = &v12;
    v10[2] = &v13;
    v5 = v3 + 8;
    v6 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    v11 = 0;
    do
    {
      v7 = v5 - 8;
      *(_DWORD *)v6 = *(_DWORD *)(v5 - 8);
      v8 = (std::string *)(v6 + 8);
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
        v6 = v13;
      }
      else
      {
        v9 = *(_OWORD *)v5;
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 16);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v6 += 32;
      v13 = v6;
      v5 += 32;
    }
    while (v7 + 32 != v4);
    v11 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>,std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    qword_1EF8B1620 = v6;
  }
  return result;
}

void sub_1C326C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>,std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 32;
    }
  }
  return a1;
}

uint64_t siri::ontology::UsoUtteranceSpan::toString(siri::ontology::UsoUtteranceSpan *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string v16;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"startIndex=", 11);
  std::to_string(&v16, *(_DWORD *)this);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v16;
  else
    v3 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, size);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", endIndex=", 11);
  std::to_string(&v16, *((_DWORD *)this + 1));
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v16;
  else
    v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    v6 = v16.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v5, v6);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (*((_DWORD *)this + 2) != -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", startUnicodeIndex=", 20);
    std::to_string(&v16, *((_DWORD *)this + 2));
    v7 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v16
       : (std::string *)v16.__r_.__value_.__r.__words[0];
    v8 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v16.__r_.__value_.__r.__words[2])
       : v16.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 3) != -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", endUnicodeIndex=", 18);
    std::to_string(&v16, *((_DWORD *)this + 3));
    v9 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v16
       : (std::string *)v16.__r_.__value_.__r.__words[0];
    v10 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v16.__r_.__value_.__r.__words[2])
        : v16.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v9, v10);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 20))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", startMilliSecond=", 19);
    if (!*((_BYTE *)this + 20))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::to_string(&v16, *((_DWORD *)this + 4));
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      v12 = v16.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v11, v12);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 28))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", endMilliSecond=", 17);
    if (!*((_BYTE *)this + 28))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::to_string(&v16, *((_DWORD *)this + 6));
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v16;
    else
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      v14 = v16.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v13, v14);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326C648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t boost::shared_array<boost::default_color_type>::operator[](uint64_t a1, uint64_t a2)
{
  const char *v3;
  int v4;

  if (!a1)
  {
    v3 = "px != 0";
    v4 = 199;
    goto LABEL_6;
  }
  if (a2 < 0)
  {
    v3 = "i >= 0";
    v4 = 200;
LABEL_6:
    __assert_rtn("operator[]", "shared_array.hpp", v4, v3);
  }
  return a1 + 4 * a2;
}

void boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,siri::ontology::PrintGraphVisitor,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<siri::ontology::UsoGraphNode *,unsigned long>>,boost::detail::nontruth2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v28[3];
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = 0;
  v31 = 0;
  *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, a2) = 1;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 56 * a2);
  v9 = *v7;
  v8 = v7[1];
  v32 = a2;
  v33 = 0;
  *(_QWORD *)&v36 = v9;
  *((_QWORD *)&v36 + 1) = a2;
  *(_QWORD *)&v37 = v8;
  *((_QWORD *)&v37 + 1) = a2;
  v10 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v29, (uint64_t)&v32);
  v30 = v10;
  v11 = v29;
  if (v29 != v10)
  {
    v12 = v10;
    do
    {
      v14 = *((_QWORD *)v12 - 9);
      v12 -= 72;
      v13 = v14;
      if (v12[8])
        *(v10 - 64) = 0;
      v16 = (uint64_t *)*((_QWORD *)v12 + 5);
      v15 = *((_QWORD *)v12 + 6);
      v18 = (uint64_t *)*((_QWORD *)v12 + 7);
      v17 = *((_QWORD *)v12 + 8);
      v30 = v12;
      if (v16 != v18)
      {
        do
        {
          v19 = *v16;
          if (*(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, *v16))
          {
            v16 += 2;
          }
          else
          {
            v20 = *v16;
            v21 = v16[1] + 32;
            v28[0] = v15;
            v28[1] = v20;
            v28[2] = v21;
            siri::ontology::PrintGraphVisitor::tree_edge(a3, (uint64_t)v28, a1);
            v22 = *v16;
            v23 = v16[1] + 32;
            v32 = v13;
            *(_QWORD *)&v34 = v15;
            *((_QWORD *)&v34 + 1) = v22;
            v33 = 1;
            v35 = v23;
            *(_QWORD *)&v36 = v16 + 2;
            *((_QWORD *)&v36 + 1) = v15;
            *(_QWORD *)&v37 = v18;
            *((_QWORD *)&v37 + 1) = v17;
            if ((unint64_t)v12 >= v31)
            {
              v12 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v29, (uint64_t)&v32);
            }
            else
            {
              *(_QWORD *)v12 = v13;
              v12[8] = 0;
              if (v33)
              {
                v24 = v34;
                *((_QWORD *)v12 + 4) = v35;
                *((_OWORD *)v12 + 1) = v24;
                v12[8] = 1;
              }
              v25 = v36;
              *(_OWORD *)(v12 + 56) = v37;
              *(_OWORD *)(v12 + 40) = v25;
              v12 += 72;
            }
            v30 = v12;
            *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v19) = 1;
            v26 = *(_QWORD *)(a1 + 24) + 56 * v19;
            v16 = *(uint64_t **)v26;
            v18 = *(uint64_t **)(v26 + 8);
            v15 = v19;
            v17 = v19;
            v13 = v19;
          }
        }
        while (v16 != v18);
        v11 = v29;
      }
      *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v13) = 4;
      *(_DWORD *)(a3 + 16) -= 4;
      v10 = v12;
    }
    while (v11 != v12);
  }
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

void sub_1C326C95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:ne180100]((char **)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - v3) >> 3) >= 0x1C71C71C71C71C7)
    v8 = 0x38E38E38E38E38ELL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(72 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[72 * v4];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  v10[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v11 = &v9[72 * v4];
    *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
    v10[8] = 1;
  }
  v12 = &v9[72 * v8];
  v13 = &v9[72 * v4];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + 56);
  v14 = v10 + 72;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v10[v15];
      v17 = &v2[v15];
      *((_QWORD *)v16 - 9) = *(_QWORD *)&v2[v15 - 72];
      *(v16 - 64) = 0;
      if (v2[v15 - 64])
      {
        v18 = *(_OWORD *)(v17 - 56);
        *((_QWORD *)v16 - 5) = *((_QWORD *)v17 - 5);
        *(_OWORD *)(v16 - 56) = v18;
        *(v16 - 64) = 1;
      }
      v19 = *((_OWORD *)v17 - 1);
      *((_OWORD *)v16 - 2) = *((_OWORD *)v17 - 2);
      *((_OWORD *)v16 - 1) = v19;
      v15 -= 72;
    }
    while (&v2[v15] != v3);
    v20 = &v10[v15];
    v2 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v12;
    while (v21 != v2)
    {
      if (*(v21 - 64))
        *(v21 - 64) = 0;
      v21 -= 72;
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

void siri::ontology::PrintGraphVisitor::tree_edge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  std::string::size_type v4;
  std::string::size_type v5;
  __int128 *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type size;
  void *p_p;
  uint64_t v14;
  unint64_t v15;
  siri::ontology::UsoEntityNode *v16;
  siri::ontology::UsoEntityNode *v17;
  uint64_t *v18;
  unint64_t v19;
  uint8x8_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *i;
  unint64_t v24;
  char *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  _QWORD *v50;
  _QWORD *j;
  unint64_t v52;
  _QWORD *v53;
  float v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  int8x8_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t *v74;
  void *v75;
  std::string::size_type v76;
  unint64_t v77;
  uint8x8_t v78;
  _QWORD *v79;
  _QWORD *k;
  unint64_t v81;
  char *v82;
  _QWORD *v83;
  float v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  int8x8_t prime;
  void *v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  uint8x8_t v95;
  unint64_t v96;
  uint8x8_t v97;
  uint64_t v98;
  void *v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  void *v107;
  _QWORD *v108;
  void *v109;
  _BYTE *v110;
  std::string v111;
  uint64_t v112;
  void *__p;
  _BYTE *v114;
  unsigned __int8 v115;
  __int128 v116;
  int v117;
  void (**v118)(siri::ontology::OntologyEdgeName *__hidden);
  std::string v119;
  uint64_t v120;

  v7 = *(__int128 **)(a2 + 16);
  v8 = *(_QWORD **)(*(_QWORD *)(a3 + 24) + 56 * *(_QWORD *)(a2 + 8) + 48);
  v116 = *v7;
  v117 = *((_DWORD *)v7 + 4);
  if (*((char *)v7 + 55) < 0)
    std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)v7 + 4), *((_QWORD *)v7 + 5));
  else
    v119 = *(std::string *)(v7 + 2);
  v120 = *((_QWORD *)v7 + 7);
  v118 = off_1E7D217A0;
  if (*(_DWORD *)(a1 + 16))
  {
    v9 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)" ", 1);
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 16));
  }
  v10 = *(_QWORD **)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v111, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v111 = v119;
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v111;
  else
    v11 = (std::string *)v111.__r_.__value_.__r.__words[0];
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
  else
    size = v111.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
  (*(void (**)(void **__return_ptr, _QWORD *))(*v8 + 48))(&__p, v8);
  if ((v115 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v115 & 0x80u) == 0)
    v14 = v115;
  else
    v14 = (uint64_t)v114;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v14);
  if ((char)v115 < 0)
    operator delete(__p);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  v15 = v8[2];
  if (v16)
  {
    v17 = v16;
    siri::ontology::UsoEntityNode::getIdentifiers(v16, &__p);
    if (__p == v114)
    {
      v21 = 0;
      goto LABEL_105;
    }
    v18 = *(uint64_t **)(a1 + 24);
    v3 = (int8x8_t)&v111.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v15;
    v111.__r_.__value_.__r.__words[2] = 0;
    v112 = 0;
    std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoIdentifier>*,std::reference_wrapper<siri::ontology::UsoIdentifier>*>(&v111.__r_.__value_.__l.__size_, __p, (uint64_t)v114, (v114 - (_BYTE *)__p) >> 3);
    v5 = v111.__r_.__value_.__r.__words[0];
    v19 = v18[1];
    if (v19)
    {
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v4 = v111.__r_.__value_.__r.__words[0];
        if (v111.__r_.__value_.__r.__words[0] >= v19)
          v4 = v111.__r_.__value_.__r.__words[0] % v19;
      }
      else
      {
        v4 = (v19 - 1) & v111.__r_.__value_.__r.__words[0];
      }
      v22 = *(_QWORD **)(*v18 + 8 * v4);
      if (v22)
      {
        for (i = (_QWORD *)*v22; i; i = (_QWORD *)*i)
        {
          v24 = i[1];
          if (v24 == v111.__r_.__value_.__r.__words[0])
          {
            if (i[2] == v111.__r_.__value_.__r.__words[0])
              goto LABEL_102;
          }
          else
          {
            if (v20.u32[0] > 1uLL)
            {
              if (v24 >= v19)
                v24 %= v19;
            }
            else
            {
              v24 &= v19 - 1;
            }
            if (v24 != v4)
              break;
          }
        }
      }
    }
    v25 = (char *)operator new(0x30uLL);
    v108 = v18 + 2;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = v5;
    *((_QWORD *)v25 + 2) = v5;
    *(_OWORD *)(v25 + 24) = *(_OWORD *)&v111.__r_.__value_.__r.__words[1];
    *((_QWORD *)v25 + 5) = v112;
    v112 = 0;
    *(_OWORD *)&v111.__r_.__value_.__r.__words[1] = 0uLL;
    v26 = (float)(unint64_t)(v18[3] + 1);
    v27 = *((float *)v18 + 8);
    if (v19 && (float)(v27 * (float)v19) >= v26)
    {
LABEL_92:
      v42 = *v18;
      v43 = *(_QWORD **)(*v18 + 8 * v4);
      if (v43)
      {
        *(_QWORD *)v25 = *v43;
      }
      else
      {
        *(_QWORD *)v25 = *v108;
        *v108 = v25;
        *(_QWORD *)(v42 + 8 * v4) = v108;
        if (!*(_QWORD *)v25)
          goto LABEL_101;
        v44 = *(_QWORD *)(*(_QWORD *)v25 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v44 >= v19)
            v44 %= v19;
        }
        else
        {
          v44 &= v19 - 1;
        }
        v43 = (_QWORD *)(*v18 + 8 * v44);
      }
      *v43 = v25;
LABEL_101:
      ++v18[3];
LABEL_102:
      if (v111.__r_.__value_.__l.__size_)
        operator delete((void *)v111.__r_.__value_.__l.__size_);
      v21 = 1;
LABEL_105:
      v45 = (uint64_t *)*((_QWORD *)v17 + 7);
      if (v45 == *((uint64_t **)v17 + 8))
        goto LABEL_180;
      v46 = *(float **)(a1 + 32);
      v47 = *v45;
      v48 = *((_QWORD *)v46 + 1);
      if (v48)
      {
        v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v3 = (int8x8_t)v15;
          if (v15 >= v48)
            v3 = (int8x8_t)(v15 % v48);
        }
        else
        {
          v3 = (int8x8_t)((v48 - 1) & v15);
        }
        v50 = *(_QWORD **)(*(_QWORD *)v46 + 8 * *(_QWORD *)&v3);
        if (v50)
        {
          for (j = (_QWORD *)*v50; j; j = (_QWORD *)*j)
          {
            v52 = j[1];
            if (v52 == v15)
            {
              if (j[2] == v15)
                goto LABEL_179;
            }
            else
            {
              if (v49.u32[0] > 1uLL)
              {
                if (v52 >= v48)
                  v52 %= v48;
              }
              else
              {
                v52 &= v48 - 1;
              }
              if (v52 != *(_QWORD *)&v3)
                break;
            }
          }
        }
      }
      v53 = operator new(0x20uLL);
      *v53 = 0;
      v53[1] = v15;
      v53[2] = v15;
      v53[3] = v47;
      v54 = (float)(unint64_t)(*((_QWORD *)v46 + 3) + 1);
      v55 = v46[8];
      if (v48 && (float)(v55 * (float)v48) >= v54)
      {
LABEL_169:
        v71 = *(_QWORD **)v46;
        v72 = *(_QWORD **)(*(_QWORD *)v46 + 8 * *(_QWORD *)&v3);
        if (v72)
        {
          *v53 = *v72;
        }
        else
        {
          *v53 = *((_QWORD *)v46 + 2);
          *((_QWORD *)v46 + 2) = v53;
          v71[*(_QWORD *)&v3] = v46 + 4;
          if (!*v53)
            goto LABEL_178;
          v73 = *(_QWORD *)(*v53 + 8);
          if ((v48 & (v48 - 1)) != 0)
          {
            if (v73 >= v48)
              v73 %= v48;
          }
          else
          {
            v73 &= v48 - 1;
          }
          v72 = (_QWORD *)(*(_QWORD *)v46 + 8 * v73);
        }
        *v72 = v53;
LABEL_178:
        ++*((_QWORD *)v46 + 3);
LABEL_179:
        v21 = 1;
LABEL_180:
        siri::ontology::UsoEntityNode::getEntitySpans(v17, &v109);
        v74 = *(uint64_t **)(a1 + 40);
        v75 = v109;
        if (!v74 || v109 == v110)
        {
LABEL_276:
          if (v75)
            operator delete(v75);
          if (__p)
            operator delete(__p);
          if (v21)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"(nodexIndex=", 12);
            v106 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)")", 1);
          }
          goto LABEL_282;
        }
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v15;
        v111.__r_.__value_.__r.__words[2] = 0;
        v112 = 0;
        std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoEntitySpan>*,std::reference_wrapper<siri::ontology::UsoEntitySpan>*>(&v111.__r_.__value_.__l.__size_, v109, (uint64_t)v110, (v110 - (_BYTE *)v109) >> 3);
        v76 = v111.__r_.__value_.__r.__words[0];
        v77 = v74[1];
        if (v77)
        {
          v78 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
          v78.i16[0] = vaddlv_u8(v78);
          if (v78.u32[0] > 1uLL)
          {
            v5 = v111.__r_.__value_.__r.__words[0];
            if (v111.__r_.__value_.__r.__words[0] >= v77)
              v5 = v111.__r_.__value_.__r.__words[0] % v77;
          }
          else
          {
            v5 = (v77 - 1) & v111.__r_.__value_.__r.__words[0];
          }
          v79 = *(_QWORD **)(*v74 + 8 * v5);
          if (v79)
          {
            for (k = (_QWORD *)*v79; k; k = (_QWORD *)*k)
            {
              v81 = k[1];
              if (v81 == v111.__r_.__value_.__r.__words[0])
              {
                if (k[2] == v111.__r_.__value_.__r.__words[0])
                  goto LABEL_273;
              }
              else
              {
                if (v78.u32[0] > 1uLL)
                {
                  if (v81 >= v77)
                    v81 %= v77;
                }
                else
                {
                  v81 &= v77 - 1;
                }
                if (v81 != v5)
                  break;
              }
            }
          }
        }
        v82 = (char *)operator new(0x30uLL);
        v83 = v74 + 2;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = v76;
        *((_QWORD *)v82 + 2) = v76;
        *(_OWORD *)(v82 + 24) = *(_OWORD *)&v111.__r_.__value_.__r.__words[1];
        *((_QWORD *)v82 + 5) = v112;
        v112 = 0;
        *(_OWORD *)&v111.__r_.__value_.__r.__words[1] = 0uLL;
        v84 = (float)(unint64_t)(v74[3] + 1);
        v85 = *((float *)v74 + 8);
        if (v77 && (float)(v85 * (float)v77) >= v84)
        {
LABEL_263:
          v103 = *v74;
          v104 = *(_QWORD **)(*v74 + 8 * v5);
          if (v104)
          {
            *(_QWORD *)v82 = *v104;
          }
          else
          {
            *(_QWORD *)v82 = *v83;
            *v83 = v82;
            *(_QWORD *)(v103 + 8 * v5) = v83;
            if (!*(_QWORD *)v82)
              goto LABEL_272;
            v105 = *(_QWORD *)(*(_QWORD *)v82 + 8);
            if ((v77 & (v77 - 1)) != 0)
            {
              if (v105 >= v77)
                v105 %= v77;
            }
            else
            {
              v105 &= v77 - 1;
            }
            v104 = (_QWORD *)(*v74 + 8 * v105);
          }
          *v104 = v82;
LABEL_272:
          ++v74[3];
LABEL_273:
          if (v111.__r_.__value_.__l.__size_)
            operator delete((void *)v111.__r_.__value_.__l.__size_);
          v21 = 1;
          goto LABEL_276;
        }
        v86 = 1;
        if (v77 >= 3)
          v86 = (v77 & (v77 - 1)) != 0;
        v87 = v86 | (2 * v77);
        v88 = vcvtps_u32_f32(v84 / v85);
        if (v87 <= v88)
          prime = (int8x8_t)v88;
        else
          prime = (int8x8_t)v87;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v77 = v74[1];
        if (*(_QWORD *)&prime > v77)
          goto LABEL_211;
        if (*(_QWORD *)&prime < v77)
        {
          v96 = vcvtps_u32_f32((float)(unint64_t)v74[3] / *((float *)v74 + 8));
          if (v77 < 3 || (v97 = (uint8x8_t)vcnt_s8((int8x8_t)v77), v97.i16[0] = vaddlv_u8(v97), v97.u32[0] > 1uLL))
          {
            v96 = std::__next_prime(v96);
          }
          else
          {
            v98 = 1 << -(char)__clz(v96 - 1);
            if (v96 >= 2)
              v96 = v98;
          }
          if (*(_QWORD *)&prime <= v96)
            prime = (int8x8_t)v96;
          if (*(_QWORD *)&prime >= v77)
          {
            v77 = v74[1];
          }
          else
          {
            if (prime)
            {
LABEL_211:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v90 = operator new(8 * *(_QWORD *)&prime);
              v91 = (void *)*v74;
              *v74 = (uint64_t)v90;
              if (v91)
                operator delete(v91);
              v92 = 0;
              v74[1] = (uint64_t)prime;
              do
                *(_QWORD *)(*v74 + 8 * v92++) = 0;
              while (*(_QWORD *)&prime != v92);
              v93 = (_QWORD *)*v83;
              if (*v83)
              {
                v94 = v93[1];
                v95 = (uint8x8_t)vcnt_s8(prime);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  if (v94 >= *(_QWORD *)&prime)
                    v94 %= *(_QWORD *)&prime;
                }
                else
                {
                  v94 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(*v74 + 8 * v94) = v83;
                v101 = (_QWORD *)*v93;
                if (*v93)
                {
                  do
                  {
                    v102 = v101[1];
                    if (v95.u32[0] > 1uLL)
                    {
                      if (v102 >= *(_QWORD *)&prime)
                        v102 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v102 &= *(_QWORD *)&prime - 1;
                    }
                    if (v102 != v94)
                    {
                      if (!*(_QWORD *)(*v74 + 8 * v102))
                      {
                        *(_QWORD *)(*v74 + 8 * v102) = v93;
                        goto LABEL_254;
                      }
                      *v93 = *v101;
                      *v101 = **(_QWORD **)(*v74 + 8 * v102);
                      **(_QWORD **)(*v74 + 8 * v102) = v101;
                      v101 = v93;
                    }
                    v102 = v94;
LABEL_254:
                    v93 = v101;
                    v101 = (_QWORD *)*v101;
                    v94 = v102;
                  }
                  while (v101);
                }
              }
              v77 = (unint64_t)prime;
              goto LABEL_258;
            }
            v107 = (void *)*v74;
            *v74 = 0;
            if (v107)
              operator delete(v107);
            v77 = 0;
            v74[1] = 0;
          }
        }
LABEL_258:
        if ((v77 & (v77 - 1)) != 0)
        {
          if (v76 >= v77)
            v5 = v76 % v77;
          else
            v5 = v76;
        }
        else
        {
          v5 = (v77 - 1) & v76;
        }
        goto LABEL_263;
      }
      v56 = 1;
      if (v48 >= 3)
        v56 = (v48 & (v48 - 1)) != 0;
      v57 = v56 | (2 * v48);
      v58 = vcvtps_u32_f32(v54 / v55);
      if (v57 <= v58)
        v59 = (int8x8_t)v58;
      else
        v59 = (int8x8_t)v57;
      if (*(_QWORD *)&v59 == 1)
      {
        v59 = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&v59 & (*(_QWORD *)&v59 - 1)) != 0)
      {
        v59 = (int8x8_t)std::__next_prime(*(_QWORD *)&v59);
      }
      v48 = *((_QWORD *)v46 + 1);
      if (*(_QWORD *)&v59 > v48)
        goto LABEL_135;
      if (*(_QWORD *)&v59 < v48)
      {
        v66 = vcvtps_u32_f32((float)*((unint64_t *)v46 + 3) / v46[8]);
        if (v48 < 3 || (v67 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
        {
          v66 = std::__next_prime(v66);
        }
        else
        {
          v68 = 1 << -(char)__clz(v66 - 1);
          if (v66 >= 2)
            v66 = v68;
        }
        if (*(_QWORD *)&v59 <= v66)
          v59 = (int8x8_t)v66;
        if (*(_QWORD *)&v59 >= v48)
        {
          v48 = *((_QWORD *)v46 + 1);
        }
        else
        {
          if (v59)
          {
LABEL_135:
            if (*(_QWORD *)&v59 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v60 = operator new(8 * *(_QWORD *)&v59);
            v61 = *(_QWORD **)v46;
            *(_QWORD *)v46 = v60;
            if (v61)
              operator delete(v61);
            v62 = 0;
            *((int8x8_t *)v46 + 1) = v59;
            do
              *(_QWORD *)(*(_QWORD *)v46 + 8 * v62++) = 0;
            while (*(_QWORD *)&v59 != v62);
            v63 = (_QWORD *)*((_QWORD *)v46 + 2);
            if (v63)
            {
              v64 = v63[1];
              v65 = (uint8x8_t)vcnt_s8(v59);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                if (v64 >= *(_QWORD *)&v59)
                  v64 %= *(_QWORD *)&v59;
              }
              else
              {
                v64 &= *(_QWORD *)&v59 - 1;
              }
              *(_QWORD *)(*(_QWORD *)v46 + 8 * v64) = v46 + 4;
              v69 = (_QWORD *)*v63;
              if (*v63)
              {
                do
                {
                  v70 = v69[1];
                  if (v65.u32[0] > 1uLL)
                  {
                    if (v70 >= *(_QWORD *)&v59)
                      v70 %= *(_QWORD *)&v59;
                  }
                  else
                  {
                    v70 &= *(_QWORD *)&v59 - 1;
                  }
                  if (v70 != v64)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)v46 + 8 * v70))
                    {
                      *(_QWORD *)(*(_QWORD *)v46 + 8 * v70) = v63;
                      goto LABEL_160;
                    }
                    *v63 = *v69;
                    *v69 = **(_QWORD **)(*(_QWORD *)v46 + 8 * v70);
                    **(_QWORD **)(*(_QWORD *)v46 + 8 * v70) = v69;
                    v69 = v63;
                  }
                  v70 = v64;
LABEL_160:
                  v63 = v69;
                  v69 = (_QWORD *)*v69;
                  v64 = v70;
                }
                while (v69);
              }
            }
            v48 = (unint64_t)v59;
            goto LABEL_164;
          }
          v100 = *(_QWORD **)v46;
          *(_QWORD *)v46 = 0;
          if (v100)
            operator delete(v100);
          v48 = 0;
          *((_QWORD *)v46 + 1) = 0;
        }
      }
LABEL_164:
      if ((v48 & (v48 - 1)) != 0)
      {
        if (v15 >= v48)
          v3 = (int8x8_t)(v15 % v48);
        else
          v3 = (int8x8_t)v15;
      }
      else
      {
        v3 = (int8x8_t)((v48 - 1) & v15);
      }
      goto LABEL_169;
    }
    v28 = 1;
    if (v19 >= 3)
      v28 = (v19 & (v19 - 1)) != 0;
    v29 = v28 | (2 * v19);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v3 = (int8x8_t)v30;
    else
      v3 = (int8x8_t)v29;
    if (*(_QWORD *)&v3 == 1)
    {
      v3 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v3 & (*(_QWORD *)&v3 - 1)) != 0)
    {
      v3 = (int8x8_t)std::__next_prime(*(_QWORD *)&v3);
    }
    v19 = v18[1];
    if (*(_QWORD *)&v3 > v19)
      goto LABEL_58;
    if (*(_QWORD *)&v3 < v19)
    {
      v37 = vcvtps_u32_f32((float)(unint64_t)v18[3] / *((float *)v18 + 8));
      if (v19 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (*(_QWORD *)&v3 <= v37)
        v3 = (int8x8_t)v37;
      if (*(_QWORD *)&v3 >= v19)
      {
        v19 = v18[1];
      }
      else
      {
        if (v3)
        {
LABEL_58:
          if (*(_QWORD *)&v3 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v31 = operator new(8 * *(_QWORD *)&v3);
          v32 = (void *)*v18;
          *v18 = (uint64_t)v31;
          if (v32)
            operator delete(v32);
          v33 = 0;
          v18[1] = (uint64_t)v3;
          do
            *(_QWORD *)(*v18 + 8 * v33++) = 0;
          while (*(_QWORD *)&v3 != v33);
          v34 = (_QWORD *)*v108;
          if (*v108)
          {
            v35 = v34[1];
            v36 = (uint8x8_t)vcnt_s8(v3);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&v3)
                v35 %= *(_QWORD *)&v3;
            }
            else
            {
              v35 &= *(_QWORD *)&v3 - 1;
            }
            *(_QWORD *)(*v18 + 8 * v35) = v108;
            v40 = (_QWORD *)*v34;
            if (*v34)
            {
              do
              {
                v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(_QWORD *)&v3)
                    v41 %= *(_QWORD *)&v3;
                }
                else
                {
                  v41 &= *(_QWORD *)&v3 - 1;
                }
                if (v41 != v35)
                {
                  if (!*(_QWORD *)(*v18 + 8 * v41))
                  {
                    *(_QWORD *)(*v18 + 8 * v41) = v34;
                    goto LABEL_83;
                  }
                  *v34 = *v40;
                  *v40 = **(_QWORD **)(*v18 + 8 * v41);
                  **(_QWORD **)(*v18 + 8 * v41) = v40;
                  v40 = v34;
                }
                v41 = v35;
LABEL_83:
                v34 = v40;
                v40 = (_QWORD *)*v40;
                v35 = v41;
              }
              while (v40);
            }
          }
          v19 = (unint64_t)v3;
          goto LABEL_87;
        }
        v99 = (void *)*v18;
        *v18 = 0;
        if (v99)
          operator delete(v99);
        v19 = 0;
        v18[1] = 0;
      }
    }
LABEL_87:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v5 >= v19)
        v4 = v5 % v19;
      else
        v4 = v5;
    }
    else
    {
      v4 = (v19 - 1) & v5;
    }
    goto LABEL_92;
  }
LABEL_282:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"\n", 1);
  *(_DWORD *)(a1 + 16) += 4;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
}

void sub_1C326D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  _QWORD *v39;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](1, v39);
  if (v38)
    operator delete(v38);
  if (a23)
    operator delete(a23);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:ne180100](char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 64))
        *(i - 64) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
  }
}

void siri::ontology::UsoEntityNode::getIdentifiers(siri::ontology::UsoEntityNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = (_QWORD *)*a2;
        v10 = ((uint64_t)v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            v16 = *--v5;
            *--v15 = v16;
          }
          while (v5 != v9);
          v5 = (_QWORD *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = v6;
        v8 = v5 + 1;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C326DBA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoIdentifier>*,std::reference_wrapper<siri::ontology::UsoIdentifier>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C326DC38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntityNode::getEntitySpans(siri::ontology::UsoEntityNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 10);
  v3 = (uint64_t *)*((_QWORD *)this + 11);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = (_QWORD *)*a2;
        v10 = ((uint64_t)v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            v16 = *--v5;
            *--v15 = v16;
          }
          while (v5 != v9);
          v5 = (_QWORD *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = v6;
        v8 = v5 + 1;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C326DD68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoEntitySpan>*,std::reference_wrapper<siri::ontology::UsoEntitySpan>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C326DE00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::~sp_counted_impl_pd()
{
  JUMPOUT(0x1C3BD1618);
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    JUMPOUT(0x1C3BD1600);
  return result;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001C33BCDA3))
    return a1 + 24;
  else
    return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t siri::ontology::UsoGraph::prettyPrint(siri::ontology::UsoGraph *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  siri::ontology::UsoGraph::prettyPrint((uint64_t *)this, v2);
  std::stringbuf::str();
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

void sub_1C326DF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x10B3C4083609F1ALL);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(siri::ontology::UsoEntityNode **this)
{
  unint64_t *v1;
  _QWORD *v2;
  unint64_t *v3;
  std::string::size_type v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  _OWORD *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t **v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t **v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *i;
  siri::ontology::UsoIdentifier **v42;
  siri::ontology::UsoIdentifier **v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  siri::ontology::UsoUtteranceAlignment **v48;
  void *v49;
  siri::ontology::UsoUtteranceAlignment **v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *j;
  siri::ontology::UsoEntitySpan **v60;
  siri::ontology::UsoEntitySpan **v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  unint64_t *__p;
  unint64_t *__pa;
  void *v69;
  uint64_t v70;
  unsigned __int8 v71;
  void *v72[2];
  __int128 v73;
  std::string v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  uint64_t v79[3];
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  int v86;
  __int128 v87;
  __int128 v88;
  int v89;
  __int128 v90;
  __int128 v91;
  int v92;
  _QWORD v93[11];
  char v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t *v97;
  _QWORD v98[3];
  unint64_t *v99;
  _QWORD v100[3];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v93);
  v90 = 0u;
  v91 = 0u;
  v92 = 1065353216;
  v87 = 0u;
  v88 = 0u;
  v89 = 1065353216;
  v84 = 0u;
  v85 = 0u;
  v86 = 1065353216;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Root\n", 5);
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::adjacency_list((uint64_t)v79);
  siri::ontology::UsoGraph::getNodes((siri::ontology::UsoGraph *)this, &v76);
  v1 = v77;
  __p = v76;
  if (v76 != v77)
  {
    v2 = v81;
    v3 = v76;
    do
    {
      v4 = *v3;
      v73 = 0u;
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = 0u;
      *(_OWORD *)v72 = 0u;
      v74.__r_.__value_.__r.__words[2] = v4;
      if ((unint64_t)v2 >= v82)
      {
        v5 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v2 - v80) >> 3);
        v6 = v5 + 1;
        if ((unint64_t)(v5 + 1) > 0x492492492492492)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v82 - v80) >> 3) > v6)
          v6 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v82 - v80) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v82 - v80) >> 3)) >= 0x249249249249249)
          v7 = 0x492492492492492;
        else
          v7 = v6;
        v98[2] = &v82;
        if (v7)
          v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(v7);
        else
          v8 = 0;
        v9 = (unint64_t *)(v7 + 56 * v5);
        v96 = (unint64_t *)v7;
        v97 = v9;
        v98[1] = v7 + 56 * v8;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v72[0] = 0;
        v72[1] = 0;
        *(_QWORD *)&v73 = 0;
        v9[3] = 0;
        v9[4] = 0;
        v9[5] = 0;
        v9[6] = v4;
        v98[0] = v9 + 7;
        std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer(&v80, &v96);
        v2 = v81;
        std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer((uint64_t)&v96);
      }
      else
      {
        v2[2] = 0;
        v2[3] = 0;
        *v2 = 0;
        v2[1] = 0;
        v2[4] = 0;
        v2[5] = 0;
        v2[6] = v4;
        v2 += 7;
      }
      v81 = v2;
      ++v3;
    }
    while (v3 != v1);
  }
  if (__p)
    operator delete(__p);
  siri::ontology::UsoGraph::getEdges((siri::ontology::UsoGraph *)this, &v76);
  v11 = v76;
  v10 = v77;
  if (v76 != v77)
  {
    v12 = v76;
    do
    {
      v13 = (_OWORD *)*v12;
      *(_OWORD *)v72 = *(_OWORD *)*v12;
      LODWORD(v73) = *((_DWORD *)v13 + 4);
      if (*((char *)v13 + 55) < 0)
        std::string::__init_copy_ctor_external(&v74, *((const std::string::value_type **)v13 + 4), *((_QWORD *)v13 + 5));
      else
        v74 = *(std::string *)(v13 + 2);
      v75 = *((_QWORD *)v13 + 7);
      *((_QWORD *)&v73 + 1) = off_1E7D217A0;
      v14 = v72[0];
      v15 = v72[1];
      if (v72[0] <= v72[1])
        v16 = (unint64_t)v72[1];
      else
        v16 = (unint64_t)v72[0];
      if (v16 >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v81 - v80) >> 3))
        std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize(&v80, v16 + 1);
      boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>((uint64_t)&v96, (uint64_t)v14, (uint64_t)v15, (__int128 *)v72, v79);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (v12 != v10);
  }
  if (v11)
    operator delete(v11);
  v72[1] = v93;
  LODWORD(v73) = 4;
  *((_QWORD *)&v73 + 1) = &v90;
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  v74.__r_.__value_.__l.__size_ = (std::string::size_type)&v84;
  boost::graph::detail::depth_first_search_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>>::operator()<boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor,siri::ontology::PrintGraphVisitor const>,boost::parameter::aux::empty_arg_list,std::integral_constant<BOOL,true>>>((uint64_t)v79, v72);
  v17 = (uint64_t **)v91;
  v97 = 0;
  v98[0] = 0;
  v96 = 0;
  if ((_QWORD)v91)
  {
    v18 = -1;
    v19 = (_QWORD *)v91;
    do
    {
      v20 = v18;
      v19 = (_QWORD *)*v19;
      ++v18;
    }
    while (v19);
    v76 = (unint64_t *)&v96;
    LOBYTE(v77) = 0;
    if (v18 >= 0x7FFFFFFFFFFFFFFLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v21 = v20 + 2;
    v96 = (unint64_t *)operator new(32 * (v20 + 2));
    v97 = v96;
    v98[0] = &v96[4 * v21];
    v69 = v96;
    v100[0] = v96;
    v72[0] = v98;
    v72[1] = v100;
    *(_QWORD *)&v73 = &v69;
    v22 = v96;
    BYTE8(v73) = 0;
    do
    {
      *v22 = (unint64_t)v17[2];
      v22[2] = 0;
      v22[3] = 0;
      v22[1] = 0;
      std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoIdentifier>*,std::reference_wrapper<siri::ontology::UsoIdentifier>*>(v22 + 1, v17[3], (uint64_t)v17[4], v17[4] - v17[3]);
      v17 = (uint64_t **)*v17;
      v22 = (unint64_t *)((char *)v69 + 32);
      v69 = (char *)v69 + 32;
    }
    while (v17);
    BYTE8(v73) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v72);
    v97 = v22;
  }
  else
  {
    v22 = 0;
  }
  v23 = (_QWORD *)v88;
  if ((_QWORD)v88)
  {
    v24 = -1;
    v25 = (_QWORD *)v88;
    do
    {
      v26 = v24;
      v25 = (_QWORD *)*v25;
      ++v24;
    }
    while (v25);
    if (v24 >= 0xFFFFFFFFFFFFFFFLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    __pa = (unint64_t *)operator new(16 * (v26 + 2));
    v27 = __pa;
    do
    {
      *v27 = v23[2];
      v27[1] = v23[3];
      v23 = (_QWORD *)*v23;
      v27 += 2;
    }
    while (v23);
  }
  else
  {
    __pa = 0;
    v27 = 0;
  }
  v28 = (uint64_t **)v85;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  if ((_QWORD)v85)
  {
    v29 = -1;
    v30 = (_QWORD *)v85;
    do
    {
      v31 = v29;
      v30 = (_QWORD *)*v30;
      ++v29;
    }
    while (v30);
    v69 = &v76;
    LOBYTE(v70) = 0;
    if (v29 >= 0x7FFFFFFFFFFFFFFLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v32 = v31 + 2;
    v76 = (unint64_t *)operator new(32 * (v31 + 2));
    v77 = v76;
    v78 = &v76[4 * v32];
    v99 = v76;
    v100[0] = v76;
    v72[0] = &v78;
    v72[1] = &v99;
    *(_QWORD *)&v73 = v100;
    v33 = v76;
    BYTE8(v73) = 0;
    do
    {
      *v33 = (unint64_t)v28[2];
      v33[2] = 0;
      v33[3] = 0;
      v33[1] = 0;
      std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoEntitySpan>*,std::reference_wrapper<siri::ontology::UsoEntitySpan>*>(v33 + 1, v28[3], (uint64_t)v28[4], v28[4] - v28[3]);
      v28 = (uint64_t **)*v28;
      v33 = (unint64_t *)(v100[0] + 32);
      v100[0] += 32;
    }
    while (v28);
    BYTE8(v73) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v72);
    v77 = v33;
    v22 = v97;
  }
  v34 = 126 - 2 * __clz(((char *)v27 - (char *)__pa) >> 4);
  if (v27 == __pa)
    v35 = 0;
  else
    v35 = v34;
  v36 = 126 - 2 * __clz(((char *)v22 - (char *)v96) >> 5);
  if (v22 == v96)
    v37 = 0;
  else
    v37 = v36;
  std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *,false>(v96, v22, v37, 1);
  std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *,false>((unint64_t)__pa, v27, v35, 1);
  v38 = 126 - 2 * __clz(((char *)v77 - (char *)v76) >> 5);
  if (v77 == v76)
    v39 = 0;
  else
    v39 = v38;
  std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,false>(v76, v77, v39, 1);
  if (v96 != v97)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Identifiers:", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    v40 = v96;
    for (i = v97; v40 != i; v40 += 4)
    {
      v43 = (siri::ontology::UsoIdentifier **)v40[1];
      v42 = (siri::ontology::UsoIdentifier **)v40[2];
      while (v43 != v42)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"    Identifier[nodeIndex=", 25);
        v44 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
        siri::ontology::UsoIdentifier::toString((uint64_t *)v72, *v43);
        if ((SBYTE7(v73) & 0x80u) == 0)
          v45 = v72;
        else
          v45 = (void **)v72[0];
        if ((SBYTE7(v73) & 0x80u) == 0)
          v46 = BYTE7(v73);
        else
          v46 = (uint64_t)v72[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"]\n", 2);
        if (SBYTE7(v73) < 0)
          operator delete(v72[0]);
        ++v43;
      }
    }
  }
  if (*((_QWORD *)this[11] + 7) != *((_QWORD *)this[11] + 8) || v27 != __pa)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"UtteranceAlignments:", 20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    siri::ontology::UsoEntityNode::getUtteranceAlignments(this[11], (char **)v72);
    v49 = v72[0];
    v48 = (siri::ontology::UsoUtteranceAlignment **)v72[1];
    if (v72[0] != v72[1])
    {
      v50 = (siri::ontology::UsoUtteranceAlignment **)v72[0];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"    UtteranceAlignment[nodeIndex=", 33);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
        siri::ontology::UsoUtteranceAlignment::toString((uint64_t *)&v69, *v50);
        if ((v71 & 0x80u) == 0)
          v52 = &v69;
        else
          v52 = v69;
        if ((v71 & 0x80u) == 0)
          v53 = v71;
        else
          v53 = v70;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"]\n", 2);
        if ((char)v71 < 0)
          operator delete(v69);
        ++v50;
      }
      while (v50 != v48);
    }
    if (v49)
      operator delete(v49);
    if (v27 != __pa)
    {
      v54 = __pa;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"    UtteranceAlignment[nodeIndex=", 33);
        v55 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", ", 2);
        siri::ontology::UsoUtteranceAlignment::toString((uint64_t *)v72, (siri::ontology::UsoUtteranceAlignment *)v54[1]);
        if ((SBYTE7(v73) & 0x80u) == 0)
          v56 = v72;
        else
          v56 = (void **)v72[0];
        if ((SBYTE7(v73) & 0x80u) == 0)
          v57 = BYTE7(v73);
        else
          v57 = (uint64_t)v72[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"]\n", 2);
        if (SBYTE7(v73) < 0)
          operator delete(v72[0]);
        v54 += 2;
      }
      while (v54 != v27);
    }
  }
  if (v76 != v77)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"EntitySpans:", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    v58 = v76;
    for (j = v77; v58 != j; v58 += 4)
    {
      v61 = (siri::ontology::UsoEntitySpan **)v58[1];
      v60 = (siri::ontology::UsoEntitySpan **)v58[2];
      while (v61 != v60)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"    EntitySpan[nodeIndex=", 25);
        v62 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", ", 2);
        siri::ontology::UsoEntitySpan::toString((uint64_t *)v72, *v61);
        if ((SBYTE7(v73) & 0x80u) == 0)
          v63 = v72;
        else
          v63 = (void **)v72[0];
        if ((SBYTE7(v73) & 0x80u) == 0)
          v64 = BYTE7(v73);
        else
          v64 = (uint64_t)v72[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"]\n", 2);
        if (SBYTE7(v73) < 0)
          operator delete(v72[0]);
        ++v61;
      }
    }
  }
  std::stringbuf::str();
  v72[0] = &v76;
  std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (__pa)
    operator delete(__pa);
  v72[0] = &v96;
  std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (v83)
    MEMORY[0x1C3BD1618](v83, 0xC400A2AC0F1);
  v72[0] = &v80;
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear(v79);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&v84);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&v87);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&v90);
  v93[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v93 + *(_QWORD *)(v93[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v93[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v94 < 0)
    operator delete((void *)v93[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BD1594](&v95);
}

void sub_1C326E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  a12 = &a32;
  std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
    operator delete(__p);
  a32 = v60 - 152;
  std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::~adjacency_list((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&a42);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a48);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&a54);
  std::ostringstream::~ostringstream((uint64_t)&a60);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex::~stored_vertex(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  void *v35;
  BOOL v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  unint64_t *v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  BOOL v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t *v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  BOOL v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  void *v115;
  unint64_t *v116;
  __int128 v117;
  __int128 v118;
  __int128 v120;
  __int128 v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;

LABEL_1:
  v122 = a2 - 4;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = ((char *)a2 - (char *)v7) >> 5;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v54 = *v7;
        if (*v122 < *v7)
        {
          v55 = v7[1];
          v56 = *(a2 - 3);
          *v7 = *v122;
          v7[1] = v56;
          *(a2 - 4) = v54;
          *(a2 - 3) = v55;
          v57 = v7[2];
          v7[2] = *(a2 - 2);
          *(a2 - 2) = v57;
          v58 = v7[3];
          v7[3] = *(a2 - 1);
          *(a2 - 1) = v58;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v7, v7 + 4, v122);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v7, v7 + 4, v7 + 8, v122);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(v7, v7 + 4, v7 + 8, v7 + 12, v122);
        return;
      default:
        if (v8 <= 767)
        {
          v59 = v7 + 4;
          v61 = v7 == a2 || v59 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v61)
            {
              v62 = 0;
              v63 = v7;
              do
              {
                v64 = v59;
                v65 = v63[4];
                v66 = *v63;
                if (v65 < *v63)
                {
                  v67 = v63[5];
                  v123 = *((_OWORD *)v63 + 3);
                  v63[6] = 0;
                  v63[7] = 0;
                  v63[5] = 0;
                  v68 = v62;
                  v69 = (void *)v64[1];
                  while (1)
                  {
                    v70 = (char *)a1 + v68;
                    *(unint64_t *)((char *)a1 + v68 + 32) = v66;
                    if (v69)
                    {
                      *((_QWORD *)v70 + 6) = v69;
                      operator delete(v69);
                      *((_QWORD *)v70 + 7) = 0;
                    }
                    *(_OWORD *)(v70 + 40) = *(_OWORD *)(v70 + 8);
                    *((_QWORD *)v70 + 7) = *((_QWORD *)v70 + 3);
                    *((_QWORD *)v70 + 1) = 0;
                    *((_QWORD *)v70 + 2) = 0;
                    *((_QWORD *)v70 + 3) = 0;
                    if (!v68)
                      break;
                    v69 = 0;
                    v71 = (char *)a1 + v68;
                    v66 = *(unint64_t *)((char *)a1 + v68 - 32);
                    v68 -= 32;
                    if (v65 >= v66)
                    {
                      v72 = (uint64_t)a1 + v68 + 32;
                      v73 = (unint64_t *)(v71 + 8);
                      goto LABEL_84;
                    }
                  }
                  v73 = a1 + 1;
                  v72 = (uint64_t)a1;
LABEL_84:
                  *(_QWORD *)v72 = v65;
                  *v73 = v67;
                  *(_OWORD *)(v72 + 16) = v123;
                }
                v59 = v64 + 4;
                v62 += 32;
                v63 = v64;
              }
              while (v64 + 4 != a2);
            }
          }
          else if (!v61)
          {
            v109 = v7 + 3;
            do
            {
              v110 = v59;
              v111 = a1[4];
              v112 = *a1;
              if (v111 < *a1)
              {
                v124 = *(_OWORD *)(a1 + 5);
                v113 = a1[7];
                a1[6] = 0;
                a1[7] = 0;
                a1[5] = 0;
                v114 = v109;
                v115 = (void *)v110[1];
                do
                {
                  v114[1] = v112;
                  if (v115)
                  {
                    v114[3] = (unint64_t)v115;
                    operator delete(v115);
                    v114[4] = 0;
                  }
                  v115 = 0;
                  v116 = v114 - 2;
                  *((_OWORD *)v114 + 1) = *((_OWORD *)v114 - 1);
                  v114[4] = *v114;
                  v116[1] = 0;
                  *v114 = 0;
                  *v116 = 0;
                  v112 = *(v114 - 7);
                  v114 -= 4;
                }
                while (v111 < v112);
                v114[1] = v111;
                *((_OWORD *)v114 + 1) = v124;
                v114[4] = v113;
              }
              v59 = v110 + 4;
              v109 += 4;
              a1 = v110;
            }
            while (v110 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v74 = (v9 - 2) >> 1;
          v75 = v74;
          do
          {
            v76 = v75;
            if (v74 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = &v7[4 * v77];
              if (2 * v76 + 2 >= (uint64_t)v9)
              {
                v79 = *v78;
              }
              else
              {
                v79 = v78[4];
                v80 = *v78 >= v79;
                if (*v78 > v79)
                  v79 = *v78;
                if (!v80)
                {
                  v78 += 4;
                  v77 = 2 * v76 + 2;
                }
              }
              v81 = &v7[4 * v76];
              v82 = *v81;
              if (v79 >= *v81)
              {
                v83 = &v7[4 * v76];
                v84 = *(_OWORD *)(v83 + 1);
                v85 = v83[3];
                v83[2] = 0;
                v83[3] = 0;
                v83[1] = 0;
                v86 = *v78;
                do
                {
                  v87 = v81;
                  v81 = v78;
                  *v87 = v86;
                  *(_OWORD *)(v87 + 1) = *(_OWORD *)(v78 + 1);
                  v87[3] = v78[3];
                  v78[1] = 0;
                  v78[2] = 0;
                  v78[3] = 0;
                  if (v74 < v77)
                    break;
                  v88 = (2 * v77) | 1;
                  v78 = &v7[4 * v88];
                  v77 = 2 * v77 + 2;
                  if (v77 >= (uint64_t)v9)
                  {
                    v86 = *v78;
                    v77 = v88;
                  }
                  else
                  {
                    v86 = *v78;
                    v89 = v78[4];
                    if (*v78 <= v89)
                      v86 = v78[4];
                    if (*v78 >= v89)
                      v77 = v88;
                    else
                      v78 += 4;
                  }
                }
                while (v86 >= v82);
                *v81 = v82;
                *(_OWORD *)(v81 + 1) = v84;
                v81[3] = v85;
              }
            }
            v75 = v76 - 1;
          }
          while (v76);
          v90 = (unint64_t)v8 >> 5;
          while (2)
          {
            v91 = 0;
            v92 = *v7;
            v93 = v7[1];
            v94 = v7[2];
            v95 = v7[3];
            v7[1] = 0;
            v7[2] = 0;
            v96 = (uint64_t)v7;
            v7[3] = 0;
            do
            {
              v97 = v96 + 32 * v91 + 32;
              v98 = (2 * v91) | 1;
              v91 = 2 * v91 + 2;
              if (v91 >= v90)
              {
                v99 = *(_QWORD *)v97;
                v91 = v98;
              }
              else
              {
                v99 = *(_QWORD *)v97;
                v100 = *(_QWORD *)(v97 + 32);
                if (*(_QWORD *)v97 <= v100)
                  v99 = *(_QWORD *)(v97 + 32);
                if (*(_QWORD *)v97 >= v100)
                  v91 = v98;
                else
                  v97 += 32;
              }
              *(_QWORD *)v96 = v99;
              *(_OWORD *)(v96 + 8) = *(_OWORD *)(v97 + 8);
              *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
              *(_QWORD *)(v97 + 8) = 0;
              *(_QWORD *)(v97 + 16) = 0;
              *(_QWORD *)(v97 + 24) = 0;
              v96 = v97;
            }
            while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
            if ((unint64_t *)v97 != a2 - 4)
            {
              *(_QWORD *)v97 = *(a2 - 4);
              *(_OWORD *)(v97 + 8) = *(_OWORD *)(a2 - 3);
              *(_QWORD *)(v97 + 24) = *(a2 - 1);
              *(a2 - 4) = v92;
              *(a2 - 3) = v93;
              *(a2 - 2) = v94;
              *(a2 - 1) = v95;
              v101 = v97 - (_QWORD)v7 + 32;
              if (v101 >= 33)
              {
                v102 = (((unint64_t)v101 >> 5) - 2) >> 1;
                v103 = &v7[4 * v102];
                v104 = *(_QWORD *)v97;
                if (*v103 < *(_QWORD *)v97)
                {
                  v105 = *(_QWORD *)(v97 + 8);
                  v94 = *(_QWORD *)(v97 + 16);
                  v95 = *(_QWORD *)(v97 + 24);
                  *(_QWORD *)(v97 + 8) = 0;
                  *(_QWORD *)(v97 + 16) = 0;
                  *(_QWORD *)(v97 + 24) = 0;
                  v106 = *v103;
                  do
                  {
                    v107 = v97;
                    v97 = (uint64_t)v103;
                    *(_QWORD *)v107 = v106;
                    *(_OWORD *)(v107 + 8) = *(_OWORD *)(v103 + 1);
                    *(_QWORD *)(v107 + 24) = v103[3];
                    v103[1] = 0;
                    v103[2] = 0;
                    v103[3] = 0;
                    if (!v102)
                      break;
                    v102 = (v102 - 1) >> 1;
                    v103 = &v7[4 * v102];
                    v106 = *v103;
                  }
                  while (*v103 < v104);
                  *(_QWORD *)v97 = v104;
                  *(_QWORD *)(v97 + 8) = v105;
LABEL_128:
                  *(_QWORD *)(v97 + 16) = v94;
                  *(_QWORD *)(v97 + 24) = v95;
                }
              }
              a2 -= 4;
              if (v90-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_QWORD *)v97 = v92;
          *(_QWORD *)(v97 + 8) = v93;
          goto LABEL_128;
        }
        v10 = v9 >> 1;
        v11 = &v7[4 * (v9 >> 1)];
        if ((unint64_t)v8 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(&a1[4 * (v9 >> 1)], a1, v122);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, &a1[4 * (v9 >> 1)], v122);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1 + 4, v11 - 4, a2 - 8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1 + 8, &a1[4 * v10 + 4], a2 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v11 - 4, v11, &a1[4 * v10 + 4]);
          v12 = *a1;
          *a1 = *v11;
          *v11 = v12;
          v13 = *(_OWORD *)(a1 + 1);
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(v11 + 1);
          *(_OWORD *)(v11 + 1) = v13;
          v14 = a1[3];
          a1[3] = v11[3];
          v11[3] = v14;
        }
        --a3;
        v15 = *a1;
        if ((a4 & 1) == 0 && *(a1 - 4) >= v15)
        {
          v37 = *(_OWORD *)(a1 + 1);
          v38 = a1[3];
          a1[1] = 0;
          a1[2] = 0;
          a1[3] = 0;
          if (v15 >= *v122)
          {
            v40 = a1 + 4;
            do
            {
              v7 = v40;
              if (v40 >= a2)
                break;
              v40 += 4;
            }
            while (v15 >= *v7);
          }
          else
          {
            v7 = a1;
            do
            {
              v39 = v7[4];
              v7 += 4;
            }
            while (v15 >= v39);
          }
          v41 = a2;
          if (v7 < a2)
          {
            v41 = a2;
            do
            {
              v42 = *(v41 - 4);
              v41 -= 4;
            }
            while (v15 < v42);
          }
          if (v7 < v41)
          {
            v43 = *v7;
            v44 = *v41;
            do
            {
              v45 = v7[1];
              v46 = v41[1];
              *v7 = v44;
              v7[1] = v46;
              *v41 = v43;
              v41[1] = v45;
              v47 = v7[2];
              v7[2] = v41[2];
              v41[2] = v47;
              v48 = v7[3];
              v7[3] = v41[3];
              v41[3] = v48;
              do
              {
                v49 = v7[4];
                v7 += 4;
                v43 = v49;
              }
              while (v15 >= v49);
              do
              {
                v50 = *(v41 - 4);
                v41 -= 4;
                v44 = v50;
              }
              while (v15 < v50);
            }
            while (v7 < v41);
          }
          if (v7 - 4 == a1)
          {
            v53 = (void *)*(v7 - 3);
            *(v7 - 4) = v15;
            if (v53)
            {
              *(v7 - 2) = (unint64_t)v53;
              v121 = v37;
              operator delete(v53);
              v37 = v121;
            }
          }
          else
          {
            *a1 = *(v7 - 4);
            v51 = (void *)a1[1];
            if (v51)
            {
              a1[2] = (unint64_t)v51;
              v120 = v37;
              operator delete(v51);
              v37 = v120;
              a1[1] = 0;
              a1[2] = 0;
              a1[3] = 0;
            }
            v52 = v7 - 3;
            *(_OWORD *)(a1 + 1) = *(_OWORD *)(v7 - 3);
            a1[3] = *(v7 - 1);
            *v52 = 0;
            v52[1] = 0;
            v52[2] = 0;
            *(v7 - 4) = v15;
          }
          a4 = 0;
          *(_OWORD *)(v7 - 3) = v37;
          *(v7 - 1) = v38;
          continue;
        }
        v16 = *(_OWORD *)(a1 + 1);
        v17 = a1[3];
        a1[1] = 0;
        a1[2] = 0;
        a1[3] = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v21 = v18[4];
          v18 += 4;
          v20 = v21;
        }
        while (v21 < v15);
        v22 = a2;
        if (v19 == a1)
        {
          v22 = a2;
          do
          {
            if (v18 >= v22)
              break;
            v24 = *(v22 - 4);
            v22 -= 4;
          }
          while (v24 >= v15);
        }
        else
        {
          do
          {
            v23 = *(v22 - 4);
            v22 -= 4;
          }
          while (v23 >= v15);
        }
        if (v18 >= v22)
        {
          v7 = v18;
        }
        else
        {
          v25 = *v22;
          v7 = v18;
          v26 = v22;
          do
          {
            v27 = v7[1];
            v28 = v26[1];
            *v7 = v25;
            v7[1] = v28;
            *v26 = v20;
            v26[1] = v27;
            v29 = v7[2];
            v7[2] = v26[2];
            v26[2] = v29;
            v30 = v7[3];
            v7[3] = v26[3];
            v26[3] = v30;
            do
            {
              v31 = v7[4];
              v7 += 4;
              v20 = v31;
            }
            while (v31 < v15);
            do
            {
              v32 = *(v26 - 4);
              v26 -= 4;
              v25 = v32;
            }
            while (v32 >= v15);
          }
          while (v7 < v26);
        }
        if (v7 - 4 == a1)
        {
          v35 = (void *)*(v7 - 3);
          *(v7 - 4) = v15;
          if (v35)
          {
            *(v7 - 2) = (unint64_t)v35;
            v118 = v16;
            operator delete(v35);
            v16 = v118;
          }
        }
        else
        {
          *a1 = *(v7 - 4);
          v33 = (void *)a1[1];
          if (v33)
          {
            a1[2] = (unint64_t)v33;
            v117 = v16;
            operator delete(v33);
            v16 = v117;
            a1[1] = 0;
            a1[2] = 0;
            a1[3] = 0;
          }
          v34 = v7 - 3;
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(v7 - 3);
          a1[3] = *(v7 - 1);
          *v34 = 0;
          v34[1] = 0;
          v34[2] = 0;
          *(v7 - 4) = v15;
        }
        *(_OWORD *)(v7 - 3) = v16;
        *(v7 - 1) = v17;
        if (v18 < v22)
        {
LABEL_35:
          std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *,false>(a1, v7 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *>(a1, v7 - 4);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *>(v7, a2))
        {
          if (v36)
            continue;
          goto LABEL_35;
        }
        a2 = v7 - 4;
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

  v122 = a2 - 4;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = ((char *)a2 - (char *)v7) >> 5;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v54 = *v7;
        if (*v122 < *v7)
        {
          v55 = v7[1];
          v56 = *(a2 - 3);
          *v7 = *v122;
          v7[1] = v56;
          *(a2 - 4) = v54;
          *(a2 - 3) = v55;
          v57 = v7[2];
          v7[2] = *(a2 - 2);
          *(a2 - 2) = v57;
          v58 = v7[3];
          v7[3] = *(a2 - 1);
          *(a2 - 1) = v58;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v7, v7 + 4, v122);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v7, v7 + 4, v7 + 8, v122);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(v7, v7 + 4, v7 + 8, v7 + 12, v122);
        return;
      default:
        if (v8 <= 767)
        {
          v59 = v7 + 4;
          v61 = v7 == a2 || v59 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v61)
            {
              v62 = 0;
              v63 = v7;
              do
              {
                v64 = v59;
                v65 = v63[4];
                v66 = *v63;
                if (v65 < *v63)
                {
                  v67 = v63[5];
                  v123 = *((_OWORD *)v63 + 3);
                  v63[6] = 0;
                  v63[7] = 0;
                  v63[5] = 0;
                  v68 = v62;
                  v69 = (void *)v64[1];
                  while (1)
                  {
                    v70 = (char *)a1 + v68;
                    *(unint64_t *)((char *)a1 + v68 + 32) = v66;
                    if (v69)
                    {
                      *((_QWORD *)v70 + 6) = v69;
                      operator delete(v69);
                      *((_QWORD *)v70 + 7) = 0;
                    }
                    *(_OWORD *)(v70 + 40) = *(_OWORD *)(v70 + 8);
                    *((_QWORD *)v70 + 7) = *((_QWORD *)v70 + 3);
                    *((_QWORD *)v70 + 1) = 0;
                    *((_QWORD *)v70 + 2) = 0;
                    *((_QWORD *)v70 + 3) = 0;
                    if (!v68)
                      break;
                    v69 = 0;
                    v71 = (char *)a1 + v68;
                    v66 = *(unint64_t *)((char *)a1 + v68 - 32);
                    v68 -= 32;
                    if (v65 >= v66)
                    {
                      v72 = (uint64_t)a1 + v68 + 32;
                      v73 = (unint64_t *)(v71 + 8);
                      goto LABEL_84;
                    }
                  }
                  v73 = a1 + 1;
                  v72 = (uint64_t)a1;
LABEL_84:
                  *(_QWORD *)v72 = v65;
                  *v73 = v67;
                  *(_OWORD *)(v72 + 16) = v123;
                }
                v59 = v64 + 4;
                v62 += 32;
                v63 = v64;
              }
              while (v64 + 4 != a2);
            }
          }
          else if (!v61)
          {
            v109 = v7 + 3;
            do
            {
              v110 = v59;
              v111 = a1[4];
              v112 = *a1;
              if (v111 < *a1)
              {
                v124 = *(_OWORD *)(a1 + 5);
                v113 = a1[7];
                a1[6] = 0;
                a1[7] = 0;
                a1[5] = 0;
                v114 = v109;
                v115 = (void *)v110[1];
                do
                {
                  v114[1] = v112;
                  if (v115)
                  {
                    v114[3] = (unint64_t)v115;
                    operator delete(v115);
                    v114[4] = 0;
                  }
                  v115 = 0;
                  v116 = v114 - 2;
                  *((_OWORD *)v114 + 1) = *((_OWORD *)v114 - 1);
                  v114[4] = *v114;
                  v116[1] = 0;
                  *v114 = 0;
                  *v116 = 0;
                  v112 = *(v114 - 7);
                  v114 -= 4;
                }
                while (v111 < v112);
                v114[1] = v111;
                *((_OWORD *)v114 + 1) = v124;
                v114[4] = v113;
              }
              v59 = v110 + 4;
              v109 += 4;
              a1 = v110;
            }
            while (v110 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v74 = (v9 - 2) >> 1;
          v75 = v74;
          do
          {
            v76 = v75;
            if (v74 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = &v7[4 * v77];
              if (2 * v76 + 2 >= (uint64_t)v9)
              {
                v79 = *v78;
              }
              else
              {
                v79 = v78[4];
                v80 = *v78 >= v79;
                if (*v78 > v79)
                  v79 = *v78;
                if (!v80)
                {
                  v78 += 4;
                  v77 = 2 * v76 + 2;
                }
              }
              v81 = &v7[4 * v76];
              v82 = *v81;
              if (v79 >= *v81)
              {
                v83 = &v7[4 * v76];
                v84 = *(_OWORD *)(v83 + 1);
                v85 = v83[3];
                v83[2] = 0;
                v83[3] = 0;
                v83[1] = 0;
                v86 = *v78;
                do
                {
                  v87 = v81;
                  v81 = v78;
                  *v87 = v86;
                  *(_OWORD *)(v87 + 1) = *(_OWORD *)(v78 + 1);
                  v87[3] = v78[3];
                  v78[1] = 0;
                  v78[2] = 0;
                  v78[3] = 0;
                  if (v74 < v77)
                    break;
                  v88 = (2 * v77) | 1;
                  v78 = &v7[4 * v88];
                  v77 = 2 * v77 + 2;
                  if (v77 >= (uint64_t)v9)
                  {
                    v86 = *v78;
                    v77 = v88;
                  }
                  else
                  {
                    v86 = *v78;
                    v89 = v78[4];
                    if (*v78 <= v89)
                      v86 = v78[4];
                    if (*v78 >= v89)
                      v77 = v88;
                    else
                      v78 += 4;
                  }
                }
                while (v86 >= v82);
                *v81 = v82;
                *(_OWORD *)(v81 + 1) = v84;
                v81[3] = v85;
              }
            }
            v75 = v76 - 1;
          }
          while (v76);
          v90 = (unint64_t)v8 >> 5;
          while (2)
          {
            v91 = 0;
            v92 = *v7;
            v93 = v7[1];
            v94 = v7[2];
            v95 = v7[3];
            v7[1] = 0;
            v7[2] = 0;
            v96 = (uint64_t)v7;
            v7[3] = 0;
            do
            {
              v97 = v96 + 32 * v91 + 32;
              v98 = (2 * v91) | 1;
              v91 = 2 * v91 + 2;
              if (v91 >= v90)
              {
                v99 = *(_QWORD *)v97;
                v91 = v98;
              }
              else
              {
                v99 = *(_QWORD *)v97;
                v100 = *(_QWORD *)(v97 + 32);
                if (*(_QWORD *)v97 <= v100)
                  v99 = *(_QWORD *)(v97 + 32);
                if (*(_QWORD *)v97 >= v100)
                  v91 = v98;
                else
                  v97 += 32;
              }
              *(_QWORD *)v96 = v99;
              *(_OWORD *)(v96 + 8) = *(_OWORD *)(v97 + 8);
              *(_QWORD *)(v96 + 24) = *(_QWORD *)(v97 + 24);
              *(_QWORD *)(v97 + 8) = 0;
              *(_QWORD *)(v97 + 16) = 0;
              *(_QWORD *)(v97 + 24) = 0;
              v96 = v97;
            }
            while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
            if ((unint64_t *)v97 != a2 - 4)
            {
              *(_QWORD *)v97 = *(a2 - 4);
              *(_OWORD *)(v97 + 8) = *(_OWORD *)(a2 - 3);
              *(_QWORD *)(v97 + 24) = *(a2 - 1);
              *(a2 - 4) = v92;
              *(a2 - 3) = v93;
              *(a2 - 2) = v94;
              *(a2 - 1) = v95;
              v101 = v97 - (_QWORD)v7 + 32;
              if (v101 >= 33)
              {
                v102 = (((unint64_t)v101 >> 5) - 2) >> 1;
                v103 = &v7[4 * v102];
                v104 = *(_QWORD *)v97;
                if (*v103 < *(_QWORD *)v97)
                {
                  v105 = *(_QWORD *)(v97 + 8);
                  v94 = *(_QWORD *)(v97 + 16);
                  v95 = *(_QWORD *)(v97 + 24);
                  *(_QWORD *)(v97 + 8) = 0;
                  *(_QWORD *)(v97 + 16) = 0;
                  *(_QWORD *)(v97 + 24) = 0;
                  v106 = *v103;
                  do
                  {
                    v107 = v97;
                    v97 = (uint64_t)v103;
                    *(_QWORD *)v107 = v106;
                    *(_OWORD *)(v107 + 8) = *(_OWORD *)(v103 + 1);
                    *(_QWORD *)(v107 + 24) = v103[3];
                    v103[1] = 0;
                    v103[2] = 0;
                    v103[3] = 0;
                    if (!v102)
                      break;
                    v102 = (v102 - 1) >> 1;
                    v103 = &v7[4 * v102];
                    v106 = *v103;
                  }
                  while (*v103 < v104);
                  *(_QWORD *)v97 = v104;
                  *(_QWORD *)(v97 + 8) = v105;
LABEL_128:
                  *(_QWORD *)(v97 + 16) = v94;
                  *(_QWORD *)(v97 + 24) = v95;
                }
              }
              a2 -= 4;
              if (v90-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_QWORD *)v97 = v92;
          *(_QWORD *)(v97 + 8) = v93;
          goto LABEL_128;
        }
        v10 = v9 >> 1;
        v11 = &v7[4 * (v9 >> 1)];
        if ((unint64_t)v8 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(&a1[4 * (v9 >> 1)], a1, v122);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, &a1[4 * (v9 >> 1)], v122);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1 + 4, v11 - 4, a2 - 8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1 + 8, &a1[4 * v10 + 4], a2 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v11 - 4, v11, &a1[4 * v10 + 4]);
          v12 = *a1;
          *a1 = *v11;
          *v11 = v12;
          v13 = *(_OWORD *)(a1 + 1);
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(v11 + 1);
          *(_OWORD *)(v11 + 1) = v13;
          v14 = a1[3];
          a1[3] = v11[3];
          v11[3] = v14;
        }
        --a3;
        v15 = *a1;
        if ((a4 & 1) == 0 && *(a1 - 4) >= v15)
        {
          v37 = *(_OWORD *)(a1 + 1);
          v38 = a1[3];
          a1[1] = 0;
          a1[2] = 0;
          a1[3] = 0;
          if (v15 >= *v122)
          {
            v40 = a1 + 4;
            do
            {
              v7 = v40;
              if (v40 >= a2)
                break;
              v40 += 4;
            }
            while (v15 >= *v7);
          }
          else
          {
            v7 = a1;
            do
            {
              v39 = v7[4];
              v7 += 4;
            }
            while (v15 >= v39);
          }
          v41 = a2;
          if (v7 < a2)
          {
            v41 = a2;
            do
            {
              v42 = *(v41 - 4);
              v41 -= 4;
            }
            while (v15 < v42);
          }
          if (v7 < v41)
          {
            v43 = *v7;
            v44 = *v41;
            do
            {
              v45 = v7[1];
              v46 = v41[1];
              *v7 = v44;
              v7[1] = v46;
              *v41 = v43;
              v41[1] = v45;
              v47 = v7[2];
              v7[2] = v41[2];
              v41[2] = v47;
              v48 = v7[3];
              v7[3] = v41[3];
              v41[3] = v48;
              do
              {
                v49 = v7[4];
                v7 += 4;
                v43 = v49;
              }
              while (v15 >= v49);
              do
              {
                v50 = *(v41 - 4);
                v41 -= 4;
                v44 = v50;
              }
              while (v15 < v50);
            }
            while (v7 < v41);
          }
          if (v7 - 4 == a1)
          {
            v53 = (void *)*(v7 - 3);
            *(v7 - 4) = v15;
            if (v53)
            {
              *(v7 - 2) = (unint64_t)v53;
              v121 = v37;
              operator delete(v53);
              v37 = v121;
            }
          }
          else
          {
            *a1 = *(v7 - 4);
            v51 = (void *)a1[1];
            if (v51)
            {
              a1[2] = (unint64_t)v51;
              v120 = v37;
              operator delete(v51);
              v37 = v120;
              a1[1] = 0;
              a1[2] = 0;
              a1[3] = 0;
            }
            v52 = v7 - 3;
            *(_OWORD *)(a1 + 1) = *(_OWORD *)(v7 - 3);
            a1[3] = *(v7 - 1);
            *v52 = 0;
            v52[1] = 0;
            v52[2] = 0;
            *(v7 - 4) = v15;
          }
          a4 = 0;
          *(_OWORD *)(v7 - 3) = v37;
          *(v7 - 1) = v38;
          continue;
        }
        v16 = *(_OWORD *)(a1 + 1);
        v17 = a1[3];
        a1[1] = 0;
        a1[2] = 0;
        a1[3] = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v21 = v18[4];
          v18 += 4;
          v20 = v21;
        }
        while (v21 < v15);
        v22 = a2;
        if (v19 == a1)
        {
          v22 = a2;
          do
          {
            if (v18 >= v22)
              break;
            v24 = *(v22 - 4);
            v22 -= 4;
          }
          while (v24 >= v15);
        }
        else
        {
          do
          {
            v23 = *(v22 - 4);
            v22 -= 4;
          }
          while (v23 >= v15);
        }
        if (v18 >= v22)
        {
          v7 = v18;
        }
        else
        {
          v25 = *v22;
          v7 = v18;
          v26 = v22;
          do
          {
            v27 = v7[1];
            v28 = v26[1];
            *v7 = v25;
            v7[1] = v28;
            *v26 = v20;
            v26[1] = v27;
            v29 = v7[2];
            v7[2] = v26[2];
            v26[2] = v29;
            v30 = v7[3];
            v7[3] = v26[3];
            v26[3] = v30;
            do
            {
              v31 = v7[4];
              v7 += 4;
              v20 = v31;
            }
            while (v31 < v15);
            do
            {
              v32 = *(v26 - 4);
              v26 -= 4;
              v25 = v32;
            }
            while (v32 >= v15);
          }
          while (v7 < v26);
        }
        if (v7 - 4 == a1)
        {
          v35 = (void *)*(v7 - 3);
          *(v7 - 4) = v15;
          if (v35)
          {
            *(v7 - 2) = (unint64_t)v35;
            v118 = v16;
            operator delete(v35);
            v16 = v118;
          }
        }
        else
        {
          *a1 = *(v7 - 4);
          v33 = (void *)a1[1];
          if (v33)
          {
            a1[2] = (unint64_t)v33;
            v117 = v16;
            operator delete(v33);
            v16 = v117;
            a1[1] = 0;
            a1[2] = 0;
            a1[3] = 0;
          }
          v34 = v7 - 3;
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(v7 - 3);
          a1[3] = *(v7 - 1);
          *v34 = 0;
          v34[1] = 0;
          v34[2] = 0;
          *(v7 - 4) = v15;
        }
        *(_OWORD *)(v7 - 3) = v16;
        *(v7 - 1) = v17;
        if (v18 < v22)
        {
LABEL_35:
          std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,false>(a1, v7 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, v7 - 4);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v7, a2))
        {
          if (v36)
            continue;
          goto LABEL_35;
        }
        a2 = v7 - 4;
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  BOOL v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *v9;
        if (*v8 < *v9)
        {
          *v9 = *v8;
          *(a2 - 2) = v41;
          v42 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9, v9 + 2, v9 + 4, v9 + 6);
        v43 = v9[6];
        if (*v8 < v43)
        {
          v9[6] = *v8;
          *(a2 - 2) = v43;
          v44 = v9[7];
          v9[7] = *(a2 - 1);
          *(a2 - 1) = v44;
          v45 = v9[6];
          v46 = v9[4];
          if (v45 < v46)
          {
            v47 = v9[5];
            v48 = v9[7];
            v9[4] = v45;
            v9[5] = v48;
            v9[6] = v46;
            v9[7] = v47;
            v49 = v9[2];
            if (v45 < v49)
            {
              v50 = v9[3];
              v9[2] = v45;
              v9[3] = v48;
              v9[4] = v49;
              v9[5] = v50;
              v51 = *v9;
              if (v45 < *v9)
              {
                v52 = v9[1];
                *v9 = v45;
                v9[1] = v48;
                v9[2] = v51;
                v9[3] = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 383)
        {
          v53 = v9 + 2;
          v55 = v9 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v9;
              do
              {
                v58 = v53;
                v59 = v57[2];
                v60 = *v57;
                if (v59 < *v57)
                {
                  v61 = v57[3];
                  v62 = v56;
                  while (1)
                  {
                    v63 = (char *)v9 + v62;
                    v64 = *(unint64_t *)((char *)v9 + v62 + 8);
                    *((_QWORD *)v63 + 2) = v60;
                    *((_QWORD *)v63 + 3) = v64;
                    if (!v62)
                      break;
                    v60 = *((_QWORD *)v63 - 2);
                    v62 -= 16;
                    if (v59 >= v60)
                    {
                      v65 = (unint64_t *)((char *)v9 + v62 + 16);
                      goto LABEL_79;
                    }
                  }
                  v65 = v9;
LABEL_79:
                  *v65 = v59;
                  v65[1] = v61;
                }
                v53 = v58 + 2;
                v56 += 16;
                v57 = v58;
              }
              while (v58 + 2 != a2);
            }
          }
          else if (!v55)
          {
            v93 = v9 + 3;
            do
            {
              v94 = v53;
              v95 = v7[2];
              v96 = *v7;
              if (v95 < *v7)
              {
                v97 = v7[3];
                v98 = v93;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = v96;
                  v100 = *(v98 - 2);
                  v98 -= 2;
                  *v99 = v100;
                  v96 = *(v99 - 5);
                }
                while (v95 < v96);
                *(v98 - 1) = v95;
                *v98 = v97;
              }
              v53 = v94 + 2;
              v93 += 2;
              v7 = v94;
            }
            while (v94 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v66 = (v11 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[2 * v69];
                if (2 * v68 + 2 >= (uint64_t)v11)
                {
                  v71 = *v70;
                }
                else
                {
                  v71 = v70[2];
                  v72 = *v70 >= v71;
                  if (*v70 > v71)
                    v71 = *v70;
                  if (!v72)
                  {
                    v70 += 2;
                    v69 = 2 * v68 + 2;
                  }
                }
                v73 = &v9[2 * v68];
                v74 = *v73;
                if (v71 >= *v73)
                {
                  v75 = v73[1];
                  do
                  {
                    result = (unint64_t)v73;
                    v73 = v70;
                    *(_QWORD *)result = v71;
                    *(_QWORD *)(result + 8) = v70[1];
                    if (v66 < v69)
                      break;
                    result = (2 * v69) | 1;
                    v70 = &v9[2 * result];
                    v69 = 2 * v69 + 2;
                    if (v69 >= (uint64_t)v11)
                    {
                      v71 = *v70;
                      v69 = result;
                    }
                    else
                    {
                      v71 = *v70;
                      v76 = v70[2];
                      if (*v70 <= v76)
                        v71 = v70[2];
                      if (*v70 >= v76)
                        v69 = result;
                      else
                        v70 += 2;
                    }
                  }
                  while (v71 >= v74);
                  *v73 = v74;
                  v73[1] = v75;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v77 = (unint64_t)v10 >> 4;
            do
            {
              v78 = 0;
              v79 = *v9;
              v80 = v9[1];
              v81 = v9;
              do
              {
                v82 = &v81[2 * v78 + 2];
                v83 = (2 * v78) | 1;
                v78 = 2 * v78 + 2;
                if (v78 >= v77)
                {
                  v84 = *v82;
                  v78 = v83;
                }
                else
                {
                  v84 = *v82;
                  result = v82[2];
                  if (*v82 <= result)
                    v84 = v82[2];
                  if (*v82 >= result)
                    v78 = v83;
                  else
                    v82 += 2;
                }
                *v81 = v84;
                v81[1] = v82[1];
                v81 = v82;
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v82 == a2 - 2)
              {
                *v82 = v79;
                v82[1] = v80;
              }
              else
              {
                *v82 = *(a2 - 2);
                v82[1] = *(a2 - 1);
                *(a2 - 2) = v79;
                *(a2 - 1) = v80;
                v85 = (char *)v82 - (char *)v9 + 16;
                if (v85 >= 17)
                {
                  v86 = (((unint64_t)v85 >> 4) - 2) >> 1;
                  v87 = &v9[2 * v86];
                  v88 = *v87;
                  v89 = *v82;
                  if (*v87 < *v82)
                  {
                    v90 = v82[1];
                    do
                    {
                      v91 = v82;
                      v82 = v87;
                      *v91 = v88;
                      v91[1] = v87[1];
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = &v9[2 * v86];
                      v88 = *v87;
                    }
                    while (*v87 < v89);
                    *v82 = v89;
                    v82[1] = v90;
                  }
                }
              }
              a2 -= 2;
            }
            while (v77-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(&v7[2 * (v11 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v7, &v7[2 * (v11 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v7 + 2, v13 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v13 - 2, v13, &v7[2 * v12 + 2]);
          v14 = *v7;
          v15 = v7[1];
          *(_OWORD *)v7 = *(_OWORD *)v13;
          *v13 = v14;
          v13[1] = v15;
        }
        --a3;
        v16 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 2) >= v16)
        {
          if (v16 >= *v8)
          {
            v32 = v7 + 2;
            do
            {
              v9 = v32;
              if (v32 >= a2)
                break;
              v32 += 2;
            }
            while (v16 >= *v9);
          }
          else
          {
            v9 = v7;
            do
            {
              v31 = v9[2];
              v9 += 2;
            }
            while (v16 >= v31);
          }
          v33 = a2;
          if (v9 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(v33 - 2);
              v33 -= 2;
            }
            while (v16 < v34);
          }
          v35 = v7[1];
          if (v9 < v33)
          {
            v36 = *v9;
            v37 = *v33;
            do
            {
              *v9 = v37;
              *v33 = v36;
              v38 = v9[1];
              v9[1] = v33[1];
              v33[1] = v38;
              do
              {
                v39 = v9[2];
                v9 += 2;
                v36 = v39;
              }
              while (v16 >= v39);
              do
              {
                v40 = *(v33 - 2);
                v33 -= 2;
                v37 = v40;
              }
              while (v16 < v40);
            }
            while (v9 < v33);
          }
          if (v9 - 2 != v7)
          {
            *v7 = *(v9 - 2);
            v7[1] = *(v9 - 1);
          }
          a4 = 0;
          *(v9 - 2) = v16;
          *(v9 - 1) = v35;
          continue;
        }
        v17 = v7[1];
        v18 = v7;
        do
        {
          v19 = v18;
          v21 = v18[2];
          v18 += 2;
          v20 = v21;
        }
        while (v21 < v16);
        v22 = a2;
        if (v19 == v7)
        {
          v22 = a2;
          do
          {
            if (v18 >= v22)
              break;
            v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v16);
        }
        else
        {
          do
          {
            v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v16);
        }
        if (v18 >= v22)
        {
          v9 = v18;
        }
        else
        {
          v25 = *v22;
          v9 = v18;
          v26 = v22;
          do
          {
            *v9 = v25;
            *v26 = v20;
            v27 = v9[1];
            v9[1] = v26[1];
            v26[1] = v27;
            do
            {
              v28 = v9[2];
              v9 += 2;
              v20 = v28;
            }
            while (v28 < v16);
            do
            {
              v29 = *(v26 - 2);
              v26 -= 2;
              v25 = v29;
            }
            while (v29 >= v16);
          }
          while (v9 < v26);
        }
        if (v9 - 2 != v7)
        {
          *v7 = *(v9 - 2);
          v7[1] = *(v9 - 1);
        }
        *(v9 - 2) = v16;
        *(v9 - 1) = v17;
        if (v18 < v22)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *,false>(v7, v9 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v7, v9 - 2);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v9 - 2;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  void *v35;
  BOOL v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  unint64_t *v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  BOOL v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t *v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  BOOL v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  void *v115;
  unint64_t *v116;
  __int128 v117;
  __int128 v118;
  __int128 v120;
  __int128 v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;

void siri::ontology::UsoEntityNode::getUtteranceAlignments(siri::ontology::UsoEntityNode *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 7);
  v3 = (uint64_t *)*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = *a2;
        v10 = (v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v14 = (char *)operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            v16 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1C327063C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::~adjacency_list(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    MEMORY[0x1C3BD1618](v2, 0xC400A2AC0F1);
  v4 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear((_QWORD *)a1);
  return a1;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BD1594](a1 + 112);
  return a1;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      v19 = result[1];
      v20 = a2[1];
      *result = v3;
      result[1] = v20;
      *a2 = v4;
      a2[1] = v19;
      v21 = result[2];
      result[2] = a2[2];
      v6 = (uint64_t *)(a2 + 3);
      v22 = a2[3];
      a2[2] = v21;
      v23 = result[3];
      result[3] = v22;
      a2[3] = v23;
      if (*a3 >= v4)
        return result;
      v24 = a2[1];
      v25 = a3[1];
      *a2 = *a3;
      a2[1] = v25;
      *a3 = v4;
      a3[1] = v24;
      v9 = a2[2];
      a2[2] = a3[2];
    }
    else
    {
      v6 = (uint64_t *)(result + 3);
      v7 = result[1];
      v8 = a3[1];
      *result = v5;
      result[1] = v8;
      *a3 = v4;
      a3[1] = v7;
      v9 = result[2];
      result[2] = a3[2];
    }
    a3[2] = v9;
    v13 = (uint64_t *)(a3 + 3);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v10 = *a2;
    v11 = a2[1];
    a2[1] = a3[1];
    a3[1] = v11;
    v12 = a2[2];
    a2[2] = a3[2];
    a3[2] = v12;
    v13 = (uint64_t *)(a2 + 3);
    v14 = a2[3];
    a2[3] = a3[3];
    a3[3] = v14;
    v15 = *result;
    if (v10 < *result)
    {
      v16 = result[1];
      v17 = a2[1];
      *result = v10;
      result[1] = v17;
      *a2 = v15;
      a2[1] = v16;
      v18 = result[2];
      result[2] = a2[2];
      a2[2] = v18;
      v6 = (uint64_t *)(result + 3);
LABEL_10:
      v26 = *v6;
      *v6 = *v13;
      *v13 = v26;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a3;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = a3[2];
    a3[2] = a4[2];
    a4[2] = v12;
    v13 = a3[3];
    a3[3] = a4[3];
    a4[3] = v13;
    v14 = *a2;
    if (v10 < *a2)
    {
      *a2 = v10;
      *a3 = v14;
      v15 = *a2;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = a2[2];
      a2[2] = a3[2];
      a3[2] = v17;
      v18 = a2[3];
      a2[3] = a3[3];
      a3[3] = v18;
      v19 = *a1;
      if (v15 < *a1)
      {
        v20 = a1[1];
        v21 = a2[1];
        *a1 = v15;
        a1[1] = v21;
        *a2 = v19;
        a2[1] = v20;
        v22 = a1[2];
        a1[2] = a2[2];
        a2[2] = v22;
        v23 = a1[3];
        a1[3] = a2[3];
        a2[3] = v23;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a4;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = a4[2];
    a4[2] = a5[2];
    a5[2] = v14;
    v15 = a4[3];
    a4[3] = a5[3];
    a5[3] = v15;
    v16 = *a3;
    if (v12 < *a3)
    {
      *a3 = v12;
      *a4 = v16;
      v17 = *a3;
      v18 = a3[1];
      a3[1] = a4[1];
      a4[1] = v18;
      v19 = a3[2];
      a3[2] = a4[2];
      a4[2] = v19;
      v20 = a3[3];
      a3[3] = a4[3];
      a4[3] = v20;
      v21 = *a2;
      if (v17 < *a2)
      {
        *a2 = v17;
        *a3 = v21;
        v22 = *a2;
        v23 = a2[1];
        a2[1] = a3[1];
        a3[1] = v23;
        v24 = a2[2];
        a2[2] = a3[2];
        a3[2] = v24;
        v25 = a2[3];
        a2[3] = a3[3];
        a3[3] = v25;
        v26 = *a1;
        if (v22 < *a1)
        {
          v27 = a1[1];
          v28 = a2[1];
          *a1 = v22;
          a1[1] = v28;
          *a2 = v26;
          a2[1] = v27;
          v29 = a1[2];
          a1[2] = a2[2];
          a2[2] = v29;
          v30 = a1[3];
          a1[3] = a2[3];
          a2[3] = v30;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 4);
      v7 = *a1;
      if (v6 < *a1)
      {
        v8 = a1[1];
        v9 = *(a2 - 3);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 4) = v7;
        *(a2 - 3) = v8;
        v10 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v10;
        v11 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v12 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8);
      v13 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    if (*v13 < *v12)
    {
      v17 = v13[1];
      v18 = *((_OWORD *)v13 + 1);
      v13[2] = 0;
      v13[3] = 0;
      v13[1] = 0;
      v19 = v14;
      v20 = *v12;
      while (1)
      {
        v21 = v19;
        v22 = (char *)a1 + v19;
        *(_OWORD *)(v22 + 104) = *(_OWORD *)(v22 + 72);
        *((_QWORD *)v22 + 15) = *((_QWORD *)v22 + 11);
        *((_QWORD *)v22 + 9) = 0;
        *((_QWORD *)v22 + 10) = 0;
        *((_QWORD *)v22 + 11) = 0;
        *((_QWORD *)v22 + 12) = v20;
        if (v21 == -64)
          break;
        v20 = *((_QWORD *)v22 + 4);
        v19 = v21 - 32;
        if (v16 >= v20)
        {
          v23 = (uint64_t)a1 + v19 + 96;
          v24 = (unint64_t *)((char *)a1 + v21 + 72);
          goto LABEL_12;
        }
      }
      v24 = (unint64_t *)(v22 + 72);
      v23 = (uint64_t)a1;
LABEL_12:
      *(_QWORD *)v23 = v16;
      *v24 = v17;
      *(_OWORD *)(v23 + 16) = v18;
      if (++v15 == 8)
        return v13 + 4 == a2;
    }
    v12 = v13;
    v14 += 32;
    v13 += 4;
    if (v13 == a2)
      return 1;
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      v11 = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = v11;
      v6 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
    }
    v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v7 = a2 + 1;
    v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      v12 = *result;
      *result = *v7;
      *v7 = v12;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v20 = *(a2 - 2);
      v21 = a1[6];
      if (v20 < v21)
      {
        a1[6] = v20;
        *(a2 - 2) = v21;
        v22 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v22;
        v23 = a1[6];
        v24 = a1[4];
        if (v23 < v24)
        {
          v25 = a1[5];
          v26 = a1[7];
          a1[4] = v23;
          a1[5] = v26;
          a1[6] = v24;
          a1[7] = v25;
          v27 = a1[2];
          if (v23 < v27)
          {
            v28 = a1[3];
            a1[2] = v23;
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v28;
            v29 = *a1;
            if (v23 < *a1)
            {
              v30 = a1[1];
              *a1 = v23;
              a1[1] = v26;
              a1[2] = v29;
              a1[3] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 < *v9)
    {
      v15 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (unint64_t *)((char *)a1 + v16);
        v18 = *(unint64_t *)((char *)a1 + v16 + 40);
        v17[6] = v14;
        v17[7] = v18;
        if (v16 == -32)
          break;
        v14 = v17[2];
        v16 -= 16;
        if (v13 >= v14)
        {
          v19 = (unint64_t *)((char *)a1 + v16 + 48);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v13;
      v19[1] = v15;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 4);
      v7 = *a1;
      if (v6 < *a1)
      {
        v8 = a1[1];
        v9 = *(a2 - 3);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 4) = v7;
        *(a2 - 3) = v8;
        v10 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v10;
        v11 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v12 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8);
      v13 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    if (*v13 < *v12)
    {
      v17 = v13[1];
      v18 = *((_OWORD *)v13 + 1);
      v13[2] = 0;
      v13[3] = 0;
      v13[1] = 0;
      v19 = v14;
      v20 = *v12;
      while (1)
      {
        v21 = v19;
        v22 = (char *)a1 + v19;
        *(_OWORD *)(v22 + 104) = *(_OWORD *)(v22 + 72);
        *((_QWORD *)v22 + 15) = *((_QWORD *)v22 + 11);
        *((_QWORD *)v22 + 9) = 0;
        *((_QWORD *)v22 + 10) = 0;
        *((_QWORD *)v22 + 11) = 0;
        *((_QWORD *)v22 + 12) = v20;
        if (v21 == -64)
          break;
        v20 = *((_QWORD *)v22 + 4);
        v19 = v21 - 32;
        if (v16 >= v20)
        {
          v23 = (uint64_t)a1 + v19 + 96;
          v24 = (unint64_t *)((char *)a1 + v21 + 72);
          goto LABEL_12;
        }
      }
      v24 = (unint64_t *)(v22 + 72);
      v23 = (uint64_t)a1;
LABEL_12:
      *(_QWORD *)v23 = v16;
      *v24 = v17;
      *(_OWORD *)(v23 + 16) = v18;
      if (++v15 == 8)
        return v13 + 4 == a2;
    }
    v12 = v13;
    v14 += 32;
    v13 += 4;
    if (v13 == a2)
      return 1;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

uint64_t siri::ontology::UsoGraph::isValidSuccessorNameForNode(siri::ontology::UsoGraph *a1, uint64_t a2, siri::ontology::OntologyEdgeName *a3, const siri::ontology::OntologyNodeName *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  char v13;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  char v19;
  char v20;
  _BYTE v21[24];
  void (**v22)(siri::ontology::OntologyUnitName *__hidden);
  void *v23;
  char v24;
  void **v25;

  siri::ontology::UsoGraphEdge::UsoGraphEdge((siri::ontology::UsoGraphEdge *)v21, a3, 0, 0, 0);
  switch(a5)
  {
    case 2:
      siri::ontology::UsoEntityNode::UsoEntityNode((siri::ontology::UsoEntityNode *)v14, a1, a4);
      v9 = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)a2 + 24))(a2, v14, v21);
      goto LABEL_8;
    case 3:
      LOBYTE(v12) = 0;
      v13 = 0;
      siri::ontology::UsoStringNode::UsoStringNode((uint64_t)v14, a1, &v12);
      v10 = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)a2 + 24))(a2, v14, v21);
      v14[0] = off_1E7D20FD8;
      if (v20 && v19 < 0)
        operator delete(__p);
      v14[0] = &off_1E7D20E40;
      goto LABEL_9;
    case 4:
      siri::ontology::UsoIntNode::UsoIntNode((siri::ontology::oname::graph::ontology_init *)v14, a1, 0, 0);
      v9 = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)a2 + 24))(a2, v14, v21);
LABEL_8:
      v10 = v9;
      v14[0] = &off_1E7D20E40;
LABEL_9:
      v25 = (void **)&v17;
      std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v25);
      v25 = (void **)&v16;
      std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v25);
      v25 = (void **)&v15;
      std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v25);
      break;
    case 5:
      v14[0] = &off_1E7D20DC0;
      v14[1] = a1;
      v14[2] = 0;
      v14[3] = a4;
      siri::ontology::UsoOperatorNode::checkValidOntologyNameType((uint64_t)v14);
      v10 = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)a2 + 24))(a2, v14, v21);
      break;
    default:
      v10 = 0;
      break;
  }
  v22 = off_1E7D21768;
  if (v24 < 0)
    operator delete(v23);
  return v10;
}

void sub_1C3271450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 96) = off_1E7D21768;
  if (*(char *)(v13 - 65) < 0)
    operator delete(*(void **)(v13 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoUtteranceAlignment::addSpan(_QWORD *a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v26[5];

  result = operator new();
  v15 = result;
  v16 = a1[3];
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_QWORD *)(result + 16) = a6;
  *(_QWORD *)(result + 24) = a7;
  v17 = (uint64_t *)a1[2];
  if ((unint64_t)v17 >= v16)
  {
    v19 = a1[1];
    v20 = ((uint64_t)v17 - v19) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v21 = v16 - v19;
    v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1))
      v22 = v20 + 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    v26[4] = a1 + 3;
    if (v23)
      v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v23);
    else
      v24 = 0;
    v25 = (uint64_t *)(v23 + 8 * v20);
    v26[0] = v23;
    v26[1] = v25;
    v26[3] = v23 + 8 * v24;
    *v25 = v15;
    v26[2] = v25 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(a1 + 1, v26);
    v18 = (_QWORD *)a1[2];
    result = std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)v26);
  }
  else
  {
    *v17 = result;
    v18 = v17 + 1;
    a1[2] = v18;
  }
  a1[2] = v18;
  return result;
}

void sub_1C32715E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1000C405AAC83ABLL);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoUtteranceAlignment::addSpan(siri::ontology::UsoUtteranceAlignment *this, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v18[5];

  result = operator new();
  v7 = result;
  v8 = *((_QWORD *)this + 3);
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  v9 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)this + 1);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v18[4] = (char *)this + 24;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v15);
    else
      v16 = 0;
    v17 = (uint64_t *)(v15 + 8 * v12);
    v18[0] = v15;
    v18[1] = v17;
    v18[3] = v15 + 8 * v16;
    *v17 = v7;
    v18[2] = v17 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer((_QWORD *)this + 1, v18);
    v10 = (_QWORD *)*((_QWORD *)this + 2);
    result = std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *v9 = result;
    v10 = v9 + 1;
    *((_QWORD *)this + 2) = v10;
  }
  *((_QWORD *)this + 2) = v10;
  return result;
}

void sub_1C3271718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1000C405AAC83ABLL);
  _Unwind_Resume(a1);
}

_QWORD *siri::ontology::UsoUtteranceAlignment::addSpan(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];

  v2 = *a2;
  if (!*a2)
    __assert_rtn("addSpan", "UsoGraph.cpp", 692, "span");
  v4 = result;
  v5 = result + 3;
  v6 = result[3];
  v7 = (_QWORD *)result[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = result + 1;
    v10 = result[1];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = v5;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      v2 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    v8 = (_QWORD *)v4[2];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *v7 = v2;
    v8 = v7 + 1;
  }
  v4[2] = v8;
  return result;
}

uint64_t siri::ontology::UsoUtteranceAlignment::operator==(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int v12;
  int v13;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(char **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  v4 = *(_QWORD **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 != v2)
  {
    v5 = (v3 - v2) >> 3;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = (v3 - v2) >> 3;
    result = 1;
    while (1)
    {
      if (!v5)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v8 = *(_DWORD **)v2;
      v9 = (_DWORD *)*v4;
      if (*(_DWORD *)*v4 != **(_DWORD **)v2 || v9[1] != v8[1] || v9[2] != v8[2] || v9[3] != v8[3])
        break;
      v10 = *((unsigned __int8 *)v8 + 20);
      if (!*((_BYTE *)v9 + 20) || v10 == 0)
      {
        if ((*((_BYTE *)v9 + 20) != 0) != (v10 != 0))
          return 0;
      }
      else if (v9[4] != v8[4])
      {
        return 0;
      }
      if (*((_BYTE *)v9 + 28) && *((_BYTE *)v8 + 28))
      {
        v12 = v9[6];
        v13 = v8[6];
      }
      else
      {
        v13 = *((unsigned __int8 *)v8 + 28) != 0;
        v12 = *((unsigned __int8 *)v9 + 28) != 0;
      }
      if (v12 != v13)
        break;
      --v5;
      v2 += 8;
      ++v4;
      if (!--v6)
        return result;
    }
    return 0;
  }
  return 1;
}

void siri::ontology::UsoGraphNode::addSuccessors(siri::ontology::UsoGraph **this, siri::ontology::UsoGraph **a2)
{
  siri::ontology::UsoGraph::addSuccessors(this[1], a2, (const siri::ontology::UsoGraphNode *)this);
}

uint64_t siri::ontology::UsoGraphNode::deepCopy(siri::ontology::UsoGraph **this)
{
  return siri::ontology::UsoGraph::deepCopyToGraph(this[1], (const siri::ontology::UsoGraphNode *)this, this[1]);
}

uint64_t siri::ontology::UsoGraphNode::deepCopyToGraph(siri::ontology::UsoGraph **this, siri::ontology::UsoGraph *a2)
{
  return siri::ontology::UsoGraph::deepCopyToGraph(this[1], (const siri::ontology::UsoGraphNode *)this, a2);
}

BOOL siri::ontology::UsoEntityNode::isValidSuccessorWithOperatorEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, 0);
}

BOOL siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, 1);
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::copyIdentifiers(siri::ontology::UsoEntityNode *this, const UsoIdentifier ***a2)
{
  const UsoIdentifier **v2;
  const UsoIdentifier **v3;
  siri::ontology::UsoEntityNode *v4;
  const UsoIdentifier *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = this;
    do
    {
      v5 = *v2++;
      this = (siri::ontology::UsoEntityNode *)siri::ontology::UsoEntityNode::addIdentifier(v4, v5);
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t *siri::ontology::UsoEntityNode::copyUtteranceAlignments(uint64_t *this, siri::ontology::UsoUtteranceAlignment ***a2)
{
  siri::ontology::UsoUtteranceAlignment **v2;
  siri::ontology::UsoUtteranceAlignment **v3;
  siri::ontology::UsoEntityNode *v4;
  siri::ontology::UsoUtteranceAlignment *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (siri::ontology::UsoEntityNode *)this;
    do
    {
      v5 = *v2++;
      this = siri::ontology::UsoEntityNode::addUtteranceAlignment(v4, v5);
    }
    while (v2 != v3);
  }
  return this;
}

int64x2_t *siri::ontology::UsoEntityNode::copyEntitySpans(int64x2_t *this, siri::ontology::UsoEntitySpan ***a2)
{
  siri::ontology::UsoEntitySpan **v2;
  siri::ontology::UsoEntitySpan **v3;
  int64x2_t *v4;
  siri::ontology::UsoEntitySpan *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = this;
    do
    {
      v5 = *v2++;
      this = (int64x2_t *)siri::ontology::UsoEntityNode::addEntitySpan(v4, v5);
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t siri::ontology::UsoEntityNode::addIdentifier(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;

  LOBYTE(v7) = 0;
  BYTE4(v7) = 0;
  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  return siri::ontology::UsoEntityNode::addIdentifier(a1, a2, a3, a4, a5, a6, &v7, &v8);
}

uint64_t siri::ontology::UsoEntityNode::addIdentifier(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string v32;
  unint64_t v33;
  _QWORD *v34;
  std::string v35;
  std::string v36;

  v16 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v36 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v35 = *(std::string *)a3;
  result = (uint64_t)std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v32, a4);
  v18 = *a5;
  v19 = *a6;
  v20 = *a7;
  v21 = *a8;
  *(std::string *)v16 = v36;
  *(std::string *)(v16 + 24) = v35;
  *(_BYTE *)(v16 + 48) = 0;
  *(_BYTE *)(v16 + 72) = 0;
  if ((_BYTE)v33)
  {
    *(std::string *)(v16 + 48) = v32;
    *(_BYTE *)(v16 + 72) = 1;
  }
  *(_OWORD *)(v16 + 80) = v18;
  *(_QWORD *)(v16 + 96) = v19;
  *(_QWORD *)(v16 + 104) = v20;
  *(_QWORD *)(v16 + 112) = v21;
  v22 = a1[6];
  v23 = (uint64_t *)a1[5];
  if ((unint64_t)v23 >= v22)
  {
    v25 = a1[4];
    v26 = ((uint64_t)v23 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v27 = v22 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    v34 = a1 + 6;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v29);
    else
      v30 = 0;
    v31 = (uint64_t *)(v29 + 8 * v26);
    v32.__r_.__value_.__r.__words[0] = v29;
    v32.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    v33 = v29 + 8 * v30;
    *v31 = v16;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)(v31 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(a1 + 4, &v32);
    v24 = (_QWORD *)a1[5];
    result = std::__split_buffer<std::unique_ptr<siri::ontology::UsoIdentifier>>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    *v23 = v16;
    v24 = v23 + 1;
  }
  a1[5] = v24;
  return result;
}

void sub_1C3271CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v27, 0x1012C40071C2685);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoEntityNode::addIdentifier(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;

  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  return siri::ontology::UsoEntityNode::addIdentifier(a1, a2, a3, a4, a5, a6, a7, &v8);
}

_QWORD *siri::ontology::UsoEntityNode::addIdentifier(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];

  v2 = *a2;
  if (!*a2)
    __assert_rtn("addIdentifier", "UsoGraph.cpp", 985, "identifier");
  v4 = result;
  v5 = result + 6;
  v6 = result[6];
  v7 = (_QWORD *)result[5];
  if ((unint64_t)v7 >= v6)
  {
    v9 = result + 4;
    v10 = result[4];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = v5;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      v2 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    v8 = (_QWORD *)v4[5];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoIdentifier>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *v7 = v2;
    v8 = v7 + 1;
  }
  v4[5] = v8;
  return result;
}

int64x2_t *siri::ontology::UsoEntityNode::addEntitySpan(int64x2_t *result, uint64_t *a2)
{
  uint64_t v2;
  int64x2_t *v4;
  int64x2_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  uint64_t *v25;

  v2 = *a2;
  if (!*a2)
    __assert_rtn("addEntitySpan", "UsoGraph.cpp", 1009, "entitySpan");
  v4 = result;
  v5 = result + 6;
  v6 = result[6].u64[0];
  v7 = (_QWORD *)result[5].i64[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = result[5].i64[0];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = (uint64_t *)v5;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
      v2 = *a2;
    }
    else
    {
      v14 = 0;
    }
    v15 = (_QWORD *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    v24 = v16;
    *a2 = 0;
    *v15 = v2;
    v8 = v15 + 1;
    v23.i64[1] = (uint64_t)(v15 + 1);
    v18 = (_QWORD *)v4[5].i64[0];
    v17 = (_QWORD *)v4[5].i64[1];
    if (v17 == v18)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *--v17;
        *v17 = 0;
        *--v15 = v19;
      }
      while (v17 != v18);
      v20 = v4[5];
      v8 = (_QWORD *)v23.i64[1];
      v16 = v24;
    }
    v4[5].i64[0] = (uint64_t)v15;
    v4[5].i64[1] = (uint64_t)v8;
    v23 = v20;
    v21 = v4[6].i64[0];
    v4[6].i64[0] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (int64x2_t *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoEntitySpan>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *a2 = 0;
    *v7 = v2;
    v8 = v7 + 1;
  }
  v4[5].i64[1] = (uint64_t)v8;
  return result;
}

uint64_t *siri::ontology::UsoEntityNode::addUtteranceAlignment(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int64x2_t v43;
  unint64_t v44;
  uint64_t v46;
  unint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  _QWORD *v50;

  v16 = operator new();
  *(_DWORD *)v16 = a2;
  *(_QWORD *)(v16 + 8) = 0;
  v17 = (_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  v18 = operator new();
  v19 = v18;
  *(_DWORD *)v18 = a3;
  *(_DWORD *)(v18 + 4) = a4;
  *(_DWORD *)(v18 + 8) = a5;
  *(_DWORD *)(v18 + 12) = a6;
  *(_QWORD *)(v18 + 16) = a7;
  *(_QWORD *)(v18 + 24) = a8;
  v20 = *(_QWORD *)(v16 + 24);
  v21 = *(uint64_t **)(v16 + 16);
  if ((unint64_t)v21 >= v20)
  {
    v23 = ((uint64_t)v21 - *v17) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v24 = v20 - *v17;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v50 = (_QWORD *)(v16 + 24);
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v26);
    else
      v27 = 0;
    v28 = (uint64_t *)(v26 + 8 * v23);
    v47 = v26;
    v48.i64[0] = (uint64_t)v28;
    v49 = v26 + 8 * v27;
    *v28 = v19;
    v48.i64[1] = (uint64_t)(v28 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v17, &v47);
    v22 = *(_QWORD **)(v16 + 16);
    std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)&v47);
  }
  else
  {
    *v21 = v18;
    v22 = v21 + 1;
    *(_QWORD *)(v16 + 16) = v22;
  }
  *(_QWORD *)(v16 + 16) = v22;
  v46 = v16;
  v29 = a1[9];
  v30 = (uint64_t *)a1[8];
  if ((unint64_t)v30 >= v29)
  {
    v32 = a1[7];
    v33 = ((uint64_t)v30 - v32) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v34 = v29 - v32;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    v50 = a1 + 9;
    if (v36)
      v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v36);
    else
      v37 = 0;
    v38 = (uint64_t *)(v36 + 8 * v33);
    v39 = v36 + 8 * v37;
    v49 = v39;
    v46 = 0;
    *v38 = v16;
    v31 = v38 + 1;
    v48.i64[1] = (uint64_t)(v38 + 1);
    v41 = (_QWORD *)a1[7];
    v40 = (_QWORD *)a1[8];
    if (v40 == v41)
    {
      v43 = vdupq_n_s64((unint64_t)v40);
    }
    else
    {
      do
      {
        v42 = *--v40;
        *v40 = 0;
        *--v38 = v42;
      }
      while (v40 != v41);
      v43 = *(int64x2_t *)(a1 + 7);
      v31 = (_QWORD *)v48.i64[1];
      v39 = v49;
    }
    a1[7] = v38;
    a1[8] = v31;
    v48 = v43;
    v44 = a1[9];
    a1[9] = v39;
    v49 = v44;
    v47 = v43.i64[0];
    std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer((uint64_t)&v47);
  }
  else
  {
    v46 = 0;
    *v30 = v16;
    v31 = v30 + 1;
  }
  a1[8] = v31;
  return std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&v46);
}

void sub_1C32721C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *siri::ontology::UsoEntityNode::addUtteranceAlignment(siri::ontology::UsoEntityNode *this, int a2, int a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int64x2_t v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  int64x2_t v40;
  unint64_t v41;
  char *v42;

  v8 = operator new();
  *(_DWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = (_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = operator new();
  v11 = v10;
  *(_DWORD *)v10 = a3;
  *(_DWORD *)(v10 + 4) = a4;
  *(_DWORD *)(v10 + 8) = a3;
  *(_DWORD *)(v10 + 12) = a4;
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 20) = 0;
  *(_BYTE *)(v10 + 24) = 0;
  *(_BYTE *)(v10 + 28) = 0;
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(uint64_t **)(v8 + 16);
  if ((unint64_t)v13 >= v12)
  {
    v15 = ((uint64_t)v13 - *v9) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = v12 - *v9;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    v42 = (char *)(v8 + 24);
    if (v18)
      v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v18);
    else
      v19 = 0;
    v20 = (uint64_t *)(v18 + 8 * v15);
    v39 = v18;
    v40.i64[0] = (uint64_t)v20;
    v41 = v18 + 8 * v19;
    *v20 = v11;
    v40.i64[1] = (uint64_t)(v20 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, &v39);
    v14 = *(_QWORD **)(v8 + 16);
    std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)&v39);
  }
  else
  {
    *v13 = v10;
    v14 = v13 + 1;
    *(_QWORD *)(v8 + 16) = v14;
  }
  *(_QWORD *)(v8 + 16) = v14;
  v38 = v8;
  v21 = *((_QWORD *)this + 9);
  v22 = (uint64_t *)*((_QWORD *)this + 8);
  if ((unint64_t)v22 >= v21)
  {
    v24 = *((_QWORD *)this + 7);
    v25 = ((uint64_t)v22 - v24) >> 3;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v26 = v21 - v24;
    v27 = v26 >> 2;
    if (v26 >> 2 <= (unint64_t)(v25 + 1))
      v27 = v25 + 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    v42 = (char *)this + 72;
    if (v28)
      v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v28);
    else
      v29 = 0;
    v30 = (uint64_t *)(v28 + 8 * v25);
    v31 = v28 + 8 * v29;
    v41 = v31;
    v38 = 0;
    *v30 = v8;
    v23 = v30 + 1;
    v40.i64[1] = (uint64_t)(v30 + 1);
    v33 = (_QWORD *)*((_QWORD *)this + 7);
    v32 = (_QWORD *)*((_QWORD *)this + 8);
    if (v32 == v33)
    {
      v35 = vdupq_n_s64((unint64_t)v32);
    }
    else
    {
      do
      {
        v34 = *--v32;
        *v32 = 0;
        *--v30 = v34;
      }
      while (v32 != v33);
      v35 = *(int64x2_t *)((char *)this + 56);
      v23 = (_QWORD *)v40.i64[1];
      v31 = v41;
    }
    *((_QWORD *)this + 7) = v30;
    *((_QWORD *)this + 8) = v23;
    v40 = v35;
    v36 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v31;
    v41 = v36;
    v39 = v35.i64[0];
    std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer((uint64_t)&v39);
  }
  else
  {
    v38 = 0;
    *v22 = v8;
    v23 = v22 + 1;
  }
  *((_QWORD *)this + 8) = v23;
  return std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&v38);
}

void sub_1C327245C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *siri::ontology::UsoEntityNode::addUtteranceAlignment(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;

  v2 = *a2;
  if (!*a2)
    __assert_rtn("addUtteranceAlignment", "UsoGraph.cpp", 1051, "utteranceAlignment");
  v4 = result;
  v5 = result + 9;
  v6 = result[9];
  v7 = (_QWORD *)result[8];
  if ((unint64_t)v7 >= v6)
  {
    v9 = result[7];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v5;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
      v2 = *a2;
    }
    else
    {
      v14 = 0;
    }
    v15 = (_QWORD *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    v24 = v16;
    *a2 = 0;
    *v15 = v2;
    v8 = v15 + 1;
    v23.i64[1] = (uint64_t)(v15 + 1);
    v18 = (_QWORD *)v4[7];
    v17 = (_QWORD *)v4[8];
    if (v17 == v18)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *--v17;
        *v17 = 0;
        *--v15 = v19;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)(v4 + 7);
      v8 = (_QWORD *)v23.i64[1];
      v16 = v24;
    }
    v4[7] = v15;
    v4[8] = v8;
    v23 = v20;
    v21 = v4[9];
    v4[9] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *a2 = 0;
    *v7 = v2;
    v8 = v7 + 1;
  }
  v4[8] = v8;
  return result;
}

uint64_t siri::ontology::UsoEntityNode::getUtteranceAlignment(siri::ontology::UsoEntityNode *this)
{
  return **((_QWORD **)this + 7);
}

BOOL siri::ontology::UsoEntityNode::isValidSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3, char a4)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, a4);
}

uint64_t siri::ontology::PrintGraphVisitor::finish_vertex(uint64_t result)
{
  *(_DWORD *)(result + 16) -= 4;
  return result;
}

BOOL siri::ontology::MatchInfo::hasMatchSignal(_DWORD *a1, int a2)
{
  return (*a1 & a2) != 0;
}

BOOL siri::ontology::MatchInfo::hasMatchSignals(int *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;

  v2 = a2[1];
  if (*a2 == v2)
    return 1;
  v3 = *a1;
  v4 = *a2 + 4;
  do
  {
    result = (v3 & *(_DWORD *)(v4 - 4)) != 0;
    v6 = (v3 & *(_DWORD *)(v4 - 4)) == 0 || v4 == v2;
    v4 += 4;
  }
  while (!v6);
  return result;
}

void siri::ontology::UsoEntitySpan::addSpanProperty(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  unint64_t v7;
  std::string **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string **v16;
  std::string v17;
  std::string v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v18 = *(std::string *)a3;
  *v6 = v17;
  v6[1] = v18;
  v6[2].__r_.__value_.__s.__data_[0] = 1;
  v6[2].__r_.__value_.__l.__size_ = 0;
  v6[2].__r_.__value_.__r.__words[2] = 0;
  v7 = a1[13];
  v8 = (std::string **)a1[12];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[11];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v20 = a1 + 13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
    else
      v15 = 0;
    v16 = (std::string **)(v14 + 8 * v11);
    v18.__r_.__value_.__r.__words[0] = v14;
    v18.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    v19 = v14 + 8 * v15;
    *v16 = v6;
    v18.__r_.__value_.__r.__words[2] = (std::string::size_type)(v16 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(a1 + 11, &v18);
    v9 = (_QWORD *)a1[12];
    std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[12] = v9;
}

void sub_1C32727DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v14, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntitySpan::addSpanProperty(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::string v17;
  unint64_t v18;
  _QWORD *v19;

  v6 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  *(std::string *)v6 = v17;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = a3;
  *(_BYTE *)(v6 + 60) = 1;
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 68) = 0;
  v7 = a1[13];
  v8 = (uint64_t *)a1[12];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[11];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v19 = a1 + 13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
    else
      v15 = 0;
    v16 = (uint64_t *)(v14 + 8 * v11);
    v17.__r_.__value_.__r.__words[0] = v14;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    v18 = v14 + 8 * v15;
    *v16 = v6;
    v17.__r_.__value_.__r.__words[2] = (std::string::size_type)(v16 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(a1 + 11, &v17);
    v9 = (_QWORD *)a1[12];
    std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[12] = v9;
}

void sub_1C3272974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntitySpan::addSpanProperty(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::string v17;
  unint64_t v18;
  _QWORD *v19;

  v6 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  *(std::string *)v6 = v17;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 60) = 0;
  *(float *)(v6 + 64) = a3;
  *(_BYTE *)(v6 + 68) = 1;
  v7 = a1[13];
  v8 = (uint64_t *)a1[12];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[11];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v19 = a1 + 13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
    else
      v15 = 0;
    v16 = (uint64_t *)(v14 + 8 * v11);
    v17.__r_.__value_.__r.__words[0] = v14;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    v18 = v14 + 8 * v15;
    *v16 = v6;
    v17.__r_.__value_.__r.__words[2] = (std::string::size_type)(v16 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(a1 + 11, &v17);
    v9 = (_QWORD *)a1[12];
    std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[12] = v9;
}

void sub_1C3272AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

_QWORD *siri::ontology::UsoEntitySpan::addSpanProperty(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];

  v2 = *a2;
  if (!*a2)
    __assert_rtn("addSpanProperty", "UsoGraph.cpp", 1653, "spanProperty");
  v4 = result;
  v5 = result + 13;
  v6 = result[13];
  v7 = (_QWORD *)result[12];
  if ((unint64_t)v7 >= v6)
  {
    v9 = result + 11;
    v10 = result[11];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = v5;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      v2 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    v8 = (_QWORD *)v4[12];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *v7 = v2;
    v8 = v7 + 1;
  }
  v4[12] = v8;
  return result;
}

void siri::ontology::UsoEntitySpan::addAlternative(_QWORD *a1, uint64_t a2, std::string::size_type a3)
{
  std::string *v6;
  unint64_t v7;
  std::string **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string **v16;
  std::string v17;
  unint64_t v18;
  _QWORD *v19;

  v6 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  *v6 = v17;
  v6[1].__r_.__value_.__r.__words[0] = a3;
  v7 = a1[18];
  v8 = (std::string **)a1[17];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[16];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v19 = a1 + 18;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
    else
      v15 = 0;
    v16 = (std::string **)(v14 + 8 * v11);
    v17.__r_.__value_.__r.__words[0] = v14;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    v18 = v14 + 8 * v15;
    *v16 = v6;
    v17.__r_.__value_.__r.__words[2] = (std::string::size_type)(v16 + 1);
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(a1 + 16, &v17);
    v9 = (_QWORD *)a1[17];
    std::__split_buffer<std::unique_ptr<siri::ontology::AsrAlternative>>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[17] = v9;
}

void sub_1C3272D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD1618](v1, 0x1012C40F498771DLL);
  _Unwind_Resume(a1);
}

_QWORD *siri::ontology::UsoEntitySpan::addAlternative(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];

  v2 = *a2;
  if (!*a2)
    __assert_rtn("addAlternative", "UsoGraph.cpp", 1675, "alternative");
  v4 = result;
  v5 = result + 18;
  v6 = result[18];
  v7 = (_QWORD *)result[17];
  if ((unint64_t)v7 >= v6)
  {
    v9 = result + 16;
    v10 = result[16];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = v5;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      v2 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    v8 = (_QWORD *)v4[17];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siri::ontology::AsrAlternative>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *v7 = v2;
    v8 = v7 + 1;
  }
  v4[17] = v8;
  return result;
}

uint64_t siri::ontology::oname::graph::ontology_init::apple_PhotoMemory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[3];
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "apple_PhotoMemory");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BFED8;
    v18[3] = unk_1C33BFEE8;
    v18[4] = xmmword_1C33BFEF8;
    v18[5] = unk_1C33BFF08;
    v18[0] = xmmword_1C33BFEB8;
    v18[1] = unk_1C33BFEC8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 13);
    v16[0] = xmmword_1C33BCE78;
    v16[1] = unk_1C33BCE88;
    v17[0] = xmmword_1C33BCE98;
    *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1C33BCE98 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 15);
    v9 = 1966;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33BCEB4;
    v15[1] = unk_1C33BCEC4;
    v15[2] = xmmword_1C33BCED4;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 6);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1802, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::apple_PhotoMemory(void)::apple_PhotoMemory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::apple_PhotoMemory(void)::apple_PhotoMemory;
}

void sub_1C3273734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32737CC()
{
  JUMPOUT(0x1C32737B8);
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      v8 = a2 + 1;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *a2;
      v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        v15 = *result;
        *result = *v8;
        *v8 = v15;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
LABEL_17:
      v8 = v6;
      goto LABEL_18;
    }
    *result = v3;
    *a2 = v4;
    v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      v6 = a3 + 1;
      result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(int *)((char *)a1 + v17 + 8);
      if (v19 > v14)
      {
        v20 = *((_DWORD *)v18 + 3);
        goto LABEL_17;
      }
      if (v19 < v14)
      {
        v16 = v9;
        goto LABEL_21;
      }
      v20 = *(int *)((char *)a1 + v17 + 12);
      if (v20 <= v15)
        break;
LABEL_17:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    v16 = (int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "appleAlarm_AlarmAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    v9 = 1662;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v15 = xmmword_1C33C34C0;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1663, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute(void)::appleAlarm_AlarmAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute(void)::appleAlarm_AlarmAttribute;
}

void sub_1C32740F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3274188()
{
  JUMPOUT(0x1C3274174);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  int v8;
  uint64_t v9[5];
  int v10;
  uint64_t v11[5];
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "appleArithmetic_ArithmeticAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 8);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    v10 = 1691;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    v8 = 1700;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1693, 2, (uint64_t *)v15, v14, v13, v11, v9, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute(void)::appleArithmetic_ArithmeticAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute(void)::appleArithmetic_ArithmeticAttribute;
}

void sub_1C3274344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32743DC()
{
  JUMPOUT(0x1C32743C8);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  int v15[10];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "appleContact_ContactAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    v9 = 1498;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    *(_OWORD *)v15 = xmmword_1C33BCEE4;
    *(_OWORD *)&v15[3] = *(__int128 *)((char *)&xmmword_1C33BCEE4 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, v15, 7);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1731, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute(void)::appleContact_ContactAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute(void)::appleContact_ContactAttribute;
}

void sub_1C32745AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3274644()
{
  JUMPOUT(0x1C3274630);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleEmail_EmailAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1670;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33BCF00;
    v17[0] = unk_1C33BCF10;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33BCF1C;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 11);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1671, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute(void)::appleEmail_EmailAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute(void)::appleEmail_EmailAttribute;
}

void sub_1C3274810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32748A8()
{
  JUMPOUT(0x1C3274894);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[7];
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "appleMessage_MessageAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 8);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    v9 = 1487;
    std::unordered_set<int>::unordered_set((uint64_t)&v10, &v9, 1);
    v15[6] = xmmword_1C33BCF8C;
    v16[0] = unk_1C33BCF9C;
    *(_OWORD *)((char *)v16 + 12) = unk_1C33BCFA8;
    v15[2] = xmmword_1C33BCF4C;
    v15[3] = unk_1C33BCF5C;
    v15[4] = xmmword_1C33BCF6C;
    v15[5] = unk_1C33BCF7C;
    v15[0] = xmmword_1C33BCF2C;
    v15[1] = unk_1C33BCF3C;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 35);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1604, 2, (uint64_t *)__p, v12, v11, &v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute(void)::appleMessage_MessageAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute(void)::appleMessage_MessageAttribute;
}

void sub_1C3274A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3274B2C()
{
  JUMPOUT(0x1C3274B18);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *__p[2];
  char v15;
  _OWORD v16[7];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "appleNotebook_NotebookAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1729;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[6] = xmmword_1C33BD018;
    v17[0] = unk_1C33BD028;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33BD034;
    v16[2] = xmmword_1C33BCFD8;
    v16[3] = unk_1C33BCFE8;
    v16[4] = xmmword_1C33BCFF8;
    v16[5] = unk_1C33BD008;
    v16[0] = xmmword_1C33BCFB8;
    v16[1] = unk_1C33BCFC8;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 35);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1733, 2, (uint64_t *)__p, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute(void)::appleNotebook_NotebookAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute(void)::appleNotebook_NotebookAttribute;
}

void sub_1C3274D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3274DA8()
{
  JUMPOUT(0x1C3274D94);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  int v8;
  uint64_t v9[5];
  int v10;
  uint64_t v11[5];
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "appleNotification_NotificationAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 8);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    v10 = 1714;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    v8 = 1716;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1715, 2, (uint64_t *)v15, v14, v13, v11, v9, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute(void)::appleNotification_NotificationAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute(void)::appleNotification_NotificationAttribute;
}

void sub_1C3274F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3274FFC()
{
  JUMPOUT(0x1C3274FE8);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "applePhoneCall_PhoneCallAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    v9 = 1488;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v15[0] = xmmword_1C33BD044;
    v15[1] = unk_1C33BD054;
    v15[2] = xmmword_1C33BD064;
    v15[3] = unk_1C33BD074;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 16);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1603, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute(void)::applePhoneCall_PhoneCallAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute(void)::applePhoneCall_PhoneCallAttribute;
}

void sub_1C32751CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3275264()
{
  JUMPOUT(0x1C3275250);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "appleTimer_TimerAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 8);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    v9 = 1486;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = 0x66E0000066DLL;
    v15 = xmmword_1C33BD084;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1648, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute(void)::appleTimer_TimerAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute(void)::appleTimer_TimerAttribute;
}

void sub_1C3275438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32754D0()
{
  JUMPOUT(0x1C32754BCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleWriting_WritingAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1692;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[0] = xmmword_1C33BD09C;
    v16[1] = unk_1C33BD0AC;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 8);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1694, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute(void)::appleWriting_WritingAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute(void)::appleWriting_WritingAttribute;
}

void sub_1C3275694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327572C()
{
  JUMPOUT(0x1C3275718);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SpatialPosition");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2636;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v17 = 2651;
    v16[0] = xmmword_1C33BD0BC;
    v16[1] = unk_1C33BD0CC;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 9);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2631, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition(void)::common_SpatialPosition = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition(void)::common_SpatialPosition;
}

void sub_1C32758F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3275990()
{
  JUMPOUT(0x1C327597CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutClass(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_WorkoutClass");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BD120;
    v17[5] = unk_1C33BD130;
    v17[6] = xmmword_1C33BD140;
    v17[0] = xmmword_1C33BD0E0;
    v17[1] = unk_1C33BD0F0;
    v17[2] = xmmword_1C33BD100;
    v17[3] = unk_1C33BD110;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 15);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2952, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_WorkoutClass(void)::common_WorkoutClass = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutClass(void)::common_WorkoutClass;
}

void sub_1C3275B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 224);
  if (*(char *)(v37 - 161) < 0)
    operator delete(*(void **)(v37 - 184));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MediaItemRelationshipType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xC2900000C28;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3106, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType(void)::common_MediaItemRelationshipType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType(void)::common_MediaItemRelationshipType;
}

void sub_1C3275D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3275E14()
{
  JUMPOUT(0x1C3275E00);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppIntent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_AppIntent");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3235, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_AppIntent(void)::common_AppIntent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppIntent(void)::common_AppIntent;
}

void sub_1C3275FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RequiredStatus(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_RequiredStatus");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xBC100000BC0;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2993, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_RequiredStatus(void)::common_RequiredStatus = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RequiredStatus(void)::common_RequiredStatus;
}

void sub_1C32761F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3276288()
{
  JUMPOUT(0x1C3276274);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriContent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  _OWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_SiriContent");
    v17[2] = xmmword_1C33BD178;
    v17[3] = unk_1C33BD188;
    v17[4] = xmmword_1C33BD198;
    v17[5] = unk_1C33BD1A8;
    v17[0] = xmmword_1C33BD158;
    v17[1] = unk_1C33BD168;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 12);
    v16[0] = xmmword_1C33BD1B8;
    v16[1] = unk_1C33BD1C8;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 8);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0xC5E000006AFLL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3164, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriContent(void)::common_SiriContent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriContent(void)::common_SiriContent;
}

void sub_1C327644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32764DC()
{
  JUMPOUT(0x1C32764C8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CompletionStatus");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xBA600000BD9;
    v17 = 2983;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 3);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2976, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CompletionStatus(void)::common_CompletionStatus = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus(void)::common_CompletionStatus;
}

void sub_1C3276698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3276728()
{
  JUMPOUT(0x1C3276714);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SpatialDirection");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2636;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    *(_OWORD *)v16 = xmmword_1C33BD1D8;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BD1D8 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, v16, 7);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2632, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection(void)::common_SpatialDirection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection(void)::common_SpatialDirection;
}

void sub_1C32768F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327698C()
{
  JUMPOUT(0x1C3276978);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Workout(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Workout");
    v18[2] = xmmword_1C33BD214;
    v18[3] = unk_1C33BD224;
    v18[4] = xmmword_1C33BD234;
    v18[5] = unk_1C33BD244;
    v18[0] = xmmword_1C33BD1F4;
    v18[1] = unk_1C33BD204;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 12);
    v17 = 1405;
    v16[0] = xmmword_1C33BD254;
    v16[1] = unk_1C33BD264;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 9);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1804, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Workout(void)::common_Workout = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Workout(void)::common_Workout;
}

void sub_1C3276B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppListing(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_AppListing");
    v20 = 0x4B6000004F4;
    v19[2] = xmmword_1C33BD298;
    v19[3] = unk_1C33BD2A8;
    v19[4] = xmmword_1C33BD2B8;
    v19[0] = xmmword_1C33BD278;
    v19[1] = unk_1C33BD288;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 11);
    v17 = 0x57C00000501;
    v18 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 3);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BD2D0;
    v16 = 0x71900000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1805, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_AppListing(void)::common_AppListing = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppListing(void)::common_AppListing;
}

void sub_1C3276DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3276E3C()
{
  JUMPOUT(0x1C3276E28);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReferenceType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_ReferenceType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x53B0000053ALL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1282, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_ReferenceType(void)::common_ReferenceType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReferenceType(void)::common_ReferenceType;
}

void sub_1C3276FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3277084()
{
  JUMPOUT(0x1C3277070);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppAction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_AppAction");
    v18[2] = xmmword_1C33BD3B8;
    v18[3] = unk_1C33BD3C8;
    v18[4] = xmmword_1C33BD3D8;
    v18[0] = xmmword_1C33BD398;
    v18[1] = unk_1C33BD3A8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v17 = 2366;
    v16 = xmmword_1C33BD3E8;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2570, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_AppAction(void)::common_AppAction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppAction(void)::common_AppAction;
}

void sub_1C3277238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpendingCategory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SpendingCategory");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2007, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SpendingCategory(void)::common_SpendingCategory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpendingCategory(void)::common_SpendingCategory;
}

void sub_1C327746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FindMyStatus(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_FindMyStatus");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v17 = 0x4F60000092ALL;
    v16 = xmmword_1C33BD3FC;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 6);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2330, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_FindMyStatus(void)::common_FindMyStatus = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_FindMyStatus(void)::common_FindMyStatus;
}

void sub_1C32776A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonRole(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_PersonRole");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2994, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_PersonRole(void)::common_PersonRole = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonRole(void)::common_PersonRole;
}

void sub_1C32778D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DurationComponent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_DurationComponent");
    v17[2] = xmmword_1C33BD434;
    v17[3] = unk_1C33BD444;
    v17[4] = xmmword_1C33BD454;
    v17[0] = xmmword_1C33BD414;
    v17[1] = unk_1C33BD424;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    v10 = 1335;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1283, 2, (uint64_t *)v14, v13, v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_DurationComponent(void)::common_DurationComponent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DurationComponent(void)::common_DurationComponent;
}

void sub_1C3277B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3277BA4()
{
  JUMPOUT(0x1C3277B90);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NavigationMenu(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_NavigationMenu");
    v17[2] = xmmword_1C33BD484;
    v17[3] = unk_1C33BD494;
    v17[4] = xmmword_1C33BD4A4;
    v17[0] = xmmword_1C33BD464;
    v17[1] = unk_1C33BD474;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = xmmword_1C33C34D0;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 4);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2362, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_NavigationMenu(void)::common_NavigationMenu = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NavigationMenu(void)::common_NavigationMenu;
}

void sub_1C3277D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_PaymentType");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33BD4B4;
    v16 = 0x7FA000007F9;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2008, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType(void)::common_PaymentType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType(void)::common_PaymentType;
}

void sub_1C3277FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3278038()
{
  JUMPOUT(0x1C3278024);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ScheduleType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ScheduleType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xC4900000C48;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3143, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ScheduleType(void)::common_ScheduleType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ScheduleType(void)::common_ScheduleType;
}

void sub_1C32781EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327827C()
{
  JUMPOUT(0x1C3278268);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  uint64_t v6[5];
  uint64_t v7[5];
  _OWORD v8[2];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  int v14[8];
  _OWORD v15[2];
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_Number");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 9);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v17, 2);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    v15[0] = xmmword_1C33BD4CC;
    v15[1] = unk_1C33BD4DC;
    v16[0] = xmmword_1C33BD4EC;
    *(_OWORD *)((char *)v16 + 12) = *(__int128 *)((char *)&xmmword_1C33BD4EC + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)v15, 15);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v6, v14, 7);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1284, 2, (uint64_t *)v12, v11, v10, (uint64_t *)v8, v7, v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_Number(void)::common_Number = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Number(void)::common_Number;
}

void sub_1C327847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 225) < 0)
    operator delete(*(void **)(v38 - 248));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3278514()
{
  JUMPOUT(0x1C3278500);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SearchObjectType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_SearchObjectType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2533, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_SearchObjectType(void)::common_SearchObjectType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SearchObjectType(void)::common_SearchObjectType;
}

void sub_1C32786BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SizeDirection");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2636;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v17 = 0xA6800000A67;
    v16 = xmmword_1C33BD508;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2633, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SizeDirection(void)::common_SizeDirection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection(void)::common_SizeDirection;
}

void sub_1C3278914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32789AC()
{
  JUMPOUT(0x1C3278998);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Time12HourClock");
    v19 = 0x4B6000004F4;
    v18[4] = xmmword_1C33BD560;
    v18[5] = unk_1C33BD570;
    v18[6] = xmmword_1C33BD580;
    v18[0] = xmmword_1C33BD520;
    v18[1] = unk_1C33BD530;
    v18[2] = xmmword_1C33BD540;
    v18[3] = unk_1C33BD550;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 15);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    v9 = 1330;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = 1342;
    v15 = xmmword_1C33BD598;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1286, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Time12HourClock(void)::common_Time12HourClock = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock(void)::common_Time12HourClock;
}

void sub_1C3278B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3278C30()
{
  JUMPOUT(0x1C3278C1CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppGenre(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_AppGenre");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2953, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_AppGenre(void)::common_AppGenre = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppGenre(void)::common_AppGenre;
}

void sub_1C3278DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Language(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Language");
    v17[2] = xmmword_1C33BD5CC;
    v17[3] = unk_1C33BD5DC;
    v17[4] = xmmword_1C33BD5EC;
    v17[0] = xmmword_1C33BD5AC;
    v17[1] = unk_1C33BD5BC;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2615, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Language(void)::common_Language = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Language(void)::common_Language;
}

void sub_1C3279008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Agent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Agent");
    v18[2] = xmmword_1C33C1670;
    v18[3] = unk_1C33C1680;
    v18[4] = xmmword_1C33C1690;
    v18[0] = xmmword_1C33C1650;
    v18[1] = unk_1C33C1660;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v7 = 1964;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1287, 2, (uint64_t *)v13, v12, v11, v9, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Agent(void)::common_Agent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Agent(void)::common_Agent;
}

void sub_1C3279270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3279308()
{
  JUMPOUT(0x1C32792F4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[9];
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_AttachmentType");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[6] = xmmword_1C33BD65C;
    v15[7] = unk_1C33BD66C;
    v15[8] = xmmword_1C33BD67C;
    v15[2] = xmmword_1C33BD61C;
    v15[3] = unk_1C33BD62C;
    v15[4] = xmmword_1C33BD63C;
    v15[5] = unk_1C33BD64C;
    v15[0] = xmmword_1C33BD5FC;
    v15[1] = unk_1C33BD60C;
    v16 = 0xB6B00000C64;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 38);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2382, 2, (uint64_t *)__p, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_AttachmentType(void)::common_AttachmentType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType(void)::common_AttachmentType;
}

void sub_1C32794FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327958C()
{
  JUMPOUT(0x1C3279578);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Geolocation(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  int v8;
  uint64_t v9[5];
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Geolocation");
    v17[2] = xmmword_1C33BD6B4;
    v17[3] = unk_1C33BD6C4;
    v17[4] = xmmword_1C33BD6D4;
    v17[0] = xmmword_1C33BD694;
    v17[1] = unk_1C33BD6A4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    v8 = 1365;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1312, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, v9, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Geolocation(void)::common_Geolocation = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Geolocation(void)::common_Geolocation;
}

void sub_1C3279748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32797D8()
{
  JUMPOUT(0x1C32797C4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Measurement(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  uint64_t v5[5];
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_Measurement");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C0A68;
    v18[1] = unk_1C33C0A78;
    v18[2] = xmmword_1C33C0A88;
    v18[3] = unk_1C33C0A98;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 9);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v17, 2);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    v15[0] = xmmword_1C33BD6E4;
    v15[1] = unk_1C33BD6F4;
    v16 = 0xB5F000004F1;
    std::unordered_set<int>::unordered_set((uint64_t)v5, (int *)v15, 10);
    v14 = 0x5370000022ALL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1288, 2, (uint64_t *)v12, v11, v10, (uint64_t *)v8, (uint64_t *)v6, v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_Measurement(void)::common_Measurement = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Measurement(void)::common_Measurement;
}

void sub_1C32799BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 169) < 0)
    operator delete(*(void **)(v39 - 192));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3279A54()
{
  JUMPOUT(0x1C3279A40);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[6];
  int v16[8];
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_RecurringDateTimeRange");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BD74C;
    v17[5] = unk_1C33BD75C;
    v17[6] = xmmword_1C33BD76C;
    v17[0] = xmmword_1C33BD70C;
    v17[1] = unk_1C33BD71C;
    v17[2] = xmmword_1C33BD72C;
    v17[3] = unk_1C33BD73C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 15);
    *(_OWORD *)v16 = xmmword_1C33BFDF0;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFDF0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, v16, 7);
    v9 = 1317;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v15[2] = xmmword_1C33BD7A4;
    v15[3] = unk_1C33BD7B4;
    v15[4] = xmmword_1C33BD7C4;
    v15[5] = unk_1C33BD7D4;
    v15[0] = xmmword_1C33BD784;
    v15[1] = unk_1C33BD794;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 24);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1289, 2, (uint64_t *)__p, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange(void)::common_RecurringDateTimeRange = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange(void)::common_RecurringDateTimeRange;
}

void sub_1C3279C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3279CEC()
{
  JUMPOUT(0x1C3279CD8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MedicationEvent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MedicationEvent");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BD804;
    v18[3] = unk_1C33BD814;
    v18[4] = xmmword_1C33BD824;
    v18[0] = xmmword_1C33BD7E4;
    v18[1] = unk_1C33BD7F4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 11);
    v17 = 0x57B000004F6;
    v16 = xmmword_1C33BD83C;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 6);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2917, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MedicationEvent(void)::common_MedicationEvent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MedicationEvent(void)::common_MedicationEvent;
}

void sub_1C3279EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonSocialAction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PersonSocialAction");
    v17[2] = xmmword_1C33BD874;
    v17[3] = unk_1C33BD884;
    v17[4] = xmmword_1C33BD894;
    v17[0] = xmmword_1C33BD854;
    v17[1] = unk_1C33BD864;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = xmmword_1C33C34E0;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 4);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3210, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PersonSocialAction(void)::common_PersonSocialAction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonSocialAction(void)::common_PersonSocialAction;
}

void sub_1C327A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Currency(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Currency");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1806, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Currency(void)::common_Currency = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Currency(void)::common_Currency;
}

void sub_1C327A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CommunicationTrigger");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16[0] = xmmword_1C33BD8A4;
    v16[1] = unk_1C33BD8B4;
    v17 = 0xC1100000C10;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 10);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3077, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger(void)::common_CommunicationTrigger = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger(void)::common_CommunicationTrigger;
}

void sub_1C327A560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327A5F0()
{
  JUMPOUT(0x1C327A5DCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  uint64_t v5[5];
  uint64_t v6[5];
  uint64_t v7[4];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  void *v11[2];
  char v12;
  uint64_t v13;
  int v14[8];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v11, "common_CurrencyAmount");
    v18[2] = xmmword_1C33BD8EC;
    v18[3] = unk_1C33BD8FC;
    v18[4] = xmmword_1C33BD90C;
    v18[0] = xmmword_1C33BD8CC;
    v18[1] = unk_1C33BD8DC;
    std::unordered_map<int,int>::unordered_map(v10, (int *)v18, 10);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v9, (int *)&v17, 2);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    v15 = xmmword_1C33BD91C;
    v16 = 0x72600000BE4;
    std::unordered_set<int>::unordered_set((uint64_t)v6, (int *)&v15, 6);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v5, v14, 7);
    v13 = 0x7DF00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v13, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1807, 2, (uint64_t *)v11, v10, v9, v7, v6, v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    if (v12 < 0)
      operator delete(v11[0]);
    siri::ontology::oname::graph::ontology_init::common_CurrencyAmount(void)::common_CurrencyAmount = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount(void)::common_CurrencyAmount;
}

void sub_1C327A7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 201) < 0)
    operator delete(*(void **)(v39 - 224));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327A898()
{
  JUMPOUT(0x1C327A884);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  int v8;
  uint64_t v9[5];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_OffsetDateTime");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BD974;
    v17[5] = unk_1C33BD984;
    v17[6] = xmmword_1C33BD994;
    v17[0] = xmmword_1C33BD934;
    v17[1] = unk_1C33BD944;
    v17[2] = xmmword_1C33BD954;
    v17[3] = unk_1C33BD964;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 15);
    *(_OWORD *)v16 = xmmword_1C33BFDF0;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFDF0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v12, v16, 7);
    v10 = 1302;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    v8 = 1343;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1290, 2, (uint64_t *)v14, v13, v12, v11, v9, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(void)::common_OffsetDateTime = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(void)::common_OffsetDateTime;
}

void sub_1C327AA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327AB18()
{
  JUMPOUT(0x1C327AB04);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserProfile(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_UserProfile");
    v17[2] = xmmword_1C33BE5D4;
    v17[3] = unk_1C33BE5E4;
    v17[4] = xmmword_1C33BE5F4;
    v17[0] = xmmword_1C33BE5B4;
    v17[1] = unk_1C33BE5C4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    *(_OWORD *)v16 = xmmword_1C33BD9AC;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BD9AC + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v12, v16, 7);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2634, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_UserProfile(void)::common_UserProfile = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserProfile(void)::common_UserProfile;
}

void sub_1C327ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppSection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_AppSection");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2571, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_AppSection(void)::common_AppSection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppSection(void)::common_AppSection;
}

void sub_1C327AF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EventTrigger(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[10];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_EventTrigger");
    v17[6] = xmmword_1C33BDA28;
    v17[7] = unk_1C33BDA38;
    v17[8] = xmmword_1C33BDA48;
    v17[9] = unk_1C33BDA58;
    v17[2] = xmmword_1C33BD9E8;
    v17[3] = unk_1C33BD9F8;
    v17[4] = xmmword_1C33BDA08;
    v17[5] = unk_1C33BDA18;
    v17[0] = xmmword_1C33BD9C8;
    v17[1] = unk_1C33BD9D8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 20);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x6BF00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1721, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_EventTrigger(void)::common_EventTrigger = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_EventTrigger(void)::common_EventTrigger;
}

void sub_1C327B158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327B1E8()
{
  JUMPOUT(0x1C327B1D4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoCollection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[3];
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD v19[6];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_PhotoCollection");
    v20 = 0x4B6000004F4;
    v19[2] = xmmword_1C33BFED8;
    v19[3] = unk_1C33BFEE8;
    v19[4] = xmmword_1C33BFEF8;
    v19[5] = unk_1C33BFF08;
    v19[0] = xmmword_1C33BFEB8;
    v19[1] = unk_1C33BFEC8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 13);
    v17[0] = xmmword_1C33BDA68;
    v17[1] = unk_1C33BDA78;
    v18[0] = xmmword_1C33BDA88;
    *(_OWORD *)((char *)v18 + 12) = *(__int128 *)((char *)&xmmword_1C33BDA88 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 15);
    v9 = 1966;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33BDAA4;
    v15[1] = unk_1C33BDAB4;
    v15[2] = xmmword_1C33BDAC4;
    v16 = 0x71200000729;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 7);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1809, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_PhotoCollection(void)::common_PhotoCollection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoCollection(void)::common_PhotoCollection;
}

void sub_1C327B3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327B488()
{
  JUMPOUT(0x1C327B474);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Reminder(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[2];
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Reminder");
    v18[4] = xmmword_1C33BDB1C;
    v18[5] = unk_1C33BDB2C;
    v18[6] = xmmword_1C33BDB3C;
    v18[7] = unk_1C33BDB4C;
    v18[0] = xmmword_1C33BDADC;
    v18[1] = unk_1C33BDAEC;
    v18[2] = xmmword_1C33BDAFC;
    v18[3] = unk_1C33BDB0C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 16);
    v16[0] = xmmword_1C33BDB5C;
    v16[1] = unk_1C33BDB6C;
    v17[0] = xmmword_1C33BDB7C;
    *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1C33BDB7C + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 15);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33BDB98;
    v15[1] = unk_1C33BDBA8;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 4);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3027, 2, (uint64_t *)__p, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Reminder(void)::common_Reminder = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Reminder(void)::common_Reminder;
}

void sub_1C327B668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327B6F8()
{
  JUMPOUT(0x1C327B6E4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ReactionType");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33BDBB8;
    v17 = 0xCB500000CB4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3243, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ReactionType(void)::common_ReactionType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType(void)::common_ReactionType;
}

void sub_1C327B8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327B958()
{
  JUMPOUT(0x1C327B944);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DigitalFace(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_DigitalFace");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v17 = 0x69F000004F6;
    v16 = xmmword_1C33BDBD0;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 6);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3261, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_DigitalFace(void)::common_DigitalFace = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DigitalFace(void)::common_DigitalFace;
}

void sub_1C327BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RadioStation(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_RadioStation");
    v18[4] = xmmword_1C33BDC28;
    v18[5] = unk_1C33BDC38;
    v18[6] = xmmword_1C33BDC48;
    v18[0] = xmmword_1C33BDBE8;
    v18[1] = unk_1C33BDBF8;
    v18[2] = xmmword_1C33BDC08;
    v18[3] = unk_1C33BDC18;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 14);
    v17 = 0xABB00000ABALL;
    v16 = xmmword_1C33BDC58;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 6);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2738, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_RadioStation(void)::common_RadioStation = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RadioStation(void)::common_RadioStation;
}

void sub_1C327BD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Religion(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Religion");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2010, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Religion(void)::common_Religion = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Religion(void)::common_Religion;
}

void sub_1C327BF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeZone(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_TimeZone");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BDC90;
    v17[3] = unk_1C33BDCA0;
    v17[4] = xmmword_1C33BDCB0;
    v17[0] = xmmword_1C33BDC70;
    v17[1] = unk_1C33BDC80;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 11);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1313, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_TimeZone(void)::common_TimeZone = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_TimeZone(void)::common_TimeZone;
}

void sub_1C327C1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Decimal(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  uint64_t v6[5];
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  int v14[10];
  uint64_t v15;
  int v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_Decimal");
    v18[2] = xmmword_1C33BDCE8;
    v18[3] = unk_1C33BDCF8;
    v18[4] = xmmword_1C33BDD08;
    v18[0] = xmmword_1C33BDCC8;
    v18[1] = unk_1C33BDCD8;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 10);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v17, 2);
    v8 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v15 = 0x54100000540;
    v16 = 2391;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 3);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v6, v14, 7);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1291, 2, (uint64_t *)v12, v11, v10, v9, v7, v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_Decimal(void)::common_Decimal = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Decimal(void)::common_Decimal;
}

void sub_1C327C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0)
    operator delete(*(void **)(v38 - 216));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327C4E8()
{
  JUMPOUT(0x1C327C4D4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SortDirection");
    v18[2] = xmmword_1C33BDD38;
    v18[3] = unk_1C33BDD48;
    v18[4] = xmmword_1C33BDD58;
    v18[0] = xmmword_1C33BDD18;
    v18[1] = unk_1C33BDD28;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16[0] = xmmword_1C33BDD68;
    v16[1] = unk_1C33BDD78;
    v17 = 0xABF00000ABELL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 10);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2739, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SortDirection(void)::common_SortDirection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection(void)::common_SortDirection;
}

void sub_1C327C6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327C744()
{
  JUMPOUT(0x1C327C730);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MessageType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xCB700000CB6;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3244, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MessageType(void)::common_MessageType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageType(void)::common_MessageType;
}

void sub_1C327C8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327C988()
{
  JUMPOUT(0x1C327C974);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortValue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_SortValue");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3058, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_SortValue(void)::common_SortValue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SortValue(void)::common_SortValue;
}

void sub_1C327CB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_PhoneCallMode");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 8);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33BDD90;
    v16 = 1874;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1871, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_PhoneCallMode(void)::common_PhoneCallMode = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode(void)::common_PhoneCallMode;
}

void sub_1C327CD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327CE0C()
{
  JUMPOUT(0x1C327CDF8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SportsItem(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_SportsItem");
    v17[2] = xmmword_1C33BDDC4;
    v17[3] = unk_1C33BDDD4;
    v17[4] = xmmword_1C33BDDE4;
    v17[0] = xmmword_1C33BDDA4;
    v17[1] = unk_1C33BDDB4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x9F500000A05;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2549, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_SportsItem(void)::common_SportsItem = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SportsItem(void)::common_SportsItem;
}

void sub_1C327CFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327D05C()
{
  JUMPOUT(0x1C327D048);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  int v8;
  uint64_t v9[5];
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_ReminderType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 8);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    v8 = 3239;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3238, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, v9, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_ReminderType(void)::common_ReminderType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderType(void)::common_ReminderType;
}

void sub_1C327D20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327D29C()
{
  JUMPOUT(0x1C327D288);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_KnowledgeQuestionAttribute");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BDDF4;
    v17[1] = unk_1C33BDE04;
    v17[2] = xmmword_1C33BDE14;
    v17[3] = unk_1C33BDE24;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1635, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionAttribute(void)::common_KnowledgeQuestionAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionAttribute(void)::common_KnowledgeQuestionAttribute;
}

void sub_1C327D448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[3];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MediaItemVersion");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16[0] = xmmword_1C33BDE3C;
    v16[1] = unk_1C33BDE4C;
    v16[2] = xmmword_1C33BDE5C;
    v17 = 0xB7000000B6FLL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 14);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2740, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaItemVersion(void)::common_MediaItemVersion = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion(void)::common_MediaItemVersion;
}

void sub_1C327D69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327D72C()
{
  JUMPOUT(0x1C327D718);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaCapture(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_MediaCapture");
    v17[2] = xmmword_1C33BDE94;
    v17[3] = unk_1C33BDEA4;
    v17[4] = xmmword_1C33BDEB4;
    v17[0] = xmmword_1C33BDE74;
    v17[1] = unk_1C33BDE84;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 10);
    v16 = xmmword_1C33C34F0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 4);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x75900000A76;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2995, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaCapture(void)::common_MediaCapture = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaCapture(void)::common_MediaCapture;
}

void sub_1C327D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 216);
  if (*(char *)(v36 - 153) < 0)
    operator delete(*(void **)(v36 - 176));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327D97C()
{
  JUMPOUT(0x1C327D968);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Reaction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Reaction");
    v18[2] = xmmword_1C33BDEE4;
    v18[3] = unk_1C33BDEF4;
    v18[4] = xmmword_1C33BDF04;
    v18[5] = unk_1C33BDF14;
    v18[0] = xmmword_1C33BDEC4;
    v18[1] = unk_1C33BDED4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 12);
    v17 = 1404;
    v16 = xmmword_1C33C0ED0;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3245, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Reaction(void)::common_Reaction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Reaction(void)::common_Reaction;
}

void sub_1C327DB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DailyBriefing(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_DailyBriefing");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BF230;
    v17[1] = unk_1C33BF240;
    v17[2] = xmmword_1C33BF250;
    v17[3] = unk_1C33BF260;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16[0] = xmmword_1C33BDF24;
    v16[1] = unk_1C33BDF34;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 8);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x9E000000216;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1722, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_DailyBriefing(void)::common_DailyBriefing = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DailyBriefing(void)::common_DailyBriefing;
}

void sub_1C327DD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 216);
  if (*(char *)(v36 - 153) < 0)
    operator delete(*(void **)(v36 - 176));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327DE10()
{
  JUMPOUT(0x1C327DDFCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Meridiem");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x55700000556;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1314, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Meridiem(void)::common_Meridiem = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Meridiem(void)::common_Meridiem;
}

void sub_1C327DFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327E058()
{
  JUMPOUT(0x1C327E044);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Tag(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_Tag");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3028, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_Tag(void)::common_Tag = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Tag(void)::common_Tag;
}

void sub_1C327E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_PaymentSortKey");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 8);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33BDF44;
    v16 = 0x7FF000007FELL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2011, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentSortKey(void)::common_PaymentSortKey = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey(void)::common_PaymentSortKey;
}

void sub_1C327E450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327E4E0()
{
  JUMPOUT(0x1C327E4CCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MixedFraction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  uint64_t v6[5];
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  int v14[8];
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_MixedFraction");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BDF7C;
    v17[3] = unk_1C33BDF8C;
    v17[4] = xmmword_1C33BDF9C;
    v17[5] = unk_1C33BDFAC;
    v17[0] = xmmword_1C33BDF5C;
    v17[1] = unk_1C33BDF6C;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v17, 13);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v16, 2);
    v8 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v15 = 0x54300000542;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 2);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v6, v14, 7);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1292, 2, (uint64_t *)v12, v11, v10, v9, v7, v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_MixedFraction(void)::common_MixedFraction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MixedFraction(void)::common_MixedFraction;
}

void sub_1C327E6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0)
    operator delete(*(void **)(v38 - 216));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327E778()
{
  JUMPOUT(0x1C327E764);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Voicemail(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD v19[5];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Voicemail");
    v19[2] = xmmword_1C33BDFE4;
    v19[3] = unk_1C33BDFF4;
    v19[4] = xmmword_1C33BE004;
    v19[0] = xmmword_1C33BDFC4;
    v19[1] = unk_1C33BDFD4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 10);
    v17[0] = xmmword_1C33BE014;
    v17[1] = unk_1C33BE024;
    v18[0] = xmmword_1C33BE034;
    *(_OWORD *)((char *)v18 + 12) = *(__int128 *)((char *)&xmmword_1C33BE034 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 15);
    v9 = 1307;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BEC88;
    v16 = 0x5D000000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1315, 2, (uint64_t *)v13, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Voicemail(void)::common_Voicemail = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Voicemail(void)::common_Voicemail;
}

void sub_1C327E96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327EA04()
{
  JUMPOUT(0x1C327E9F0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ContactAddress(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ContactAddress");
    v17[2] = xmmword_1C33C14AC;
    v17[3] = unk_1C33C14BC;
    v17[4] = xmmword_1C33C14CC;
    v17[0] = xmmword_1C33C148C;
    v17[1] = unk_1C33C149C;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1293, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ContactAddress(void)::common_ContactAddress = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ContactAddress(void)::common_ContactAddress;
}

void sub_1C327EBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PointOfInterest(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_PointOfInterest");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BE090;
    v17[5] = unk_1C33BE0A0;
    v17[6] = xmmword_1C33BE0B0;
    v17[0] = xmmword_1C33BE050;
    v17[1] = unk_1C33BE060;
    v17[2] = xmmword_1C33BE070;
    v17[3] = unk_1C33BE080;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 15);
    v16[0] = xmmword_1C33C0878;
    v16[1] = unk_1C33C0888;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 8);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x4B600000248;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1723, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_PointOfInterest(void)::common_PointOfInterest = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PointOfInterest(void)::common_PointOfInterest;
}

void sub_1C327EE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0)
    operator delete(*(void **)(v41 - 224));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327EE9C()
{
  JUMPOUT(0x1C327EE88);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MeasurementQualifier");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16[0] = xmmword_1C33BE0C8;
    v16[1] = unk_1C33BE0D8;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 8);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2741, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier(void)::common_MeasurementQualifier = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier(void)::common_MeasurementQualifier;
}

void sub_1C327F054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327F0E4()
{
  JUMPOUT(0x1C327F0D0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Quantifier");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BE0E8;
    v17[1] = unk_1C33BE0F8;
    v17[2] = xmmword_1C33BE108;
    v17[3] = unk_1C33BE118;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[0] = xmmword_1C33BE130;
    v15[1] = unk_1C33BE140;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 8);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1294, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Quantifier(void)::common_Quantifier = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier(void)::common_Quantifier;
}

void sub_1C327F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0)
    operator delete(*(void **)(v38 - 184));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327F33C()
{
  JUMPOUT(0x1C327F328);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_AdjustmentType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33C3500;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2635, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_AdjustmentType(void)::common_AdjustmentType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentType(void)::common_AdjustmentType;
}

void sub_1C327F4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327F580()
{
  JUMPOUT(0x1C327F56CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_EmailState");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    *(_OWORD *)v16 = xmmword_1C33BE150;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BE150 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, v16, 7);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3063, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_EmailState(void)::common_EmailState = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState(void)::common_EmailState;
}

void sub_1C327F740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C327F7D0()
{
  JUMPOUT(0x1C327F7BCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotificationType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_NotificationType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2589, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_NotificationType(void)::common_NotificationType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NotificationType(void)::common_NotificationType;
}

void sub_1C327F978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoTag(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PhotoTag");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1968, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PhotoTag(void)::common_PhotoTag = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoTag(void)::common_PhotoTag;
}

void sub_1C327FBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PointOfInterestType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_PointOfInterestType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3154, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_PointOfInterestType(void)::common_PointOfInterestType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PointOfInterestType(void)::common_PointOfInterestType;
}

void sub_1C327FDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureComponent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_TemperatureComponent");
    v17[2] = xmmword_1C33BE18C;
    v17[3] = unk_1C33BE19C;
    v17[4] = xmmword_1C33BE1AC;
    v17[0] = xmmword_1C33BE16C;
    v17[1] = unk_1C33BE17C;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    v10 = 1335;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2534, 2, (uint64_t *)v14, v13, v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_TemperatureComponent(void)::common_TemperatureComponent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureComponent(void)::common_TemperatureComponent;
}

void sub_1C328001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32800AC()
{
  JUMPOUT(0x1C3280098);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  _OWORD v15[3];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_MonthOfYear");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BE1BC;
    v17[1] = unk_1C33BE1CC;
    v17[2] = xmmword_1C33BE1DC;
    v17[3] = unk_1C33BE1EC;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[0] = xmmword_1C33BE204;
    v15[1] = unk_1C33BE214;
    v15[2] = xmmword_1C33BE224;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 12);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1316, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_MonthOfYear(void)::common_MonthOfYear = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear(void)::common_MonthOfYear;
}

void sub_1C328027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 177) < 0)
    operator delete(*(void **)(v38 - 200));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328030C()
{
  JUMPOUT(0x1C32802F8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[6];
  int v16[8];
  _OWORD v17[7];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_DateTimeRange");
    v17[4] = xmmword_1C33BE274;
    v17[5] = unk_1C33BE284;
    v17[6] = xmmword_1C33BE294;
    v17[0] = xmmword_1C33BE234;
    v17[1] = unk_1C33BE244;
    v17[2] = xmmword_1C33BE254;
    v17[3] = unk_1C33BE264;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 14);
    *(_OWORD *)v16 = xmmword_1C33BFDF0;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFDF0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, v16, 7);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[2] = xmmword_1C33BE2C4;
    v15[3] = unk_1C33BE2D4;
    v15[4] = xmmword_1C33BE2E4;
    v15[5] = unk_1C33BE2F4;
    v15[0] = xmmword_1C33BE2A4;
    v15[1] = unk_1C33BE2B4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 24);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1317, 2, (uint64_t *)__p, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(void)::common_DateTimeRange = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange(void)::common_DateTimeRange;
}

void sub_1C32804F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3280584()
{
  JUMPOUT(0x1C3280570);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[14];
  int v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_TemperatureUnit");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BF400;
    v18[3] = unk_1C33BF410;
    v18[4] = xmmword_1C33BF420;
    v18[0] = xmmword_1C33BF3E0;
    v18[1] = unk_1C33BF3F0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 11);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    v9 = 1323;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = 2815;
    v15[10] = xmmword_1C33BE3A4;
    v15[11] = unk_1C33BE3B4;
    v15[12] = xmmword_1C33BE3C4;
    v15[13] = unk_1C33BE3D4;
    v15[6] = xmmword_1C33BE364;
    v15[7] = unk_1C33BE374;
    v15[8] = xmmword_1C33BE384;
    v15[9] = unk_1C33BE394;
    v15[2] = xmmword_1C33BE324;
    v15[3] = unk_1C33BE334;
    v15[4] = xmmword_1C33BE344;
    v15[5] = unk_1C33BE354;
    v15[0] = xmmword_1C33BE304;
    v15[1] = unk_1C33BE314;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 57);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2535, 2, (uint64_t *)__p, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_TemperatureUnit(void)::common_TemperatureUnit = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit(void)::common_TemperatureUnit;
}

void sub_1C3280798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3280830()
{
  JUMPOUT(0x1C328081CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SafetySession(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_SafetySession");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BE408;
    v18[3] = unk_1C33BE418;
    v18[4] = xmmword_1C33BE428;
    v18[0] = xmmword_1C33BE3E8;
    v18[1] = unk_1C33BE3F8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 11);
    v17 = 0x57D00000ABCLL;
    v16[0] = xmmword_1C33BE440;
    v16[1] = unk_1C33BE450;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 10);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x50700000239;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3126, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_SafetySession(void)::common_SafetySession = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SafetySession(void)::common_SafetySession;
}

void sub_1C3280A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3280A9C()
{
  JUMPOUT(0x1C3280A88);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DailyBriefingItem(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_DailyBriefingItem");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2528, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_DailyBriefingItem(void)::common_DailyBriefingItem = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DailyBriefingItem(void)::common_DailyBriefingItem;
}

void sub_1C3280C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_QRCodeType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_QRCodeType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3262, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_QRCodeType(void)::common_QRCodeType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_QRCodeType(void)::common_QRCodeType;
}

void sub_1C3280E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentAccountType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PaymentAccountType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2013, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentAccountType(void)::common_PaymentAccountType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentAccountType(void)::common_PaymentAccountType;
}

void sub_1C32810A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonContact(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_PersonContact");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33BE468;
    v18[1] = unk_1C33BE478;
    v18[2] = xmmword_1C33BE488;
    v18[3] = unk_1C33BE498;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v17 = 1405;
    v16[0] = xmmword_1C33BE4B0;
    v16[1] = unk_1C33BE4C0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1724, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_PersonContact(void)::common_PersonContact = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonContact(void)::common_PersonContact;
}

void sub_1C3281300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 232);
  if (*(char *)(v36 - 169) < 0)
    operator delete(*(void **)(v36 - 192));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3281390()
{
  JUMPOUT(0x1C328137CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_ListPosition");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BE4F4;
    v18[3] = unk_1C33BE504;
    v18[4] = xmmword_1C33BE514;
    v18[0] = xmmword_1C33BE4D4;
    v18[1] = unk_1C33BE4E4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 11);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[4] = xmmword_1C33BE56C;
    v15[5] = unk_1C33BE57C;
    v15[6] = xmmword_1C33BE58C;
    v15[7] = unk_1C33BE59C;
    v15[0] = xmmword_1C33BE52C;
    v15[1] = unk_1C33BE53C;
    v15[2] = xmmword_1C33BE54C;
    v15[3] = unk_1C33BE55C;
    v16 = 0x5FF000005FELL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 34);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1318, 2, (uint64_t *)__p, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_ListPosition(void)::common_ListPosition = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ListPosition(void)::common_ListPosition;
}

void sub_1C3281584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3281614()
{
  JUMPOUT(0x1C3281600);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ProductCategory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ProductCategory");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1495, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ProductCategory(void)::common_ProductCategory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ProductCategory(void)::common_ProductCategory;
}

void sub_1C32817C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarSystem(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CalendarSystem");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1295, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CalendarSystem(void)::common_CalendarSystem = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarSystem(void)::common_CalendarSystem;
}

void sub_1C32819F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonProperty(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PersonProperty");
    v18[2] = xmmword_1C33BE5D4;
    v18[3] = unk_1C33BE5E4;
    v18[4] = xmmword_1C33BE5F4;
    v18[0] = xmmword_1C33BE5B4;
    v18[1] = unk_1C33BE5C4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v17 = 1404;
    v16 = xmmword_1C33BFB9C;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3211, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PersonProperty(void)::common_PersonProperty = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonProperty(void)::common_PersonProperty;
}

void sub_1C3281C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Color(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Color");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1962, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Color(void)::common_Color = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Color(void)::common_Color;
}

void sub_1C3281E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Note(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[3];
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Note");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BE624;
    v18[3] = unk_1C33BE634;
    v18[4] = xmmword_1C33BE644;
    v18[5] = unk_1C33BE654;
    v18[0] = xmmword_1C33BE604;
    v18[1] = unk_1C33BE614;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 13);
    v17[0] = xmmword_1C33BE66C;
    v17[1] = unk_1C33BE67C;
    v17[2] = xmmword_1C33BE68C;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 12);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BE69C;
    v16 = 0x75900000A76;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3029, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Note(void)::common_Note = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Note(void)::common_Note;
}

void sub_1C32820D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3282164()
{
  JUMPOUT(0x1C3282150);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceTrigger(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_VoiceTrigger");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33C3510;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3179, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_VoiceTrigger(void)::common_VoiceTrigger = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_VoiceTrigger(void)::common_VoiceTrigger;
}

void sub_1C328231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32823AC()
{
  JUMPOUT(0x1C3282398);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time24HourClock(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Time24HourClock");
    v18[4] = xmmword_1C33C00E0;
    v18[5] = unk_1C33C00F0;
    v18[6] = xmmword_1C33C0100;
    v18[0] = xmmword_1C33C00A0;
    v18[1] = unk_1C33C00B0;
    v18[2] = xmmword_1C33C00C0;
    v18[3] = unk_1C33C00D0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 14);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    v9 = 1330;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = 1427;
    v15 = xmmword_1C33BE6B4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1296, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Time24HourClock(void)::common_Time24HourClock = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Time24HourClock(void)::common_Time24HourClock;
}

void sub_1C328258C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3282624()
{
  JUMPOUT(0x1C3282610);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Size(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Size");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1970, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Size(void)::common_Size = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Size(void)::common_Size;
}

void sub_1C32827D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Compass(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Compass");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BE6E8;
    v17[3] = unk_1C33BE6F8;
    v17[4] = xmmword_1C33BE708;
    v17[5] = unk_1C33BE718;
    v17[0] = xmmword_1C33BE6C8;
    v17[1] = unk_1C33BE6D8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 13);
    v16 = xmmword_1C33C3520;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 4);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3149, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Compass(void)::common_Compass = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Compass(void)::common_Compass;
}

void sub_1C3282A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Locale(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Locale");
    v17[2] = xmmword_1C33BE750;
    v17[3] = unk_1C33BE760;
    v17[4] = xmmword_1C33BE770;
    v17[0] = xmmword_1C33BE730;
    v17[1] = unk_1C33BE740;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1319, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Locale(void)::common_Locale = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Locale(void)::common_Locale;
}

void sub_1C3282C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementUnitType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MeasurementUnitType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33C3530;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2742, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MeasurementUnitType(void)::common_MeasurementUnitType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementUnitType(void)::common_MeasurementUnitType;
}

void sub_1C3282E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3282F08()
{
  JUMPOUT(0x1C3282EF4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FormattedString(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_FormattedString");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BE780;
    v17[1] = unk_1C33BE790;
    v17[2] = xmmword_1C33BE7A0;
    v17[3] = unk_1C33BE7B0;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3236, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_FormattedString(void)::common_FormattedString = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_FormattedString(void)::common_FormattedString;
}

void sub_1C32830B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutEquipment(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_WorkoutEquipment");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2954, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_WorkoutEquipment(void)::common_WorkoutEquipment = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutEquipment(void)::common_WorkoutEquipment;
}

void sub_1C32832E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonName(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PersonName");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BE808;
    v17[5] = unk_1C33BE818;
    v17[6] = xmmword_1C33BE828;
    v17[0] = xmmword_1C33BE7C8;
    v17[1] = unk_1C33BE7D8;
    v17[2] = xmmword_1C33BE7E8;
    v17[3] = unk_1C33BE7F8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 15);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1297, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PersonName(void)::common_PersonName = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonName(void)::common_PersonName;
}

void sub_1C3283524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 232);
  if (*(char *)(v36 - 169) < 0)
    operator delete(*(void **)(v36 - 192));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoMemory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PhotoMemory");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v17 = 0x4F60000098ALL;
    v16[0] = xmmword_1C33BE840;
    v16[1] = unk_1C33BE850;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 10);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3242, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PhotoMemory(void)::common_PhotoMemory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoMemory(void)::common_PhotoMemory;
}

void sub_1C3283768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  int __dst[67];
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_TimeUnit");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BF400;
    v17[3] = unk_1C33BF410;
    v17[4] = xmmword_1C33BF420;
    v17[0] = xmmword_1C33BF3E0;
    v17[1] = unk_1C33BF3F0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 11);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    v9 = 1323;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memcpy(__dst, &unk_1C33BE868, sizeof(__dst));
    std::unordered_set<int>::unordered_set((uint64_t)v8, __dst, 67);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1298, 2, (uint64_t *)__p, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_TimeUnit(void)::common_TimeUnit = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_TimeUnit(void)::common_TimeUnit;
}

void sub_1C32839D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (a48 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v48, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3283A68()
{
  JUMPOUT(0x1C3283A54);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Politeness(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Politeness");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xC2B00000C2ALL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3107, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Politeness(void)::common_Politeness = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Politeness(void)::common_Politeness;
}

void sub_1C3283C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3283CAC()
{
  JUMPOUT(0x1C3283C98);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Arithmetic(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Arithmetic");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33BE974;
    v18[1] = unk_1C33BE984;
    v18[2] = xmmword_1C33BE994;
    v18[3] = unk_1C33BE9A4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v16 = 0x501000006A0;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 3);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x69B00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1689, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Arithmetic(void)::common_Arithmetic = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Arithmetic(void)::common_Arithmetic;
}

void sub_1C3283E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3283F08()
{
  JUMPOUT(0x1C3283EF4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CarSetting(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[5];
  _OWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CarSetting");
    v17[2] = xmmword_1C33BEA3C;
    v17[3] = unk_1C33BEA4C;
    v17[4] = xmmword_1C33BEA5C;
    v17[5] = unk_1C33BEA6C;
    v17[0] = xmmword_1C33BEA1C;
    v17[1] = unk_1C33BEA2C;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 12);
    v16[2] = xmmword_1C33BEA9C;
    v16[3] = unk_1C33BEAAC;
    v16[4] = xmmword_1C33BEABC;
    v16[0] = xmmword_1C33BEA7C;
    v16[1] = unk_1C33BEA8C;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 20);
    v10 = 1881;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2363, 2, (uint64_t *)v14, v13, v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CarSetting(void)::common_CarSetting = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CarSetting(void)::common_CarSetting;
}

void sub_1C32840D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3284164()
{
  JUMPOUT(0x1C3284150);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Age(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Age");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BEAEC;
    v17[3] = unk_1C33BEAFC;
    v17[4] = xmmword_1C33BEB0C;
    v17[0] = xmmword_1C33BEACC;
    v17[1] = unk_1C33BEADC;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 11);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    v9 = 1283;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v15 = 0x75400000753;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1872, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Age(void)::common_Age = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Age(void)::common_Age;
}

void sub_1C328433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32843D4()
{
  JUMPOUT(0x1C32843C0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Video(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[3];
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Video");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BFED8;
    v18[3] = unk_1C33BFEE8;
    v18[4] = xmmword_1C33BFEF8;
    v18[5] = unk_1C33BFF08;
    v18[0] = xmmword_1C33BFEB8;
    v18[1] = unk_1C33BFEC8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 13);
    v16[0] = xmmword_1C33BEB24;
    v16[1] = unk_1C33BEB34;
    v17[0] = xmmword_1C33BEB44;
    *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1C33BEB44 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 15);
    v9 = 1966;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33BEB60;
    v15[1] = unk_1C33BEB70;
    v15[2] = xmmword_1C33BEB80;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 6);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1971, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Video(void)::common_Video = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Video(void)::common_Video;
}

void sub_1C32845D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3284668()
{
  JUMPOUT(0x1C3284654);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DeviceProperty(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_DeviceProperty");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BEBB0;
    v17[3] = unk_1C33BEBC0;
    v17[4] = xmmword_1C33BEBD0;
    v17[0] = xmmword_1C33BEB90;
    v17[1] = unk_1C33BEBA0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 11);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1882, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_DeviceProperty(void)::common_DeviceProperty = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DeviceProperty(void)::common_DeviceProperty;
}

void sub_1C328481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCall(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_PhoneCall");
    v20 = 0x4B6000004F4;
    v19[2] = xmmword_1C33BEC08;
    v19[3] = unk_1C33BEC18;
    v19[4] = xmmword_1C33BEC28;
    v19[0] = xmmword_1C33BEBE8;
    v19[1] = unk_1C33BEBF8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 11);
    v18 = 0x57F0000057DLL;
    v17[0] = xmmword_1C33BEC40;
    v17[1] = unk_1C33BEC50;
    v17[2] = xmmword_1C33BEC60;
    v17[3] = unk_1C33BEC70;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 18);
    v9 = 1307;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BEC88;
    v16 = 0x5D000000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1320, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_PhoneCall(void)::common_PhoneCall = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCall(void)::common_PhoneCall;
}

void sub_1C3284AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3284B40()
{
  JUMPOUT(0x1C3284B2CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SettingValueType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SettingValueType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xA2500000A24;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2590, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SettingValueType(void)::common_SettingValueType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SettingValueType(void)::common_SettingValueType;
}

void sub_1C3284CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3284D84()
{
  JUMPOUT(0x1C3284D70);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Interjection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Interjection");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33BECA0;
    v18[1] = unk_1C33BECB0;
    v18[2] = xmmword_1C33BECC0;
    v18[3] = unk_1C33BECD0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33BECE8;
    v16 = 0xC3000000C2FLL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3108, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Interjection(void)::common_Interjection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Interjection(void)::common_Interjection;
}

void sub_1C3284F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3284FE8()
{
  JUMPOUT(0x1C3284FD4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SocialConversation(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_SocialConversation");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BF1E8;
    v17[1] = unk_1C33BF1F8;
    v17[2] = xmmword_1C33BF208;
    v17[3] = unk_1C33BF218;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16 = 0x501000009F8;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x9F600000A44;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2550, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_SocialConversation(void)::common_SocialConversation = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SocialConversation(void)::common_SocialConversation;
}

void sub_1C32851AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328523C()
{
  JUMPOUT(0x1C3285228);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailLabel(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_EmailLabel");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3064, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_EmailLabel(void)::common_EmailLabel = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailLabel(void)::common_EmailLabel;
}

void sub_1C32853E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SettingValue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[8];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SettingValue");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BED40;
    v17[5] = unk_1C33BED50;
    v17[6] = xmmword_1C33BED60;
    v17[7] = unk_1C33BED70;
    v17[0] = xmmword_1C33BED00;
    v17[1] = unk_1C33BED10;
    v17[2] = xmmword_1C33BED20;
    v17[3] = unk_1C33BED30;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 17);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1883, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SettingValue(void)::common_SettingValue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SettingValue(void)::common_SettingValue;
}

void sub_1C3285628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppSubSection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_AppSubSection");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3268, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_AppSubSection(void)::common_AppSubSection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppSubSection(void)::common_AppSubSection;
}

void sub_1C3285858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Organization(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Organization");
    v18[2] = xmmword_1C33C1670;
    v18[3] = unk_1C33C1680;
    v18[4] = xmmword_1C33C1690;
    v18[0] = xmmword_1C33C1650;
    v18[1] = unk_1C33C1660;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    v9 = 1287;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v7 = 1991;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1321, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Organization(void)::common_Organization = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Organization(void)::common_Organization;
}

void sub_1C3285ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3285B6C()
{
  JUMPOUT(0x1C3285B58);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Email(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[4];
  _OWORD v16[4];
  int v17;
  _OWORD v18[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Email");
    v18[4] = xmmword_1C33BEDC8;
    v18[5] = unk_1C33BEDD8;
    v18[6] = xmmword_1C33BEDE8;
    v18[7] = unk_1C33BEDF8;
    v18[0] = xmmword_1C33BED88;
    v18[1] = unk_1C33BED98;
    v18[2] = xmmword_1C33BEDA8;
    v18[3] = unk_1C33BEDB8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 16);
    v17 = 1398;
    v16[0] = xmmword_1C33BEE08;
    v16[1] = unk_1C33BEE18;
    v16[2] = xmmword_1C33BEE28;
    v16[3] = unk_1C33BEE38;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 17);
    v9 = 1307;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33BEE4C;
    v15[1] = unk_1C33BEE5C;
    v15[2] = xmmword_1C33BEE6C;
    v15[3] = unk_1C33BEE7C;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 8);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1669, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Email(void)::common_Email = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Email(void)::common_Email;
}

void sub_1C3285D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3285DFC()
{
  JUMPOUT(0x1C3285DE8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DayOfWeek(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  int v15[10];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_DayOfWeek");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    *(_OWORD *)v15 = xmmword_1C33BEE8C;
    *(_OWORD *)&v15[3] = *(__int128 *)((char *)&xmmword_1C33BEE8C + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, v15, 7);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1300, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_DayOfWeek(void)::common_DayOfWeek = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DayOfWeek(void)::common_DayOfWeek;
}

void sub_1C3285FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0)
    operator delete(*(void **)(v38 - 184));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3286050()
{
  JUMPOUT(0x1C328603CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageLabel(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_MessageLabel");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3092, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_MessageLabel(void)::common_MessageLabel = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageLabel(void)::common_MessageLabel;
}

void sub_1C32861F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_QRCode(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_QRCode");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BEEA8;
    v17[1] = unk_1C33BEEB8;
    v17[2] = xmmword_1C33BEEC8;
    v17[3] = unk_1C33BEED8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = xmmword_1C33C3550;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 4);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3263, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_QRCode(void)::common_QRCode = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_QRCode(void)::common_QRCode;
}

void sub_1C328642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppState(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_AppState");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xB8F00000B8ELL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2955, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_AppState(void)::common_AppState = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppState(void)::common_AppState;
}

void sub_1C3286668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32866F8()
{
  JUMPOUT(0x1C32866E4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntityType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_UserEntityType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2536, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_UserEntityType(void)::common_UserEntityType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntityType(void)::common_UserEntityType;
}

void sub_1C32868A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CrisisSupport(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_CrisisSupport");
    v17[2] = xmmword_1C33BEF10;
    v17[3] = unk_1C33BEF20;
    v17[4] = xmmword_1C33BEF30;
    v17[0] = xmmword_1C33BEEF0;
    v17[1] = unk_1C33BEF00;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 10);
    v16 = 0x501000009F8;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0xA3400000A44;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2612, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_CrisisSupport(void)::common_CrisisSupport = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CrisisSupport(void)::common_CrisisSupport;
}

void sub_1C3286AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3286B78()
{
  JUMPOUT(0x1C3286B64);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Attachment(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Attachment");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BEF60;
    v17[3] = unk_1C33BEF70;
    v17[4] = xmmword_1C33BEF80;
    v17[5] = unk_1C33BEF90;
    v17[0] = xmmword_1C33BEF40;
    v17[1] = unk_1C33BEF50;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 13);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2383, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Attachment(void)::common_Attachment = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Attachment(void)::common_Attachment;
}

void sub_1C3286D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 216);
  if (*(char *)(v36 - 153) < 0)
    operator delete(*(void **)(v36 - 176));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Website(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Website");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v16 = 0x5DB00000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 3);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3197, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Website(void)::common_Website = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Website(void)::common_Website;
}

void sub_1C3286F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserFavorite(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_UserFavorite");
    v17[2] = xmmword_1C33BF754;
    v17[3] = unk_1C33BF764;
    v17[4] = xmmword_1C33BF774;
    v17[0] = xmmword_1C33BF734;
    v17[1] = unk_1C33BF744;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16[0] = xmmword_1C33BEFA8;
    v16[1] = unk_1C33BEFB8;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 8);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3204, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_UserFavorite(void)::common_UserFavorite = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserFavorite(void)::common_UserFavorite;
}

void sub_1C328719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageMode(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MessageMode");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33C3560;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2520, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MessageMode(void)::common_MessageMode = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageMode(void)::common_MessageMode;
}

void sub_1C32873D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3287468()
{
  JUMPOUT(0x1C3287454);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarEventType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CalendarEventType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33C3570;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3030, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CalendarEventType(void)::common_CalendarEventType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarEventType(void)::common_CalendarEventType;
}

void sub_1C328761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32876AC()
{
  JUMPOUT(0x1C3287698);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CarProfile(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CarProfile");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1803, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CarProfile(void)::common_CarProfile = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CarProfile(void)::common_CarProfile;
}

void sub_1C3287858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaContent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MediaContent");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1490, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaContent(void)::common_MediaContent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaContent(void)::common_MediaContent;
}

void sub_1C3287A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CollaborationMode(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CollaborationMode");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33BEFC8;
    v17 = 0xB5E00000B79;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2909, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CollaborationMode(void)::common_CollaborationMode = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CollaborationMode(void)::common_CollaborationMode;
}

void sub_1C3287CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3287D68()
{
  JUMPOUT(0x1C3287D54);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageState(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MessageState");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16[0] = xmmword_1C33BEFE0;
    v16[1] = unk_1C33BEFF0;
    v17 = 3103;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 9);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3093, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MessageState(void)::common_MessageState = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageState(void)::common_MessageState;
}

void sub_1C3287F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3287FB8()
{
  JUMPOUT(0x1C3287FA4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderList(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  int v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_ReminderList");
    v20 = 0x4B6000004F4;
    v19[2] = xmmword_1C33BF024;
    v19[3] = unk_1C33BF034;
    v19[4] = xmmword_1C33BF044;
    v19[0] = xmmword_1C33BF004;
    v19[1] = unk_1C33BF014;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 11);
    v18 = 1405;
    v17[0] = xmmword_1C33C16A0;
    v17[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 9);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BF05C;
    v16 = 0x53400000239;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3031, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_ReminderList(void)::common_ReminderList = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderList(void)::common_ReminderList;
}

void sub_1C32881A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 209) < 0)
    operator delete(*(void **)(v40 - 232));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3288230()
{
  JUMPOUT(0x1C328821CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotificationAction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_NotificationAction");
    v18[2] = xmmword_1C33BF094;
    v18[3] = unk_1C33BF0A4;
    v18[4] = xmmword_1C33BF0B4;
    v18[0] = xmmword_1C33BF074;
    v18[1] = unk_1C33BF084;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v16 = 0xA2100000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 3);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2591, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_NotificationAction(void)::common_NotificationAction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NotificationAction(void)::common_NotificationAction;
}

void sub_1C32883E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SearchQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  uint64_t v7[5];
  uint64_t v8[4];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_SearchQualifier");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BF0C4;
    v17[1] = unk_1C33BF0D4;
    v17[2] = xmmword_1C33BF0E4;
    v17[3] = unk_1C33BF0F4;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v16, 2);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    v15[0] = xmmword_1C33BF10C;
    v15[1] = unk_1C33BF11C;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)v15, 8);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v14 = 0xAB300000B57;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1301, 2, (uint64_t *)v12, v11, v10, v8, v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_SearchQualifier(void)::common_SearchQualifier = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SearchQualifier(void)::common_SearchQualifier;
}

void sub_1C3288654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32886EC()
{
  JUMPOUT(0x1C32886D8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDate(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *__p[2];
  char v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v18[10];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_OffsetDate");
    v19 = 0x4B6000004F4;
    v18[6] = xmmword_1C33BF18C;
    v18[7] = unk_1C33BF19C;
    v18[8] = xmmword_1C33BF1AC;
    v18[9] = unk_1C33BF1BC;
    v18[2] = xmmword_1C33BF14C;
    v18[3] = unk_1C33BF15C;
    v18[4] = xmmword_1C33BF16C;
    v18[5] = unk_1C33BF17C;
    v18[0] = xmmword_1C33BF12C;
    v18[1] = unk_1C33BF13C;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 21);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v17, 2);
    v8 = 1328;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v16 = 2079;
    v15 = xmmword_1C33BF1D4;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 5);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v14 = 0x7DE00000816;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1491, 2, (uint64_t *)__p, v11, v10, v9, v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_OffsetDate(void)::common_OffsetDate = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDate(void)::common_OffsetDate;
}

void sub_1C32888F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (a48 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v48, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3288998()
{
  JUMPOUT(0x1C3288984);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntityType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_AppEntityType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2569, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_AppEntityType(void)::common_AppEntityType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppEntityType(void)::common_AppEntityType;
}

void sub_1C3288B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FavoriteCategory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_FavoriteCategory");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3212, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_FavoriteCategory(void)::common_FavoriteCategory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_FavoriteCategory(void)::common_FavoriteCategory;
}

void sub_1C3288D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Utilities(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Utilities");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BF1E8;
    v17[1] = unk_1C33BF1F8;
    v17[2] = xmmword_1C33BF208;
    v17[3] = unk_1C33BF218;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16 = 0x501000009F8;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0xA3500000A44;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2613, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Utilities(void)::common_Utilities = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Utilities(void)::common_Utilities;
}

void sub_1C3288FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328904C()
{
  JUMPOUT(0x1C3289038);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Clock(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Clock");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33BF230;
    v18[1] = unk_1C33BF240;
    v18[2] = xmmword_1C33BF250;
    v18[3] = unk_1C33BF260;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v17 = 1404;
    v16 = xmmword_1C33BF278;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2006, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Clock(void)::common_Clock = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Clock(void)::common_Clock;
}

void sub_1C3289204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PlaybackState(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PlaybackState");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33BF28C;
    v17 = 2942;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2934, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PlaybackState(void)::common_PlaybackState = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PlaybackState(void)::common_PlaybackState;
}

void sub_1C328944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32894DC()
{
  JUMPOUT(0x1C32894C8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriSocialAction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SiriSocialAction");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BFB08;
    v17[1] = unk_1C33BFB18;
    v17[2] = xmmword_1C33BFB28;
    v17[3] = unk_1C33BFB38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = xmmword_1C33C3580;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 4);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3180, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriSocialAction(void)::common_SiriSocialAction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriSocialAction(void)::common_SiriSocialAction;
}

void sub_1C3289688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Integer(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  uint64_t v6[5];
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  int v14[8];
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_Integer");
    v17[2] = xmmword_1C33BF2C0;
    v17[3] = unk_1C33BF2D0;
    v17[4] = xmmword_1C33BF2E0;
    v17[0] = xmmword_1C33BF2A0;
    v17[1] = unk_1C33BF2B0;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v16, 2);
    v8 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v15 = 0x56500000564;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 2);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v6, v14, 7);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1322, 2, (uint64_t *)v12, v11, v10, v9, v7, v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_Integer(void)::common_Integer = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Integer(void)::common_Integer;
}

void sub_1C32898FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 177) < 0)
    operator delete(*(void **)(v38 - 200));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328999C()
{
  JUMPOUT(0x1C3289988);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriProperty(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SiriProperty");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v17 = 1404;
    v16 = xmmword_1C33BFB9C;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3213, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriProperty(void)::common_SiriProperty = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriProperty(void)::common_SiriProperty;
}

void sub_1C3289B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Stock(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Stock");
    v18[2] = xmmword_1C33BF310;
    v18[3] = unk_1C33BF320;
    v18[4] = xmmword_1C33BF330;
    v18[5] = unk_1C33BF340;
    v18[0] = xmmword_1C33BF2F0;
    v18[1] = unk_1C33BF300;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 12);
    v17 = 0x57D0000057CLL;
    v16[0] = xmmword_1C33BF350;
    v16[1] = unk_1C33BF360;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 10);
    v9 = 1321;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v7 = 2399;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2395, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Stock(void)::common_Stock = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Stock(void)::common_Stock;
}

void sub_1C3289DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0)
    operator delete(*(void **)(v41 - 224));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3289E6C()
{
  JUMPOUT(0x1C3289E58);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailProvider(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_EmailProvider");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3065, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_EmailProvider(void)::common_EmailProvider = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailProvider(void)::common_EmailProvider;
}

void sub_1C328A014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Device(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Device");
    v18[2] = xmmword_1C33C08B8;
    v18[3] = unk_1C33C08C8;
    v18[4] = xmmword_1C33C08D8;
    v18[5] = unk_1C33C08E8;
    v18[0] = xmmword_1C33C0898;
    v18[1] = unk_1C33C08A8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 12);
    v17 = xmmword_1C33C3590;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 4);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BF378;
    v16 = 0x75A00000923;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1492, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Device(void)::common_Device = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Device(void)::common_Device;
}

void sub_1C328A26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328A2FC()
{
  JUMPOUT(0x1C328A2E8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Medication(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Medication");
    v17[2] = xmmword_1C33BF3B0;
    v17[3] = unk_1C33BF3C0;
    v17[4] = xmmword_1C33BF3D0;
    v17[0] = xmmword_1C33BF390;
    v17[1] = unk_1C33BF3A0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2977, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Medication(void)::common_Medication = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Medication(void)::common_Medication;
}

void sub_1C328A4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementUnit(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[13];
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_MeasurementUnit");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BF400;
    v18[3] = unk_1C33BF410;
    v18[4] = xmmword_1C33BF420;
    v18[0] = xmmword_1C33BF3E0;
    v18[1] = unk_1C33BF3F0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 11);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[10] = xmmword_1C33BF4D8;
    v15[11] = unk_1C33BF4E8;
    v15[12] = xmmword_1C33BF4F8;
    v15[6] = xmmword_1C33BF498;
    v15[7] = unk_1C33BF4A8;
    v15[8] = xmmword_1C33BF4B8;
    v15[9] = unk_1C33BF4C8;
    v15[2] = xmmword_1C33BF458;
    v15[3] = unk_1C33BF468;
    v15[4] = xmmword_1C33BF478;
    v15[5] = unk_1C33BF488;
    v15[0] = xmmword_1C33BF438;
    v15[1] = unk_1C33BF448;
    v16 = 0xA7F00000A7ELL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 54);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1323, 2, (uint64_t *)__p, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_MeasurementUnit(void)::common_MeasurementUnit = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementUnit(void)::common_MeasurementUnit;
}

void sub_1C328A738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328A7C8()
{
  JUMPOUT(0x1C328A7B4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriOpinion(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SiriOpinion");
    v18[2] = xmmword_1C33BF530;
    v18[3] = unk_1C33BF540;
    v18[4] = xmmword_1C33BF550;
    v18[0] = xmmword_1C33BF510;
    v18[1] = unk_1C33BF520;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v17 = 1404;
    v16 = xmmword_1C33BF560;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3214, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriOpinion(void)::common_SiriOpinion = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriOpinion(void)::common_SiriOpinion;
}

void sub_1C328A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestion(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_KnowledgeQuestion");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33BF574;
    v18[1] = unk_1C33BF584;
    v18[2] = xmmword_1C33BF594;
    v18[3] = unk_1C33BF5A4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v16 = 0x66500000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 3);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x6630000065FLL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1634, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestion(void)::common_KnowledgeQuestion = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestion(void)::common_KnowledgeQuestion;
}

void sub_1C328ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328AC60()
{
  JUMPOUT(0x1C328AC4CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SocialInterjection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SocialInterjection");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1180;
    v18[1] = unk_1C33C1190;
    v18[2] = xmmword_1C33C11A0;
    v18[3] = unk_1C33C11B0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v16 = 0xC6200000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 3);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3181, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SocialInterjection(void)::common_SocialInterjection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SocialInterjection(void)::common_SocialInterjection;
}

void sub_1C328AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserPossession(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_UserPossession");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    *(_OWORD *)v16 = xmmword_1C33BFAEC;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFAEC + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v12, v16, 7);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3215, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_UserPossession(void)::common_UserPossession = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserPossession(void)::common_UserPossession;
}

void sub_1C328B054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  uint64_t v7[5];
  uint64_t v8[4];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_RecurringDateTime");
    v18[4] = xmmword_1C33BF5FC;
    v18[5] = unk_1C33BF60C;
    v18[6] = xmmword_1C33BF61C;
    v18[0] = xmmword_1C33BF5BC;
    v18[1] = unk_1C33BF5CC;
    v18[2] = xmmword_1C33BF5DC;
    v18[3] = unk_1C33BF5EC;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 14);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v17, 2);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    v15 = 0x5C200000821;
    v16 = 1473;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 3);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v14 = 0x51600000305;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1324, 2, (uint64_t *)v12, v11, v10, v8, v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(void)::common_RecurringDateTime = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(void)::common_RecurringDateTime;
}

void sub_1C328B2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0)
    operator delete(*(void **)(v38 - 216));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328B360()
{
  JUMPOUT(0x1C328B34CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Announcement(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Announcement");
    v18[2] = xmmword_1C33BF64C;
    v18[3] = unk_1C33BF65C;
    v18[4] = xmmword_1C33BF66C;
    v18[0] = xmmword_1C33BF62C;
    v18[1] = unk_1C33BF63C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 0x57C0000057ALL;
    v16[0] = xmmword_1C33BF67C;
    v16[1] = unk_1C33BF68C;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 10);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x50700000234;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1719, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Announcement(void)::common_Announcement = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Announcement(void)::common_Announcement;
}

void sub_1C328B530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328B5C0()
{
  JUMPOUT(0x1C328B5ACLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[9];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_MediaItemType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[6] = xmmword_1C33BF704;
    v15[7] = unk_1C33BF714;
    v15[8] = xmmword_1C33BF724;
    v15[2] = xmmword_1C33BF6C4;
    v15[3] = unk_1C33BF6D4;
    v15[4] = xmmword_1C33BF6E4;
    v15[5] = unk_1C33BF6F4;
    v15[0] = xmmword_1C33BF6A4;
    v15[1] = unk_1C33BF6B4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 36);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2431, 2, (uint64_t *)__p, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaItemType(void)::common_MediaItemType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemType(void)::common_MediaItemType;
}

void sub_1C328B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328B838()
{
  JUMPOUT(0x1C328B824);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriFavorite(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SiriFavorite");
    v17[2] = xmmword_1C33BF754;
    v17[3] = unk_1C33BF764;
    v17[4] = xmmword_1C33BF774;
    v17[0] = xmmword_1C33BF734;
    v17[1] = unk_1C33BF744;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16[0] = xmmword_1C33BF784;
    v16[1] = unk_1C33BF794;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 8);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3205, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriFavorite(void)::common_SiriFavorite = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriFavorite(void)::common_SiriFavorite;
}

void sub_1C328B9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Payment(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[10];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Payment");
    v18[6] = xmmword_1C33BF804;
    v18[7] = unk_1C33BF814;
    v18[8] = xmmword_1C33BF824;
    v18[9] = unk_1C33BF834;
    v18[2] = xmmword_1C33BF7C4;
    v18[3] = unk_1C33BF7D4;
    v18[4] = xmmword_1C33BF7E4;
    v18[5] = unk_1C33BF7F4;
    v18[0] = xmmword_1C33BF7A4;
    v18[1] = unk_1C33BF7B4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 20);
    v16 = xmmword_1C33BF844;
    v17[0] = unk_1C33BF854;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33BF860;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 11);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x7E100000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2009, 2, (uint64_t *)__p, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Payment(void)::common_Payment = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Payment(void)::common_Payment;
}

void sub_1C328BC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (a50 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v50, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328BCD8()
{
  JUMPOUT(0x1C328BCC4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MultipliedNumber(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  uint64_t v6[5];
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  int v14[8];
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_MultipliedNumber");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BF890;
    v17[3] = unk_1C33BF8A0;
    v17[4] = xmmword_1C33BF8B0;
    v17[0] = xmmword_1C33BF870;
    v17[1] = unk_1C33BF880;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v17, 11);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v16, 2);
    v8 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v15 = 0x56700000566;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 2);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v6, v14, 7);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1325, 2, (uint64_t *)v12, v11, v10, v9, v7, v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_MultipliedNumber(void)::common_MultipliedNumber = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MultipliedNumber(void)::common_MultipliedNumber;
}

void sub_1C328BED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 177) < 0)
    operator delete(*(void **)(v38 - 200));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328BF70()
{
  JUMPOUT(0x1C328BF5CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Timer(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[3];
  int v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Timer");
    v18[2] = xmmword_1C33BF8E8;
    v18[3] = unk_1C33BF8F8;
    v18[4] = xmmword_1C33BF908;
    v18[5] = unk_1C33BF918;
    v18[0] = xmmword_1C33BF8C8;
    v18[1] = unk_1C33BF8D8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 12);
    v17 = 1405;
    v16[0] = xmmword_1C33BF928;
    v16[1] = unk_1C33BF938;
    v16[2] = xmmword_1C33BF948;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 13);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5CE00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1418, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Timer(void)::common_Timer = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Timer(void)::common_Timer;
}

void sub_1C328C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 217) < 0)
    operator delete(*(void **)(v41 - 240));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328C1D4()
{
  JUMPOUT(0x1C328C1C0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotebookItem(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  _OWORD v16[3];
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_NotebookItem");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BF99C;
    v17[5] = unk_1C33BF9AC;
    v17[6] = xmmword_1C33BF9BC;
    v17[0] = xmmword_1C33BF95C;
    v17[1] = unk_1C33BF96C;
    v17[2] = xmmword_1C33BF97C;
    v17[3] = unk_1C33BF98C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 15);
    v16[0] = xmmword_1C33BF9D4;
    v16[1] = unk_1C33BF9E4;
    v16[2] = xmmword_1C33BF9F4;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 12);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33C35A0;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 2);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1720, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_NotebookItem(void)::common_NotebookItem = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NotebookItem(void)::common_NotebookItem;
}

void sub_1C328C3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328C444()
{
  JUMPOUT(0x1C328C430);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OpinionJudgment(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_OpinionJudgment");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3216, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_OpinionJudgment(void)::common_OpinionJudgment = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_OpinionJudgment(void)::common_OpinionJudgment;
}

void sub_1C328C5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceCommand(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_VoiceCommand");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v17 = 0x57D0000057CLL;
    v16[0] = xmmword_1C33BFA04;
    v16[1] = unk_1C33BFA14;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 10);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1808, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_VoiceCommand(void)::common_VoiceCommand = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_VoiceCommand(void)::common_VoiceCommand;
}

void sub_1C328C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_GeographicArea(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD v18[7];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_GeographicArea");
    v18[4] = xmmword_1C33BFA6C;
    v18[5] = unk_1C33BFA7C;
    v18[6] = xmmword_1C33BFA8C;
    v18[0] = xmmword_1C33BFA2C;
    v18[1] = unk_1C33BFA3C;
    v18[2] = xmmword_1C33BFA4C;
    v18[3] = unk_1C33BFA5C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 14);
    v16 = 0xB9C00000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 3);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x92C0000092BLL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1326, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_GeographicArea(void)::common_GeographicArea = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_GeographicArea(void)::common_GeographicArea;
}

void sub_1C328CA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328CB18()
{
  JUMPOUT(0x1C328CB04);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Tapback(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_Tapback");
    v17[2] = xmmword_1C33BFABC;
    v17[3] = unk_1C33BFACC;
    v17[4] = xmmword_1C33BFADC;
    v17[0] = xmmword_1C33BFA9C;
    v17[1] = unk_1C33BFAAC;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 10);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3165, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_Tapback(void)::common_Tapback = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Tapback(void)::common_Tapback;
}

void sub_1C328CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0)
    operator delete(*(void **)(v37 - 152));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriPossession(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SiriPossession");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    *(_OWORD *)v16 = xmmword_1C33BFAEC;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFAEC + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v12, v16, 7);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3217, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriPossession(void)::common_SiriPossession = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriPossession(void)::common_SiriPossession;
}

void sub_1C328CEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserSocialAction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_UserSocialAction");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33BFB08;
    v17[1] = unk_1C33BFB18;
    v17[2] = xmmword_1C33BFB28;
    v17[3] = unk_1C33BFB38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = xmmword_1C33C34E0;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 4);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3182, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_UserSocialAction(void)::common_UserSocialAction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserSocialAction(void)::common_UserSocialAction;
}

void sub_1C328D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_HolidayPhrase(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_HolidayPhrase");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1180;
    v18[1] = unk_1C33C1190;
    v18[2] = xmmword_1C33C11A0;
    v18[3] = unk_1C33C11B0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v16 = 0xC6200000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 3);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3183, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_HolidayPhrase(void)::common_HolidayPhrase = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_HolidayPhrase(void)::common_HolidayPhrase;
}

void sub_1C328D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserVisualMedia(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[3];
  int v18;
  _OWORD v19[6];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_UserVisualMedia");
    v19[2] = xmmword_1C33C043C;
    v19[3] = unk_1C33C044C;
    v19[4] = xmmword_1C33C045C;
    v19[5] = unk_1C33C046C;
    v19[0] = xmmword_1C33C041C;
    v19[1] = unk_1C33C042C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 12);
    v18 = 1983;
    v17[0] = xmmword_1C33BFB50;
    v17[1] = unk_1C33BFB60;
    v17[2] = xmmword_1C33BFB70;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 13);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BFB84;
    v16 = 0x7B00000072ALL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1966, 2, (uint64_t *)__p, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_UserVisualMedia(void)::common_UserVisualMedia = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserVisualMedia(void)::common_UserVisualMedia;
}

void sub_1C328D5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328D668()
{
  JUMPOUT(0x1C328D654);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserProperty(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_UserProperty");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1284;
    v18[1] = unk_1C33C1294;
    v18[2] = xmmword_1C33C12A4;
    v18[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v17 = 1404;
    v16 = xmmword_1C33BFB9C;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3218, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_UserProperty(void)::common_UserProperty = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserProperty(void)::common_UserProperty;
}

void sub_1C328D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarEvent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[9];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_CalendarEvent");
    v19[6] = xmmword_1C33BFC10;
    v19[7] = unk_1C33BFC20;
    v19[8] = xmmword_1C33BFC30;
    v19[2] = xmmword_1C33BFBD0;
    v19[3] = unk_1C33BFBE0;
    v19[4] = xmmword_1C33BFBF0;
    v19[5] = unk_1C33BFC00;
    v19[0] = xmmword_1C33BFBB0;
    v19[1] = unk_1C33BFBC0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 18);
    v18 = 0xBBE0000057DLL;
    v17[0] = xmmword_1C33BFC40;
    v17[1] = unk_1C33BFC50;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 10);
    v9 = 1493;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33BFC68;
    v16 = 0x5070000029FLL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1629, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_CalendarEvent(void)::common_CalendarEvent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarEvent(void)::common_CalendarEvent;
}

void sub_1C328DAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328DB40()
{
  JUMPOUT(0x1C328DB2CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Salutation(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Salutation");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C1180;
    v18[1] = unk_1C33C1190;
    v18[2] = xmmword_1C33C11A0;
    v18[3] = unk_1C33C11B0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 9);
    v16 = 0xC6200000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 3);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3184, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Salutation(void)::common_Salutation = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Salutation(void)::common_Salutation;
}

void sub_1C328DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ActivationValue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_ActivationValue");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x76A00000769;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1880, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_ActivationValue(void)::common_ActivationValue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ActivationValue(void)::common_ActivationValue;
}

void sub_1C328DF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328DFC4()
{
  JUMPOUT(0x1C328DFB0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FavoriteInstance(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_FavoriteInstance");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3219, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_FavoriteInstance(void)::common_FavoriteInstance = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_FavoriteInstance(void)::common_FavoriteInstance;
}

void sub_1C328E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MedicationSchedule(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_MedicationSchedule");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33BFCA0;
    v17[3] = unk_1C33BFCB0;
    v17[4] = xmmword_1C33BFCC0;
    v17[5] = unk_1C33BFCD0;
    v17[0] = xmmword_1C33BFC80;
    v17[1] = unk_1C33BFC90;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 13);
    v16[0] = xmmword_1C33C0878;
    v16[1] = unk_1C33C0888;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 8);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0xBA100000BAFLL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2978, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_MedicationSchedule(void)::common_MedicationSchedule = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MedicationSchedule(void)::common_MedicationSchedule;
}

void sub_1C328E3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328E454()
{
  JUMPOUT(0x1C328E440);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriContentTopic(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_SiriContentTopic");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3166, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriContentTopic(void)::common_SiriContentTopic = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriContentTopic(void)::common_SiriContentTopic;
}

void sub_1C328E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Alarm(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[3];
  _OWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Alarm");
    v17[2] = xmmword_1C33BFD08;
    v17[3] = unk_1C33BFD18;
    v17[4] = xmmword_1C33BFD28;
    v17[5] = unk_1C33BFD38;
    v17[0] = xmmword_1C33BFCE8;
    v17[1] = unk_1C33BFCF8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 12);
    v16[0] = xmmword_1C33BFD48;
    v16[1] = unk_1C33BFD58;
    v16[2] = xmmword_1C33BFD68;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 12);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x67E00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1661, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Alarm(void)::common_Alarm = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Alarm(void)::common_Alarm;
}

void sub_1C328E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0)
    operator delete(*(void **)(v41 - 224));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328E8E0()
{
  JUMPOUT(0x1C328E8CCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutInstructor(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_WorkoutInstructor");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2956, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_WorkoutInstructor(void)::common_WorkoutInstructor = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutInstructor(void)::common_WorkoutInstructor;
}

void sub_1C328EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTime(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  int v6;
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_DateTime");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33BFDB8;
    v17[5] = unk_1C33BFDC8;
    v17[6] = xmmword_1C33BFDD8;
    v17[0] = xmmword_1C33BFD78;
    v17[1] = unk_1C33BFD88;
    v17[2] = xmmword_1C33BFD98;
    v17[3] = unk_1C33BFDA8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 15);
    *(_OWORD *)v16 = xmmword_1C33BFDF0;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFDF0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v12, v16, 7);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    v8 = 1362;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v6 = 1265;
    std::unordered_set<int>::unordered_set((uint64_t)v7, &v6, 1);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1302, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, v9, v7, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_DateTime(void)::common_DateTime = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTime(void)::common_DateTime;
}

void sub_1C328ED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a18);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328ED98()
{
  JUMPOUT(0x1C328ED84);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Journey(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[9];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Journey");
    v17[6] = xmmword_1C33BFE6C;
    v17[7] = unk_1C33BFE7C;
    v17[8] = xmmword_1C33BFE8C;
    v17[2] = xmmword_1C33BFE2C;
    v17[3] = unk_1C33BFE3C;
    v17[4] = xmmword_1C33BFE4C;
    v17[5] = unk_1C33BFE5C;
    v17[0] = xmmword_1C33BFE0C;
    v17[1] = unk_1C33BFE1C;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 18);
    *(_OWORD *)v16 = xmmword_1C33BFE9C;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33BFE9C + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v12, v16, 7);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3127, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Journey(void)::common_Journey = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Journey(void)::common_Journey;
}

void sub_1C328EF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementCategory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_MeasurementCategory");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2743, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_MeasurementCategory(void)::common_MeasurementCategory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementCategory(void)::common_MeasurementCategory;
}

void sub_1C328F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Slideshow(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[3];
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Slideshow");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33BFED8;
    v18[3] = unk_1C33BFEE8;
    v18[4] = xmmword_1C33BFEF8;
    v18[5] = unk_1C33BFF08;
    v18[0] = xmmword_1C33BFEB8;
    v18[1] = unk_1C33BFEC8;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 13);
    v16[0] = xmmword_1C33BFF20;
    v16[1] = unk_1C33BFF30;
    v17[0] = xmmword_1C33BFF40;
    *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1C33BFF40 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 15);
    v9 = 1966;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33BFF5C;
    v15[1] = unk_1C33BFF6C;
    v15[2] = xmmword_1C33BFF7C;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 6);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1967, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Slideshow(void)::common_Slideshow = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Slideshow(void)::common_Slideshow;
}

void sub_1C328F410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328F4A8()
{
  JUMPOUT(0x1C328F494);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_DateTimeRangeQualifier");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[0] = xmmword_1C33BFF8C;
    v15[1] = unk_1C33BFF9C;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 8);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1496, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(void)::common_DateTimeRangeQualifier = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(void)::common_DateTimeRangeQualifier;
}

void sub_1C328F664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0)
    operator delete(*(void **)(v38 - 184));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328F6F4()
{
  JUMPOUT(0x1C328F6E0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_BillCategory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_BillCategory");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2012, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_BillCategory(void)::common_BillCategory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_BillCategory(void)::common_BillCategory;
}

void sub_1C328F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Date(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  int v5;
  uint64_t v6[5];
  uint64_t v7[5];
  _OWORD v8[2];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v18[9];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_Date");
    v18[6] = xmmword_1C33C000C;
    v18[7] = unk_1C33C001C;
    v18[8] = xmmword_1C33C002C;
    v18[2] = xmmword_1C33BFFCC;
    v18[3] = unk_1C33BFFDC;
    v18[4] = xmmword_1C33BFFEC;
    v18[5] = unk_1C33BFFFC;
    v18[0] = xmmword_1C33BFFAC;
    v18[1] = unk_1C33BFFBC;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 18);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v17, 2);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    v15 = xmmword_1C33C003C;
    v16 = 1386;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 5);
    v5 = 1265;
    std::unordered_set<int>::unordered_set((uint64_t)v6, &v5, 1);
    v14 = 0x7DE00000816;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1328, 2, (uint64_t *)v12, v11, v10, (uint64_t *)v8, v7, v6, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_Date(void)::common_Date = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Date(void)::common_Date;
}

void sub_1C328FB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 233) < 0)
    operator delete(*(void **)(v39 - 256));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328FBC4()
{
  JUMPOUT(0x1C328FBB0);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AllDay(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_AllDay");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xC3200000C31;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3109, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_AllDay(void)::common_AllDay = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AllDay(void)::common_AllDay;
}

void sub_1C328FD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C328FE08()
{
  JUMPOUT(0x1C328FDF4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutGoal(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_WorkoutGoal");
    v17[2] = xmmword_1C33C0070;
    v17[3] = unk_1C33C0080;
    v17[4] = xmmword_1C33C0090;
    v17[0] = xmmword_1C33C0050;
    v17[1] = unk_1C33C0060;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33C35B0;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2957, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_WorkoutGoal(void)::common_WorkoutGoal = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutGoal(void)::common_WorkoutGoal;
}

void sub_1C328FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3290054()
{
  JUMPOUT(0x1C3290040);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SummaryMode(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SummaryMode");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xC9F00000C9ELL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3228, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SummaryMode(void)::common_SummaryMode = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SummaryMode(void)::common_SummaryMode;
}

void sub_1C3290208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3290298()
{
  JUMPOUT(0x1C3290284);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDirection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_OffsetDirection");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x56C0000056BLL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1329, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_OffsetDirection(void)::common_OffsetDirection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDirection(void)::common_OffsetDirection;
}

void sub_1C3290450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32904E0()
{
  JUMPOUT(0x1C32904CCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Time");
    v18[4] = xmmword_1C33C00E0;
    v18[5] = unk_1C33C00F0;
    v18[6] = xmmword_1C33C0100;
    v18[0] = xmmword_1C33C00A0;
    v18[1] = unk_1C33C00B0;
    v18[2] = xmmword_1C33C00C0;
    v18[3] = unk_1C33C00D0;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 14);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33C0110;
    v16 = 2558;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1330, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Time(void)::common_Time = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Time(void)::common_Time;
}

void sub_1C32906B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0)
    operator delete(*(void **)(v38 - 216));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3290744()
{
  JUMPOUT(0x1C3290730);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Message(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[4];
  _OWORD v18[2];
  _OWORD v19[9];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Message");
    v20 = 0x4B6000004F4;
    v19[6] = xmmword_1C33C0184;
    v19[7] = unk_1C33C0194;
    v19[8] = xmmword_1C33C01A4;
    v19[2] = xmmword_1C33C0144;
    v19[3] = unk_1C33C0154;
    v19[4] = xmmword_1C33C0164;
    v19[5] = unk_1C33C0174;
    v19[0] = xmmword_1C33C0124;
    v19[1] = unk_1C33C0134;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 19);
    v17[2] = xmmword_1C33C01DC;
    v17[3] = unk_1C33C01EC;
    v18[0] = xmmword_1C33C01FC;
    *(_OWORD *)((char *)v18 + 12) = *(__int128 *)((char *)&xmmword_1C33C01FC + 12);
    v17[0] = xmmword_1C33C01BC;
    v17[1] = unk_1C33C01CC;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 23);
    v9 = 1307;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33C0218;
    v15[1] = unk_1C33C0228;
    v15[2] = xmmword_1C33C0238;
    v15[3] = unk_1C33C0248;
    v16 = 0xC5D00000C6ALL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 9);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1303, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Message(void)::common_Message = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Message(void)::common_Message;
}

void sub_1C3290964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32909FC()
{
  JUMPOUT(0x1C32909E8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailFolder(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_EmailFolder");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33C0280;
    v17[3] = unk_1C33C0290;
    v17[4] = xmmword_1C33C02A0;
    v17[0] = xmmword_1C33C0260;
    v17[1] = unk_1C33C0270;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 11);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3066, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_EmailFolder(void)::common_EmailFolder = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailFolder(void)::common_EmailFolder;
}

void sub_1C3290BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0)
    operator delete(*(void **)(v37 - 152));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_HealthLog(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[7];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_HealthLog");
    v18 = 0x4B6000004F4;
    v17[4] = xmmword_1C33C02F8;
    v17[5] = unk_1C33C0308;
    v17[6] = xmmword_1C33C0318;
    v17[0] = xmmword_1C33C02B8;
    v17[1] = unk_1C33C02C8;
    v17[2] = xmmword_1C33C02D8;
    v17[3] = unk_1C33C02E8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 15);
    v16[0] = xmmword_1C33C0330;
    v16[1] = unk_1C33C0340;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 8);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2682, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_HealthLog(void)::common_HealthLog = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_HealthLog(void)::common_HealthLog;
}

void sub_1C3290DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriContentType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_SiriContentType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3167, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriContentType(void)::common_SiriContentType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriContentType(void)::common_SiriContentType;
}

void sub_1C3291024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonRelationship(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  int v6;
  uint64_t v7[5];
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PersonRelationship");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33C0370;
    v18[3] = unk_1C33C0380;
    v18[4] = xmmword_1C33C0390;
    v18[0] = xmmword_1C33C0350;
    v18[1] = unk_1C33C0360;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 11);
    v16 = 0x57D00000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 3);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    v6 = 1265;
    std::unordered_set<int>::unordered_set((uint64_t)v7, &v6, 1);
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1304, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, v7, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PersonRelationship(void)::common_PersonRelationship = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonRelationship(void)::common_PersonRelationship;
}

void sub_1C3291284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a18);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3291314()
{
  JUMPOUT(0x1C3291300);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Translation(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Translation");
    v18[2] = xmmword_1C33C03C8;
    v18[3] = unk_1C33C03D8;
    v18[4] = xmmword_1C33C03E8;
    v18[0] = xmmword_1C33C03A8;
    v18[1] = unk_1C33C03B8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v17 = 1406;
    v16[0] = xmmword_1C33C03F8;
    v16[1] = unk_1C33C0408;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 9);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1305, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Translation(void)::common_Translation = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Translation(void)::common_Translation;
}

void sub_1C32914C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderListType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_ReminderListType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3168, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_ReminderListType(void)::common_ReminderListType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderListType(void)::common_ReminderListType;
}

void sub_1C32916F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Photo(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  _OWORD v15[3];
  _OWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Photo");
    v18[2] = xmmword_1C33C043C;
    v18[3] = unk_1C33C044C;
    v18[4] = xmmword_1C33C045C;
    v18[5] = unk_1C33C046C;
    v18[0] = xmmword_1C33C041C;
    v18[1] = unk_1C33C042C;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 12);
    v16[2] = xmmword_1C33C049C;
    v17[0] = unk_1C33C04AC;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C04B8;
    v16[0] = xmmword_1C33C047C;
    v16[1] = unk_1C33C048C;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 19);
    v9 = 1966;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15[0] = xmmword_1C33C04C8;
    v15[1] = unk_1C33C04D8;
    v15[2] = xmmword_1C33C04E8;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v15, 6);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1810, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Photo(void)::common_Photo = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Photo(void)::common_Photo;
}

void sub_1C3291970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3291A08()
{
  JUMPOUT(0x1C32919F4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriAlias(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SiriAlias");
    v17[2] = xmmword_1C33C0518;
    v17[3] = unk_1C33C0528;
    v17[4] = xmmword_1C33C0538;
    v17[0] = xmmword_1C33C04F8;
    v17[1] = unk_1C33C0508;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x58B00000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2587, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SiriAlias(void)::common_SiriAlias = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriAlias(void)::common_SiriAlias;
}

void sub_1C3291BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Writing(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Writing");
    v18[2] = xmmword_1C33C0568;
    v18[3] = unk_1C33C0578;
    v18[4] = xmmword_1C33C0588;
    v18[0] = xmmword_1C33C0548;
    v18[1] = unk_1C33C0558;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17[0] = xmmword_1C33C0598;
    v17[1] = unk_1C33C05A8;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 8);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33C05B8;
    v16 = 0x534000006ADLL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1688, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Writing(void)::common_Writing = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Writing(void)::common_Writing;
}

void sub_1C3291E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3291E9C()
{
  JUMPOUT(0x1C3291E88);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Audiobook(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Audiobook");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1811, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Audiobook(void)::common_Audiobook = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Audiobook(void)::common_Audiobook;
}

void sub_1C3292048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Calendar(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Calendar");
    v18[2] = xmmword_1C33C05F0;
    v18[3] = unk_1C33C0600;
    v18[4] = xmmword_1C33C0610;
    v18[5] = unk_1C33C0620;
    v18[0] = xmmword_1C33C05D0;
    v18[1] = unk_1C33C05E0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 12);
    v17 = 1404;
    v16 = xmmword_1C33C0630;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2996, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Calendar(void)::common_Calendar = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Calendar(void)::common_Calendar;
}

void sub_1C3292284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_HomeEntity(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_HomeEntity");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2504, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_HomeEntity(void)::common_HomeEntity = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_HomeEntity(void)::common_HomeEntity;
}

void sub_1C32924B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentDirection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_AdjustmentDirection");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 8);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2636, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_AdjustmentDirection(void)::common_AdjustmentDirection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentDirection(void)::common_AdjustmentDirection;
}

void sub_1C32926DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Participant(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_Participant");
    v17[2] = xmmword_1C33C0664;
    v17[3] = unk_1C33C0674;
    v17[4] = xmmword_1C33C0684;
    v17[5] = unk_1C33C0694;
    v17[0] = xmmword_1C33C0644;
    v17[1] = unk_1C33C0654;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 12);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2997, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_Participant(void)::common_Participant = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Participant(void)::common_Participant;
}

void sub_1C3292908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 208);
  if (*(char *)(v37 - 145) < 0)
    operator delete(*(void **)(v37 - 168));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentAccount(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[9];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_PaymentAccount");
    v18[6] = xmmword_1C33C07D4;
    v18[7] = unk_1C33C07E4;
    v18[8] = xmmword_1C33C07F4;
    v18[2] = xmmword_1C33C0794;
    v18[3] = unk_1C33C07A4;
    v18[4] = xmmword_1C33C07B4;
    v18[5] = unk_1C33C07C4;
    v18[0] = xmmword_1C33C0774;
    v18[1] = unk_1C33C0784;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 18);
    v17 = 2078;
    v16[0] = xmmword_1C33C0804;
    v16[1] = unk_1C33C0814;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x7E000000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1812, 2, (uint64_t *)__p, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentAccount(void)::common_PaymentAccount = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentAccount(void)::common_PaymentAccount;
}

void sub_1C3292B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (a50 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v50, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3292BFC()
{
  JUMPOUT(0x1C3292BE8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NoteFolder(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_NoteFolder");
    v17[2] = xmmword_1C33C0848;
    v17[3] = unk_1C33C0858;
    v17[4] = xmmword_1C33C0868;
    v17[0] = xmmword_1C33C0828;
    v17[1] = unk_1C33C0838;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 10);
    v16[0] = xmmword_1C33C0878;
    v16[1] = unk_1C33C0888;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 8);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0xBD5000002CCLL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3032, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_NoteFolder(void)::common_NoteFolder = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NoteFolder(void)::common_NoteFolder;
}

void sub_1C3292DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 232);
  if (*(char *)(v36 - 169) < 0)
    operator delete(*(void **)(v36 - 192));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3292E50()
{
  JUMPOUT(0x1C3292E3CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Car(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  uint64_t v7[5];
  uint64_t v8[5];
  uint64_t v9[5];
  uint64_t v10[5];
  void *__p[2];
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "common_Car");
    v19[2] = xmmword_1C33C08B8;
    v19[3] = unk_1C33C08C8;
    v19[4] = xmmword_1C33C08D8;
    v19[5] = unk_1C33C08E8;
    v19[0] = xmmword_1C33C0898;
    v19[1] = unk_1C33C08A8;
    std::unordered_map<int,int>::unordered_map(v10, (int *)v19, 12);
    v18 = 0x93F0000091CLL;
    v17 = xmmword_1C33C08F8;
    std::unordered_set<int>::unordered_set((uint64_t)v9, (int *)&v17, 6);
    v16 = 0x9E4000005D4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    v15 = xmmword_1C33C35D0;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 4);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v13[0] = xmmword_1C33C0910;
    v13[1] = unk_1C33C0920;
    v14 = 0x9E8000009F1;
    std::unordered_map<int,int>::unordered_map(v4, (int *)v13, 5);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1813, 2, (uint64_t *)__p, v10, v9, v8, v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    if (v12 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::common_Car(void)::common_Car = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Car(void)::common_Car;
}

void sub_1C3293058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32930F8()
{
  JUMPOUT(0x1C32930E4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RadioBand(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_RadioBand");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = xmmword_1C33C0938;
    v17 = 2943;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2744, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_RadioBand(void)::common_RadioBand = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RadioBand(void)::common_RadioBand;
}

void sub_1C32932B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3293348()
{
  JUMPOUT(0x1C3293334);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DeviceCategory(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_DeviceCategory");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1963, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_DeviceCategory(void)::common_DeviceCategory = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DeviceCategory(void)::common_DeviceCategory;
}

void sub_1C32934F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OpinionTopic(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_OpinionTopic");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3220, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_OpinionTopic(void)::common_OpinionTopic = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_OpinionTopic(void)::common_OpinionTopic;
}

void sub_1C3293724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_LocalBusiness(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_LocalBusiness");
    v18[2] = xmmword_1C33C096C;
    v18[3] = unk_1C33C097C;
    v18[4] = xmmword_1C33C098C;
    v18[5] = unk_1C33C099C;
    v18[0] = xmmword_1C33C094C;
    v18[1] = unk_1C33C095C;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 12);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)v16, 9);
    v15 = 0x6BB00000529;
    std::unordered_set<int>::unordered_set((uint64_t)v9, (int *)&v15, 2);
    v7 = 1990;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v14 = xmmword_1C33C35E0;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 2);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1969, 2, (uint64_t *)v12, v11, v10, v9, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_LocalBusiness(void)::common_LocalBusiness = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_LocalBusiness(void)::common_LocalBusiness;
}

void sub_1C329399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3293A3C()
{
  JUMPOUT(0x1C3293A28);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Contact(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Contact");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C09AC;
    v17[1] = unk_1C33C09BC;
    v17[2] = xmmword_1C33C09CC;
    v17[3] = unk_1C33C09DC;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1306, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Contact(void)::common_Contact = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Contact(void)::common_Contact;
}

void sub_1C3293BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Communication(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Communication");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C09F4;
    v18[1] = unk_1C33C0A04;
    v18[2] = xmmword_1C33C0A14;
    v18[3] = unk_1C33C0A24;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 9);
    v16 = xmmword_1C33C0A3C;
    v17[0] = unk_1C33C0A4C;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C0A58;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 11);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33C35F0;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 2);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1307, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Communication(void)::common_Communication = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Communication(void)::common_Communication;
}

void sub_1C3293E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3293ED0()
{
  JUMPOUT(0x1C3293EBCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Duration(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  uint64_t v5[5];
  uint64_t v6[5];
  int v7;
  uint64_t v8[5];
  uint64_t v9[5];
  uint64_t v10[5];
  void *v11[2];
  char v12;
  uint64_t v13;
  int v14[10];
  uint64_t v15;
  int v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v11, "common_Duration");
    v19 = 0x4B6000004F4;
    v18[0] = xmmword_1C33C0A68;
    v18[1] = unk_1C33C0A78;
    v18[2] = xmmword_1C33C0A88;
    v18[3] = unk_1C33C0A98;
    std::unordered_map<int,int>::unordered_map(v10, (int *)v18, 9);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v9, (int *)&v17, 2);
    v7 = 1288;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    v15 = 0xC6600000BE9;
    v16 = 3175;
    std::unordered_set<int>::unordered_set((uint64_t)v6, (int *)&v15, 3);
    *(_OWORD *)v14 = xmmword_1C33C0AB0;
    *(_OWORD *)&v14[3] = *(__int128 *)((char *)&xmmword_1C33C0AB0 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v5, v14, 7);
    v13 = 0x5030000022ALL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v13, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1308, 2, (uint64_t *)v11, v10, v9, v8, v6, v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    if (v12 < 0)
      operator delete(v11[0]);
    siri::ontology::oname::graph::ontology_init::common_Duration(void)::common_Duration = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Duration(void)::common_Duration;
}

void sub_1C32940D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3294180()
{
  JUMPOUT(0x1C329416CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotebookList(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  int v18;
  _OWORD v19[6];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_NotebookList");
    v19[2] = xmmword_1C33C0AEC;
    v19[3] = unk_1C33C0AFC;
    v19[4] = xmmword_1C33C0B0C;
    v19[5] = unk_1C33C0B1C;
    v19[0] = xmmword_1C33C0ACC;
    v19[1] = unk_1C33C0ADC;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v19, 12);
    v18 = 1405;
    v17[0] = xmmword_1C33C16A0;
    v17[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v17, 9);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33C0B2C;
    v16 = 0x6B800000706;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 3);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1725, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_NotebookList(void)::common_NotebookList = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NotebookList(void)::common_NotebookList;
}

void sub_1C329435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32943EC()
{
  JUMPOUT(0x1C32943D8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionPersonAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_KnowledgeQuestionPersonAttribute");
    v17[2] = xmmword_1C33C0B64;
    v17[3] = unk_1C33C0B74;
    v17[4] = xmmword_1C33C0B84;
    v17[0] = xmmword_1C33C0B44;
    v17[1] = unk_1C33C0B54;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    v10 = 1635;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1636, 2, (uint64_t *)v14, v13, v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionPersonAttribute(void)::common_KnowledgeQuestionPersonAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionPersonAttribute(void)::common_KnowledgeQuestionPersonAttribute;
}

void sub_1C32945A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3294634()
{
  JUMPOUT(0x1C3294620);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PostalAddress(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[9];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PostalAddress");
    v18 = 0x4B6000004F4;
    v17[6] = xmmword_1C33C0BF4;
    v17[7] = unk_1C33C0C04;
    v17[8] = xmmword_1C33C0C14;
    v17[2] = xmmword_1C33C0BB4;
    v17[3] = unk_1C33C0BC4;
    v17[4] = xmmword_1C33C0BD4;
    v17[5] = unk_1C33C0BE4;
    v17[0] = xmmword_1C33C0B94;
    v17[1] = unk_1C33C0BA4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 19);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    v10 = 1293;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1497, 2, (uint64_t *)v14, v13, v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PostalAddress(void)::common_PostalAddress = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PostalAddress(void)::common_PostalAddress;
}

void sub_1C3294808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0)
    operator delete(*(void **)(v41 - 224));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3294898()
{
  JUMPOUT(0x1C3294884);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Word(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Word");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C0CDC;
    v17[1] = unk_1C33C0CEC;
    v17[2] = xmmword_1C33C0CFC;
    v17[3] = unk_1C33C0D0C;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2948, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Word(void)::common_Word = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Word(void)::common_Word;
}

void sub_1C3294A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ActiveType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ActiveType");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xBA900000BA8;
    v17 = 2986;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 3);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2979, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ActiveType(void)::common_ActiveType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ActiveType(void)::common_ActiveType;
}

void sub_1C3294C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3294D18()
{
  JUMPOUT(0x1C3294D04);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaCaptureMode(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MediaCaptureMode");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16[0] = xmmword_1C33C0D24;
    v16[1] = unk_1C33C0D34;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 8);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2998, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaCaptureMode(void)::common_MediaCaptureMode = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaCaptureMode(void)::common_MediaCaptureMode;
}

void sub_1C3294ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3294F60()
{
  JUMPOUT(0x1C3294F4CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NumberSign(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_NumberSign");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x56F00000570;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1333, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_NumberSign(void)::common_NumberSign = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_NumberSign(void)::common_NumberSign;
}

void sub_1C3295118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32951A8()
{
  JUMPOUT(0x1C3295194);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ResponseStatus(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  int v16[8];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ResponseStatus");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    *(_OWORD *)v16 = xmmword_1C33C0D44;
    *(_OWORD *)&v16[3] = *(__int128 *)((char *)&xmmword_1C33C0D44 + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, v16, 7);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2999, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ResponseStatus(void)::common_ResponseStatus = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ResponseStatus(void)::common_ResponseStatus;
}

void sub_1C3295368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32953F8()
{
  JUMPOUT(0x1C32953E4);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageFolder(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_MessageFolder");
    v18 = 0x4B6000004F4;
    v17[2] = xmmword_1C33C0D80;
    v17[3] = unk_1C33C0D90;
    v17[4] = xmmword_1C33C0DA0;
    v17[0] = xmmword_1C33C0D60;
    v17[1] = unk_1C33C0D70;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 11);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3094, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_MessageFolder(void)::common_MessageFolder = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageFolder(void)::common_MessageFolder;
}

void sub_1C32955A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0)
    operator delete(*(void **)(v37 - 152));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaShow(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MediaShow");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1814, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaShow(void)::common_MediaShow = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaShow(void)::common_MediaShow;
}

void sub_1C32957DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ZoomDirection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_ZoomDirection");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2636;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C3600;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2637, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_ZoomDirection(void)::common_ZoomDirection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ZoomDirection(void)::common_ZoomDirection;
}

void sub_1C3295A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3295ABC()
{
  JUMPOUT(0x1C3295AA8);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoTopic(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_PhotoTopic");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1972, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_PhotoTopic(void)::common_PhotoTopic = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoTopic(void)::common_PhotoTopic;
}

void sub_1C3295C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_JournalEntry(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_JournalEntry");
    v18[2] = xmmword_1C33C0DD8;
    v18[3] = unk_1C33C0DE8;
    v18[4] = xmmword_1C33C0DF8;
    v18[0] = xmmword_1C33C0DB8;
    v18[1] = unk_1C33C0DC8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 10);
    v17 = 0x57D0000057CLL;
    v16 = xmmword_1C33C0E08;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 6);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3185, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_JournalEntry(void)::common_JournalEntry = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_JournalEntry(void)::common_JournalEntry;
}

void sub_1C3295EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_DateType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C0E20;
    v17[1] = unk_1C33C0E30;
    v17[2] = xmmword_1C33C0E40;
    v17[3] = unk_1C33C0E50;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x80200000801;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2014, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_DateType(void)::common_DateType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_DateType(void)::common_DateType;
}

void sub_1C32960F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3296184()
{
  JUMPOUT(0x1C3296170);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Event(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_Event");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33C0E88;
    v18[3] = unk_1C33C0E98;
    v18[4] = xmmword_1C33C0EA8;
    v18[5] = unk_1C33C0EB8;
    v18[0] = xmmword_1C33C0E68;
    v18[1] = unk_1C33C0E78;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 13);
    v17 = 1404;
    v16 = xmmword_1C33C0ED0;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 5);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1493, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_Event(void)::common_Event = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Event(void)::common_Event;
}

void sub_1C3296344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntity(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[3];
  _OWORD v17[2];
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_AppEntity");
    v18[2] = xmmword_1C33C0F04;
    v18[3] = unk_1C33C0F14;
    v18[4] = xmmword_1C33C0F24;
    v18[0] = xmmword_1C33C0EE4;
    v18[1] = unk_1C33C0EF4;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v16[2] = xmmword_1C33C0F54;
    v17[0] = unk_1C33C0F64;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C0F70;
    v16[0] = xmmword_1C33C0F34;
    v16[1] = unk_1C33C0F44;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 19);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0xA0C00000257;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2572, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_AppEntity(void)::common_AppEntity = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AppEntity(void)::common_AppEntity;
}

void sub_1C32965A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 217) < 0)
    operator delete(*(void **)(v41 - 240));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3296630()
{
  JUMPOUT(0x1C329661CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_JourneyType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_JourneyType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3155, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_JourneyType(void)::common_JourneyType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_JourneyType(void)::common_JourneyType;
}

void sub_1C32967D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[10];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_VoiceCommandPayload");
    v18 = 0x4B6000004F4;
    v17[6] = xmmword_1C33C0FE0;
    v17[7] = unk_1C33C0FF0;
    v17[8] = xmmword_1C33C1000;
    v17[9] = unk_1C33C1010;
    v17[2] = xmmword_1C33C0FA0;
    v17[3] = unk_1C33C0FB0;
    v17[4] = xmmword_1C33C0FC0;
    v17[5] = unk_1C33C0FD0;
    v17[0] = xmmword_1C33C0F80;
    v17[1] = unk_1C33C0F90;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 21);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2573, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(void)::common_VoiceCommandPayload = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(void)::common_VoiceCommandPayload;
}

void sub_1C3296A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a41);
  if (*(char *)(v42 - 209) < 0)
    operator delete(*(void **)(v42 - 232));
  MEMORY[0x1C3BD1618](v41, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SportsItemType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_SportsItemType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2551, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_SportsItemType(void)::common_SportsItemType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SportsItemType(void)::common_SportsItemType;
}

void sub_1C3296C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Similarity(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Similarity");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x55400000553;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1309, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Similarity(void)::common_Similarity = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Similarity(void)::common_Similarity;
}

void sub_1C3296E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3296F20()
{
  JUMPOUT(0x1C3296F0CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarEra(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_CalendarEra");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1310, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_CalendarEra(void)::common_CalendarEra = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarEra(void)::common_CalendarEra;
}

void sub_1C32970CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_StopWatch(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_StopWatch");
    v17[2] = xmmword_1C33C1048;
    v17[3] = unk_1C33C1058;
    v17[4] = xmmword_1C33C1068;
    v17[0] = xmmword_1C33C1028;
    v17[1] = unk_1C33C1038;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16[0] = xmmword_1C33C1078;
    v16[1] = unk_1C33C1088;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 8);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1690, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_StopWatch(void)::common_StopWatch = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_StopWatch(void)::common_StopWatch;
}

void sub_1C3297300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementComponent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MeasurementComponent");
    v17[2] = xmmword_1C33C10B8;
    v17[3] = unk_1C33C10C8;
    v17[4] = xmmword_1C33C10D8;
    v17[0] = xmmword_1C33C1098;
    v17[1] = unk_1C33C10A8;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 10);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1335, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MeasurementComponent(void)::common_MeasurementComponent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementComponent(void)::common_MeasurementComponent;
}

void sub_1C3297530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EasterEgg(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_EasterEgg");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1180;
    v17[1] = unk_1C33C1190;
    v17[2] = xmmword_1C33C11A0;
    v17[3] = unk_1C33C11B0;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3198, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_EasterEgg(void)::common_EasterEgg = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_EasterEgg(void)::common_EasterEgg;
}

void sub_1C3297764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortOrder(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_SortOrder");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xBF500000BF4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3059, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_SortOrder(void)::common_SortOrder = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SortOrder(void)::common_SortOrder;
}

void sub_1C32979A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3297A30()
{
  JUMPOUT(0x1C3297A1CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TapbackType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13[5];
  uint64_t v14[5];
  void *v15[2];
  char v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v15, "common_TapbackType");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v14, (int *)v17, 9);
    v12 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v13, &v12, 1);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3169, 2, (uint64_t *)v15, v14, v13, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v16 < 0)
      operator delete(v15[0]);
    siri::ontology::oname::graph::ontology_init::common_TapbackType(void)::common_TapbackType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_TapbackType(void)::common_TapbackType;
}

void sub_1C3297BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  MEMORY[0x1C3BD1618](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaPlaylist(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "common_MediaPlaylist");
    v18 = 0x4B6000004F4;
    v17[0] = xmmword_1C33C1284;
    v17[1] = unk_1C33C1294;
    v17[2] = xmmword_1C33C12A4;
    v17[3] = unk_1C33C12B4;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 9);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1816, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaPlaylist(void)::common_MediaPlaylist = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaPlaylist(void)::common_MediaPlaylist;
}

void sub_1C3297E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Notification(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_Notification");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33C12EC;
    v18[3] = unk_1C33C12FC;
    v18[4] = xmmword_1C33C130C;
    v18[0] = xmmword_1C33C12CC;
    v18[1] = unk_1C33C12DC;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 11);
    v17 = 0x57C000005DBLL;
    v16[0] = xmmword_1C33C1324;
    v16[1] = unk_1C33C1334;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 10);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33C3620;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 2);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1713, 2, (uint64_t *)v13, v12, v11, v9, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_Notification(void)::common_Notification = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Notification(void)::common_Notification;
}

void sub_1C3298070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3298100()
{
  JUMPOUT(0x1C32980ECLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetTime(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _OWORD v18[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "common_OffsetTime");
    v19 = 0x4B6000004F4;
    v18[4] = xmmword_1C33C13DC;
    v18[5] = unk_1C33C13EC;
    v18[6] = xmmword_1C33C13FC;
    v18[7] = unk_1C33C140C;
    v18[0] = xmmword_1C33C139C;
    v18[1] = unk_1C33C13AC;
    v18[2] = xmmword_1C33C13BC;
    v18[3] = unk_1C33C13CC;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 17);
    v17 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v17, 2);
    v9 = 1330;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v15 = 0x5A5000005A4;
    v16 = 1446;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 3);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1494, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::common_OffsetTime(void)::common_OffsetTime = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetTime(void)::common_OffsetTime;
}

void sub_1C32982E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 201) < 0)
    operator delete(*(void **)(v39 - 224));
  MEMORY[0x1C3BD1618](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3298380()
{
  JUMPOUT(0x1C329836CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MicroGeographicArea(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v12, "common_MicroGeographicArea");
    v19 = 0x4B6000004F4;
    v18[2] = xmmword_1C33C1444;
    v18[3] = unk_1C33C1454;
    v18[4] = xmmword_1C33C1464;
    v18[5] = unk_1C33C1474;
    v18[0] = xmmword_1C33C1424;
    v18[1] = unk_1C33C1434;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 13);
    v16 = 0xB9C00000501;
    v17 = 1270;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)&v16, 3);
    v8 = 1326;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v15 = 0x93200000931;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 2);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v14 = 0x53400000292;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1726, 2, (uint64_t *)v12, v11, v10, v9, v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(v12[0]);
    siri::ontology::oname::graph::ontology_init::common_MicroGeographicArea(void)::common_MicroGeographicArea = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MicroGeographicArea(void)::common_MicroGeographicArea;
}

void sub_1C3298578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3298618()
{
  JUMPOUT(0x1C3298604);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonAlarm_AlarmAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonAlarm_AlarmAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1662, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonAlarm_AlarmAttribute(void)::commonAlarm_AlarmAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonAlarm_AlarmAttribute(void)::commonAlarm_AlarmAttribute;
}

void sub_1C32987B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonApp_AppListingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonApp_AppListingAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1817, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonApp_AppListingAttribute(void)::commonApp_AppListingAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonApp_AppListingAttribute(void)::commonApp_AppListingAttribute;
}

void sub_1C32989E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonApp_AppAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonApp_AppAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1818, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonApp_AppAttribute(void)::commonApp_AppAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonApp_AppAttribute(void)::commonApp_AppAttribute;
}

void sub_1C3298C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonArithmetic_ArithmeticAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonArithmetic_ArithmeticAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1691, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonArithmetic_ArithmeticAttribute(void)::commonArithmetic_ArithmeticAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonArithmetic_ArithmeticAttribute(void)::commonArithmetic_ArithmeticAttribute;
}

void sub_1C3298E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonCalendarEvent_CalendarEventAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonCalendarEvent_CalendarEventAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1630, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonCalendarEvent_CalendarEventAttribute(void)::commonCalendarEvent_CalendarEventAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonCalendarEvent_CalendarEventAttribute(void)::commonCalendarEvent_CalendarEventAttribute;
}

void sub_1C3299058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonContact_ContactAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonContact_ContactAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0xC79000009B1;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1498, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonContact_ContactAttribute(void)::commonContact_ContactAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonContact_ContactAttribute(void)::commonContact_ContactAttribute;
}

void sub_1C3299298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3299328()
{
  JUMPOUT(0x1C3299314);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonEmail_EmailAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonEmail_EmailAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1670, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonEmail_EmailAttribute(void)::commonEmail_EmailAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonEmail_EmailAttribute(void)::commonEmail_EmailAttribute;
}

void sub_1C32994C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonEventTrigger_EventTriggerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonEventTrigger_EventTriggerAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33C3630;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1727, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonEventTrigger_EventTriggerAttribute(void)::commonEventTrigger_EventTriggerAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonEventTrigger_EventTriggerAttribute(void)::commonEventTrigger_EventTriggerAttribute;
}

void sub_1C3299708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3299798()
{
  JUMPOUT(0x1C3299784);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonFindMy_DeviceAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonFindMy_DeviceAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2331, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonFindMy_DeviceAttribute(void)::commonFindMy_DeviceAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonFindMy_DeviceAttribute(void)::commonFindMy_DeviceAttribute;
}

void sub_1C3299938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonMessage_MessageAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonMessage_MessageAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1487, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonMessage_MessageAttribute(void)::commonMessage_MessageAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonMessage_MessageAttribute(void)::commonMessage_MessageAttribute;
}

void sub_1C3299B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookItemType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  int v15[10];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonNotebook_NotebookItemType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    *(_OWORD *)v15 = xmmword_1C33C14DC;
    *(_OWORD *)&v15[3] = *(__int128 *)((char *)&xmmword_1C33C14DC + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, v15, 7);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1728, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookItemType(void)::commonNotebook_NotebookItemType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookItemType(void)::commonNotebook_NotebookItemType;
}

void sub_1C3299DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0)
    operator delete(*(void **)(v38 - 184));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C3299E3C()
{
  JUMPOUT(0x1C3299E28);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonNotebook_NotebookAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1729, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookAttribute(void)::commonNotebook_NotebookAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookAttribute(void)::commonNotebook_NotebookAttribute;
}

void sub_1C3299FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonNotification_NotificationAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonNotification_NotificationAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1714, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonNotification_NotificationAttribute(void)::commonNotification_NotificationAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonNotification_NotificationAttribute(void)::commonNotification_NotificationAttribute;
}

void sub_1C329A204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPayments_CurrencyAmountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPayments_CurrencyAmountAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2015, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPayments_CurrencyAmountAttribute(void)::commonPayments_CurrencyAmountAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPayments_CurrencyAmountAttribute(void)::commonPayments_CurrencyAmountAttribute;
}

void sub_1C329A42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAccountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPayments_PaymentAccountAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2016, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAccountAttribute(void)::commonPayments_PaymentAccountAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAccountAttribute(void)::commonPayments_PaymentAccountAttribute;
}

void sub_1C329A654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPayments_PaymentAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2017, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAttribute(void)::commonPayments_PaymentAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAttribute(void)::commonPayments_PaymentAttribute;
}

void sub_1C329A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhoneCall_PhoneCallAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonPhoneCall_PhoneCallAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x9BC000009BBLL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1488, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonPhoneCall_PhoneCallAttribute(void)::commonPhoneCall_PhoneCallAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhoneCall_PhoneCallAttribute(void)::commonPhoneCall_PhoneCallAttribute;
}

void sub_1C329AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329AB4C()
{
  JUMPOUT(0x1C329AB38);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_PhotoMemoryFilter");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1973, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryFilter(void)::commonPhotos_PhotoMemoryFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryFilter(void)::commonPhotos_PhotoMemoryFilter;
}

void sub_1C329ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_PhotoCollectionAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1974, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionAttribute(void)::commonPhotos_PhotoCollectionAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionAttribute(void)::commonPhotos_PhotoCollectionAttribute;
}

void sub_1C329AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_SlideshowAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1975, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowAttribute(void)::commonPhotos_SlideshowAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowAttribute(void)::commonPhotos_SlideshowAttribute;
}

void sub_1C329B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_PhotoFilter");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1976, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoFilter(void)::commonPhotos_PhotoFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoFilter(void)::commonPhotos_PhotoFilter;
}

void sub_1C329B364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_VideoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_VideoFilter");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1978, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_VideoFilter(void)::commonPhotos_VideoFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_VideoFilter(void)::commonPhotos_VideoFilter;
}

void sub_1C329B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_PhotoAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1979, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoAttribute(void)::commonPhotos_PhotoAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoAttribute(void)::commonPhotos_PhotoAttribute;
}

void sub_1C329B7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_PhotoMemoryAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1980, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryAttribute(void)::commonPhotos_PhotoMemoryAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryAttribute(void)::commonPhotos_PhotoMemoryAttribute;
}

void sub_1C329B9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_PhotoCollectionFilter");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1982, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionFilter(void)::commonPhotos_PhotoCollectionFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionFilter(void)::commonPhotos_PhotoCollectionFilter;
}

void sub_1C329BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_SlideshowFilter");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1977, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowFilter(void)::commonPhotos_SlideshowFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowFilter(void)::commonPhotos_SlideshowFilter;
}

void sub_1C329BE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_VideoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonPhotos_VideoAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1981, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonPhotos_VideoAttribute(void)::commonPhotos_VideoAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_VideoAttribute(void)::commonPhotos_VideoAttribute;
}

void sub_1C329C054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonStock_StockType(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonStock_StockType");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = 0x96100000960;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2396, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonStock_StockType(void)::commonStock_StockType = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonStock_StockType(void)::commonStock_StockType;
}

void sub_1C329C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329C324()
{
  JUMPOUT(0x1C329C310);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonStock_StockAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  _OWORD v15[5];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonStock_StockAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15[2] = xmmword_1C33C1518;
    v15[3] = unk_1C33C1528;
    v15[4] = xmmword_1C33C1538;
    v15[0] = xmmword_1C33C14F8;
    v15[1] = unk_1C33C1508;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v15, 20);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2397, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonStock_StockAttribute(void)::commonStock_StockAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonStock_StockAttribute(void)::commonStock_StockAttribute;
}

void sub_1C329C4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 209) < 0)
    operator delete(*(void **)(v38 - 232));
  MEMORY[0x1C3BD1618](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329C580()
{
  JUMPOUT(0x1C329C56CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonStock_StockChangeState(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "commonStock_StockChangeState");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)&v16, 2);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v15 = xmmword_1C33C3640;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v15, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2398, 2, (uint64_t *)v13, v12, v11, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::commonStock_StockChangeState(void)::commonStock_StockChangeState = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonStock_StockChangeState(void)::commonStock_StockChangeState;
}

void sub_1C329C738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  MEMORY[0x1C3BD1618](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329C7C8()
{
  JUMPOUT(0x1C329C7B4);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonTimer_TimerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonTimer_TimerAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1486, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonTimer_TimerAttribute(void)::commonTimer_TimerAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonTimer_TimerAttribute(void)::commonTimer_TimerAttribute;
}

void sub_1C329C968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonUserEntity_UserEntityAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  _OWORD v9[2];
  int v10;
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonUserEntity_UserEntityAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v16 = 0xA2B00000A2ALL;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 2);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2592, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v9, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonUserEntity_UserEntityAttribute(void)::commonUserEntity_UserEntityAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonUserEntity_UserEntityAttribute(void)::commonUserEntity_UserEntityAttribute;
}

void sub_1C329CBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  MEMORY[0x1C3BD1618](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329CC34()
{
  JUMPOUT(0x1C329CC20);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonWriting_WritingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "commonWriting_WritingAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1692, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::commonWriting_WritingAttribute(void)::commonWriting_WritingAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::commonWriting_WritingAttribute(void)::commonWriting_WritingAttribute;
}

void sub_1C329CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_ContactAgent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "sirikit_ContactAgent");
    v18[2] = xmmword_1C33C1670;
    v18[3] = unk_1C33C1680;
    v18[4] = xmmword_1C33C1690;
    v18[0] = xmmword_1C33C1650;
    v18[1] = unk_1C33C1660;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    v9 = 1287;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v7 = 2525;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1821, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::sirikit_ContactAgent(void)::sirikit_ContactAgent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_ContactAgent(void)::sirikit_ContactAgent;
}

void sub_1C329D048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329D0E8()
{
  JUMPOUT(0x1C329D0D4);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_MediaShow(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *__p[2];
  char v14;
  uint64_t v15;
  _OWORD v16[7];
  uint64_t v17;
  _OWORD v18[9];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "sirikit_MediaShow");
    v18[6] = xmmword_1C33C15A8;
    v18[7] = unk_1C33C15B8;
    v18[8] = xmmword_1C33C15C8;
    v18[2] = xmmword_1C33C1568;
    v18[3] = unk_1C33C1578;
    v18[4] = xmmword_1C33C1588;
    v18[5] = unk_1C33C1598;
    v18[0] = xmmword_1C33C1548;
    v18[1] = unk_1C33C1558;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 18);
    v17 = 0x57D0000057BLL;
    v16[4] = xmmword_1C33C1618;
    v16[5] = unk_1C33C1628;
    v16[6] = xmmword_1C33C1638;
    v16[0] = xmmword_1C33C15D8;
    v16[1] = unk_1C33C15E8;
    v16[2] = xmmword_1C33C15F8;
    v16[3] = unk_1C33C1608;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 30);
    v9 = 1815;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x71700000B5ALL;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1822, 2, (uint64_t *)__p, v12, v11, v10, (uint64_t *)v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::sirikit_MediaShow(void)::sirikit_MediaShow = v3;
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_MediaShow(void)::sirikit_MediaShow;
}

void sub_1C329D2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (a50 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v50, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329D388()
{
  JUMPOUT(0x1C329D374);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_PaymentOrganization(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "sirikit_PaymentOrganization");
    v18[2] = xmmword_1C33C1670;
    v18[3] = unk_1C33C1680;
    v18[4] = xmmword_1C33C1690;
    v18[0] = xmmword_1C33C1650;
    v18[1] = unk_1C33C1660;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    v9 = 1321;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v7 = 2526;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1823, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::sirikit_PaymentOrganization(void)::sirikit_PaymentOrganization = v3;
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_PaymentOrganization(void)::sirikit_PaymentOrganization;
}

void sub_1C329D574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329D614()
{
  JUMPOUT(0x1C329D600);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_MusicArtist(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "sirikit_MusicArtist");
    v18[2] = xmmword_1C33C1670;
    v18[3] = unk_1C33C1680;
    v18[4] = xmmword_1C33C1690;
    v18[0] = xmmword_1C33C1650;
    v18[1] = unk_1C33C1660;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    v9 = 1287;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v7 = 2523;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = 0x5DA00000571;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 1);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1819, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::sirikit_MusicArtist(void)::sirikit_MusicArtist = v3;
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_MusicArtist(void)::sirikit_MusicArtist;
}

void sub_1C329D800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  MEMORY[0x1C3BD1618](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329D8A0()
{
  JUMPOUT(0x1C329D88CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_ContactGroup(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  uint64_t v11[5];
  uint64_t v12[5];
  void *v13[2];
  char v14;
  __int128 v15;
  _OWORD v16[2];
  int v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v13, "sirikit_ContactGroup");
    v18[2] = xmmword_1C33C1670;
    v18[3] = unk_1C33C1680;
    v18[4] = xmmword_1C33C1690;
    v18[0] = xmmword_1C33C1650;
    v18[1] = unk_1C33C1660;
    std::unordered_map<int,int>::unordered_map(v12, (int *)v18, 10);
    v17 = 1405;
    v16[0] = xmmword_1C33C16A0;
    v16[1] = unk_1C33C16B0;
    std::unordered_set<int>::unordered_set((uint64_t)v11, (int *)v16, 9);
    v9 = 1552;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v7 = 2524;
    std::unordered_set<int>::unordered_set((uint64_t)v8, &v7, 1);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v15 = xmmword_1C33C3650;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v15, 2);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1820, 2, (uint64_t *)v13, v12, v11, v10, v8, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    if (v14 < 0)
      operator delete(v13[0]);
    siri::ontology::oname::graph::ontology_init::sirikit_ContactGroup(void)::sirikit_ContactGroup = v3;
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_ContactGroup(void)::sirikit_ContactGroup;
}

void sub_1C329DA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329DB2C()
{
  JUMPOUT(0x1C329DB18);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_AudiobookAuthor(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4[5];
  _OWORD v5[2];
  int v6;
  uint64_t v7[5];
  int v8;
  uint64_t v9[5];
  uint64_t v10[5];
  uint64_t v11[5];
  void *__p[2];
  char v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[3];
  uint64_t v17;
  _OWORD v18[9];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, "sirikit_AudiobookAuthor");
    v19 = 0x4B6000004F4;
    v18[6] = xmmword_1C33C1724;
    v18[7] = unk_1C33C1734;
    v18[8] = xmmword_1C33C1744;
    v18[2] = xmmword_1C33C16E4;
    v18[3] = unk_1C33C16F4;
    v18[4] = xmmword_1C33C1704;
    v18[5] = unk_1C33C1714;
    v18[0] = xmmword_1C33C16C4;
    v18[1] = unk_1C33C16D4;
    std::unordered_map<int,int>::unordered_map(v11, (int *)v18, 19);
    v17 = 0x91D0000057CLL;
    v16[0] = xmmword_1C33C175C;
    v16[1] = unk_1C33C176C;
    v16[2] = xmmword_1C33C177C;
    std::unordered_set<int>::unordered_set((uint64_t)v10, (int *)v16, 14);
    v8 = 1332;
    std::unordered_set<int>::unordered_set((uint64_t)v9, &v8, 1);
    v15 = 0x727000009DFLL;
    std::unordered_set<int>::unordered_set((uint64_t)v7, (int *)&v15, 2);
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    v14 = xmmword_1C33C35C0;
    std::unordered_map<int,int>::unordered_map(v4, (int *)&v14, 2);
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1824, 2, (uint64_t *)__p, v11, v10, v9, v7, (uint64_t *)v5, v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v5);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v7);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    if (v13 < 0)
      operator delete(__p[0]);
    siri::ontology::oname::graph::ontology_init::sirikit_AudiobookAuthor(void)::sirikit_AudiobookAuthor = v3;
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_AudiobookAuthor(void)::sirikit_AudiobookAuthor;
}

void sub_1C329DD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD1618](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329DDE4()
{
  JUMPOUT(0x1C329DDD0);
}

uint64_t siri::ontology::oname::graph::ontology_init::uso_NoEntity(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[7];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "uso_NoEntity");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16[4] = xmmword_1C33C17D4;
    v16[5] = unk_1C33C17E4;
    v16[6] = xmmword_1C33C17F4;
    v16[0] = xmmword_1C33C1794;
    v16[1] = unk_1C33C17A4;
    v16[2] = xmmword_1C33C17B4;
    v16[3] = unk_1C33C17C4;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)v16, 28);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1668, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::uso_NoEntity(void)::uso_NoEntity = v3;
  }
  return siri::ontology::oname::graph::ontology_init::uso_NoEntity(void)::uso_NoEntity;
}

void sub_1C329DFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::uso_NLv3UnknownEntity(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "uso_NLv3UnknownEntity");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v16 = 0x4F600000501;
    std::unordered_set<int>::unordered_set((uint64_t)v12, (int *)&v16, 2);
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1730, 2, (uint64_t *)v14, v13, v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::uso_NLv3UnknownEntity(void)::uso_NLv3UnknownEntity = v3;
  }
  return siri::ontology::oname::graph::ontology_init::uso_NLv3UnknownEntity(void)::uso_NLv3UnknownEntity;
}

void sub_1C329E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  MEMORY[0x1C3BD1618](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleApp_AppAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleApp_AppAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1818;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v17 = 1844;
    v16 = xmmword_1C33C1804;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 5);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1838, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleApp_AppAttribute(void)::appleApp_AppAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleApp_AppAttribute(void)::appleApp_AppAttribute;
}

void sub_1C329E41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329E4B4()
{
  JUMPOUT(0x1C329E4A0);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleApp_AppListingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[5];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleApp_AppListingAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1817;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v17 = 0x74C0000074BLL;
    v16[2] = xmmword_1C33C1838;
    v16[3] = unk_1C33C1848;
    v16[4] = xmmword_1C33C1858;
    v16[0] = xmmword_1C33C1818;
    v16[1] = unk_1C33C1828;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 22);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1839, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleApp_AppListingAttribute(void)::appleApp_AppListingAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleApp_AppListingAttribute(void)::appleApp_AppListingAttribute;
}

void sub_1C329E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 209) < 0)
    operator delete(*(void **)(v40 - 232));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329E72C()
{
  JUMPOUT(0x1C329E718);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleCalendarEvent_CalendarEventAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[4];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleCalendarEvent_CalendarEventAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1630;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[2] = xmmword_1C33C1890;
    v16[3] = unk_1C33C18A0;
    v17[0] = xmmword_1C33C18B0;
    *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1C33C18B0 + 12);
    v16[0] = xmmword_1C33C1870;
    v16[1] = unk_1C33C1880;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 23);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1628, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleCalendarEvent_CalendarEventAttribute(void)::appleCalendarEvent_CalendarEventAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleCalendarEvent_CalendarEventAttribute(void)::appleCalendarEvent_CalendarEventAttribute;
}

void sub_1C329E908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 209) < 0)
    operator delete(*(void **)(v40 - 232));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329E9A0()
{
  JUMPOUT(0x1C329E98CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePayments_CurrencyAmountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePayments_CurrencyAmountAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2015;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v17 = 0x83F0000083ELL;
    v16 = xmmword_1C33C18CC;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 6);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2088, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePayments_CurrencyAmountAttribute(void)::applePayments_CurrencyAmountAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePayments_CurrencyAmountAttribute(void)::applePayments_CurrencyAmountAttribute;
}

void sub_1C329EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329EC08()
{
  JUMPOUT(0x1C329EBF4);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePayments_PaymentAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[4];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePayments_PaymentAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2017;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v17 = 0x83B0000083ALL;
    v16[0] = xmmword_1C33C18E4;
    v16[1] = unk_1C33C18F4;
    v16[2] = xmmword_1C33C1904;
    v16[3] = unk_1C33C1914;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 18);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2087, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePayments_PaymentAttribute(void)::applePayments_PaymentAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePayments_PaymentAttribute(void)::applePayments_PaymentAttribute;
}

void sub_1C329EDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0)
    operator delete(*(void **)(v40 - 216));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329EE78()
{
  JUMPOUT(0x1C329EE64);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePayments_PaymentAccountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePayments_PaymentAccountAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 2016;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[0] = xmmword_1C33C192C;
    v16[1] = unk_1C33C193C;
    v17[0] = xmmword_1C33C194C;
    *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1C33C194C + 12);
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 15);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2089, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePayments_PaymentAccountAttribute(void)::applePayments_PaymentAccountAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePayments_PaymentAccountAttribute(void)::applePayments_PaymentAccountAttribute;
}

void sub_1C329F04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0)
    operator delete(*(void **)(v40 - 200));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329F0E4()
{
  JUMPOUT(0x1C329F0D0);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEventTrigger_EventTriggerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleEventTrigger_EventTriggerAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1727;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C3660;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 4);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1732, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleEventTrigger_EventTriggerAttribute(void)::appleEventTrigger_EventTriggerAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEventTrigger_EventTriggerAttribute(void)::appleEventTrigger_EventTriggerAttribute;
}

void sub_1C329F2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0)
    operator delete(*(void **)(v35 - 152));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329F33C()
{
  JUMPOUT(0x1C329F328);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotos_PhotoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[7];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePhotos_PhotoAttribute");
    v17[0] = xmmword_1C33C1F08;
    v17[1] = unk_1C33C1F18;
    v17[2] = xmmword_1C33C1F28;
    v17[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v17, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1979;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[4] = xmmword_1C33C19A8;
    v16[5] = unk_1C33C19B8;
    v16[6] = xmmword_1C33C19C8;
    v16[0] = xmmword_1C33C1968;
    v16[1] = unk_1C33C1978;
    v16[2] = xmmword_1C33C1988;
    v16[3] = unk_1C33C1998;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 28);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2129, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePhotos_PhotoAttribute(void)::applePhotos_PhotoAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhotos_PhotoAttribute(void)::applePhotos_PhotoAttribute;
}

void sub_1C329F518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329F5B0()
{
  JUMPOUT(0x1C329F59CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotos_PhotoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePhotos_PhotoFilter");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1976;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C19D8;
    v17[0] = unk_1C33C19E8;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C19F4;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 11);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2166, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePhotos_PhotoFilter(void)::applePhotos_PhotoFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhotos_PhotoFilter(void)::applePhotos_PhotoFilter;
}

void sub_1C329F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329F814()
{
  JUMPOUT(0x1C329F800);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePhotoCollection_PhotoCollectionFilter");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1982;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C1A04;
    v17[0] = unk_1C33C1A14;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1A20;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 11);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2159, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionFilter(void)::applePhotoCollection_PhotoCollectionFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionFilter(void)::applePhotoCollection_PhotoCollectionFilter;
}

void sub_1C329F9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329FA78()
{
  JUMPOUT(0x1C329FA64);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[5];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePhotoCollection_PhotoCollectionAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1974;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[4] = xmmword_1C33C1A70;
    v17[0] = unk_1C33C1A80;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1A8C;
    v16[0] = xmmword_1C33C1A30;
    v16[1] = unk_1C33C1A40;
    v16[2] = xmmword_1C33C1A50;
    v16[3] = unk_1C33C1A60;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 27);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2158, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionAttribute(void)::applePhotoCollection_PhotoCollectionAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionAttribute(void)::applePhotoCollection_PhotoCollectionAttribute;
}

void sub_1C329FC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329FCEC()
{
  JUMPOUT(0x1C329FCD8);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[5];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePhotoMemory_PhotoMemoryAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1980;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[4] = xmmword_1C33C1ADC;
    v17[0] = unk_1C33C1AEC;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1AF8;
    v16[0] = xmmword_1C33C1A9C;
    v16[1] = unk_1C33C1AAC;
    v16[2] = xmmword_1C33C1ABC;
    v16[3] = unk_1C33C1ACC;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 27);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2160, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryAttribute(void)::applePhotoMemory_PhotoMemoryAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryAttribute(void)::applePhotoMemory_PhotoMemoryAttribute;
}

void sub_1C329FEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C329FF60()
{
  JUMPOUT(0x1C329FF4CLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "applePhotoMemory_PhotoMemoryFilter");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1973;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C1B08;
    v17[0] = unk_1C33C1B18;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1B24;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 11);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2161, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryFilter(void)::applePhotoMemory_PhotoMemoryFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryFilter(void)::applePhotoMemory_PhotoMemoryFilter;
}

void sub_1C32A012C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32A01C4()
{
  JUMPOUT(0x1C32A01B0);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[5];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleSlideshow_SlideshowAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1975;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[4] = xmmword_1C33C1B74;
    v17[0] = unk_1C33C1B84;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1B90;
    v16[0] = xmmword_1C33C1B34;
    v16[1] = unk_1C33C1B44;
    v16[2] = xmmword_1C33C1B54;
    v16[3] = unk_1C33C1B64;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 27);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2163, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowAttribute(void)::appleSlideshow_SlideshowAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowAttribute(void)::appleSlideshow_SlideshowAttribute;
}

void sub_1C32A03A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32A0438()
{
  JUMPOUT(0x1C32A0424);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleSlideshow_SlideshowFilter");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1977;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C1BA0;
    v17[0] = unk_1C33C1BB0;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1BBC;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 11);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2162, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowFilter(void)::appleSlideshow_SlideshowFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowFilter(void)::appleSlideshow_SlideshowFilter;
}

void sub_1C32A0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32A069C()
{
  JUMPOUT(0x1C32A0688);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleVideo_VideoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  _OWORD v16[5];
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleVideo_VideoAttribute");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1981;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16[4] = xmmword_1C33C1C0C;
    v17[0] = unk_1C33C1C1C;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1C28;
    v16[0] = xmmword_1C33C1BCC;
    v16[1] = unk_1C33C1BDC;
    v16[2] = xmmword_1C33C1BEC;
    v16[3] = unk_1C33C1BFC;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)v16, 27);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2164, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleVideo_VideoAttribute(void)::appleVideo_VideoAttribute = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleVideo_VideoAttribute(void)::appleVideo_VideoAttribute;
}

void sub_1C32A0878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0)
    operator delete(*(void **)(v40 - 248));
  MEMORY[0x1C3BD1618](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32A0910()
{
  JUMPOUT(0x1C32A08FCLL);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleVideo_VideoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8[5];
  int v9;
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  uint64_t v13[5];
  void *v14[2];
  char v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v14, "appleVideo_VideoFilter");
    v18[0] = xmmword_1C33C1F08;
    v18[1] = unk_1C33C1F18;
    v18[2] = xmmword_1C33C1F28;
    v18[3] = unk_1C33C1F38;
    std::unordered_map<int,int>::unordered_map(v13, (int *)v18, 8);
    v11 = 1281;
    std::unordered_set<int>::unordered_set((uint64_t)v12, &v11, 1);
    v9 = 1978;
    std::unordered_set<int>::unordered_set((uint64_t)v10, &v9, 1);
    v16 = xmmword_1C33C1C38;
    v17[0] = unk_1C33C1C48;
    *(_OWORD *)((char *)v17 + 12) = unk_1C33C1C54;
    std::unordered_set<int>::unordered_set((uint64_t)v8, (int *)&v16, 11);
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2165, 2, (uint64_t *)v14, v13, v12, v10, v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[0]);
    siri::ontology::oname::graph::ontology_init::appleVideo_VideoFilter(void)::appleVideo_VideoFilter = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleVideo_VideoFilter(void)::appleVideo_VideoFilter;
}

void sub_1C32A0ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  MEMORY[0x1C3BD1618](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1C32A0B74()
{
  JUMPOUT(0x1C32A0B60);
}

uint64_t siri::ontology::oname::graph::ontology_init::apple_MessageEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "apple_MessageEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1208, 2, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::apple_MessageEffect(void)::apple_MessageEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::apple_MessageEffect(void)::apple_MessageEffect;
}

void sub_1C32A0CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  MEMORY[0x1C3BD1618](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::uso_UnknownEntity(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "uso_UnknownEntity");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1272, 2, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::uso_UnknownEntity(void)::uso_UnknownEntity = v3;
  }
  return siri::ontology::oname::graph::ontology_init::uso_UnknownEntity(void)::uso_UnknownEntity;
}

void sub_1C32A0E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  MEMORY[0x1C3BD1618](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeList(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_RecurringDateTimeList");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1285, 2, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeList(void)::common_RecurringDateTimeList = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeList(void)::common_RecurringDateTimeList;
}

void sub_1C32A1024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  MEMORY[0x1C3BD1618](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AgentContact(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_AgentContact");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1331, 2, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_AgentContact(void)::common_AgentContact = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_AgentContact(void)::common_AgentContact;
}

void sub_1C32A11DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  MEMORY[0x1C3BD1618](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_GroupContact(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_GroupContact");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1334, 2, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_GroupContact(void)::common_GroupContact = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_GroupContact(void)::common_GroupContact;
}

void sub_1C32A1394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  MEMORY[0x1C3BD1618](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_URI(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  _OWORD v10[2];
  int v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_URI");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    memset(v10, 0, sizeof(v10));
    v11 = 1065353216;
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1489, 2, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, (uint64_t *)v10, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v10);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_URI(void)::common_URI = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_URI(void)::common_URI;
}

void sub_1C32A154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  MEMORY[0x1C3BD1618](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSound(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleAlarm_AlarmAttribute_AlarmAttributesSound");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1663;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1659, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSound(void)::appleAlarm_AlarmAttribute_AlarmAttributesSound = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSound(void)::appleAlarm_AlarmAttribute_AlarmAttributesSound;
}

void sub_1C32A1718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesNotSet(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleAlarm_AlarmAttribute_AlarmAttributesNotSet");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1663;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1655, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesNotSet(void)::appleAlarm_AlarmAttribute_AlarmAttributesNotSet = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesNotSet(void)::appleAlarm_AlarmAttribute_AlarmAttributesNotSet;
}

void sub_1C32A18EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSet(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleAlarm_AlarmAttribute_AlarmAttributesSet");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1663;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1654, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSet(void)::appleAlarm_AlarmAttribute_AlarmAttributesSet = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSet(void)::appleAlarm_AlarmAttribute_AlarmAttributesSet;
}

void sub_1C32A1AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSleep(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleAlarm_AlarmAttribute_AlarmAttributesSleep");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1663;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1658, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSleep(void)::appleAlarm_AlarmAttribute_AlarmAttributesSleep = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSleep(void)::appleAlarm_AlarmAttribute_AlarmAttributesSleep;
}

void sub_1C32A1C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1693;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1700, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage(void)::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage(void)::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage;
}

void sub_1C32A1E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_Contact(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_Contact");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2443, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_Contact(void)::appleContact_ContactAttribute_Contact = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_Contact(void)::appleContact_ContactAttribute_Contact;
}

void sub_1C32A203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesFuture(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_ContactAttributesFuture");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1750, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesFuture(void)::appleContact_ContactAttribute_ContactAttributesFuture = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesFuture(void)::appleContact_ContactAttribute_ContactAttributesFuture;
}

void sub_1C32A2210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPresent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_ContactAttributesPresent");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1749, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPresent(void)::appleContact_ContactAttribute_ContactAttributesPresent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPresent(void)::appleContact_ContactAttribute_ContactAttributesPresent;
}

void sub_1C32A23E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPast(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_ContactAttributesPast");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1748, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPast(void)::appleContact_ContactAttribute_ContactAttributesPast = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPast(void)::appleContact_ContactAttribute_ContactAttributesPast;
}

void sub_1C32A25B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesRingtone(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_ContactAttributesRingtone");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1746, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesRingtone(void)::appleContact_ContactAttribute_ContactAttributesRingtone = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesRingtone(void)::appleContact_ContactAttribute_ContactAttributesRingtone;
}

void sub_1C32A278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesTextTone(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_ContactAttributesTextTone");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1747, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesTextTone(void)::appleContact_ContactAttribute_ContactAttributesTextTone = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesTextTone(void)::appleContact_ContactAttribute_ContactAttributesTextTone;
}

void sub_1C32A2960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesHomePage(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleContact_ContactAttribute_ContactAttributesHomePage");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1731;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1745, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesHomePage(void)::appleContact_ContactAttribute_ContactAttributesHomePage = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesHomePage(void)::appleContact_ContactAttribute_ContactAttributesHomePage;
}

void sub_1C32A2B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesNew(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesNew");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1674, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesNew(void)::appleEmail_EmailAttribute_EmailAttributesNew = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesNew(void)::appleEmail_EmailAttribute_EmailAttributesNew;
}

void sub_1C32A2D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesRead(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesRead");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1675, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesRead(void)::appleEmail_EmailAttribute_EmailAttributesRead = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesRead(void)::appleEmail_EmailAttribute_EmailAttributesRead;
}

void sub_1C32A2EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnread(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesUnread");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1676, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnread(void)::appleEmail_EmailAttribute_EmailAttributesUnread = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnread(void)::appleEmail_EmailAttribute_EmailAttributesUnread;
}

void sub_1C32A30B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesFlagged(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesFlagged");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1677, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesFlagged(void)::appleEmail_EmailAttribute_EmailAttributesFlagged = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesFlagged(void)::appleEmail_EmailAttribute_EmailAttributesFlagged;
}

void sub_1C32A3284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSaved(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesSaved");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1678, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSaved(void)::appleEmail_EmailAttribute_EmailAttributesSaved = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSaved(void)::appleEmail_EmailAttribute_EmailAttributesSaved;
}

void sub_1C32A3458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnsaved(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesUnsaved");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1679, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnsaved(void)::appleEmail_EmailAttribute_EmailAttributesUnsaved = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnsaved(void)::appleEmail_EmailAttribute_EmailAttributesUnsaved;
}

void sub_1C32A362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesSent");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1680, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSent(void)::appleEmail_EmailAttribute_EmailAttributesSent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSent(void)::appleEmail_EmailAttribute_EmailAttributesSent;
}

void sub_1C32A3800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesReceived(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesReceived");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1681, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesReceived(void)::appleEmail_EmailAttribute_EmailAttributesReceived = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesReceived(void)::appleEmail_EmailAttribute_EmailAttributesReceived;
}

void sub_1C32A39D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesLatest(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesLatest");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1682, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesLatest(void)::appleEmail_EmailAttribute_EmailAttributesLatest = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesLatest(void)::appleEmail_EmailAttribute_EmailAttributesLatest;
}

void sub_1C32A3BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesPreview(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesPreview");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1683, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesPreview(void)::appleEmail_EmailAttribute_EmailAttributesPreview = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesPreview(void)::appleEmail_EmailAttribute_EmailAttributesPreview;
}

void sub_1C32A3D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesAttachment(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleEmail_EmailAttribute_EmailAttributesAttachment");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1671;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1684, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesAttachment(void)::appleEmail_EmailAttribute_EmailAttributesAttachment = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesAttachment(void)::appleEmail_EmailAttribute_EmailAttributesAttachment;
}

void sub_1C32A3F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNotification(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesNotification");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1566, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNotification(void)::appleMessage_MessageAttribute_SmsAttributesNotification = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNotification(void)::appleMessage_MessageAttribute_SmsAttributesNotification;
}

void sub_1C32A4124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesMusicSharing(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesMusicSharing");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1595, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesMusicSharing(void)::appleMessage_MessageAttribute_SmsAttributesMusicSharing = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesMusicSharing(void)::appleMessage_MessageAttribute_SmsAttributesMusicSharing;
}

void sub_1C32A42F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFireworksEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesFireworksEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1590, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFireworksEffect(void)::appleMessage_MessageAttribute_SmsAttributesFireworksEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFireworksEffect(void)::appleMessage_MessageAttribute_SmsAttributesFireworksEffect;
}

void sub_1C32A44CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesShootingStarEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1591, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect(void)::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect(void)::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect;
}

void sub_1C32A46A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesHandwritten(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesHandwritten");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1594, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesHandwritten(void)::appleMessage_MessageAttribute_SmsAttributesHandwritten = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesHandwritten(void)::appleMessage_MessageAttribute_SmsAttributesHandwritten;
}

void sub_1C32A4874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoveEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesLoveEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1588, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoveEffect(void)::appleMessage_MessageAttribute_SmsAttributesLoveEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoveEffect(void)::appleMessage_MessageAttribute_SmsAttributesLoveEffect;
}

void sub_1C32A4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesSpotlightEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1585, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect(void)::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect(void)::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect;
}

void sub_1C32A4C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesBalloonsEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1586, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect(void)::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect(void)::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect;
}

void sub_1C32A4DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesEchoEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesEchoEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1584, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesEchoEffect(void)::appleMessage_MessageAttribute_SmsAttributesEchoEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesEchoEffect(void)::appleMessage_MessageAttribute_SmsAttributesEchoEffect;
}

void sub_1C32A4FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesGentleEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesGentleEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1583, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesGentleEffect(void)::appleMessage_MessageAttribute_SmsAttributesGentleEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesGentleEffect(void)::appleMessage_MessageAttribute_SmsAttributesGentleEffect;
}

void sub_1C32A5198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesCelebrationEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1592, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect(void)::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect(void)::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect;
}

void sub_1C32A536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesDigitalTouch(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesDigitalTouch");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1593, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesDigitalTouch(void)::appleMessage_MessageAttribute_SmsAttributesDigitalTouch = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesDigitalTouch(void)::appleMessage_MessageAttribute_SmsAttributesDigitalTouch;
}

void sub_1C32A5540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLasersEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesLasersEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1589, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLasersEffect(void)::appleMessage_MessageAttribute_SmsAttributesLasersEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLasersEffect(void)::appleMessage_MessageAttribute_SmsAttributesLasersEffect;
}

void sub_1C32A5714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoudEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesLoudEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1582, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoudEffect(void)::appleMessage_MessageAttribute_SmsAttributesLoudEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoudEffect(void)::appleMessage_MessageAttribute_SmsAttributesLoudEffect;
}

void sub_1C32A58E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1580, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect(void)::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect(void)::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect;
}

void sub_1C32A5ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesConfettiEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesConfettiEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1587, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesConfettiEffect(void)::appleMessage_MessageAttribute_SmsAttributesConfettiEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesConfettiEffect(void)::appleMessage_MessageAttribute_SmsAttributesConfettiEffect;
}

void sub_1C32A5C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSlamEffect(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesSlamEffect");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1581, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSlamEffect(void)::appleMessage_MessageAttribute_SmsAttributesSlamEffect = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSlamEffect(void)::appleMessage_MessageAttribute_SmsAttributesSlamEffect;
}

void sub_1C32A5E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesAttachment(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesAttachment");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1579, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesAttachment(void)::appleMessage_MessageAttribute_SmsAttributesAttachment = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesAttachment(void)::appleMessage_MessageAttribute_SmsAttributesAttachment;
}

void sub_1C32A6038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesStickers(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesStickers");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1596, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesStickers(void)::appleMessage_MessageAttribute_SmsAttributesStickers = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesStickers(void)::appleMessage_MessageAttribute_SmsAttributesStickers;
}

void sub_1C32A620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounAudioMessage(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsNounAudioMessage");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1599, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounAudioMessage(void)::appleMessage_MessageAttribute_SmsNounAudioMessage = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounAudioMessage(void)::appleMessage_MessageAttribute_SmsNounAudioMessage;
}

void sub_1C32A63E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounImageMessage(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsNounImageMessage");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1600, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounImageMessage(void)::appleMessage_MessageAttribute_SmsNounImageMessage = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounImageMessage(void)::appleMessage_MessageAttribute_SmsNounImageMessage;
}

void sub_1C32A65B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsSharedEntityMyLocation(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsSharedEntityMyLocation");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1598, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsSharedEntityMyLocation(void)::appleMessage_MessageAttribute_SmsSharedEntityMyLocation = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsSharedEntityMyLocation(void)::appleMessage_MessageAttribute_SmsSharedEntityMyLocation;
}

void sub_1C32A6788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounVideoMessage(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsNounVideoMessage");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1601, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounVideoMessage(void)::appleMessage_MessageAttribute_SmsNounVideoMessage = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounVideoMessage(void)::appleMessage_MessageAttribute_SmsNounVideoMessage;
}

void sub_1C32A695C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesTapback(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesTapback");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1597, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesTapback(void)::appleMessage_MessageAttribute_SmsAttributesTapback = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesTapback(void)::appleMessage_MessageAttribute_SmsAttributesTapback;
}

void sub_1C32A6B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnflagged(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesUnflagged");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1571, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnflagged(void)::appleMessage_MessageAttribute_SmsAttributesUnflagged = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnflagged(void)::appleMessage_MessageAttribute_SmsAttributesUnflagged;
}

void sub_1C32A6D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSaved(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesSaved");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1572, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSaved(void)::appleMessage_MessageAttribute_SmsAttributesSaved = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSaved(void)::appleMessage_MessageAttribute_SmsAttributesSaved;
}

void sub_1C32A6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFlagged(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesFlagged");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1570, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFlagged(void)::appleMessage_MessageAttribute_SmsAttributesFlagged = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFlagged(void)::appleMessage_MessageAttribute_SmsAttributesFlagged;
}

void sub_1C32A70AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesRead(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesRead");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1568, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesRead(void)::appleMessage_MessageAttribute_SmsAttributesRead = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesRead(void)::appleMessage_MessageAttribute_SmsAttributesRead;
}

void sub_1C32A7280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesSent");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1574, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSent(void)::appleMessage_MessageAttribute_SmsAttributesSent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSent(void)::appleMessage_MessageAttribute_SmsAttributesSent;
}

void sub_1C32A7454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnread(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesUnread");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1569, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnread(void)::appleMessage_MessageAttribute_SmsAttributesUnread = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnread(void)::appleMessage_MessageAttribute_SmsAttributesUnread;
}

void sub_1C32A7628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNew(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesNew");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1567, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNew(void)::appleMessage_MessageAttribute_SmsAttributesNew = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNew(void)::appleMessage_MessageAttribute_SmsAttributesNew;
}

void sub_1C32A77FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLatest(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesLatest");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1576, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLatest(void)::appleMessage_MessageAttribute_SmsAttributesLatest = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLatest(void)::appleMessage_MessageAttribute_SmsAttributesLatest;
}

void sub_1C32A79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSubject(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesSubject");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1577, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSubject(void)::appleMessage_MessageAttribute_SmsAttributesSubject = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSubject(void)::appleMessage_MessageAttribute_SmsAttributesSubject;
}

void sub_1C32A7BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnsaved(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesUnsaved");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1573, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnsaved(void)::appleMessage_MessageAttribute_SmsAttributesUnsaved = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnsaved(void)::appleMessage_MessageAttribute_SmsAttributesUnsaved;
}

void sub_1C32A7D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesReceived(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleMessage_MessageAttribute_SmsAttributesReceived");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1604;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1575, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesReceived(void)::appleMessage_MessageAttribute_SmsAttributesReceived = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesReceived(void)::appleMessage_MessageAttribute_SmsAttributesReceived;
}

void sub_1C32A7F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortUpcoming(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortUpcoming");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1755, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortUpcoming(void)::appleNotebook_NotebookAttribute_NotebookSortUpcoming = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortUpcoming(void)::appleNotebook_NotebookAttribute_NotebookSortUpcoming;
}

void sub_1C32A8120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortRecent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortRecent");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1756, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortRecent(void)::appleNotebook_NotebookAttribute_NotebookSortRecent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortRecent(void)::appleNotebook_NotebookAttribute_NotebookSortRecent;
}

void sub_1C32A82F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortOld(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortOld");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1757, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortOld(void)::appleNotebook_NotebookAttribute_NotebookSortOld = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortOld(void)::appleNotebook_NotebookAttribute_NotebookSortOld;
}

void sub_1C32A84C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortDistance(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortShortDistance");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1758, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortDistance(void)::appleNotebook_NotebookAttribute_NotebookSortShortDistance = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortDistance(void)::appleNotebook_NotebookAttribute_NotebookSortShortDistance;
}

void sub_1C32A869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongDistance(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortLongDistance");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1759, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongDistance(void)::appleNotebook_NotebookAttribute_NotebookSortLongDistance = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongDistance(void)::appleNotebook_NotebookAttribute_NotebookSortLongDistance;
}

void sub_1C32A8870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortMostItems(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortMostItems");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1760, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortMostItems(void)::appleNotebook_NotebookAttribute_NotebookSortMostItems = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortMostItems(void)::appleNotebook_NotebookAttribute_NotebookSortMostItems;
}

void sub_1C32A8A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLeastItems(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortLeastItems");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1761, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLeastItems(void)::appleNotebook_NotebookAttribute_NotebookSortLeastItems = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLeastItems(void)::appleNotebook_NotebookAttribute_NotebookSortLeastItems;
}

void sub_1C32A8C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongLength(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortLongLength");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1762, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongLength(void)::appleNotebook_NotebookAttribute_NotebookSortLongLength = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongLength(void)::appleNotebook_NotebookAttribute_NotebookSortLongLength;
}

void sub_1C32A8DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortLength(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortShortLength");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1763, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortLength(void)::appleNotebook_NotebookAttribute_NotebookSortShortLength = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortLength(void)::appleNotebook_NotebookAttribute_NotebookSortShortLength;
}

void sub_1C32A8FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortHighPriority(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortHighPriority");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1764, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortHighPriority(void)::appleNotebook_NotebookAttribute_NotebookSortHighPriority = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortHighPriority(void)::appleNotebook_NotebookAttribute_NotebookSortHighPriority;
}

void sub_1C32A9194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLowPriority(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookSortLowPriority");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1765, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLowPriority(void)::appleNotebook_NotebookAttribute_NotebookSortLowPriority = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLowPriority(void)::appleNotebook_NotebookAttribute_NotebookSortLowPriority;
}

void sub_1C32A9368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesComplete(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesComplete");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1766, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesComplete(void)::appleNotebook_NotebookAttribute_NotebookAttributesComplete = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesComplete(void)::appleNotebook_NotebookAttribute_NotebookAttributesComplete;
}

void sub_1C32A953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesIncomplete");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1767, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete(void)::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete(void)::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete;
}

void sub_1C32A9710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesPriority(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesPriority");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1768, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesPriority(void)::appleNotebook_NotebookAttribute_NotebookAttributesPriority = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesPriority(void)::appleNotebook_NotebookAttribute_NotebookAttributesPriority;
}

void sub_1C32A98E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesUnflagged");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1769, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged(void)::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged(void)::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged;
}

void sub_1C32A9AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesFlagged(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesFlagged");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1770, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesFlagged(void)::appleNotebook_NotebookAttribute_NotebookAttributesFlagged = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesFlagged(void)::appleNotebook_NotebookAttribute_NotebookAttributesFlagged;
}

void sub_1C32A9C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesAudio(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesAudio");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1771, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesAudio(void)::appleNotebook_NotebookAttribute_NotebookAttributesAudio = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesAudio(void)::appleNotebook_NotebookAttribute_NotebookAttributesAudio;
}

void sub_1C32A9E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesStatus(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesStatus");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1772, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesStatus(void)::appleNotebook_NotebookAttribute_NotebookAttributesStatus = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesStatus(void)::appleNotebook_NotebookAttribute_NotebookAttributesStatus;
}

void sub_1C32AA034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesOverdue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesOverdue");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1773, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesOverdue(void)::appleNotebook_NotebookAttribute_NotebookAttributesOverdue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesOverdue(void)::appleNotebook_NotebookAttribute_NotebookAttributesOverdue;
}

void sub_1C32AA208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesScheduled(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesScheduled");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1774, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesScheduled(void)::appleNotebook_NotebookAttribute_NotebookAttributesScheduled = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesScheduled(void)::appleNotebook_NotebookAttribute_NotebookAttributesScheduled;
}

void sub_1C32AA3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesShared(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookAttributesShared");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1775, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesShared(void)::appleNotebook_NotebookAttribute_NotebookAttributesShared = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesShared(void)::appleNotebook_NotebookAttribute_NotebookAttributesShared;
}

void sub_1C32AA5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityWebsite");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1776, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite(void)::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite(void)::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite;
}

void sub_1C32AA784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityUrl(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityUrl");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1777, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityUrl(void)::appleNotebook_NotebookAttribute_NotebookContentEntityUrl = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityUrl(void)::appleNotebook_NotebookAttribute_NotebookContentEntityUrl;
}

void sub_1C32AA958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityPhoto");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1778, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto(void)::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto(void)::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto;
}

void sub_1C32AAB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityVideo(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityVideo");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1779, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityVideo(void)::appleNotebook_NotebookAttribute_NotebookContentEntityVideo = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityVideo(void)::appleNotebook_NotebookAttribute_NotebookContentEntityVideo;
}

void sub_1C32AAD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityApp(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityApp");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1780, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityApp(void)::appleNotebook_NotebookAttribute_NotebookContentEntityApp = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityApp(void)::appleNotebook_NotebookAttribute_NotebookContentEntityApp;
}

void sub_1C32AAED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityEmail(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityEmail");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1781, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityEmail(void)::appleNotebook_NotebookAttribute_NotebookContentEntityEmail = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityEmail(void)::appleNotebook_NotebookAttribute_NotebookContentEntityEmail;
}

void sub_1C32AB0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityMessage(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityMessage");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1782, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityMessage(void)::appleNotebook_NotebookAttribute_NotebookContentEntityMessage = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityMessage(void)::appleNotebook_NotebookAttribute_NotebookContentEntityMessage;
}

void sub_1C32AB27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityPodcast");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1783, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast(void)::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast(void)::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast;
}

void sub_1C32AB450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntitySong(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntitySong");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1784, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntitySong(void)::appleNotebook_NotebookAttribute_NotebookContentEntitySong = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntitySong(void)::appleNotebook_NotebookAttribute_NotebookContentEntitySong;
}

void sub_1C32AB624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityArticle(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityArticle");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1785, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityArticle(void)::appleNotebook_NotebookAttribute_NotebookContentEntityArticle = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityArticle(void)::appleNotebook_NotebookAttribute_NotebookContentEntityArticle;
}

void sub_1C32AB7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityHigh(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookPriorityHigh");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1786, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityHigh(void)::appleNotebook_NotebookAttribute_NotebookPriorityHigh = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityHigh(void)::appleNotebook_NotebookAttribute_NotebookPriorityHigh;
}

void sub_1C32AB9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityMedium(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookPriorityMedium");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1787, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityMedium(void)::appleNotebook_NotebookAttribute_NotebookPriorityMedium = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityMedium(void)::appleNotebook_NotebookAttribute_NotebookPriorityMedium;
}

void sub_1C32ABBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityLow(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookPriorityLow");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1788, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityLow(void)::appleNotebook_NotebookAttribute_NotebookPriorityLow = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityLow(void)::appleNotebook_NotebookAttribute_NotebookPriorityLow;
}

void sub_1C32ABD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityThis(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotebook_NotebookAttribute_NotebookContentEntityThis");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1733;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1789, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityThis(void)::appleNotebook_NotebookAttribute_NotebookContentEntityThis = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityThis(void)::appleNotebook_NotebookAttribute_NotebookContentEntityThis;
}

void sub_1C32ABF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute_NotificationAttributeLatest(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleNotification_NotificationAttribute_NotificationAttributeLatest");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1715;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1716, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute_NotificationAttributeLatest(void)::appleNotification_NotificationAttribute_NotificationAttributeLatest = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute_NotificationAttributeLatest(void)::appleNotification_NotificationAttribute_NotificationAttributeLatest;
}

void sub_1C32AC11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_History(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_History");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2489, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_History(void)::applePhoneCall_PhoneCallAttribute_History = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_History(void)::applePhoneCall_PhoneCallAttribute_History;
}

void sub_1C32AC2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_Group(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_Group");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2488, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_Group(void)::applePhoneCall_PhoneCallAttribute_Group = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_Group(void)::applePhoneCall_PhoneCallAttribute_Group;
}

void sub_1C32AC4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1556, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth;
}

void sub_1C32AC698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1563, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast;
}

void sub_1C32AC86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1562, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing;
}

void sub_1C32ACA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1554, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone;
}

void sub_1C32ACC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1553, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone;
}

void sub_1C32ACDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1565, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent;
}

void sub_1C32ACFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1559, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent;
}

void sub_1C32AD190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1561, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived;
}

void sub_1C32AD364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1560, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved;
}

void sub_1C32AD538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1557, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed;
}

void sub_1C32AD70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1558, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew;
}

void sub_1C32AD8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1564, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness;
}

void sub_1C32ADAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1555, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency;
}

void sub_1C32ADC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1603;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2394, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime = v3;
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime;
}

void sub_1C32ADE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerTypeSleep(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleTimer_TimerAttribute_TimerTypeSleep");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1648;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1641, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerTypeSleep(void)::appleTimer_TimerAttribute_TimerTypeSleep = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerTypeSleep(void)::appleTimer_TimerAttribute_TimerTypeSleep;
}

void sub_1C32AE030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOff(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleTimer_TimerAttribute_TimerAttributesOff");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1648;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1644, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOff(void)::appleTimer_TimerAttribute_TimerAttributesOff = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOff(void)::appleTimer_TimerAttribute_TimerAttributesOff;
}

void sub_1C32AE204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesRunning(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleTimer_TimerAttribute_TimerAttributesRunning");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1648;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1646, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesRunning(void)::appleTimer_TimerAttribute_TimerAttributesRunning = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesRunning(void)::appleTimer_TimerAttribute_TimerAttributesRunning;
}

void sub_1C32AE3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesPaused(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleTimer_TimerAttribute_TimerAttributesPaused");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1648;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1645, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesPaused(void)::appleTimer_TimerAttribute_TimerAttributesPaused = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesPaused(void)::appleTimer_TimerAttribute_TimerAttributesPaused;
}

void sub_1C32AE5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOn(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleTimer_TimerAttribute_TimerAttributesOn");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1648;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1643, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOn(void)::appleTimer_TimerAttribute_TimerAttributesOn = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOn(void)::appleTimer_TimerAttribute_TimerAttributesOn;
}

void sub_1C32AE780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerNounSleepTimer(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleTimer_TimerAttribute_TimerNounSleepTimer");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1648;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1642, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerNounSleepTimer(void)::appleTimer_TimerAttribute_TimerNounSleepTimer = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerNounSleepTimer(void)::appleTimer_TimerAttribute_TimerNounSleepTimer;
}

void sub_1C32AE954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounPoem(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsNounPoem");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1701, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounPoem(void)::appleWriting_WritingAttribute_WritingsNounPoem = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounPoem(void)::appleWriting_WritingAttribute_WritingsNounPoem;
}

void sub_1C32AEB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounCouplet(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsNounCouplet");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1702, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounCouplet(void)::appleWriting_WritingAttribute_WritingsNounCouplet = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounCouplet(void)::appleWriting_WritingAttribute_WritingsNounCouplet;
}

void sub_1C32AECFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounXiehouyu(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsNounXiehouyu");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1703, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounXiehouyu(void)::appleWriting_WritingAttribute_WritingsNounXiehouyu = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounXiehouyu(void)::appleWriting_WritingAttribute_WritingsNounXiehouyu;
}

void sub_1C32AEED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsNounIdiomSolitaire");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1704, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire(void)::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire(void)::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire;
}

void sub_1C32AF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1705, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse(void)::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse(void)::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse;
}

void sub_1C32AF278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1706, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse(void)::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse(void)::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse;
}

void sub_1C32AF44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1707, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet(void)::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet(void)::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet;
}

void sub_1C32AF620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1694;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1708, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection(void)::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection = v3;
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection(void)::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection;
}

void sub_1C32AF7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopRight(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_TopRight");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2651, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopRight(void)::common_SpatialPosition_TopRight = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopRight(void)::common_SpatialPosition_TopRight;
}

void sub_1C32AF9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Right(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_Right");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2648, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Right(void)::common_SpatialPosition_Right = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Right(void)::common_SpatialPosition_Right;
}

void sub_1C32AFB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Left(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_Left");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2647, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Left(void)::common_SpatialPosition_Left = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Left(void)::common_SpatialPosition_Left;
}

void sub_1C32AFD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomLeft(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_BottomLeft");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2644, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomLeft(void)::common_SpatialPosition_BottomLeft = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomLeft(void)::common_SpatialPosition_BottomLeft;
}

void sub_1C32AFF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopLeft(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_TopLeft");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2650, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopLeft(void)::common_SpatialPosition_TopLeft = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopLeft(void)::common_SpatialPosition_TopLeft;
}

void sub_1C32B0118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Top(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_Top");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2649, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Top(void)::common_SpatialPosition_Top = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Top(void)::common_SpatialPosition_Top;
}

void sub_1C32B02EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Center(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_Center");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2646, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Center(void)::common_SpatialPosition_Center = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Center(void)::common_SpatialPosition_Center;
}

void sub_1C32B04C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomRight(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_BottomRight");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2645, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomRight(void)::common_SpatialPosition_BottomRight = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomRight(void)::common_SpatialPosition_BottomRight;
}

void sub_1C32B0694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Bottom(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialPosition_Bottom");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2631;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2643, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Bottom(void)::common_SpatialPosition_Bottom = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Bottom(void)::common_SpatialPosition_Bottom;
}

void sub_1C32B0868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_CreatedBy(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_MediaItemRelationshipType_CreatedBy");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 3106;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3112, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_CreatedBy(void)::common_MediaItemRelationshipType_CreatedBy = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_CreatedBy(void)::common_MediaItemRelationshipType_CreatedBy;
}

void sub_1C32B0A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_ContainedOn(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_MediaItemRelationshipType_ContainedOn");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 3106;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3113, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_ContainedOn(void)::common_MediaItemRelationshipType_ContainedOn = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_ContainedOn(void)::common_MediaItemRelationshipType_ContainedOn;
}

void sub_1C32B0C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Optional(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_RequiredStatus_Optional");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2993;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3008, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Optional(void)::common_RequiredStatus_Optional = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Optional(void)::common_RequiredStatus_Optional;
}

void sub_1C32B0DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Required(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_RequiredStatus_Required");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2993;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3009, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Required(void)::common_RequiredStatus_Required = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Required(void)::common_RequiredStatus_Required;
}

void sub_1C32B0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus_NotCompleted(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_CompletionStatus_NotCompleted");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2976;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2983, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_CompletionStatus_NotCompleted(void)::common_CompletionStatus_NotCompleted = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus_NotCompleted(void)::common_CompletionStatus_NotCompleted;
}

void sub_1C32B118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Completed(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_CompletionStatus_Completed");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2976;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2982, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Completed(void)::common_CompletionStatus_Completed = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Completed(void)::common_CompletionStatus_Completed;
}

void sub_1C32B1360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Overdue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_CompletionStatus_Overdue");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2976;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3033, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Overdue(void)::common_CompletionStatus_Overdue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Overdue(void)::common_CompletionStatus_Overdue;
}

void sub_1C32B1534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Farther(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Farther");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2921, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Farther(void)::common_SpatialDirection_Farther = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Farther(void)::common_SpatialDirection_Farther;
}

void sub_1C32B1708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Down(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Down");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2652, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Down(void)::common_SpatialDirection_Down = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Down(void)::common_SpatialDirection_Down;
}

void sub_1C32B18DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Rightward(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Rightward");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2656, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Rightward(void)::common_SpatialDirection_Rightward = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Rightward(void)::common_SpatialDirection_Rightward;
}

void sub_1C32B1AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Up(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Up");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2657, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Up(void)::common_SpatialDirection_Up = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Up(void)::common_SpatialDirection_Up;
}

void sub_1C32B1C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Nearer(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Nearer");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2655, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Nearer(void)::common_SpatialDirection_Nearer = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Nearer(void)::common_SpatialDirection_Nearer;
}

void sub_1C32B1E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Leftward(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Leftward");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2654, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Leftward(void)::common_SpatialDirection_Leftward = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Leftward(void)::common_SpatialDirection_Leftward;
}

void sub_1C32B202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Further(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_SpatialDirection_Further");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2632;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2653, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Further(void)::common_SpatialDirection_Further = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Further(void)::common_SpatialDirection_Further;
}

void sub_1C32B2200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReferenceType_DefiniteReference(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_ReferenceType_DefiniteReference");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1282;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1338, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_ReferenceType_DefiniteReference(void)::common_ReferenceType_DefiniteReference = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReferenceType_DefiniteReference(void)::common_ReferenceType_DefiniteReference;
}

void sub_1C32B23D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReferenceType_IndefiniteReference(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_ReferenceType_IndefiniteReference");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1282;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1339, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_ReferenceType_IndefiniteReference(void)::common_ReferenceType_IndefiniteReference = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ReferenceType_IndefiniteReference(void)::common_ReferenceType_IndefiniteReference;
}

void sub_1C32B25A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Nowhere(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_UserEntity_Nowhere");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2532;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2554, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_UserEntity_Nowhere(void)::common_UserEntity_Nowhere = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Nowhere(void)::common_UserEntity_Nowhere;
}

void sub_1C32B277C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Anywhere(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_UserEntity_Anywhere");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2532;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2658, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_UserEntity_Anywhere(void)::common_UserEntity_Anywhere = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Anywhere(void)::common_UserEntity_Anywhere;
}

void sub_1C32B2950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_There(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_UserEntity_There");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2532;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2539, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_UserEntity_There(void)::common_UserEntity_There = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_There(void)::common_UserEntity_There;
}

void sub_1C32B2B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Here(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_UserEntity_Here");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2532;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2538, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_UserEntity_Here(void)::common_UserEntity_Here = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Here(void)::common_UserEntity_Here;
}

void sub_1C32B2CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Everywhere(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_UserEntity_Everywhere");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2532;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2553, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_UserEntity_Everywhere(void)::common_UserEntity_Everywhere = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Everywhere(void)::common_UserEntity_Everywhere;
}

void sub_1C32B2ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Transaction(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_PaymentType_Transaction");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2008;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2042, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType_Transaction(void)::common_PaymentType_Transaction = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Transaction(void)::common_PaymentType_Transaction;
}

void sub_1C32B30A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Fee(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_PaymentType_Fee");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2008;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2039, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType_Fee(void)::common_PaymentType_Fee = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Fee(void)::common_PaymentType_Fee;
}

void sub_1C32B3274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Invoice(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_PaymentType_Invoice");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2008;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2040, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType_Invoice(void)::common_PaymentType_Invoice = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Invoice(void)::common_PaymentType_Invoice;
}

void sub_1C32B3448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Message(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_PaymentType_Message");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2008;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2372, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType_Message(void)::common_PaymentType_Message = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Message(void)::common_PaymentType_Message;
}

void sub_1C32B361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Statement(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_PaymentType_Statement");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2008;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2041, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType_Statement(void)::common_PaymentType_Statement = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Statement(void)::common_PaymentType_Statement;
}

void sub_1C32B37F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Bill(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_PaymentType_Bill");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 2008;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2038, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_PaymentType_Bill(void)::common_PaymentType_Bill = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Bill(void)::common_PaymentType_Bill;
}

void sub_1C32B39C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ScheduleType_AsNeeded(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_ScheduleType_AsNeeded");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 3143;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3144, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_ScheduleType_AsNeeded(void)::common_ScheduleType_AsNeeded = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ScheduleType_AsNeeded(void)::common_ScheduleType_AsNeeded;
}

void sub_1C32B3B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ScheduleType_Scheduled(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_ScheduleType_Scheduled");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 3143;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 3145, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_ScheduleType_Scheduled(void)::common_ScheduleType_Scheduled = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_ScheduleType_Scheduled(void)::common_ScheduleType_Scheduled;
}

void sub_1C32B3D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_Number_MinimumValue");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1896, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue(void)::common_Number_MinimumValue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue(void)::common_Number_MinimumValue;
}

void sub_1C32B3F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MiddleValue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_Number_MiddleValue");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1895, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_Number_MiddleValue(void)::common_Number_MiddleValue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_MiddleValue(void)::common_Number_MiddleValue;
}

void sub_1C32B4114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_Number_MaximumValue");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 1894, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue(void)::common_Number_MaximumValue = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue(void)::common_Number_MaximumValue;
}

void sub_1C32B42E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  MEMORY[0x1C3BD1618](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_TenThousand(siri::ontology::oname::graph::ontology_init *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;
  int v10;
  uint64_t v11[5];
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  void *v16[2];
  char v17;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v16, "common_Number_TenThousand");
    memset(v14, 0, sizeof(v14));
    v15 = 1065353216;
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v10 = 1284;
    std::unordered_set<int>::unordered_set((uint64_t)v11, &v10, 1);
    memset(v8, 0, sizeof(v8));
    v9 = 1065353216;
    memset(v6, 0, sizeof(v6));
    v7 = 1065353216;
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    siri::ontology::OntologyNodeName::OntologyNodeName(v3, 2499, 3, (uint64_t *)v16, (uint64_t *)v14, (uint64_t *)v12, v11, (uint64_t *)v8, (uint64_t *)v6, (uint64_t *)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v4);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v8);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v11);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v12);
    std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)v14);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::ontology::oname::graph::ontology_init::common_Number_TenThousand(void)::common_Number_TenThousand = v3;
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_TenThousand(void)::common_Number_TenThousand;
}

