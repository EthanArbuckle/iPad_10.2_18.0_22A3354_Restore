BOOL sub_1BEAA1248(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPListRange *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPListRange);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !sub_1BEBC0194((uint64_t)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPRecordFieldValue);
    objc_msgSend_addValue_(a1, v18, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAA1D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  id *v23;
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1BEAA1DC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = v7;
    *(_DWORD *)buf = 134218240;
    v29 = a2;
    v30 = 2048;
    v31 = (int)objc_msgSend_code(v5, v26, v27);
    _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Fetched quota (%llu) with response code %ld", buf, 0x16u);

  }
  if (objc_msgSend_code(v5, v8, v9) != 1)
  {
    v11 = (void *)MEMORY[0x1E0C94FF8];
    v12 = *MEMORY[0x1E0C94B20];
    v13 = sub_1BEB10D5C(v5);
    v14 = objc_loadWeakRetained((id *)(a1 + 40));
    sub_1BEB10290(v14, v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v5, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorDescription(v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_format_(v11, v22, v12, v13, v15, CFSTR("Error fetching user quota from server: %@"), v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v24, (uint64_t)v23);

  }
  objc_msgSend_setQuotaAvailable_(WeakRetained, v10, a2);

}

void sub_1BEAA1FB4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v9 = v4;
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138544130;
    v19 = v11;
    v20 = 2048;
    v21 = WeakRetained;
    v22 = 2114;
    v23 = v14;
    v24 = 2112;
    v25 = v17;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Fetch quota operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v18,
      0x2Au);

  }
  objc_msgSend_error(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v8, (uint64_t)v7);

}

void sub_1BEAA21A8()
{
  void *v0;

  v0 = (void *)qword_1ED700918;
  qword_1ED700918 = (uint64_t)&unk_1E78AF7A8;

}

uint64_t sub_1BEAA256C(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  const char *v32;
  void *v33;
  void *v34;
  BOOL v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_41;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_41;
        case 3u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          a1[44] |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_45:
          v35 = v22 != 0;
          v36 = 40;
          goto LABEL_50;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          a1[44] |= 2u;
          break;
        case 5u:
          PBReaderReadString();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          if (v33)
            objc_msgSend_addRootRecordDesiredKeys_(a1, v32, (uint64_t)v33);

          continue;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_41:
          v34 = *(void **)&a1[v18];
          *(_QWORD *)&a1[v18] = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_47;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          v28 = 0;
          goto LABEL_49;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      if (*(_BYTE *)(a2 + *v5))
        v28 = 0;
LABEL_49:
      v35 = v28 != 0;
      v36 = 41;
LABEL_50:
      a1[v36] = v35;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEAA39BC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAA5818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BEAA58AC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  objc_msgSend_objectRepresentationFromFieldValue_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    if (objc_msgSend_type(v3, v5, v6) == 6)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v10 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = v10 + 1;
        objc_msgSend_setArrayIndex_(v7, v8, v10);
      }
    }
  }

  return v7;
}

void sub_1BEAA632C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  id v4;

  objc_msgSend_sharedNotifier(CKDAccountNotifier, a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postAccountChangedNotificationWithAccountID_changeType_(v4, v3, 0, 0);

}

void sub_1BEAA6368(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  dispatch_time_t v11;
  _QWORD block[4];
  id v13;
  uint8_t buf[16];
  os_activity_scope_state_s state;

  v3 = _os_activity_create(&dword_1BE990000, "CKDSystemAvailabilityMonitory/_systemReadyCheckFired", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v3, &state);
  v4 = a2;
  objc_msgSend__systemMayNowBeReady(v4, v5, v6);
  v7 = v4;
  objc_sync_enter(v7);
  if ((objc_msgSend_availabilityState(v7, v8, v9) & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1BE990000, v10, OS_LOG_TYPE_FAULT, "Received buddy notice but still reports buddy incomplete.", buf, 2u);
    }
    v11 = dispatch_time(0, 5000000000);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEAA6CB4;
    block[3] = &unk_1E782EA40;
    v13 = v7;
    dispatch_after(v11, MEMORY[0x1E0C80D38], block);

  }
  objc_sync_exit(v7);

  os_activity_scope_leave(&state);
}

void sub_1BEAA64E4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_sync_exit(v1);
  os_activity_scope_leave((os_activity_scope_state_t)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_1BEAA6508(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__systemMayNowBeReady(*(void **)(a1 + 32), a2, a3);
}

void sub_1BEAA699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEAA6AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEAA6AE0(_QWORD *a1)
{
  NSObject *v2;
  const char *v3;
  unint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1[4] + 8);
    v8 = 138412290;
    v9 = v7;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Notifying watchers of availability change. Watchers are %@", (uint8_t *)&v8, 0xCu);
  }
  if (a1[5])
  {
    v4 = 0;
    do
    {
      objc_msgSend_objectAtIndex_(*(void **)(a1[4] + 8), v3, v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_postSystemAvailabilityChanged_(v5, v6, a1[6]);

      ++v4;
    }
    while (v4 < a1[5]);
  }
}

uint64_t sub_1BEAA6CB4(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__systemMayNowBeReady(*(void **)(a1 + 32), a2, a3);
}

uint64_t CKDPEncryptedMergeableValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAA79BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAA79D0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7027D0;
  qword_1ED7027D0 = v2;

}

void sub_1BEAA7BE0(uint64_t a1)
{
  void **WeakRetained;
  const char *v2;
  void **v3;

  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend_setDelegate_(WeakRetained[2], v2, 0);
    WeakRetained = v3;
  }

}

void sub_1BEAA7CB0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend_apsConnection(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_publicToken(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)*MEMORY[0x1E0C952F8];
  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v16 = 138543362;
      v17 = v7;
      _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Returning public token %{public}@", (uint8_t *)&v16, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "No public token yet", (uint8_t *)&v16, 2u);
    }
    objc_msgSend_completionBlocks(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = _Block_copy(*(const void **)(a1 + 40));
    objc_msgSend_addObject_(v13, v15, (uint64_t)v14);

  }
}

void sub_1BEAA8044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BEAA8060(uint64_t a1, const char *a2)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  id v6;

  objc_msgSend_notificationWithName_object_userInfo_(MEMORY[0x1E0CB37C0], a2, (uint64_t)CFSTR("CKDPushConnectionDidReceivePublicTokenNotification"), *(_QWORD *)(a1 + 32), 0);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotification_(v4, v5, (uint64_t)v6);

}

void sub_1BEAA80CC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend_completionBlocks(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_completionBlocks(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v7, v8, v9);

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v10 = v4;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v17, v21, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v18;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v18 != v14)
          objc_enumerationMutation(v10);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v15) + 16))(*(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v15));
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v16, (uint64_t)&v17, v21, 16);
    }
    while (v13);
  }

}

id sub_1BEAA8450(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  id v12;
  const char *v13;
  void *v14;
  const char *v15;
  void *v16;
  void *v17;
  const char *v18;
  void *v19;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v10 = (objc_class *)MEMORY[0x1E0CB3940];
  v11 = a4;
  v12 = [v10 alloc];
  v14 = (void *)objc_msgSend_initWithFormat_arguments_(v12, v13, (uint64_t)v11, &a9);

  if (v14)
  {
    v21 = *MEMORY[0x1E0CB2D50];
    v22[0] = v14;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v15, (uint64_t)v22, &v21, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v16 = 0;
  }
  v17 = (void *)objc_opt_class();
  objc_msgSend_errorWithDomain_code_userInfo_(v17, v18, (uint64_t)CFSTR("CKLogDomain"), a3, v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

id sub_1BEAA854C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;

  v3 = a3;
  v4 = (void *)objc_opt_new();
  objc_msgSend_setDateFormat_(v4, v5, (uint64_t)v3);

  objc_msgSend_setLenient_(v4, v6, 1);
  objc_msgSend_systemTimeZone(MEMORY[0x1E0C99E80], v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTimeZone_(v4, v10, (uint64_t)v9);

  objc_msgSend_currentLocale(MEMORY[0x1E0C99DC8], v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLocale_(v4, v14, (uint64_t)v13);

  return v4;
}

id sub_1BEAA85E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD block[5];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEAA8758;
  block[3] = &unk_1E7830348;
  block[4] = a1;
  if (qword_1ED7027E8 != -1)
    dispatch_once(&qword_1ED7027E8, block);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = (id)qword_1ED7027E0;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v15, v20, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v5);
        objc_msgSend_dateFromString_(*(void **)(*((_QWORD *)&v15 + 1) + 8 * i), v8, (uint64_t)v4, (_QWORD)v15);
        v12 = objc_claimAutoreleasedReturnValue();
        if (v12)
        {
          v13 = (void *)v12;
          goto LABEL_13;
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v15, v20, 16);
      if (v9)
        continue;
      break;
    }
  }
  v13 = 0;
LABEL_13:

  return v13;
}

void sub_1BEAA8758(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t i;
  uint64_t j;
  void *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  void *v43;
  const char *v44;
  void *v45;
  const char *v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  const char *v53;
  id v54;

  v2 = objc_opt_new();
  v3 = (void *)qword_1ED7027E0;
  qword_1ED7027E0 = v2;

  for (i = 0; i != 5; ++i)
  {
    for (j = 0; j != 5; ++j)
    {
      v6 = (void *)objc_opt_new();
      objc_msgSend_setDateStyle_(v6, v7, i);
      objc_msgSend_setTimeStyle_(v6, v8, j);
      objc_msgSend_setLenient_(v6, v9, 1);
      objc_msgSend_systemTimeZone(MEMORY[0x1E0C99E80], v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTimeZone_(v6, v13, (uint64_t)v12);

      objc_msgSend_currentLocale(MEMORY[0x1E0C99DC8], v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLocale_(v6, v17, (uint64_t)v16);

      objc_msgSend_addObject_((void *)qword_1ED7027E0, v18, (uint64_t)v6);
    }
  }
  v20 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v19, (uint64_t)CFSTR("yyyy-MM-dd HH:mm"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v20, v22, (uint64_t)v21);

  v23 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v24, (uint64_t)CFSTR("yyyy-MM-dd HH:mm:ss"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v23, v26, (uint64_t)v25);

  v27 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v28, (uint64_t)CFSTR("HH:mm"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v27, v30, (uint64_t)v29);

  v31 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v32, (uint64_t)CFSTR("HH:mm:ss"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v31, v34, (uint64_t)v33);

  v35 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v36, (uint64_t)CFSTR("yyyy-MM-dd HH:mm ZZZ"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v35, v38, (uint64_t)v37);

  v39 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v40, (uint64_t)CFSTR("yyyy-MM-dd HH:mm:ss ZZZ"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v39, v42, (uint64_t)v41);

  v43 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v44, (uint64_t)CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v43, v46, (uint64_t)v45);

  v47 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v48, (uint64_t)CFSTR("HH:mm ZZZ"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v47, v50, (uint64_t)v49);

  v51 = (void *)qword_1ED7027E0;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v52, (uint64_t)CFSTR("HH:mm:ss ZZZ"));
  v54 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v51, v53, (uint64_t)v54);

}

uint64_t sub_1BEAA8C9C(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKCDPCodeServiceRequestProtectedCloudComputeMetadataCryptoSession *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKCDPCodeServiceRequestProtectedCloudComputeMetadataCryptoSession);
        objc_msgSend_addCryptoSessions_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEC0C828((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAAA3E8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_41:
        v32 = 8;
        goto LABEL_46;
      }
      PBReaderReadString();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v29;

LABEL_47:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 32) |= 2u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_43;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v20 = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_45:
    v32 = 16;
LABEL_46:
    *(_QWORD *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAAB340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEAAB36C(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v7, v8);
  v9 = (void *)*MEMORY[0x1E0C952F8];
  v10 = *MEMORY[0x1E0C95300];
  if (v5 || (a2 & 1) == 0)
  {
    if (v10 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v9);
    v14 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 138543618;
      v21 = v19;
      v22 = 2112;
      v23 = v5;
      _os_log_error_impl(&dword_1BE990000, v14, OS_LOG_TYPE_ERROR, "User key sync to update signing identities failed for operation %{public}@: %@", (uint8_t *)&v20, 0x16u);
    }
    objc_msgSend_setError_(WeakRetained, v15, (uint64_t)v5);
  }
  else
  {
    if (v10 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v9);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v20 = 138543362;
      v21 = v13;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "User key sync to update signing identities succeeded for operation %{public}@", (uint8_t *)&v20, 0xCu);
    }
  }
  objc_msgSend_setDidSynchronizeSigningIdentities_(WeakRetained, v12, 1);
  objc_msgSend_stateTransitionGroup(WeakRetained, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v18);

}

void sub_1BEAAB71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEAAB748(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  int IsManatee;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  NSObject *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t v56[128];
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v10, v11);
  v12 = (void *)*MEMORY[0x1E0C952F8];
  v13 = *MEMORY[0x1E0C95300];
  if (v7 || (a2 & 1) == 0)
  {
    if (v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v23 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v25 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v58 = v25;
      v59 = 2112;
      v60 = v7;
      _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@", buf, 0x16u);
    }
    objc_msgSend_setDidSynchronizeUserKeyRegistry_(WeakRetained, v24, 0);
    objc_msgSend_container(WeakRetained, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    IsManatee = objc_msgSend_currentServiceIsManatee(v31, v32, v33);

    if (IsManatee)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      objc_msgSend_zonesWaitingOnKeyRegistrySync(WeakRetained, v35, v36, 0);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v52, v56, 16);
      if (v39)
      {
        v42 = v39;
        v43 = *(_QWORD *)v53;
        do
        {
          v44 = 0;
          do
          {
            if (*(_QWORD *)v53 != v43)
              objc_enumerationMutation(v37);
            v45 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * v44);
            objc_msgSend_retryableErrorsByZoneID(WeakRetained, v40, v41);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_forKeyedSubscript_(v46, v47, (uint64_t)v7, v45);

            ++v44;
          }
          while (v42 != v44);
          v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v52, v56, 16);
        }
        while (v42);
      }

    }
    objc_msgSend_setError_(v8, v35, (uint64_t)v7);
    objc_msgSend_setOverallResult_(v8, v48, (uint64_t)CFSTR("failure"));
  }
  else
  {
    if (v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v14 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v16 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v58 = v16;
      _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@", buf, 0xCu);
    }
    objc_msgSend_setDidSynchronizeUserKeyRegistry_(WeakRetained, v15, 1);
    objc_msgSend_zonesWaitingOnKeyRegistrySync(WeakRetained, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllObjects(v19, v20, v21);

  }
  objc_msgSend_setKeySyncAnalytics_(WeakRetained, v22, (uint64_t)v8);
  objc_msgSend_stateTransitionGroup(WeakRetained, v49, v50);
  v51 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v51);

}

void sub_1BEAAC000(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(*(void **)(a1 + 40), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD, _QWORD))v10 + 2))(v10, v9, 0, *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAACD1C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEAACD84(id *a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const void *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  _QWORD block[5];
  id v48;
  id v49;
  id v50;
  id v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  id v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v25 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v28 = a1[4];
      *(_DWORD *)buf = 138412546;
      v53 = v28;
      v54 = 2112;
      v55 = v5;
      _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "Warn: Couldn't create a PCS object from zone data for zone %@: %@", buf, 0x16u);
    }
  }
  else
  {
    objc_msgSend_protectionData(a1[5], v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_etagFromPCSData_(CKDPCSManager, v10, (uint64_t)v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_zoneishProtectionData(a1[5], v12, v13);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend_container(WeakRetained, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneishProtectionData(a1[5], v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = 0;
      v24 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v19, v23, (uint64_t)v22, 1, a2, &v51);
      v5 = v51;

      if (v5 || !v24)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v29 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
        {
          v42 = a1[5];
          v43 = v29;
          objc_msgSend_zoneID(v42, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v53 = v46;
          v54 = 2112;
          v55 = v5;
          _os_log_error_impl(&dword_1BE990000, v43, OS_LOG_TYPE_ERROR, "Couldn't decrypt zoneish PCS for zone %@: %@", buf, 0x16u);

        }
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v24 = 0;
    }
    objc_msgSend_dataWithZone_(CKDZonePCSData, v14, (uint64_t)a1[5]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPcs_(v30, v31, a2);
    objc_msgSend_setZoneishPCS_(v30, v32, (uint64_t)v24);
    objc_msgSend_setEtag_(v30, v33, (uint64_t)v11);
    objc_msgSend_setPCSData_forFetchedZoneID_(WeakRetained, v34, (uint64_t)v30, a1[4]);
    objc_msgSend_setZonePCS_(a1[5], v35, a2);
    objc_msgSend_setZoneishPCS_(a1[5], v36, (uint64_t)v24);
    if (v24)
      CFRelease(v24);

  }
  objc_msgSend_saveCompletionBlock(WeakRetained, v26, v27);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  if (v37)
  {
    objc_msgSend_callbackQueue(WeakRetained, v38, v39);
    v40 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEAAD154;
    block[3] = &unk_1E782F4A8;
    block[4] = WeakRetained;
    v48 = a1[4];
    v49 = a1[5];
    v50 = v5;
    dispatch_async(v40, block);

  }
  objc_msgSend_stateTransitionGroup(a1[6], v38, v39);
  v41 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v41);

}

void sub_1BEAAD154(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEAAD1C4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0);

  }
}

void sub_1BEAAD234(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEAAD344(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEAAD6C8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAADEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v26 - 144));
  _Unwind_Resume(a1);
}

void sub_1BEAADF10(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  id WeakRetained;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  id v21;

  v21 = a2;
  v11 = a3;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v16 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_recordZonesByZoneID(WeakRetained, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v21);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
      objc_msgSend__handleRecordZoneSaved_responseCode_serverCapabilities_expirationDate_expired_(v16, v20, (uint64_t)v21, v11, a4, v12, a6);
    else
      objc_msgSend__handleRecordZoneDeleted_responseCode_(v16, v20, (uint64_t)v21, v11);
  }

}

void sub_1BEAADFEC(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  int v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  int v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
LABEL_19:
      objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
      v29 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v29);

      goto LABEL_20;
    }
    objc_msgSend_error(v3, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_needsSynchronizeSigningIdentities(WeakRetained, v10, v11) & 1) == 0)
    {
      objc_msgSend_domain(v9, v12, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16 == (void *)*MEMORY[0x1E0C94B20] && objc_msgSend_code(v9, v14, v15) == 5000)
      {
        objc_msgSend_description(v9, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_lowercaseString(v19, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend_containsString_(v22, v23, (uint64_t)CFSTR("failed to create cryptographic signature"));

        if (v24)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v25 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
          {
            v30 = 138412290;
            v31 = v9;
            _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "Signing identity missing when modifying record zones: %@", (uint8_t *)&v30, 0xCu);
          }
          objc_msgSend_setNeedsSynchronizeSigningIdentities_(WeakRetained, v26, 1);
LABEL_18:

          goto LABEL_19;
        }
      }
      else
      {

      }
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v27 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v30 = 138412290;
      v31 = v9;
      _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Error modifying record zones: %@", (uint8_t *)&v30, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v28, (uint64_t)v9);
    goto LABEL_18;
  }
LABEL_20:

}

void sub_1BEAAE5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1BEAAE654(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v8, v9);

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v6;
  v15 = v6;

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v5;
  v14 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEAAE6F0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  int isEqualToString;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  const void *v60;
  dispatch_block_t *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  char v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  void *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  const char *v82;
  void *v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  uint64_t *v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  int v104;
  const char *v105;
  const char *v106;
  const char *v107;
  os_log_t *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  NSObject *v113;
  const char *v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  const char *v124;
  os_log_t v125;
  void *v126;
  NSObject *v127;
  const char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  NSObject *v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  void *v137;
  void *v138;
  NSObject *v139;
  const char *v140;
  uint64_t v141;
  void *v142;
  void *v143;
  const void *v144;
  id v145;
  id v146;
  id obj;
  uint8_t buf[4];
  void *v149;
  __int16 v150;
  void *v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_pcs(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a2, a3);
  v7 = (uint64_t *)MEMORY[0x1E0C94B20];
  if (!*MEMORY[0x1E0C95280])
    goto LABEL_8;
  objc_msgSend_deviceContext(*(void **)(a1 + 32), v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReference(v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v14 = (void *)v11;
    objc_msgSend_zoneID(*(void **)(a1 + 40), v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneName(v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v18, v19, (uint64_t)CFSTR("NO_ZONE_PCS_FOR_YOU"));

    if (!isEqualToString)
      goto LABEL_6;
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v21, *v7, 5005, CFSTR("Couldn't create a new PCSShareProtectionRef because unit testing"));
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v8 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;
  }

LABEL_6:
  objc_msgSend_unitTestOverrides(*(void **)(a1 + 48), v21, v22);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)CFSTR("ForceAddCKIdentityToZonePCS"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend_pcsManager(*(void **)(a1 + 32), v4, v5);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addIdentityForService_toPCS_(v28, v29, 3, v6);
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v32 = *(void **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = v30;

  }
LABEL_8:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v33 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
    {
      v83 = *(void **)(a1 + 40);
      v84 = v33;
      objc_msgSend_zoneID(v83, v85, v86);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138412546;
      v149 = v87;
      v150 = 2112;
      v151 = v88;
      _os_log_error_impl(&dword_1BE990000, v84, OS_LOG_TYPE_ERROR, "Couldn't create a PCS object for the zone %@: %@", buf, 0x16u);

    }
    v36 = 0;
    v37 = 0;
    goto LABEL_20;
  }
  objc_msgSend_pcsManager(*(void **)(a1 + 32), v4, v5);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  obj = *(id *)(v39 + 40);
  objc_msgSend_dataFromZonePCS_error_(v38, v40, v6, &obj);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v39 + 40), obj);

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v43 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
    {
      v126 = *(void **)(a1 + 40);
      v127 = v43;
      objc_msgSend_zoneID(v126, v128, v129);
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      v131 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138412546;
      v149 = v130;
      v150 = 2112;
      v151 = v131;
      _os_log_error_impl(&dword_1BE990000, v127, OS_LOG_TYPE_ERROR, "Error creating PCS data for zone %@: %@", buf, 0x16u);

    }
    v36 = 0;
    goto LABEL_20;
  }
  objc_msgSend_options(*(void **)(a1 + 32), v41, v42);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend_useZoneWidePCS(v51, v52, v53);

  if (v54)
  {
    objc_msgSend_pcsManager(*(void **)(a1 + 32), v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v146 = *(id *)(v58 + 40);
    v60 = (const void *)objc_msgSend_createRecordPCSWithZonePCS_sharePCS_createLite_error_(v57, v59, v6, 0, 0, &v146);
    objc_storeStrong((id *)(v58 + 40), v146);

    v61 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
    v62 = (void *)*MEMORY[0x1E0C952F8];
    v63 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v62);
      v7 = (uint64_t *)MEMORY[0x1E0C94B20];
      v64 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
      {
        v132 = *(void **)(a1 + 40);
        v133 = v64;
        objc_msgSend_zoneID(v132, v134, v135);
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        v137 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        v149 = v136;
        v150 = 2112;
        v151 = v137;
        _os_log_error_impl(&dword_1BE990000, v133, OS_LOG_TYPE_ERROR, "Couldn't create a zoneish PCS for zone %@: %@", buf, 0x16u);

      }
      v65 = 0;
      v36 = 0;
      if (!v60)
        goto LABEL_57;
LABEL_44:
      CFRelease(v60);
      if ((v65 & 1) != 0)
        goto LABEL_58;
LABEL_20:
      v44 = (void *)MEMORY[0x1E0C94FF8];
      v45 = *v7;
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      objc_msgSend_zoneID(*(void **)(a1 + 40), v34, v35);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_error_format_(v44, v48, v45, 5005, v46, CFSTR("Couldn't create new PCS blob for zone %@"), v47);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_21;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v62);
    v108 = (os_log_t *)MEMORY[0x1E0C952D8];
    v109 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v112 = *(void **)(a1 + 40);
      v113 = v109;
      objc_msgSend_zoneID(v112, v114, v115);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v117, (uint64_t)v60);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKUppercaseHexStringWithoutSpaces(v118, v119, v120);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v149 = v116;
      v150 = 2112;
      v151 = v121;
      _os_log_impl(&dword_1BE990000, v113, OS_LOG_TYPE_INFO, "Created zoneish PCS for zone %@ with key %@", buf, 0x16u);

      v108 = (os_log_t *)MEMORY[0x1E0C952D8];
    }
    objc_msgSend_pcsManager(*(void **)(a1 + 32), v110, v111);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v145 = *(id *)(v123 + 40);
    objc_msgSend_dataFromRecordPCS_error_(v122, v124, (uint64_t)v60, &v145);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(v123 + 40), v145);

    if (!v36 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
    {
      if (*v63 != -1)
        dispatch_once(MEMORY[0x1E0C95300], *v61);
      v7 = (uint64_t *)MEMORY[0x1E0C94B20];
      v125 = *v108;
      if (os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
      {
        v138 = *(void **)(a1 + 40);
        v139 = v125;
        objc_msgSend_zoneID(v138, v140, v141);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v143 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        v149 = v142;
        v150 = 2112;
        v151 = v143;
        _os_log_error_impl(&dword_1BE990000, v139, OS_LOG_TYPE_ERROR, "Couldn't create data from zoneish PCS for zone %@: %@", buf, 0x16u);

      }
      v65 = 0;
      if (v60)
        goto LABEL_44;
      goto LABEL_57;
    }
    v7 = (uint64_t *)MEMORY[0x1E0C94B20];
  }
  else
  {
    v36 = 0;
    v60 = 0;
  }
  objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v55, (uint64_t)v37);
  objc_msgSend_protectionData(*(void **)(a1 + 40), v66, v67);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_etagFromPCSData_(CKDPCSManager, v69, (uint64_t)v68);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setProtectionEtag_(*(void **)(a1 + 40), v71, (uint64_t)v70);

  objc_msgSend_deviceContext(*(void **)(a1 + 32), v72, v73);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReference(v74, v75, v76);
  v77 = objc_claimAutoreleasedReturnValue();
  v144 = v60;
  if (v77)
  {
    v80 = (void *)v77;
    objc_msgSend_previousProtectionEtag(*(void **)(a1 + 40), v78, v79);
    v81 = (void *)objc_claimAutoreleasedReturnValue();

    if (v81)
      goto LABEL_38;
  }
  else
  {

  }
  objc_msgSend_setPreviousProtectionEtag_(*(void **)(a1 + 40), v82, 0);
LABEL_38:
  objc_msgSend_setZoneishProtectionData_(*(void **)(a1 + 40), v82, (uint64_t)v36);
  objc_msgSend_deviceContext(*(void **)(a1 + 32), v89, v90);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReference(v91, v92, v93);
  v94 = objc_claimAutoreleasedReturnValue();
  if (v94)
  {
    v97 = (void *)v94;
    v98 = v7;
    objc_msgSend_zoneID(*(void **)(a1 + 40), v95, v96);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneName(v99, v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = objc_msgSend_isEqualToString_(v102, v103, (uint64_t)CFSTR("NO_ZONE_PCS_FOR_SERVER"));

    if (v104)
    {
      objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v34, 0);
      objc_msgSend_setProtectionEtag_(*(void **)(a1 + 40), v105, 0);
      objc_msgSend_setPreviousProtectionEtag_(*(void **)(a1 + 40), v106, 0);
      objc_msgSend_setZoneishProtectionData_(*(void **)(a1 + 40), v107, 0);
    }
    v65 = 1;
    v7 = v98;
  }
  else
  {

    v65 = 1;
  }
  v60 = v144;
  if (v144)
    goto LABEL_44;
LABEL_57:
  if ((v65 & 1) == 0)
    goto LABEL_20;
LABEL_58:
  v49 = 0;
LABEL_21:
  v50 = *(_QWORD *)(a1 + 56);
  if (v50)
    (*(void (**)(uint64_t, void *))(v50 + 16))(v50, v49);

}

void sub_1BEAAF1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BEAAF1C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  void *v88;
  void *v89;
  NSObject *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[4];
  id v96;
  uint64_t v97;
  id v98;
  id obj;
  uint8_t buf[4];
  void *v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v12 = *(void **)(a1 + 32);
      v13 = v9;
      objc_msgSend_zoneID(v12, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v101 = v16;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Fetched pcs info for zone %@. Continuing with save for that zone.", buf, 0xCu);

    }
    objc_msgSend_pcsData(v5, v10, v11);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_etag(v5, v18, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v17)
    {
      objc_msgSend_container(*(void **)(a1 + 40), v20, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend_pcs(v5, v27, v28);
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      obj = *(id *)(v30 + 40);
      objc_msgSend_dataFromZonePCS_error_(v26, v31, v29, &obj);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_storeStrong((id *)(v30 + 40), obj);

      objc_msgSend_etagFromPCSData_(CKDPCSManager, v32, (uint64_t)v17);
      v33 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v33;
    }
    objc_msgSend_setProtectionData_(*(void **)(a1 + 32), v20, (uint64_t)v17);
    objc_msgSend_setProtectionEtag_(*(void **)(a1 + 32), v34, (uint64_t)v22);
    objc_msgSend_etag(v5, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_container(*(void **)(a1 + 40), v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deviceContext(v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_testDeviceReference(v43, v44, v45);
    v46 = objc_claimAutoreleasedReturnValue();
    if (v46)
    {
      v49 = (void *)v46;
      objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v47, v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v50)
        goto LABEL_19;
      objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v51, v52);
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend_isEqualToString_(v40, v53, (uint64_t)CFSTR("NO_ETAG_FOR_YOU")))
      {
        v37 = v40;
LABEL_19:
        objc_msgSend_setPreviousProtectionEtag_(*(void **)(a1 + 32), v51, (uint64_t)v37);
        objc_msgSend_zoneishPCSData(v5, v60, v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_zoneishPCS(v5, v63, v64) && !v62)
        {
          objc_msgSend_container(*(void **)(a1 + 40), v65, v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_pcsManager(v67, v68, v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = objc_msgSend_zoneishPCS(v5, v71, v72);
          v74 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
          v98 = *(id *)(v74 + 40);
          objc_msgSend_dataFromRecordPCS_error_(v70, v75, v73, &v98);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_storeStrong((id *)(v74 + 40), v98);

        }
        objc_msgSend_setZoneishProtectionData_(*(void **)(a1 + 32), v65, (uint64_t)v62);
        v78 = objc_msgSend_pcs(v5, v76, v77);
        objc_msgSend_setZonePCS_(*(void **)(a1 + 32), v79, v78);
        v82 = objc_msgSend_zoneishPCS(v5, v80, v81);
        objc_msgSend_setZoneishPCS_(*(void **)(a1 + 32), v83, v82);
        objc_msgSend_zonePCSModificationDate(v5, v84, v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setZonePCSModificationDate_(*(void **)(a1 + 32), v87, (uint64_t)v86);

        goto LABEL_23;
      }
      v37 = 0;
    }
    else
    {

    }
    goto LABEL_19;
  }
  v54 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v54 && !objc_msgSend_CKIsNotFoundError(v54, v7, v8))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v88 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v89 = *(void **)(a1 + 32);
      v90 = v88;
      objc_msgSend_zoneID(v89, v91, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412546;
      v101 = v93;
      v102 = 2112;
      v103 = v94;
      _os_log_impl(&dword_1BE990000, v90, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS data for zone %@: %@. Refusing to save zone.", buf, 0x16u);

    }
  }
  else if (objc_msgSend_databaseScope(*(void **)(a1 + 40), v7, v8) == 2)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    v56 = *(_QWORD *)(a1 + 32);
    v55 = *(void **)(a1 + 40);
    v95[0] = MEMORY[0x1E0C809B0];
    v95[1] = 3221225472;
    v95[2] = sub_1BEAAF6C4;
    v95[3] = &unk_1E782EB60;
    v97 = *(_QWORD *)(a1 + 64);
    v96 = *(id *)(a1 + 48);
    objc_msgSend__createNewPCSForZone_completionHandler_(v55, v57, v56, v95);
    v58 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v59 = *(void **)(v58 + 40);
    *(_QWORD *)(v58 + 40) = 0;

  }
LABEL_23:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1BEAAF6C4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEAAF710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void (**v24)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  int v29;
  void *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v6 = *(void **)(v5 + 40);
    if (v6)
    {
      if (!objc_msgSend_CKIsNotFoundError(v6, v4, a3))
        goto LABEL_6;
      v4 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    objc_storeStrong((id *)(v5 + 40), v4);
  }
LABEL_6:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 32);
      v11 = v7;
      objc_msgSend_zoneID(v10, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v29 = 138412546;
      v30 = v14;
      v31 = 2112;
      v32 = v15;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Not saving zone %@ due to a PCS error: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_msgSend_recordZonesToSave(*(void **)(a1 + 40), v8, v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v16);
    objc_msgSend_recordZonesToSave(*(void **)(a1 + 40), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObject_(v19, v20, *(_QWORD *)(a1 + 32));

    objc_sync_exit(v16);
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 40), v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      objc_msgSend_saveCompletionBlock(*(void **)(a1 + 40), v4, a3);
      v24 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneID(*(void **)(a1 + 32), v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD, _QWORD))v24)[2](v24, v27, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

    }
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v4, a3);
  v28 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v28);

}

void sub_1BEAAF934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAB0000(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(*(void **)(a1 + 40), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD, _QWORD))v10 + 2))(v10, v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

uint64_t sub_1BEAB020C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BEAB0508()
{
  void *v0;

  v0 = (void *)qword_1ED700928;
  qword_1ED700928 = (uint64_t)&unk_1E78AF7D0;

}

uint64_t sub_1BEAB09B4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  CKDPRecord *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_47;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_49:
        *(_DWORD *)(a1 + 56) = v19;
        goto LABEL_54;
      case 2u:
        v24 = (CKDPRecord *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 48), v24);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
          goto LABEL_56;
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 40;
        goto LABEL_35;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 8;
        goto LABEL_35;
      case 5u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 32;
        goto LABEL_35;
      case 6u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 24;
LABEL_35:
        v27 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_54;
      case 7u:
        v24 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_54:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_56:

        return 0;
      case 8u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_53:
        *(_BYTE *)(a1 + 60) = v30 != 0;
        goto LABEL_54;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_54;
    }
  }
}

BOOL sub_1BEAB1B80(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPProtectionInfo *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPProtectionInfo *)objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong(a1 + 11, v17);
        if (PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom() & 1) != 0)
          goto LABEL_53;
        goto LABEL_58;
      case 3u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v18 = 3;
        goto LABEL_26;
      case 6u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v18 = 5;
LABEL_26:
        objc_storeStrong(&a1[v18], v17);
        if (!PBReaderPlaceMark() || !sub_1BEA1BDA4((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_53;
      case 8u:
        v17 = objc_alloc_init(CKDPRecordStableUrl);
        objc_storeStrong(a1 + 9, v17);
        if (!PBReaderPlaceMark() || !CKDPRecordStableUrlReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_53;
      case 9u:
        v17 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_53;
      case 0xAu:
        PBReaderReadData();
        v17 = (CKDPProtectionInfo *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend_addProtectionInfoKeysToRemove_(a1, v19, (uint64_t)v17);
        goto LABEL_54;
      case 0xBu:
        v17 = objc_alloc_init(CKDPStorageExpiration);
        objc_storeStrong(a1 + 10, v17);
        if (!PBReaderPlaceMark() || (sub_1BEC5BA08((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_58;
        goto LABEL_53;
      case 0xCu:
        v17 = objc_alloc_init(CKDPZoneSignedCryptoRequirements);
        objc_storeStrong(a1 + 8, v17);
        if (!PBReaderPlaceMark() || (sub_1BEA82A8C((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_58;
        goto LABEL_53;
      case 0xDu:
        v17 = objc_alloc_init(CKDPZoneCryptoFeatureSet);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (sub_1BEC0815C((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_58;
        goto LABEL_53;
      case 0xEu:
        v17 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        v20 = 12;
        goto LABEL_48;
      case 0xFu:
        v17 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        v20 = 6;
LABEL_48:
        objc_storeStrong(&a1[v20], v17);
        if (!PBReaderPlaceMark() || !sub_1BEC7FC90(v17, a2))
          goto LABEL_58;
        goto LABEL_53;
      case 0x10u:
        v17 = objc_alloc_init(CKDPZoneZoneReference);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && (sub_1BEBC5F7C((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_53:
          PBReaderRecallMark();
LABEL_54:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_58:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_55;
    }
  }
}

void sub_1BEAB31DC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = (void *)qword_1ED7027F8;
  if (!qword_1ED7027F8)
  {
    objc_msgSend__rebuildVolumes(*(void **)(a1 + 48), a2, a3);
    v4 = (void *)qword_1ED7027F8;
  }
  objc_msgSend_objectForKey_(v4, a2, *(_QWORD *)(a1 + 32));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1BEAB3304(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = (void *)qword_1ED702800;
  if (!qword_1ED702800)
  {
    objc_msgSend__rebuildVolumes(*(void **)(a1 + 48), a2, a3);
    v4 = (void *)qword_1ED702800;
  }
  objc_msgSend_objectForKey_(v4, a2, *(_QWORD *)(a1 + 32));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

BOOL sub_1BEAB36C0(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecordFieldIdentifier *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPListRange);
    objc_msgSend_addRange_(a1, v18, (uint64_t)v17);
    if (!PBReaderPlaceMark() || !sub_1BEBC0194((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAB4228(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 44) |= 8u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_51;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_53:
          *(_BYTE *)(a1 + 40) = v19 != 0;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_57:
          v42 = 16;
          goto LABEL_66;
        case 3u:
          PBReaderReadString();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v30;

          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 4u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v26 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_61:
          v42 = 24;
          goto LABEL_66;
        case 5u:
          v37 = 0;
          v38 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v39 = *v3;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
        *(_QWORD *)(a2 + v39) = v40 + 1;
        v26 |= (unint64_t)(v41 & 0x7F) << v37;
        if ((v41 & 0x80) == 0)
          goto LABEL_63;
        v37 += 7;
        v14 = v38++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_65;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_65:
      v42 = 8;
LABEL_66:
      *(_QWORD *)(a1 + v42) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPResponseOperationResultErrorAuxiliaryErrorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntry *v20;
  const char *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = objc_alloc_init(CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntry);
        objc_msgSend_addUserInfo_((void *)a1, v21, (uint64_t)v20);
        if (!PBReaderPlaceMark()
          || !CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntryReadFrom((uint64_t)v20, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 1;
          v24 |= (unint64_t)(v27 & 0x7F) << v22;
          if ((v27 & 0x80) == 0)
            goto LABEL_35;
          v22 += 7;
          v14 = v23++ >= 9;
          if (v14)
          {
            LODWORD(v24) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAB5C14(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  CKDPAsset *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v17;

        goto LABEL_47;
      case 2u:
        v20 = objc_alloc_init(CKDPAsset);
        objc_storeStrong((id *)(a1 + 16), v20);
        if (PBReaderPlaceMark() && (CKDPAssetReadFrom((uint64_t)v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_42:
        *(_QWORD *)(a1 + 8) = v23;
        goto LABEL_47;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_46;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_46:
        *(_BYTE *)(a1 + 32) = v29 != 0;
        goto LABEL_47;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

uint64_t sub_1BEAB6878(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPRecordFieldValue *v18;
  const char *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(CKDPRecordFieldValue);
        objc_msgSend_addValue_((void *)a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0)
              goto LABEL_37;
            v20 += 7;
            v14 = v21++ >= 9;
            if (v14)
            {
              v22 = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_39:
          *(_BYTE *)(a1 + 24) = v22 != 0;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v18 = objc_alloc_init(CKDPListPosition);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (sub_1BEB8E8B4((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_1BEAB7530(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = objc_msgSend_operationType(v4, v5, v6);
  objc_msgSend_operationRequestWithType_(v4, v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_opt_new();
  objc_msgSend_setRecordResolveTokenRequest_(v9, v11, (uint64_t)v10);

  objc_msgSend_routingKey(v3, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordResolveTokenRequest(v9, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRoutingKey_(v17, v18, (uint64_t)v14);

  objc_msgSend_shortSharingTokenHashData(v3, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordResolveTokenRequest(v9, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setShortTokenHash_(v24, v25, (uint64_t)v21);

  v28 = objc_msgSend_forceDSRefetch(v3, v26, v27);
  objc_msgSend_recordResolveTokenRequest(v9, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setForceFetch_(v31, v32, v28);

  objc_msgSend_participantID(v3, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    objc_msgSend_participantID(v3, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordResolveTokenRequest(v9, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setParticipantId_(v41, v42, (uint64_t)v38);

  }
  objc_msgSend_rootRecordDesiredKeySet(*(void **)(a1 + 32), v36, v37);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  if (v43)
  {
    v46 = (void *)MEMORY[0x1E0C99DE8];
    objc_msgSend_rootRecordDesiredKeySet(*(void **)(a1 + 32), v44, v45);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allObjects(v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayWithArray_(v46, v51, (uint64_t)v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordResolveTokenRequest(v9, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setRootRecordDesiredKeys_(v55, v56, (uint64_t)v52);

  }
  objc_msgSend_lookupInfosByRequestID(*(void **)(a1 + 32), v44, v45);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_request(v9, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationUUID(v60, v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v57, v64, (uint64_t)v3, v63);

  return v9;
}

id sub_1BEAB8A50(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v13 = 0;
  objc_msgSend_shareParticipantFromPParticipant_error_(v4, v5, (uint64_t)v3, &v13);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v13;
  v8 = v6;
  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v15 = v3;
      v16 = 2112;
      v17 = v12;
      _os_log_error_impl(&dword_1BE990000, v9, OS_LOG_TYPE_ERROR, "Couldn't parse a potentially matching OON participant from %@: %@", buf, 0x16u);
    }
    v8 = 0;
  }
  v10 = v8;

  return v10;
}

uint64_t sub_1BEAB9C18(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEABA0F0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEABA960(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecordFieldIdentifier *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPRecordFieldIdentifier *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          goto LABEL_32;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || !sub_1BEAE7D18((uint64_t)v17, a2))
          goto LABEL_35;
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addMergeableDeltas_(a1, v18, (uint64_t)v17);
        if (PBReaderPlaceMark() && (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

BOOL CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark()
      || (CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValueReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *CKStringForAccountType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("platform");
  else
    return *(&off_1E7832C10 + a1 - 1);
}

void sub_1BEABC7E4()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.cloudkit.account.authQueue", v2);
  v1 = (void *)qword_1ED702808;
  qword_1ED702808 = (uint64_t)v0;

}

void sub_1BEABD0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEABD118(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

uint64_t sub_1BEABD134(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1BEABD148(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1BEABD15C(uint64_t a1, char a2, id obj)
{
  id v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), obj);
  v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1BEABD1B8(_QWORD *a1)
{
  uint64_t result;

  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

void sub_1BEABD328(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEABD33C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint8_t v9[8];
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1BEABD4C4;
    v10[3] = &unk_1E7832BA0;
    objc_copyWeak(&v13, v2);
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 40);
    objc_msgSend__lockedRenewTokenWithReason_shouldForce_container_tokenFetchBlock_completionHandler_(WeakRetained, v7, v5, v4, v6, v10, *(_QWORD *)(a1 + 56));

    objc_destroyWeak(&v13);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "CKDAccount disappeared during renew.", v9, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1BEABD4B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1BEABD4C4(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  id WeakRetained;
  _QWORD *v7;
  os_log_t *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (qword_1ED7026C8)
  {
    if ((unint64_t)objc_msgSend_count((void *)qword_1ED7026C8, v4, v5) >= 0x65)
    {
      if (*v7 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v9 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Clearing failedTokenCache.", (uint8_t *)&v20, 2u);
      }
      objc_msgSend_removeAllObjects((void *)qword_1ED7026C8, v10, v11);
    }
  }
  else
  {
    v12 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v13 = (void *)qword_1ED7026C8;
    qword_1ED7026C8 = (uint64_t)v12;

  }
  if (*v7 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v14 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v20 = 138412290;
    v21 = v16;
    _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Adding auth token: %@ to the failed token cache if non-nil.", (uint8_t *)&v20, 0xCu);
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
    objc_msgSend_addObject_((void *)qword_1ED7026C8, v15, v17);
  objc_msgSend__lockedCloudKitAuthTokenWithContainer_error_(WeakRetained, v15, *(_QWORD *)(a1 + 40), a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

void sub_1BEABD7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEABD7E8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint8_t v9[8];
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1BEABD970;
    v10[3] = &unk_1E7832BA0;
    objc_copyWeak(&v13, v2);
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 40);
    objc_msgSend__lockedRenewTokenWithReason_shouldForce_container_tokenFetchBlock_completionHandler_(WeakRetained, v7, v5, v4, v6, v10, *(_QWORD *)(a1 + 56));

    objc_destroyWeak(&v13);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "CKDAccount disappeared during iCloud auth renew.", v9, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1BEABD95C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1BEABD970(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  const char *v5;
  const char *v6;
  void *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_setLastFailediCloudAuthToken_(WeakRetained, v5, *(_QWORD *)(a1 + 32));
  objc_msgSend__lockediCloudAuthTokenWithContainer_error_(WeakRetained, v6, *(_QWORD *)(a1 + 40), a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1BEABDABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEABDAD0(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  const char *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 32);
  v17 = 0;
  objc_msgSend__lockediCloudAuthTokenWithContainer_error_(WeakRetained, v4, v3, &v17);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v17;

  objc_msgSend_authTokenCallbackQueue(*(void **)(a1 + 40), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BEABDBBC;
  v13[3] = &unk_1E782EBF0;
  v10 = *(id *)(a1 + 48);
  v15 = v6;
  v16 = v10;
  v14 = v5;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, v13);

}

uint64_t sub_1BEABDBBC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

id sub_1BEABE374()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EF577B50;
  v7 = qword_1EF577B50;
  if (!qword_1EF577B50)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1BEABE42C;
    v3[3] = &unk_1E7832C50;
    v3[4] = &v4;
    sub_1BEABE42C(v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BEABE414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1BEABE42C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  Class result;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v2 = qword_1EF577A28;
  v20 = qword_1EF577A28;
  if (!qword_1EF577A28)
  {
    v21 = xmmword_1E7832C28;
    v22 = *(_OWORD *)&off_1E7832C38;
    v3 = _sl_dlopen();
    v18[3] = v3;
    qword_1EF577A28 = v3;
    v2 = v3;
  }
  _Block_object_dispose(&v17, 8);
  if (!v2)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v4, v5);
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v9, (uint64_t)"void *CloudKitTestingLibrary(void)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(a1, v11, (uint64_t)v10, CFSTR("CKTestFrameworkLinking.m"), 11, CFSTR("%s"), 0);

    __break(1u);
    free(v12);
  }
  result = objc_getClass("CKTestServerReference");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v14, (uint64_t)"Class getCKTestServerReferenceClass(void)_block_invoke");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v13, v16, (uint64_t)v15, CFSTR("CKTestFrameworkLinking.m"), 16, CFSTR("Unable to find class %s"), "CKTestServerReference");

    __break(1u);
  }
  qword_1EF577B50 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_1BEABE5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CKDPResponseOperationResultErrorClientReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPUniqueFieldFailure *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100)
      {
        if ((_DWORD)v17 == 101)
        {
          v18 = objc_alloc_init(CKDPUniqueFieldFailure);
          objc_storeStrong((id *)(a1 + 32), v18);
          if (!PBReaderPlaceMark() || (sub_1BEBD3410((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_47:

            return 0;
          }
        }
        else
        {
          if ((_DWORD)v17 != 102)
          {
LABEL_39:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = objc_alloc_init(CKDPMoveOplockFailure);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || (sub_1BEB08B9C((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_47;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_42;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_44;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_44:
          *(_DWORD *)(a1 + 24) = v21;
          continue;
        }
        if ((_DWORD)v17 != 100)
          goto LABEL_39;
        v18 = objc_alloc_init(CKDPOplockFailure);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (sub_1BEB39B70((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_47;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAC05A8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t result;

  objc_msgSend_parserData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v7 = (void *)objc_opt_new();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);

  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_parserData(*(void **)(a1 + 32), v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendData_(v9, v10, *(_QWORD *)(a1 + 40));

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEAC06D4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void (**v21)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void (**v31)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  id v36;
  _QWORD block[5];
  id v38;
  _QWORD v39[4];
  NSObject *v40;
  _QWORD v41[4];
  NSObject *v42;
  id v43;

  v2 = dispatch_group_create();
  objc_msgSend_parserData(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_length(v5, v6, v7);

  if (v8)
  {
    v11 = (void *)MEMORY[0x1E0CB38B0];
    objc_msgSend_parserData(*(void **)(a1 + 32), v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = 0;
    objc_msgSend_propertyListWithData_options_format_error_(v11, v13, (uint64_t)v12, 0, 0, &v43);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v43;

    if (v15)
      objc_msgSend_setParserError_(*(void **)(a1 + 32), v16, (uint64_t)v15);
    objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18 && v14)
    {
      dispatch_group_enter(v2);
      objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v19, v20);
      v21 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend_parserData(*(void **)(a1 + 32), v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = MEMORY[0x1E0C809B0];
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 3221225472;
      v41[2] = sub_1BEAC0950;
      v41[3] = &unk_1E782EA40;
      v26 = v2;
      v42 = v26;
      ((void (**)(_QWORD, void *, void *, _QWORD *))v21)[2](v21, v14, v24, v41);

      if (*MEMORY[0x1E0C95280] && objc_msgSend_testRepeatedParseResults(*(void **)(a1 + 32), v27, v28))
      {
        dispatch_group_enter(v26);
        objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v29, v30);
        v31 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend_parserData(*(void **)(a1 + 32), v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v39[0] = v25;
        v39[1] = 3221225472;
        v39[2] = sub_1BEAC0958;
        v39[3] = &unk_1E782EA40;
        v40 = v26;
        ((void (**)(_QWORD, void *, void *, _QWORD *))v31)[2](v31, v14, v34, v39);

      }
    }

  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v9, v10);
    CKGetGlobalQueue();
    v35 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEAC0960;
    block[3] = &unk_1E782EC68;
    v36 = *(id *)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v38 = v36;
    dispatch_group_notify(v2, v35, block);

  }
}

void sub_1BEAC0950(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEAC0958(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEAC0960(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

BOOL sub_1BEAC111C(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPStreamingAssetIdentifier *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPStreamingAssetIdentifier);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark() && sub_1BEA5CE38((uint64_t)v17, a2))
          goto LABEL_32;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(CKDPStreamingAssetSaveAssetRequest);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark() || (sub_1BEA89788((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(CKDPStreamingAssetSaveAssetResponse);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (sub_1BEAAA3E8((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(CKDPStreamingAssetRetrieveAssetResponse);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && (sub_1BEB02DD4((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

uint64_t sub_1BEAC1F8C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPZone *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  uint64_t result;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark() && sub_1BEAB1B80((id *)&v17->super.super.isa, a2))
          goto LABEL_77;
        goto LABEL_106;
      case 2u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_64;
      case 3u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
        goto LABEL_64;
      case 4u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 92) |= 4u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_81:
        *(_DWORD *)(a1 + 48) = v22;
        goto LABEL_104;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 92) |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_85:
        v58 = 8;
        goto LABEL_90;
      case 6u:
        v32 = 0;
        v33 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 92) |= 2u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v28 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_89:
        v58 = 16;
LABEL_90:
        *(_QWORD *)(a1 + v58) = v28;
        goto LABEL_104;
      case 7u:
        v17 = objc_alloc_init(CKDPZoneCapabilities);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (sub_1BEBD7050((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_106;
        goto LABEL_77;
      case 8u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 92) |= 0x20u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_94:
        v59 = v39 != 0;
        v60 = 90;
        goto LABEL_103;
      case 9u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + 92) |= 0x10u;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
LABEL_98:
        v59 = v45 != 0;
        v60 = 89;
        goto LABEL_103;
      case 0xAu:
        v17 = (CKDPZone *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        v49 = 80;
        goto LABEL_75;
      case 0xBu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
LABEL_64:
        v50 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_104;
      case 0xDu:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_BYTE *)(a1 + 92) |= 8u;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v54 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v54 = 0;
LABEL_102:
        v59 = v54 != 0;
        v60 = 88;
LABEL_103:
        *(_BYTE *)(a1 + v60) = v59;
        goto LABEL_104;
      case 0xEu:
        v17 = (CKDPZone *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        v49 = 56;
LABEL_75:
        objc_storeStrong((id *)(a1 + v49), v17);
        if (PBReaderPlaceMark() && (CKDPDateReadFrom() & 1) != 0)
        {
LABEL_77:
          PBReaderRecallMark();

LABEL_104:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_106:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_104;
    }
  }
}

void sub_1BEAC3618()
{
  void *v0;

  v0 = (void *)qword_1ED700938;
  qword_1ED700938 = (uint64_t)&unk_1E78AF7F8;

}

BOOL sub_1BEAC37CC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPShareIdentifier *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPShareIdentifier **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v18, a2))
          goto LABEL_33;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPProtectionInfo);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !sub_1BEA1BDA4((uint64_t)v18, a2))
    {
LABEL_33:

      return 0;
    }
LABEL_26:
    PBReaderRecallMark();
LABEL_28:

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAC3E94()
{
  void *v0;

  v0 = (void *)qword_1ED700948;
  qword_1ED700948 = (uint64_t)&unk_1E78AF820;

}

uint64_t sub_1BEAC42B4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPUserAlias *v17;
  uint64_t result;
  const char *v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPUserAlias);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (sub_1BEAFA248((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_26;
        goto LABEL_41;
      case 2u:
        v17 = objc_alloc_init(CKDPQuerySort);
        objc_msgSend_addSortedBy_((void *)a1, v19, (uint64_t)v17);
        if (PBReaderPlaceMark() && (sub_1BEA3CCE4((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 3u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v20;

        goto LABEL_39;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_38:
        *(_BYTE *)(a1 + 32) = v24 != 0;
        goto LABEL_39;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

void sub_1BEAC50D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  objc_class *v7;
  const char *v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (objc_class *)objc_opt_class();
  if (*(_BYTE *)(a1 + 32))
  {
    pthread_mutex_lock(&stru_1ED700828);
    objc_msgSend_removeObjectForKey_((void *)qword_1ED702CF8, v8, (uint64_t)v7);
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    v13 = v9;
    NSStringFromClass(v7);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v5, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKSanitizedPath(v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138412802;
    v22 = v14;
    v23 = 2112;
    v24 = v20;
    v25 = 2112;
    v26 = v6;
    _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, "%@ instance at %@ became invalid. Error: %@", (uint8_t *)&v21, 0x20u);

  }
  if (objc_msgSend_CKIsCorruptDatabaseError_(MEMORY[0x1E0CB35C8], v10, (uint64_t)v6))
    objc_msgSend_remove(v5, v11, v12);
  if (*(_BYTE *)(a1 + 32))
    pthread_mutex_unlock(&stru_1ED700828);

}

id sub_1BEAC56B4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void *v8;

  v4 = a3;
  if (objc_msgSend_isReference(a1, v5, v6))
    objc_msgSend__prepareReferenceAssetForUpload_(v4, v7, (uint64_t)a1);
  else
    objc_msgSend__prepareAssetForUpload_(v4, v7, (uint64_t)a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id sub_1BEAC5714(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void *v8;

  v4 = a3;
  if (objc_msgSend_isReference(a1, v5, v6))
    objc_msgSend__prepareReferencePackageForUpload_(v4, v7, (uint64_t)a1);
  else
    objc_msgSend__preparePackageForUpload_(v4, v7, (uint64_t)a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id sub_1BEAC5ABC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  void *v5;

  objc_msgSend_allMMCSItems(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKMap_(v3, v4, (uint64_t)&unk_1E7832D10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id sub_1BEAC5B00(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v6 = objc_msgSend_itemID(v3, v4, v5);
  objc_msgSend_progress(v3, v7, v8);
  v10 = v9;
  objc_msgSend_signature(v3, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_finished(v3, v14, v15))
    objc_msgSend_stringWithFormat_(v2, v16, (uint64_t)CFSTR("<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>"), v3, v6, v10, v13, CFSTR("finished"));
  else
    objc_msgSend_stringWithFormat_(v2, v16, (uint64_t)CFSTR("<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>"), v3, v6, v10, v13, &stru_1E7838F48);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_1BEAC5FBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAC60C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAC61F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAC62F0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(id, _QWORD);

  objc_msgSend_uploadPreparationBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_uploadPreparationBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(_QWORD *)(a1 + 40));

  }
}

void sub_1BEAC644C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(id, _QWORD, double);

  objc_msgSend_uploadProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_uploadProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(id, _QWORD, double))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));

  }
}

void sub_1BEAC661C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_uploadCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_uploadCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAC7494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

id sub_1BEAC7510(uint64_t a1, void *a2)
{
  id v3;
  CKDMMCSItem *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;

  v3 = a2;
  v4 = [CKDMMCSItem alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v8 = objc_msgSend_temporary(*(void **)(a1 + 40), v6, v7);
  v10 = (void *)objc_msgSend_initWithPackage_temporary_(v4, v9, v5, v8);
  objc_msgSend_UUID(*(void **)(a1 + 32), v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTrackingUUID_(v10, v14, (uint64_t)v13);

  objc_msgSend_fileURL(v3, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFileURL_(v10, v18, (uint64_t)v17);

  objc_msgSend_fileID(v3, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFileID_(v10, v22, (uint64_t)v21);

  objc_msgSend_generationID(v3, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setGenerationID_(v10, v26, (uint64_t)v25);

  objc_msgSend_deviceID(v3, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDeviceID_(v10, v30, (uint64_t)v29);

  objc_msgSend_itemTypeHint(v3, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setItemTypeHint_(v10, v34, (uint64_t)v33);

  v37 = objc_msgSend_packageIndex(v3, v35, v36);
  objc_msgSend_setPackageIndex_(v10, v38, v37);
  return v10;
}

intptr_t sub_1BEAC764C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1BEAC80D8(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;

  if (a3)
    objc_msgSend_setError_(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v4);

}

id sub_1BEAC8F9C(uint64_t a1, const char *a2)
{
  return (id)objc_msgSend__prepareReferenceAssetForUpload_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

void sub_1BEAC9B20(void **a1, void *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  id v22;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v22 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allItemGroups(a1[4], v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_authPutRequest(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend_authPutRequest(v8, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAuthPutRequest_(a1[5], v15, (uint64_t)v14);

  }
  objc_msgSend__didPrepareAssetBatch_error_(a1[6], v12, (uint64_t)a1[5], v22);
  objc_msgSend_error(a1[6], v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v18 && v22)
    objc_msgSend_setError_(a1[6], v19, (uint64_t)v22);
  objc_msgSend_stateTransitionGroup(a1[6], v19, v20);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

void sub_1BEACAD60(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v6);

  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  objc_initWeak(&v12, *(id *)(a1 + 40));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEACAEB4;
  v8[3] = &unk_1E7832DD8;
  objc_copyWeak(&v9, &from);
  objc_copyWeak(&v10, &location);
  objc_copyWeak(&v11, &v12);
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEACAE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 48));
  objc_destroyWeak((id *)(v19 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEACAEB4(id *a1)
{
  id WeakRetained;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  char UploadTokensForAssetTokenRequest_error_newError;
  id v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;

  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v3 = objc_loadWeakRetained(a1 + 5);
  v4 = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend_error(WeakRetained, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(v3, v11, (uint64_t)v10);

  }
  objc_msgSend_error(WeakRetained, v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  UploadTokensForAssetTokenRequest_error_newError = objc_msgSend__didFetchUploadTokensForAssetTokenRequest_error_newError_(v3, v13, (uint64_t)v4, v12, &v20);
  v15 = v20;

  if ((UploadTokensForAssetTokenRequest_error_newError & 1) == 0)
  {
    objc_msgSend_error(v3, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v18)
      objc_msgSend_setError_(v3, v16, (uint64_t)v15);
  }
  objc_msgSend_stateTransitionGroup(v3, v16, v17);
  v19 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v19);

}

void sub_1BEACBF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,id location)
{
  id *v51;

  objc_destroyWeak(v51);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEACBFAC(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  const char *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend__didMakeProgressForMMCSSectionItem_task_(WeakRetained, v5, (uint64_t)v4, *(_QWORD *)(a1 + 32));

}

void sub_1BEACC004(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sectionItems(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v9, v10, *(_QWORD *)(a1 + 40));

  objc_msgSend__collectMetricsFromCompletedItemGroup_(*(void **)(a1 + 48), v11, (uint64_t)v3);
  v12 = *(void **)(a1 + 48);
  v16[0] = *(_QWORD *)(a1 + 32);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v13, (uint64_t)v16, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__didUploadMMCSSectionItems_task_error_(v12, v15, (uint64_t)v14, *(_QWORD *)(a1 + 56), v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

uint64_t sub_1BEACC0E8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t result;

  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeCancelToken_(v4, v5, *(_QWORD *)(a1 + 40));

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1BEACC254(uint64_t a1, const char *a2)
{
  return objc_msgSend__uploadPackageSectionsWithEnumerator_task_completionBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t sub_1BEACC708(uint64_t a1, const char *a2)
{
  uint64_t result;

  objc_msgSend__closePackage_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1BEACC928(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  _QWORD block[6];
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v5 = objc_msgSend_maxPackageUploadsPerBatch(*(void **)(a1 + 48), v3, v4);
  v6 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v9 = objc_msgSend_count(*(void **)(a1 + 32), v7, v8);
  if (v5 >= v5 - v9)
    v11 = objc_msgSend_initWithCapacity_(v6, v10, v5 - v9);
  else
    v11 = objc_msgSend_initWithCapacity_(v6, v10, v5);
  v14 = (void *)v11;
  objc_msgSend_objectEnumerator(*(void **)(a1 + 56), v12, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_count(*(void **)(a1 + 32), v16, v17);
  v21 = v5 - v18;
  if (v5 > v18)
  {
    do
    {
      objc_msgSend_nextObject(v15, v19, v20);
      v22 = objc_claimAutoreleasedReturnValue();
      if (!v22)
        break;
      v23 = (void *)v22;
      objc_msgSend_addObject_(v14, v19, v22);

      --v21;
    }
    while (v21);
  }
  v37 = v15;
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 56), v19, (uint64_t)v14);
  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v24, (uint64_t)v14);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v25 = v14;
  v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v41, v45, 16);
  if (v27)
  {
    v30 = v27;
    v31 = *(_QWORD *)v42;
    v32 = MEMORY[0x1E0C809B0];
    do
    {
      v33 = 0;
      do
      {
        if (*(_QWORD *)v42 != v31)
          objc_enumerationMutation(v25);
        v34 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * v33);
        objc_msgSend_qualityOfService(*(void **)(a1 + 48), v28, v29);
        CKGetGlobalQueue();
        v35 = objc_claimAutoreleasedReturnValue();
        block[0] = v32;
        block[1] = 3221225472;
        block[2] = sub_1BEACCB5C;
        block[3] = &unk_1E782F4A8;
        v36 = *(void **)(a1 + 56);
        block[4] = *(_QWORD *)(a1 + 48);
        block[5] = v34;
        v39 = v36;
        v40 = *(id *)(a1 + 32);
        dispatch_async(v35, block);

        ++v33;
      }
      while (v30 != v33);
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v41, v45, 16);
    }
    while (v30);
  }

}

void sub_1BEACCB5C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  _QWORD v9[6];
  id v10;
  id v11;

  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addCancelToken_withOperation_(v4, v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEACCC10;
  v9[3] = &unk_1E782F4A8;
  v9[4] = v6;
  v9[5] = v7;
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  objc_msgSend__uploadPackageSectionsWithTask_completionBlock_(v6, v8, v7, v9);

}

void sub_1BEACCC10(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeCancelToken_(v4, v5, *(_QWORD *)(a1 + 40));

  objc_msgSend_cancelTokens(*(void **)(a1 + 40), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllCancelTokens(v8, v9, v10);

  objc_msgSend_group(*(void **)(a1 + 40), v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v13);

  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(void **)(a1 + 32);
  v20[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v17, (uint64_t)v20, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__uploadPackageSectionsWithPendingTasks_uploadingTasks_completedTasks_(v16, v19, v14, v15, v18);

}

void sub_1BEACD144(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  id v11;

  v2 = a2;
  MMCSOperationMetricCombineMetrics();
  objc_msgSend_date(MEMORY[0x1E0C99D68], v3, v4);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startDate(v2, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v11, v8, (uint64_t)v7);
  objc_msgSend_setDuration_(v2, v9, v10);

}

uint64_t sub_1BEACD2B8(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_metrics(a2, (const char *)a2, a3);
}

void sub_1BEACEA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)&STACK[0x580]);
  _Unwind_Resume(a1);
}

void sub_1BEACEA50(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;

  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllCancelTokens(v4, v5, v6);

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v9);

}

void sub_1BEACEAA4(uint64_t a1, const char *a2)
{
  objc_msgSend__didUploadPackageWithTask_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

BOOL sub_1BEACEAD0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend_uploadReceipt(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

BOOL sub_1BEACEB04(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend_uploadReceipt(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == 0;

  return v4;
}

void sub_1BEACEB38(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  const char *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend__didMakeProgressForMMCSItem_(WeakRetained, v4, (uint64_t)v3);

}

void sub_1BEACEB80(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend__collectMetricsFromCompletedItemGroupSet_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  objc_msgSend_error(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(a1 + 32);
  objc_msgSend_allMMCSItems(*(void **)(a1 + 40), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__didUploadMMCSItems_error_(v8, v12, (uint64_t)v11, v7);

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  objc_msgSend_allMMCSAndSectionItems(*(void **)(a1 + 40), v13, v14, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v32, v36, 16);
  if (v17)
  {
    v20 = v17;
    v21 = *(_QWORD *)v33;
    do
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)v33 != v21)
          objc_enumerationMutation(v15);
        objc_msgSend_package(*(void **)(*((_QWORD *)&v32 + 1) + 8 * v22), v18, v19);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25)
        {
          objc_msgSend_uploadTasksByPackages(*(void **)(a1 + 32), v23, v24);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKey_(v26, v27, (uint64_t)v25);
          v28 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_group(v28, v29, v30);
          v31 = objc_claimAutoreleasedReturnValue();
          dispatch_group_leave(v31);

        }
        ++v22;
      }
      while (v20 != v22);
      v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v32, v36, 16);
    }
    while (v20);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1BEACF598(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  unint64_t v59;
  const char *v60;
  uint64_t v61;
  unint64_t v62;

  v4 = a2;
  v5 = a3;
  v8 = objc_msgSend_storageGroupingPolicy(v4, v6, v7);
  v11 = objc_msgSend_storageGroupingPolicy(v5, v9, v10);
  if (v8 < v11)
    goto LABEL_2;
  if (v11 < v8)
    goto LABEL_4;
  if (v8 != 1)
    goto LABEL_10;
  objc_msgSend_recordKey(v4, v12, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordKey(v5, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (!v15 || (v20 = (void *)v18) == 0)
    __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 72, "key1 && key2");
  v14 = objc_msgSend_compare_(v15, v19, v18);

  if (!v14)
  {
LABEL_10:
    v22 = objc_msgSend_uploadRank(v4, v12, v13);
    v25 = objc_msgSend_uploadRank(v5, v23, v24);
    if (v22 < v25)
    {
LABEL_2:
      v14 = -1;
      goto LABEL_9;
    }
    if (v25 < v22)
    {
LABEL_4:
      v14 = 1;
      goto LABEL_9;
    }
    if (v8 == 1)
      goto LABEL_16;
    objc_msgSend_recordKey(v4, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordKey(v5, v29, v30);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!v28 || (v33 = (void *)v31) == 0)
      __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 92, "key1 && key2");
    v14 = objc_msgSend_compare_(v28, v32, v31);

    if (!v14)
    {
LABEL_16:
      objc_msgSend_record(v4, v26, v27);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_record(v5, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v40, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend_compareToRecordID_(v37, v44, (uint64_t)v43);

      if (!v14)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 101, "[obj1 isKindOfClass:[CKAsset class]] && [obj2 isKindOfClass:[CKAsset class]]");
        objc_msgSend_mergeableDeltaID(v4, v45, v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deltaIdentifier(v47, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_mergeableDeltaID(v5, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deltaIdentifier(v53, v54, v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v50 || !v56 || (v14 = objc_msgSend_compare_(v50, v57, (uint64_t)v56)) == 0)
        {
          v59 = objc_msgSend_arrayIndex(v4, v57, v58);
          v62 = objc_msgSend_arrayIndex(v5, v60, v61);
          if ((v59 & 0x8000000000000000) != 0 || (v62 & 0x8000000000000000) != 0)
            __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 113, "0 <= index1 && 0 <= index2");
          if (v59 < v62)
            v14 = -1;
          else
            v14 = v62 < v59;
        }

      }
    }
  }
LABEL_9:

  return v14;
}

BOOL sub_1BEACFA64(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPDateStatistics *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPDateStatistics **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
        goto LABEL_31;
      case 3u:
        v18 = objc_alloc_init(CKDPDateStatistics);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || !CKDPDateStatisticsReadFrom((uint64_t)v18, a2))
          goto LABEL_35;
        goto LABEL_30;
      case 4u:
        v18 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_30;
      case 6u:
        v18 = (CKDPDateStatistics *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (PBReaderPlaceMark() && (CKDPDateReadFrom() & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

BOOL sub_1BEAD0ADC(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  const char *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (void *)a1[1];
        a1[1] = v17;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
      objc_msgSend_addValues_(a1, v19, (uint64_t)v18);
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAD1480(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  CKDPThrottlingConfigCriteria *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

        goto LABEL_39;
      case 2u:
        v19 = objc_alloc_init(CKDPThrottlingConfigCriteria);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (!PBReaderPlaceMark() || (sub_1BEC69AA4((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_41;
        goto LABEL_25;
      case 3u:
        v19 = objc_alloc_init(CKDPThrottlingConfigRateLimit);
        objc_storeStrong((id *)(a1 + 24), v19);
        if (PBReaderPlaceMark() && (sub_1BEB04204((uint64_t)v19, a2) & 1) != 0)
        {
LABEL_25:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 0xAu:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_39;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

void sub_1BEAD2B44(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

  }
}

void sub_1BEAD2DB4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(*(void **)(a1 + 40), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD, _QWORD, _QWORD))v10 + 2))(v10, v9, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0);

  }
}

void sub_1BEAD301C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  char v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD block[4];
  int8x16_t v28;
  id v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v31 = v12;
      v32 = 2112;
      v33 = v8;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Error publish assets for record %@: %@", buf, 0x16u);
    }
    objc_msgSend_callbackQueue(*(void **)(a1 + 40), v10, v11);
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEAD3200;
    block[3] = &unk_1E782E418;
    v28 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    v29 = v8;
    dispatch_async(v13, block);

    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v16);

  }
  else
  {
    v17 = objc_msgSend_URLOptions(*(void **)(a1 + 40), v6, v7);
    v20 = *(void **)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 48);
    if ((v17 & 2) != 0)
    {
      objc_msgSend__finishPublishAssetsForRecord_(*(void **)(a1 + 40), v18, *(_QWORD *)(a1 + 48));
    }
    else
    {
      v22 = objc_msgSend_pcs(v5, v18, v19);
      objc_msgSend__dispatchAssetURLsForRecord_pcs_(v20, v23, v21, v22);
    }
    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v24, v25);
    v26 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v26);

  }
}

void sub_1BEAD3200(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAD3448(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_setUseCachedEtags_(v3, v4, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v5 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1BEAD35DC;
  v15[3] = &unk_1E7830270;
  objc_copyWeak(&v16, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v6, (uint64_t)v15);
  v12[0] = v5;
  v12[1] = 3221225472;
  v12[2] = sub_1BEAD3A50;
  v12[3] = &unk_1E782E468;
  objc_copyWeak(&v13, &location);
  objc_copyWeak(&v14, &from);
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)v12);
  objc_msgSend_setFetchRecordsOperation_(*(void **)(a1 + 32), v8, (uint64_t)v3);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v11);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEAD359C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEAD35DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  dispatch_block_t *v11;
  void *v12;
  _QWORD *v13;
  os_log_t *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject **v31;
  NSObject *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  _QWORD block[5];
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  id v47;
  __int16 v48;
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
  v12 = (void *)*MEMORY[0x1E0C952F8];
  v13 = (_QWORD *)MEMORY[0x1E0C95300];
  v14 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v15 = *v14;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v47 = v8;
      v48 = 2112;
      v49 = v9;
      _os_log_error_impl(&dword_1BE990000, v15, OS_LOG_TYPE_ERROR, "Failed to fetch record %@: %@", buf, 0x16u);
    }
    goto LABEL_6;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v12);
  v20 = *v14;
  if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v47 = v8;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Fetched record %@", buf, 0xCu);
    if (v7)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    goto LABEL_6;
  }
  if (!v7)
    goto LABEL_30;
LABEL_12:
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  objc_msgSend_fileNamesByAssetFieldNames(WeakRetained, v16, v17);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v41, v45, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v42;
LABEL_14:
    v29 = 0;
    while (1)
    {
      if (*(_QWORD *)v42 != v28)
        objc_enumerationMutation(v24);
      objc_msgSend_objectForKeyedSubscript_(v7, v26, *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * v29));
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      if (v30)
        break;
      if (v27 == ++v29)
      {
        v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v41, v45, 16);
        if (v27)
          goto LABEL_14;
        goto LABEL_20;
      }
    }

    v9 = 0;
    if (!v8)
      goto LABEL_6;
  }
  else
  {
LABEL_20:

    v31 = (NSObject **)MEMORY[0x1E0C952B0];
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], *v11);
    v32 = *v31;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v47 = v8;
      _os_log_impl(&dword_1BE990000, v32, OS_LOG_TYPE_INFO, "Warn: Record %@ contained no matching asset fields to publish", buf, 0xCu);
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v33, *MEMORY[0x1E0C94B20], 2003, CFSTR("Record %@ contained no matching asset fields to publish"), v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v8)
      goto LABEL_6;
  }
  if (!v9)
  {
    objc_msgSend_fetchedRecordsByID(WeakRetained, v16, v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v19);
    objc_msgSend_fetchedRecordsByID(WeakRetained, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v7, v8);

    objc_sync_exit(v19);
    goto LABEL_7;
  }
LABEL_6:
  objc_msgSend_callbackQueue(WeakRetained, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEAD39DC;
  block[3] = &unk_1E782E418;
  block[4] = WeakRetained;
  v39 = v8;
  v40 = v9;
  v19 = v9;
  dispatch_async(v18, block);

LABEL_7:
}

void sub_1BEAD39C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAD39DC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAD3A50(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  objc_class *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v11 = v8;
      v12 = (objc_class *)objc_opt_class();
      NSStringFromClass(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = 138544130;
      v33 = v13;
      v34 = 2048;
      v35 = v3;
      v36 = 2114;
      v37 = v16;
      v38 = 2112;
      v39 = v19;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Fetch records operation <%{public}@: %p; %{public}@> finished with error %@",
        (uint8_t *)&v32,
        0x2Au);

    }
    objc_msgSend_error(v3, v9, v10);
    v20 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v21, (uint64_t)v20);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v7);
  v23 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v20 = v23;
    v27 = (objc_class *)objc_opt_class();
    NSStringFromClass(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543874;
    v33 = v28;
    v34 = 2048;
    v35 = v3;
    v36 = 2114;
    v37 = v31;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Fetch records operation <%{public}@: %p; %{public}@> succeeded",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setFetchRecordsOperation_(WeakRetained, v22, 0);
  objc_msgSend_stateTransitionGroup(WeakRetained, v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v26);

}

void sub_1BEAD4034()
{
  void *v0;

  v0 = (void *)qword_1ED700958;
  qword_1ED700958 = (uint64_t)&unk_1E78AF870;

}

uint64_t sub_1BEAD4870(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecord *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  const char *v33;
  void *v34;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_57;
        goto LABEL_70;
      case 2u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 108) |= 2u;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_64:
        *(_BYTE *)(a1 + 104) = v20 != 0;
        goto LABEL_59;
      case 3u:
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_msgSend_addFieldsToDeleteIfExistOnMerge_((void *)a1, v24, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_57;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 24;
        goto LABEL_52;
      case 5u:
        v17 = objc_alloc_init(CKDPRecordSaveRequestConflictLoserUpdate);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1BEC0E0B8(v17, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_57;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 108) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_68:
        *(_DWORD *)(a1 + 72) = v29;
        goto LABEL_59;
      case 7u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 96;
        goto LABEL_52;
      case 8u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 56;
        goto LABEL_52;
      case 9u:
        PBReaderReadString();
        v17 = (CKDPRecord *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend_addConflictLosersToResolve_((void *)a1, v33, (uint64_t)v17);
        goto LABEL_58;
      case 0xAu:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 80;
        goto LABEL_52;
      case 0xBu:
        v17 = objc_alloc_init(CKDPRecordSaveRequestShareIdUpdate);
        objc_storeStrong((id *)(a1 + 88), v17);
        if (!PBReaderPlaceMark() || (sub_1BEC7CD9C((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_57;
      case 0xCu:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 40;
LABEL_52:
        v34 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_59;
      case 0xEu:
        v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark() && CKDPRequestedFieldsReadFrom(v17, a2))
        {
LABEL_57:
          PBReaderRecallMark();
LABEL_58:

LABEL_59:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_70:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_59;
    }
  }
}

void sub_1BEAD62EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEAD6334(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  id v13;

  v13 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_anonymousShareRemovedBlock(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_anonymousShareRemovedBlock(WeakRetained, v10, v11);
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id))v12)[2](v12, v13, v5);

  }
}

void sub_1BEAD63C4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  _QWORD *v4;
  os_log_t *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  os_log_t v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = (os_log_t *)MEMORY[0x1E0C952B0];
  v6 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    LOWORD(v22) = 0;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Completed CKDAnonymousShareRemoveURLRequest", (uint8_t *)&v22, 2u);
  }
  objc_msgSend_error(v3, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (*v4 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      v15 = v12;
      objc_msgSend_error(v3, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412290;
      v23 = v18;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_INFO, "Error CKDAnonymousShareRemoveURLRequest: %@", (uint8_t *)&v22, 0xCu);

    }
    objc_msgSend_error(v3, v13, v14);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v20, (uint64_t)v19);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v10, v11);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

void sub_1BEAD68B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEAD68D8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)*MEMORY[0x1E0C952F8];
    if (v3)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v5);
      v6 = (void *)*MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_ERROR))
      {
        v13 = v6;
        objc_msgSend_operationID(WeakRetained, v14, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138412546;
        v22 = v16;
        v23 = 2112;
        v24 = v3;
        _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, "Error fetching mergeable deltas in operation %@: %@", (uint8_t *)&v21, 0x16u);

      }
      objc_msgSend_setError_(WeakRetained, v7, (uint64_t)v3);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v5);
      v11 = (void *)*MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
        v17 = v11;
        objc_msgSend_operationID(WeakRetained, v18, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138412290;
        v22 = v20;
        _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Finished fetching mergeable deltas for operation %@", (uint8_t *)&v21, 0xCu);

      }
    }
    objc_msgSend_stateTransitionGroup(WeakRetained, v8, v9);
    v12 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v12);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Fetch mergeable deltas operation deallocated while fetching mergeable deltas from the server", (uint8_t *)&v21, 2u);
    }
  }

}

void sub_1BEAD6DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak(v25);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1BEAD6E20(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  id WeakRetained;
  NSObject *v15;
  const char *v16;
  int v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v11)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v15 = *MEMORY[0x1E0C952C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
    {
      v17 = 138412290;
      v18 = v9;
      _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Got a continuation token fetching deltas for value %@", (uint8_t *)&v17, 0xCu);
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v16, (uint64_t)v11, v9);
  }
  objc_msgSend_handleMergeableDeltasFetchedForValueID_fetchedDeltas_result_(WeakRetained, v13, (uint64_t)v9, v10, v12);

}

void sub_1BEAD6F80(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  NSObject *v22;
  objc_class *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = objc_loadWeakRetained((id *)(a1 + 56));
  v6 = v3;
  if (WeakRetained && v3)
  {
    objc_msgSend_error(v3, v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v10 = (void *)*MEMORY[0x1E0C952C0];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_ERROR))
        goto LABEL_7;
      v22 = v10;
      objc_msgSend_operationID(WeakRetained, v28, v29);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v6, v30, v31);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v24;
      v38 = 2112;
      v39 = v27;
      _os_log_error_impl(&dword_1BE990000, v22, OS_LOG_TYPE_ERROR, "Stopping after error fetching deltas for operation %{public}@: %@", (uint8_t *)&v36, 0x16u);
    }
    else
    {
      v15 = objc_msgSend_count(*(void **)(a1 + 32), v8, v9);
      v16 = (void *)*MEMORY[0x1E0C952F8];
      if (v15)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], v16);
        v17 = (void *)*MEMORY[0x1E0C952C0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
        {
          v32 = v17;
          objc_msgSend_operationID(WeakRetained, v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543362;
          v37 = v35;
          _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Need to continue fetching deltas for operation %{public}@", (uint8_t *)&v36, 0xCu);

        }
        objc_msgSend_allKeys(*(void **)(a1 + 32), v18, v19);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_fetchMergeableDeltasRecursivelyForValueIDs_continuationTokens_completionHandler_(WeakRetained, v20, (uint64_t)v14, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        goto LABEL_14;
      }
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v16);
      v21 = (void *)*MEMORY[0x1E0C952C0];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
LABEL_7:
        v13 = *(_QWORD *)(a1 + 40);
        objc_msgSend_error(v6, v11, v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v14);
LABEL_14:

        goto LABEL_15;
      }
      v22 = v21;
      v23 = (objc_class *)objc_opt_class();
      NSStringFromClass(v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(WeakRetained, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543874;
      v37 = v24;
      v38 = 2048;
      v39 = WeakRetained;
      v40 = 2114;
      v41 = v27;
      _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Fetch deltas URL request completed for operation <%{public}@: %p; %{public}@>",
        (uint8_t *)&v36,
        0x20u);
    }

    goto LABEL_7;
  }
LABEL_15:

}

void sub_1BEAD77D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  objc_destroyWeak((id *)(v30 - 128));
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1BEAD7820(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;

  v2 = a2;
  if ((objc_msgSend_needsDecryption(v2, v3, v4) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    objc_msgSend_asset(v2, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v8 != 0;

  }
  return v7;
}

void sub_1BEAD7870(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  CKDKeyEnvelopeContext *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  id v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v8 = *(id *)(a1 + 40);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v45, v49, 16);
      if (v10)
      {
        v11 = v10;
        v41 = v6;
        v43 = a1;
        v12 = *(_QWORD *)v46;
        v42 = *MEMORY[0x1E0C94B20];
        do
        {
          v13 = v8;
          v14 = 0;
          do
          {
            if (*(_QWORD *)v46 != v12)
              objc_enumerationMutation(v13);
            v15 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v14);
            v16 = objc_alloc_init(CKDKeyEnvelopeContext);
            v19 = objc_msgSend_pcs(v5, v17, v18);
            objc_msgSend_setShareProtection_(v16, v20, v19);
            objc_msgSend_container(WeakRetained, v21, v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_pcsManager(v23, v24, v25);
            v26 = objc_claimAutoreleasedReturnValue();
            objc_msgSend_setPcsManager_(v16, v27, v26);

            v44 = 0;
            LOBYTE(v26) = objc_msgSend_decryptWithContext_error_(v15, v28, (uint64_t)v16, &v44);
            v29 = v44;
            if ((v26 & 1) == 0)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v30 = *MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v51 = v29;
                _os_log_error_impl(&dword_1BE990000, v30, OS_LOG_TYPE_ERROR, "Failed to decrypt mergeable delta with error: %@", buf, 0xCu);
              }
              objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v31, v42, 5004, v29, CFSTR("Failed to decrypt mergeable delta"));
              v32 = objc_claimAutoreleasedReturnValue();
              v33 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8);
              v34 = *(void **)(v33 + 40);
              *(_QWORD *)(v33 + 40) = v32;

            }
            ++v14;
          }
          while (v11 != v14);
          v8 = v13;
          v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v35, (uint64_t)&v45, v49, 16);
        }
        while (v11);
        a1 = v43;
        v6 = v41;
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v36 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v40 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v51 = v40;
        _os_log_error_impl(&dword_1BE990000, v36, OS_LOG_TYPE_ERROR, "Failed to fetch PCS for value: %@", buf, 0xCu);
      }
      objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v37, *MEMORY[0x1E0C94B20], 5001, v6, CFSTR("Failed to fetch PCS to decrypt mergeable delta"));
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = *(id *)(v39 + 40);
      *(_QWORD *)(v39 + 40) = v38;
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

}

void sub_1BEAD7BEC(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v4);

  objc_msgSend_deltasFetchedBlock(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend_deltasFetchedBlock(*(void **)(a1 + 32), v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
      v11 = 0;
    else
      v11 = *(_QWORD *)(a1 + 48);
    v12 = (id)v10;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v10, *(_QWORD *)(a1 + 40), v11);

  }
}

void sub_1BEAD7D0C()
{
  CKDClientInfo *v0;
  const char *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;

  v0 = [CKDClientInfo alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2);
  v4 = (void *)qword_1ED702828;
  qword_1ED702828 = inited;

}

void sub_1BEAD7F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEAD7F58(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__refreshHostname(WeakRetained, v1, v2);

}

void sub_1BEAD80A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKDPRequestOperationHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  CKDPLocale *v30;
  uint64_t result;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  const char *v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  const char *v65;
  void *v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 240;
        goto LABEL_106;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_106;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_106;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
        goto LABEL_106;
      case 5u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 260) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_131:
        v79 = 8;
        goto LABEL_156;
      case 6u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 260) |= 4u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_135:
        v79 = 24;
        goto LABEL_156;
      case 7u:
        v30 = (CKDPLocale *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 120), v30);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
          goto LABEL_173;
        goto LABEL_126;
      case 8u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 152;
        goto LABEL_106;
      case 9u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 112;
        goto LABEL_106;
      case 0xAu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 128;
        goto LABEL_106;
      case 0xBu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 136;
        goto LABEL_106;
      case 0x10u:
        v32 = 0;
        v33 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 260) |= 2u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v21 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_139:
        v79 = 16;
        goto LABEL_156;
      case 0x11u:
        v30 = objc_alloc_init(CKDPLocale);
        objc_storeStrong((id *)(a1 + 176), v30);
        if (!PBReaderPlaceMark() || !sub_1BEB96488((uint64_t)v30, a2))
          goto LABEL_173;
        goto LABEL_126;
      case 0x12u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 184;
        goto LABEL_106;
      case 0x13u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 260) |= 0x10u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_143;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_143:
        v80 = 64;
        goto LABEL_170;
      case 0x14u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_106;
      case 0x15u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 96;
        goto LABEL_106;
      case 0x16u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 104;
        goto LABEL_106;
      case 0x17u:
        v43 = 0;
        v44 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 260) |= 0x80u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v39 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_147:
        v80 = 224;
        goto LABEL_170;
      case 0x18u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 232;
        goto LABEL_106;
      case 0x19u:
        v48 = 0;
        v49 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 260) |= 0x20u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v39 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_151:
        v80 = 168;
        goto LABEL_170;
      case 0x1Au:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 192;
        goto LABEL_106;
      case 0x1Bu:
        v53 = 0;
        v54 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 260) |= 8u;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v21 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_155:
        v79 = 32;
LABEL_156:
        *(_QWORD *)(a1 + v79) = v21;
        goto LABEL_171;
      case 0x1Cu:
        PBReaderReadData();
        v30 = (CKDPLocale *)objc_claimAutoreleasedReturnValue();
        if (v30)
          objc_msgSend_addServiceIdentityKeyIDs_((void *)a1, v58, (uint64_t)v30);
        goto LABEL_127;
      case 0x1Du:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_WORD *)(a1 + 260) |= 0x100u;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v61 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v61 = 0;
LABEL_160:
        v81 = v61 != 0;
        v82 = 256;
        goto LABEL_165;
      case 0x1Eu:
        v30 = objc_alloc_init(CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptions);
        objc_storeStrong((id *)(a1 + 80), v30);
        if (!PBReaderPlaceMark()
          || (CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsReadFrom((uint64_t)v30, a2) & 1) == 0)
        {
          goto LABEL_173;
        }
        goto LABEL_126;
      case 0x1Fu:
        PBReaderReadString();
        v30 = (CKDPLocale *)objc_claimAutoreleasedReturnValue();
        if (v30)
          objc_msgSend_addActiveThrottlingLabel_((void *)a1, v65, (uint64_t)v30);
        goto LABEL_127;
      case 0x20u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 160;
        goto LABEL_106;
      case 0x21u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 144;
LABEL_106:
        v66 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_171;
      case 0x22u:
        v67 = 0;
        v68 = 0;
        v69 = 0;
        *(_WORD *)(a1 + 260) |= 0x200u;
        while (2)
        {
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
            *(_QWORD *)(a2 + v70) = v71 + 1;
            v69 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v14 = v68++ >= 9;
              if (v14)
              {
                v69 = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v69 = 0;
LABEL_164:
        v81 = v69 != 0;
        v82 = 257;
LABEL_165:
        *(_BYTE *)(a1 + v82) = v81;
        goto LABEL_171;
      case 0x23u:
        v73 = 0;
        v74 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 260) |= 0x40u;
        while (2)
        {
          v75 = *v3;
          v76 = *(_QWORD *)(a2 + v75);
          if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
            *(_QWORD *)(a2 + v75) = v76 + 1;
            v39 |= (unint64_t)(v77 & 0x7F) << v73;
            if (v77 < 0)
            {
              v73 += 7;
              v14 = v74++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_169:
        v80 = 200;
LABEL_170:
        *(_DWORD *)(a1 + v80) = v39;
        goto LABEL_171;
      case 0x24u:
        v30 = objc_alloc_init(CKDPRequestOperationHeaderSupplementalZoneInfo);
        objc_msgSend_addSupplementalZoneInfos_((void *)a1, v78, (uint64_t)v30);
        if (!PBReaderPlaceMark()
          || !CKDPRequestOperationHeaderSupplementalZoneInfoReadFrom((uint64_t)v30, a2))
        {
          goto LABEL_173;
        }
        goto LABEL_126;
      case 0x25u:
        v30 = objc_alloc_init(CKDPRequestOperationHeaderZoneAndShareUsageInfo);
        objc_storeStrong((id *)(a1 + 248), v30);
        if (PBReaderPlaceMark() && CKDPRequestOperationHeaderZoneAndShareUsageInfoReadFrom(v30, a2))
        {
LABEL_126:
          PBReaderRecallMark();
LABEL_127:

LABEL_171:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_173:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_171;
    }
  }
}

BOOL sub_1BEADBFC8(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPAssetUploadTokenRetrieveRequestAssetField *v18;
  const char *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequestAssetField);
        objc_msgSend_addAssetFields_(a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || !sub_1BEB37558((id *)&v18->super.super.isa, a2))
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = (CKDPAssetUploadTokenRetrieveRequestAssetField *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
          goto LABEL_34;
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_31:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPRecordType);
    objc_storeStrong(a1 + 3, v18);
    if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_34;
    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAE0370()
{
  void *v0;

  v0 = (void *)qword_1ED700968;
  qword_1ED700968 = (uint64_t)&unk_1E78AF898;

}

BOOL sub_1BEAE04BC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAE0CF8(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  CKDPRecord *v23;
  const char *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(CKDPRecord);
        objc_msgSend_addRecordVersions_(a1, v24, (uint64_t)v23);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        a1[20] |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        a1[16] = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAE1564()
{
  CKDPCSNotifier *v0;
  void *v1;

  v0 = objc_alloc_init(CKDPCSNotifier);
  v1 = (void *)qword_1ED702840;
  qword_1ED702840 = (uint64_t)v0;

}

void sub_1BEAE171C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE1854(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE1AE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v12 = 138543362;
    v13 = a3;
    _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Received identities changed notification %{public}@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend_pcsUpdateSource(v4, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend_pcsUpdateSource(v4, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    dispatch_source_merge_data(v11, 1uLL);

  }
  if (*MEMORY[0x1E0C95280])
    objc_msgSend_clearSharedMockIdentitySetsCache(CKDPCSIdentityManager, v9, v10);

}

void sub_1BEAE1C18(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  BOOL v51;
  void *v52;
  _BOOL4 v53;
  void *v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  uint64_t v67;
  const void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  const void *v78;
  CFTypeRef v79;
  BOOL v80;
  NSObject *v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  const void *v92;
  NSObject *v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  NSObject *v111;
  const char *v112;
  uint64_t v113;
  id v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t i;
  uint64_t v119;
  void *v120;
  void *v121;
  const char *v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  const char *v126;
  const char *v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  NSObject *v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  _BOOL4 v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  NSObject *v142;
  const char *v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  const __CFString *v150;
  NSObject *v151;
  NSObject *obj;
  uint64_t v153;
  int v154;
  uint64_t v155;
  __CFString *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  id v162;
  id v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  CFTypeRef cf;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  id v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  os_activity_scope_state_s state;
  uint8_t v183[128];
  uint8_t buf[4];
  uint64_t v185;
  __int16 v186;
  const void *v187;
  _BYTE v188[128];
  _BYTE v189[128];
  _BYTE v190[128];
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v151 = _os_activity_create(&dword_1BE990000, "CKDPCSNotifier/PCSIdentitiesChanged", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v151, &state);
  v157 = WeakRetained;
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95280])
      v154 = objc_msgSend_checkAndClearTestOverrides_(*(void **)(a1 + 32), v3, (uint64_t)CFSTR("ClearContainerOnPCSUpdateSource"));
    else
      v154 = 0;
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "PCS identities changed. Clearing PCS identity caches and in-memory PCS objects", buf, 2u);
    }
    objc_msgSend_missingIdentitiesContextMap(WeakRetained, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v7);
    v178 = 0u;
    v179 = 0u;
    v180 = 0u;
    v181 = 0u;
    objc_msgSend_missingIdentitiesContextMap(WeakRetained, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allKeys(v10, v11, v12);
    obj = objc_claimAutoreleasedReturnValue();

    v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v178, v190, 16);
    if (v155)
    {
      v153 = *(_QWORD *)v179;
      v16 = *MEMORY[0x1E0C95388];
      v17 = v7;
LABEL_11:
      v159 = 0;
      while (1)
      {
        if (*(_QWORD *)v179 != v153)
          objc_enumerationMutation(obj);
        v158 = *(_QWORD *)(*((_QWORD *)&v178 + 1) + 8 * v159);
        objc_msgSend_missingIdentitiesContextMap(v157, v14, v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v18, v19, v158);
        v161 = (void *)objc_claimAutoreleasedReturnValue();

        if (v154)
          objc_msgSend_setContainer_(v161, v20, 0);
        objc_msgSend_container(v161, v20, v21);
        v160 = objc_claimAutoreleasedReturnValue();
        if (v160)
        {
          objc_msgSend_pcsManager((void *)v160, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_identityManager(v24, v25, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_identitiesChanged(v27, v28, v29);

          objc_msgSend_pcsCache((void *)v160, v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_clearPCSMemoryCaches(v32, v33, v34);

          objc_msgSend_pcsManager((void *)v160, v35, v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBoundaryKeyData_(v37, v38, 0);

        }
        v162 = objc_alloc_init(MEMORY[0x1E0C99E20]);
        v163 = objc_alloc_init(MEMORY[0x1E0C99E20]);
        v41 = (void *)objc_msgSend_copyOfMissingIdentityPublicKeys(v161, v39, v40);
        if (objc_msgSend_count(v41, v42, v43))
        {

        }
        else
        {
          v48 = (void *)objc_msgSend_copyOfServicesWithMissingIdentities(v161, v44, v45);
          v51 = objc_msgSend_count(v48, v49, v50) == 0;

          if (v51)
            goto LABEL_65;
        }
        objc_msgSend_account(v161, v46, v47);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = v52 == 0;

        v54 = (void *)*MEMORY[0x1E0C952F8];
        if (v53)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], v54);
          v133 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BE990000, v133, OS_LOG_TYPE_ERROR, "No account found on missing identities context.", buf, 2u);
          }
          goto LABEL_90;
        }
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], v54);
        v55 = *MEMORY[0x1E0C952D8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1BE990000, v55, OS_LOG_TYPE_DEBUG, "We've come across missing identities before. Checking to see if a formerly missing key has arrived.", buf, 2u);
        }
        objc_msgSend_account(v161, v56, v57);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = (void *)objc_msgSend_copyOfServicesWithMissingIdentities(v161, v59, v60);
        objc_msgSend_anyObject(v61, v62, v63);
        v64 = objc_claimAutoreleasedReturnValue();
        v66 = (void *)v64;
        if (v64)
          v67 = v64;
        else
          v67 = *MEMORY[0x1E0D82AC0];
        v177 = 0;
        v68 = (const void *)objc_msgSend_createFullKeychainIdentitySetForAccount_serviceName_error_(CKDPCSIdentityManager, v65, (uint64_t)v58, v67, &v177);
        v156 = (__CFString *)v177;

        if (!v68)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v149 = *MEMORY[0x1E0C952D8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
          {
            v150 = CFSTR("Unknown error");
            if (v156)
              v150 = v156;
            *(_DWORD *)buf = 138412290;
            v185 = (uint64_t)v150;
            _os_log_error_impl(&dword_1BE990000, v149, OS_LOG_TYPE_ERROR, "Couldn't get a full identity set to verify against: %@", buf, 0xCu);
          }

          goto LABEL_100;
        }
        v175 = 0u;
        v176 = 0u;
        v173 = 0u;
        v174 = 0u;
        v71 = (void *)objc_msgSend_copyOfServicesWithMissingIdentities(v161, v69, v70);
        v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v72, (uint64_t)&v173, v189, 16);
        if (v73)
        {
          v74 = *(_QWORD *)v174;
          do
          {
            v75 = 0;
            do
            {
              if (*(_QWORD *)v174 != v74)
                objc_enumerationMutation(v71);
              v76 = *(_QWORD *)(*((_QWORD *)&v173 + 1) + 8 * v75);
              cf = 0;
              v78 = (const void *)PCSIdentitySetCopyCurrentIdentityWithError();
              v79 = cf;
              if (v78)
                v80 = cf == 0;
              else
                v80 = 0;
              if (v80)
              {
                if (*MEMORY[0x1E0C95300] != -1)
                  dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                v81 = *MEMORY[0x1E0C952D8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543362;
                  v185 = v76;
                  _os_log_debug_impl(&dword_1BE990000, v81, OS_LOG_TYPE_DEBUG, "Service %{public}@ now has a current identity", buf, 0xCu);
                }
                v7 = v17;
                objc_msgSend_addObject_(v162, v82, v76);
                v79 = cf;
              }
              if (v79)
              {
                CFRelease(v79);
                cf = 0;
              }
              if (v78)
                CFRelease(v78);
              ++v75;
            }
            while (v73 != v75);
            v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v77, (uint64_t)&v173, v189, 16);
          }
          while (v73);
        }

        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v85 = (void *)objc_msgSend_copyOfMissingIdentityPublicKeys(v161, v83, v84);
        v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(v85, v86, (uint64_t)&v168, v188, 16);
        if (v87)
        {
          v88 = *(_QWORD *)v169;
          do
          {
            v89 = 0;
            do
            {
              if (*(_QWORD *)v169 != v88)
                objc_enumerationMutation(v85);
              v90 = *(_QWORD *)(*((_QWORD *)&v168 + 1) + 8 * v89);
              v92 = (const void *)PCSIdentitySetCopyIdentity();
              if (v92)
              {
                if (*MEMORY[0x1E0C95300] != -1)
                  dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                v93 = *MEMORY[0x1E0C952D8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543618;
                  v185 = v90;
                  v186 = 2112;
                  v187 = v92;
                  _os_log_debug_impl(&dword_1BE990000, v93, OS_LOG_TYPE_DEBUG, "Formerly missing public key %{public}@ was found with identity %@.", buf, 0x16u);
                }
                v7 = v17;
                objc_msgSend_addObject_(v163, v94, v90);
                CFRelease(v92);
              }
              ++v89;
            }
            while (v87 != v89);
            v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(v85, v91, (uint64_t)&v168, v188, 16);
          }
          while (v87);
        }

        CFRelease(v68);
LABEL_65:
        if (objc_msgSend_count(v163, v46, v47) || objc_msgSend_count(v162, v95, v96))
        {
          objc_msgSend_pcsManager((void *)v160, v95, v96);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_undecryptablePCSDataHashes(v97, v98, v99);
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removeAllObjects(v100, v101, v102);

          objc_msgSend_missingIdentityPublicKeys(v161, v103, v104);
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_minusSet_(v105, v106, (uint64_t)v163);

          objc_msgSend_servicesWithMissingIdentities(v161, v107, v108);
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_minusSet_(v109, v110, (uint64_t)v162);

          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v111 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1BE990000, v111, OS_LOG_TYPE_DEBUG, "One or more previously missing PCS identities have arrived. Posting a notification to all clients", buf, 2u);
          }
          objc_msgSend_invalidateCachedAccountInfo(MEMORY[0x1E0C94B88], v112, v113);
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v114 = v162;
          v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v114, v115, (uint64_t)&v164, v183, 16);
          if (v116)
          {
            v117 = *(_QWORD *)v165;
            do
            {
              for (i = 0; i != v116; ++i)
              {
                if (*(_QWORD *)v165 != v117)
                  objc_enumerationMutation(v114);
                v119 = *(_QWORD *)(*((_QWORD *)&v164 + 1) + 8 * i);
                v120 = (void *)MEMORY[0x1E0CB3940];
                CKTestNotificationPrefix();
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(v120, v122, (uint64_t)CFSTR("%@%@-%@"), v121, v16, v119);
                v123 = (void *)objc_claimAutoreleasedReturnValue();

                v126 = (const char *)objc_msgSend_UTF8String(v123, v124, v125);
                notify_post(v126);

              }
              v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v114, v127, (uint64_t)&v164, v183, 16);
            }
            while (v116);
          }

        }
        v128 = (void *)objc_msgSend_copyOfServicesWithMissingIdentities(v161, v95, v96);
        if (objc_msgSend_count(v128, v129, v130))
        {

        }
        else
        {
          v134 = (void *)objc_msgSend_copyOfMissingIdentityPublicKeys(v161, v131, v132);
          v137 = (v160 | objc_msgSend_count(v134, v135, v136)) == 0;

          if (v137)
          {
            objc_msgSend_missingIdentitiesContextMap(v157, v138, v139);
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_removeObjectForKey_(v140, v141, v158);

            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v142 = *MEMORY[0x1E0C952B0];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v185 = v158;
              _os_log_debug_impl(&dword_1BE990000, v142, OS_LOG_TYPE_DEBUG, "Removed empty context from manager context map for UUID: %@", buf, 0xCu);
            }
          }
        }
LABEL_90:

        if (++v159 == v155)
        {
          v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v178, v190, 16);
          if (v155)
            goto LABEL_11;
          break;
        }
      }
    }

    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    obj = (id)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_missingIdentitiesContextMap(v157, v143, v144);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      v148 = objc_msgSend_count(v145, v146, v147);
      *(_DWORD *)buf = 134217984;
      v185 = v148;
      _os_log_debug_impl(&dword_1BE990000, obj, OS_LOG_TYPE_DEBUG, "Number of remaining missing identity contexts: %lu", buf, 0xCu);

    }
LABEL_100:

    objc_sync_exit(v7);
  }
  os_activity_scope_leave(&state);

}

void sub_1BEAE280C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;
  void *v69;

  objc_sync_exit(v69);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BEAE2AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BEAE2D38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE2F78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE31CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE32D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE3450(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BEAE5C98(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAE6060(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

BOOL sub_1BEAE61C0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAE6B7C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAE6E88(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEAE7590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
  id *v41;
  id *v42;
  id *v43;

  objc_destroyWeak(v43);
  objc_destroyWeak(v42);
  objc_destroyWeak(v41);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a41);
  _Unwind_Resume(a1);
}

void sub_1BEAE75D8(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_subscriptionsByServerID(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
    objc_msgSend__handleSubscriptionSaved_responseCode_(WeakRetained, v12, (uint64_t)v6, v5);
  else
    objc_msgSend__handleSubscriptionDeleted_responseCode_(WeakRetained, v12, (uint64_t)v6, v5);

}

void sub_1BEAE767C(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v6, (uint64_t)v5);

}

uint64_t sub_1BEAE7900(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

BOOL sub_1BEAE7D18(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MEMORY[0x1E0C94C98]);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAE8D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEAE8D80(uint64_t a1, uint64_t a2, void *a3)
{
  id *v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void (**v7)(void);

  v3 = (id *)(a1 + 32);
  v7 = a3;
  WeakRetained = objc_loadWeakRetained(v3);
  sub_1BEAE8DD0((uint64_t)WeakRetained, v5, v6);

  v7[2]();
}

void sub_1BEAE8DD0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend_assertLocked(*(void **)(a1 + 80), a2, a3);
    if (!*(_QWORD *)(a1 + 56))
    {
      if (*(_QWORD *)(a1 + 64))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v4 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v6 = *(id *)(a1 + 64);
          v7 = v4;
          objc_msgSend_ckShortDescription(v6, v8, v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = 138412290;
          v12 = v10;
          _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Discarding container: %@", (uint8_t *)&v11, 0xCu);

        }
        v5 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = 0;

      }
    }
  }
}

void sub_1BEAE9234(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE92CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE9368(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE940C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE94B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEAE96B4(uint64_t a1, const char *a2)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *aBlock;

  aBlock = 0;
  objc_msgSend_getArgument_atIndex_(*(void **)(a1 + 32), a2, (uint64_t)&aBlock, a2);
  _Block_signature(aBlock);
  v4 = aBlock;
  v5 = *(id *)(a1 + 40);
  objc_msgSend_beginContentAccess(v5, v6, v7);
  v10 = MEMORY[0x1E0C809B0];
  v11 = v4;
  v8 = v4;
  v12 = (id)__NSMakeSpecialForwardingCaptureBlock();
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 32), v9, (uint64_t)&v12, a2, v10, 3221225472, sub_1BEAE9798, &unk_1E78331B8);

}

uint64_t sub_1BEAE9798(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend_setTarget_(v4, v5, v3);
  objc_msgSend_invoke(v4, v6, v7);

  return objc_msgSend_endContentAccess(*(void **)(a1 + 40), v8, v9);
}

void sub_1BEAE9984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEAE999C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      ++*(_QWORD *)(v5 + 56);
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = v4;
        objc_storeStrong((id *)(v6 + 64), v4);
        v4 = v7;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

uint64_t sub_1BEAE9A8C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 56);
    if (v2)
      *(_QWORD *)(v1 + 56) = v2 - 1;
  }
  return result;
}

void sub_1BEAE9B1C(uint64_t a1, const char *a2, uint64_t a3)
{
  sub_1BEAE8DD0(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_1BEAE9BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEAE9BF4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 64);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v1 == 0;
  return result;
}

void sub_1BEAE9D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEAE9DB8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v1;
  return result;
}

uint64_t CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsHeaderInfo *v17;
  const char *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsHeaderInfo);
        objc_msgSend_addContentRequestHeaders_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark()
          || !CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsHeaderInfoReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAEA958()
{
  void *v0;

  v0 = (void *)qword_1ED700978;
  qword_1ED700978 = (uint64_t)&unk_1E78AF8C0;

}

BOOL sub_1BEAEAB58(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRequestedFields *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPRequestedFields *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          goto LABEL_30;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v17, a2))
          goto LABEL_35;
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v17 = *(CKDPRequestedFields **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;
        goto LABEL_31;
      case 4u:
        v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (sub_1BEC1BD10((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

uint64_t sub_1BEAEB454(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_destinationRecord(a2, (const char *)a2, a3);
}

id sub_1BEAEB45C(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v2 = (objc_class *)MEMORY[0x1E0C951F8];
  v3 = a2;
  v4 = [v2 alloc];
  objc_msgSend_destinationRecord(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_initWithObject1_object2_(v4, v11, (uint64_t)v10, v3);

  return v12;
}

uint64_t sub_1BEAEB788(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_moveCallbackWithMetadata_error_, *(_QWORD *)(a1 + 40));
}

void sub_1BEAEBBBC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  id v33;

  v33 = a2;
  if ((objc_msgSend_shouldOnlySaveAssetContent(*(void **)(a1 + 32), v3, v4) & 1) == 0)
  {
    v7 = objc_msgSend_recordsUploaded(v33, v5, v6);
    objc_msgSend_setRecordsUploaded_(v33, v8, v7 + 1);
  }
  objc_msgSend_moveChange(*(void **)(a1 + 40), v5, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_destinationRecord(v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_assetCount(v12, v13, v14);
  v18 = objc_msgSend_assetsUploaded(v33, v16, v17);
  objc_msgSend_setAssetsUploaded_(v33, v19, v18 + v15);

  objc_msgSend_moveChange(*(void **)(a1 + 40), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_destinationRecord(v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_assetDiskSize(v25, v26, v27);
  v31 = objc_msgSend_assetsUploadedFileSize(v33, v29, v30);
  objc_msgSend_setAssetsUploadedFileSize_(v33, v32, v31 + v28);

}

void sub_1BEAEBEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1BEAEBF14(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend_moveChangesByDestinationRecordID(v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v3, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_objectForKeyedSubscript_(v6, v10, (uint64_t)v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_1BEAEBF84(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  id WeakRetained;

  v10 = (id *)(a1 + 32);
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v14 = a3;
  v15 = a2;
  WeakRetained = objc_loadWeakRetained(v10);
  objc_msgSend_handlersByRecordID(WeakRetained, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)v14);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend__handleRecordMoved_handler_responseCode_recordForOplockFailure_destinationServerRecord_moveMarkerServerRecord_(WeakRetained, v21, (uint64_t)v14, v20, v15, v12, v13, v11);
}

void sub_1BEAEC578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 240), 8);
  _Block_object_dispose((const void *)(v45 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1BEAEC5CC(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v6 || v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v19 = *(void **)(a1 + 32);
      v20 = v9;
      objc_msgSend_recordID(v19, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v25 = v23;
      _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Failed to decrypt destination record %@", buf, 0xCu);

    }
    v12 = (void *)MEMORY[0x1E0C94FF8];
    v13 = *MEMORY[0x1E0C94B20];
    objc_msgSend_recordID(*(void **)(a1 + 32), v10, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v12, v15, v13, 5004, CFSTR("Couldn't decrypt destination record returned from the server in response to our move of record %@"), v14);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEAEC778(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v6 || v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v19 = *(void **)(a1 + 32);
      v20 = v9;
      objc_msgSend_recordID(v19, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v25 = v23;
      _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Failed to decrypt move marker record %@", buf, 0xCu);

    }
    v12 = (void *)MEMORY[0x1E0C94FF8];
    v13 = *MEMORY[0x1E0C94B20];
    objc_msgSend_recordID(*(void **)(a1 + 32), v10, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v12, v15, v13, 5004, CFSTR("Couldn't decrypt move marker record returned from the server in response to our move of record %@"), v14);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEAEC924(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40)
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
  {
    objc_msgSend_setState_(*(void **)(a1 + 32), a2, 12);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    if (!v5)
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    objc_msgSend_setError_(*(void **)(a1 + 32), v4, v5);
  }
  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    objc_msgSend__reallyHandleRecordMoved_handler_responseCode_recordForOplockFailure_destinationServerRecord_moveMarkerServerRecord_(*(void **)(a1 + 40), v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40));
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v9);

}

uint64_t sub_1BEAEDCA8(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  objc_msgSend_setError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_code(v5, v6, v7);

  if (v8 == 2024)
    v10 = 11;
  else
    v10 = 12;
  return objc_msgSend_setState_(*(void **)(a1 + 32), v9, v10);
}

void sub_1BEAEDD04(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  uint8_t buf[4];
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = (void *)*MEMORY[0x1E0C952F8];
  v9 = *MEMORY[0x1E0C95300];
  if (!v5 || v6)
  {
    if (v9 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v25 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v39 = *(void **)(a1 + 32);
      v40 = v25;
      objc_msgSend_recordID(v39, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v45 = v43;
      _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Failed to decrypt the server record %@. Returning as is.", buf, 0xCu);

      if (!v7)
        goto LABEL_13;
    }
    else if (!v7)
    {
LABEL_13:
      v28 = (void *)MEMORY[0x1E0C94FF8];
      v29 = *MEMORY[0x1E0C94B20];
      v30 = *(_QWORD *)(a1 + 40);
      objc_msgSend_recordID(*(void **)(a1 + 32), v26, v27);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_userInfo_format_(v28, v31, v29, 5004, v30, CFSTR("Failed to decrypt the server record %@ returned from oplock failure."), v19);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v26, (uint64_t)v7, *MEMORY[0x1E0CB3388]);
    goto LABEL_13;
  }
  if (v9 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v8);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v35 = v10;
    objc_msgSend_recordID(v5, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v45 = v38;
    _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, "Successfully decrypted record %@", buf, 0xCu);

  }
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v11, (uint64_t)v5, *MEMORY[0x1E0C949B8]);
  v12 = (void *)MEMORY[0x1E0C94FF8];
  v13 = *MEMORY[0x1E0C94B20];
  v14 = sub_1BEB10D5C(*(void **)(a1 + 48));
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 40);
  objc_msgSend_error(*(void **)(a1 + 48), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorDescription(v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_format_(v12, v23, v13, v14, v16, CFSTR("Error moving record %@ on server: %@"), v15, v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_14:
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 64), v32, v33);
  v34 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v34);

}

uint64_t sub_1BEAEE294(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1BEAEE720(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPRequestedFields *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_41;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 24) = v21;
      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v27 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_47:
        *(_QWORD *)(a1 + 8) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEAEF048(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_25;
        case 4u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_25:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAEF8B0(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  const char *v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend_addBundleID_(a1, v17, (uint64_t)v18);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL CKDPRequestOperationReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPShareAcceptRequest *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 259)
      {
        if ((int)v17 > 502)
        {
          if ((int)v17 <= 799)
          {
            switch((_DWORD)v17)
            {
              case 0x1F7:
                v18 = objc_alloc_init(CKDPShareAcceptRequest);
                objc_storeStrong(a1 + 27, v18);
                if (!PBReaderPlaceMark() || (sub_1BEB0BF5C((uint64_t)v18, a2) & 1) == 0)
                {
LABEL_190:

                  return 0;
                }
                break;
              case 0x1F8:
                v18 = objc_alloc_init(CKDPShareDeclineRequest);
                objc_storeStrong(a1 + 29, v18);
                if (!PBReaderPlaceMark() || !sub_1BEAC37CC((uint64_t)v18, a2))
                  goto LABEL_190;
                break;
              case 0x201:
                v18 = objc_alloc_init(CKDPShareVettingInitiateRequest);
                objc_storeStrong(a1 + 30, v18);
                if (!PBReaderPlaceMark() || !sub_1BEC7D358((uint64_t)v18, a2))
                  goto LABEL_190;
                break;
              default:
                goto LABEL_74;
            }
          }
          else
          {
            if ((int)v17 <= 899)
            {
              switch((int)v17)
              {
                case 800:
                  v18 = objc_alloc_init(CKDPTokenRegistrationRequest);
                  objc_storeStrong(a1 + 34, v18);
                  if (!PBReaderPlaceMark() || (sub_1BEAF78A0((uint64_t)v18, a2) & 1) == 0)
                    goto LABEL_190;
                  goto LABEL_186;
                case 801:
                  v18 = objc_alloc_init(CKDPTokenUnregistrationRequest);
                  objc_storeStrong(a1 + 35, v18);
                  if (!PBReaderPlaceMark() || (sub_1BEBBFC78((uint64_t)v18, a2) & 1) == 0)
                    goto LABEL_190;
                  goto LABEL_186;
                case 802:
                  v18 = objc_alloc_init(CKDPSetBadgeCountRequest);
                  objc_storeStrong(a1 + 26, v18);
                  if (!PBReaderPlaceMark() || (sub_1BEA5BC08((uint64_t)v18, a2) & 1) == 0)
                    goto LABEL_190;
                  goto LABEL_186;
                case 803:
                  v18 = objc_alloc_init(CKDPNotificationSyncRequest);
                  objc_storeStrong(a1 + 16, v18);
                  if (!PBReaderPlaceMark() || (sub_1BEB055D8((uint64_t)v18, a2) & 1) == 0)
                    goto LABEL_190;
                  goto LABEL_186;
                case 804:
                  v18 = objc_alloc_init(CKDPNotificationMarkReadRequest);
                  objc_storeStrong(a1 + 15, v18);
                  if (!PBReaderPlaceMark() || (sub_1BEC4051C((uint64_t)v18, a2) & 1) == 0)
                    goto LABEL_190;
                  goto LABEL_186;
                default:
                  goto LABEL_74;
              }
            }
            switch((_DWORD)v17)
            {
              case 0x384:
                v18 = objc_alloc_init(CKDPArchiveRecordsRequest);
                objc_storeStrong(a1 + 3, v18);
                if (!PBReaderPlaceMark() || (sub_1BEA3B584(v18, a2) & 1) == 0)
                  goto LABEL_190;
                break;
              case 0x385:
                v18 = objc_alloc_init(CKDPMarkAssetBrokenRequest);
                objc_storeStrong(a1 + 10, v18);
                if (!PBReaderPlaceMark() || (sub_1BEBADFC8((uint64_t)v18, a2) & 1) == 0)
                  goto LABEL_190;
                break;
              case 0x44D:
                v18 = objc_alloc_init(CKDPCodeFunctionInvokeRequest);
                objc_storeStrong(a1 + 8, v18);
                if (!PBReaderPlaceMark() || !sub_1BEA9520C((id *)&v18->super.super.super.isa, a2))
                  goto LABEL_190;
                break;
              default:
LABEL_74:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  return 0;
                continue;
            }
          }
        }
        else if ((int)v17 > 300)
        {
          switch((int)v17)
          {
            case 400:
              v18 = objc_alloc_init(CKDPUserRetrieveRequest);
              objc_storeStrong(a1 + 43, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_190;
              break;
            case 401:
              v18 = objc_alloc_init(CKDPUserQueryRequest);
              objc_storeStrong(a1 + 42, v18);
              if (!PBReaderPlaceMark() || (sub_1BEAC42B4((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_190;
              break;
            case 402:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsRetrieveRequest);
              objc_storeStrong(a1 + 40, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_190;
              break;
            case 403:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsUpdateRequest);
              objc_storeStrong(a1 + 41, v18);
              if (!PBReaderPlaceMark() || !sub_1BEB66244((uint64_t)v18, a2))
                goto LABEL_190;
              break;
            case 404:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsResetRequest);
              objc_storeStrong(a1 + 39, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_190;
              break;
            case 405:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsBatchLookupRequest);
              objc_storeStrong(a1 + 38, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_190;
              break;
            default:
              if ((_DWORD)v17 == 301)
              {
                v18 = objc_alloc_init(CKDPSubscriptionRetrieveRequest);
                objc_storeStrong(a1 + 33, v18);
                if (!PBReaderPlaceMark() || (sub_1BEB58B78((uint64_t)v18, a2) & 1) == 0)
                  goto LABEL_190;
              }
              else
              {
                if ((_DWORD)v17 != 302)
                  goto LABEL_74;
                v18 = objc_alloc_init(CKDPSubscriptionDeleteRequest);
                objc_storeStrong(a1 + 32, v18);
                if (!PBReaderPlaceMark() || (sub_1BEBFF580((uint64_t)v18, a2) & 1) == 0)
                  goto LABEL_190;
              }
              break;
          }
        }
        else if ((int)v17 > 270)
        {
          if ((_DWORD)v17 == 271)
          {
            v18 = objc_alloc_init(CKDPAnonymousShareRemoveRequest);
            objc_storeStrong(a1 + 2, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA51710((uint64_t)v18, a2))
              goto LABEL_190;
          }
          else
          {
            if ((_DWORD)v17 != 300)
              goto LABEL_74;
            v18 = objc_alloc_init(CKDPSubscriptionCreateRequest);
            objc_storeStrong(a1 + 31, v18);
            if (!PBReaderPlaceMark() || (sub_1BEB2BB68((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
          }
        }
        else if ((_DWORD)v17 == 260)
        {
          v18 = objc_alloc_init(CKDPUpdateMissingAssetStatusRequest);
          objc_storeStrong(a1 + 36, v18);
          if (!PBReaderPlaceMark() || (sub_1BEB59470((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_190;
        }
        else
        {
          if ((_DWORD)v17 != 270)
            goto LABEL_74;
          v18 = objc_alloc_init(CKDPAnonymousShareAddRequest);
          objc_storeStrong(a1 + 1, v18);
          if (!PBReaderPlaceMark() || !sub_1BEAE04BC((uint64_t)v18, a2))
            goto LABEL_190;
        }
      }
      else
      {
        switch((int)v17)
        {
          case 200:
            v18 = objc_alloc_init(CKDPZoneSaveRequest);
            objc_storeStrong(a1 + 48, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA8A040((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 201:
            v18 = objc_alloc_init(CKDPZoneRetrieveRequest);
            objc_storeStrong(a1 + 47, v18);
            if (!PBReaderPlaceMark() || (sub_1BEA4BC34((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 202:
            v18 = objc_alloc_init(CKDPZoneDeleteRequest);
            objc_storeStrong(a1 + 45, v18);
            if (!PBReaderPlaceMark() || (sub_1BEA95E28((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 203:
            v18 = objc_alloc_init(CKDPZoneRetrieveChangesRequest);
            objc_storeStrong(a1 + 46, v18);
            if (!PBReaderPlaceMark() || (sub_1BEC7226C((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 215:
          case 221:
          case 226:
          case 227:
          case 228:
          case 229:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 241:
          case 242:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
            goto LABEL_74;
          case 210:
            v18 = objc_alloc_init(CKDPRecordSaveRequest);
            objc_storeStrong(a1 + 24, v18);
            if (!PBReaderPlaceMark() || (sub_1BEAD4870((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 211:
            v18 = objc_alloc_init(CKDPRecordRetrieveRequest);
            objc_storeStrong(a1 + 22, v18);
            if (!PBReaderPlaceMark() || (sub_1BEA1C684((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 212:
            v18 = objc_alloc_init(CKDPRecordRetrieveVersionsRequest);
            objc_storeStrong(a1 + 23, v18);
            if (!PBReaderPlaceMark() || !sub_1BEAEAB58((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 213:
            v18 = objc_alloc_init(CKDPRecordRetrieveChangesRequest);
            objc_storeStrong(a1 + 21, v18);
            if (!PBReaderPlaceMark() || (sub_1BEC1C880((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 214:
            v18 = objc_alloc_init(CKDPRecordDeleteRequest);
            objc_storeStrong(a1 + 18, v18);
            if (!PBReaderPlaceMark() || (sub_1BEB17400((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 216:
            v18 = objc_alloc_init(CKDPRecordResolveTokenRequest);
            objc_storeStrong(a1 + 20, v18);
            if (!PBReaderPlaceMark() || (sub_1BEAA256C(v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 217:
            v18 = objc_alloc_init(CKDPFetchArchivedRecordsRequest);
            objc_storeStrong(a1 + 7, v18);
            if (!PBReaderPlaceMark() || (sub_1BEB35AB0((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 218:
            v18 = objc_alloc_init(CKDPRecordMoveRequest);
            objc_storeStrong(a1 + 19, v18);
            if (!PBReaderPlaceMark() || (sub_1BEAB09B4((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 219:
            v18 = objc_alloc_init(CKDPShareAccessRequest);
            objc_storeStrong(a1 + 28, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA93FC0((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 220:
            v18 = objc_alloc_init(CKDPQueryRetrieveRequest);
            objc_storeStrong(a1 + 17, v18);
            if (!PBReaderPlaceMark() || (sub_1BEBCBC2C((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 222:
            v18 = objc_alloc_init(CKDPMergeableDeltaSaveRequest);
            objc_storeStrong(a1 + 14, v18);
            if (!PBReaderPlaceMark() || !CKDPMergeableDeltaSaveRequestReadFrom((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 223:
            v18 = objc_alloc_init(CKDPMergeableDeltaMetadataRetrieveRequest);
            objc_storeStrong(a1 + 11, v18);
            if (!PBReaderPlaceMark() || !sub_1BEBA32F4((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 224:
            v18 = objc_alloc_init(CKDPMergeableDeltaReplaceRequest);
            objc_storeStrong(a1 + 12, v18);
            if (!PBReaderPlaceMark() || (sub_1BEAF5E28((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 225:
            v18 = objc_alloc_init(CKDPMergeableDeltaRetrieveRequest);
            objc_storeStrong(a1 + 13, v18);
            if (!PBReaderPlaceMark() || !sub_1BEB5C194((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 230:
            v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequest);
            objc_storeStrong(a1 + 4, v18);
            if (!PBReaderPlaceMark() || (sub_1BEBA6DC4((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          case 240:
            v18 = objc_alloc_init(CKDPDeleteContainerRequest);
            objc_storeStrong(a1 + 6, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 243:
            v18 = objc_alloc_init(CKDPUserAvailableQuotaRequest);
            objc_storeStrong(a1 + 37, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 244:
            v18 = objc_alloc_init(CKDPBundlesForContainerRequest);
            objc_storeStrong(a1 + 5, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
              goto LABEL_190;
            break;
          case 250:
            v18 = objc_alloc_init(CKDPWebAuthTokenRetrieveRequest);
            objc_storeStrong(a1 + 44, v18);
            if (!PBReaderPlaceMark() || (sub_1BEB07844((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_190;
            break;
          default:
            if ((_DWORD)v17 == 1)
            {
              v18 = objc_alloc_init(CKDPRequestOperationHeader);
              objc_storeStrong(a1 + 9, v18);
              if (!PBReaderPlaceMark() || (CKDPRequestOperationHeaderReadFrom((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_190;
            }
            else
            {
              if ((_DWORD)v17 != 2)
                goto LABEL_74;
              v18 = objc_alloc_init(CKDPOperation);
              objc_storeStrong(a1 + 25, v18);
              if (!PBReaderPlaceMark() || (CKDPOperationReadFrom((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_190;
            }
            break;
        }
      }
LABEL_186:
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAF4AAC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  CKDPAdopterFeatureSetAdopterFeature *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_35;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 16) = v19;
        goto LABEL_38;
      case 2u:
        v24 = objc_alloc_init(CKDPAdopterFeatureSetAdopterFeature);
        objc_msgSend_addZoneFeatures_((void *)a1, v25, (uint64_t)v24);
        goto LABEL_31;
      case 3u:
        v24 = objc_alloc_init(CKDPAdopterFeatureSetAdopterFeature);
        objc_msgSend_addRecordFeatures_((void *)a1, v26, (uint64_t)v24);
        goto LABEL_31;
      case 4u:
        v24 = objc_alloc_init(CKDPAdopterFeatureSetAdopterFeature);
        objc_msgSend_addFieldFeatures_((void *)a1, v27, (uint64_t)v24);
LABEL_31:
        if (PBReaderPlaceMark() && sub_1BEB05E58((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_38;
    }
  }
}

void sub_1BEAF590C()
{
  void *v0;

  v0 = (void *)qword_1ED700988;
  qword_1ED700988 = (uint64_t)&unk_1E78AF8E8;

}

uint64_t sub_1BEAF5E28(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPMergeableValueIdentifier *v17;
  uint64_t result;
  const char *v19;
  const char *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  BOOL v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && sub_1BEAE7D18((uint64_t)v17, a2))
          goto LABEL_28;
        goto LABEL_55;
      case 2u:
        PBReaderReadString();
        v17 = (CKDPMergeableValueIdentifier *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend_addDeltaIdentifiers_((void *)a1, v19, (uint64_t)v17);
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addDeltas_((void *)a1, v20, (uint64_t)v17);
        if (PBReaderPlaceMark() && (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_28:
          PBReaderRecallMark();
LABEL_29:

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_47:
        v33 = v23 != 0;
        v34 = 33;
        goto LABEL_52;
      case 5u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_51:
        v33 = v29 != 0;
        v34 = 32;
LABEL_52:
        *(_BYTE *)(a1 + v34) = v33;
        goto LABEL_53;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

BOOL sub_1BEAF6F7C(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPMergeableDeltaMetadata *v17;
  const char *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPMergeableDeltaMetadata);
        objc_msgSend_addMetadata_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEC5363C((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v19 = objc_claimAutoreleasedReturnValue();
    v17 = (CKDPMergeableDeltaMetadata *)a1[1];
    a1[1] = v19;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAF7778()
{
  void *v0;

  v0 = (void *)qword_1ED702848;
  qword_1ED702848 = (uint64_t)&unk_1E78AF910;

}

uint64_t sub_1BEAF78A0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPTokenRegistrationBody *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPTokenRegistrationBody);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1BEAFFBE8((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEAF851C()
{
  void *v0;

  v0 = (void *)qword_1ED702858;
  qword_1ED702858 = (uint64_t)&unk_1E78AF938;

}

void sub_1BEAF8808(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(id, _QWORD);

  objc_msgSend_participantVettingProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_participantVettingProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(_QWORD *)(a1 + 40));

  }
}

void sub_1BEAF9800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,id a26,char a27)
{
  id *v27;
  id *v28;
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(v27);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a26);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1BEAF985C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  const __CFString *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  void *v54;
  _QWORD v55[5];
  uint8_t buf[8];
  uint64_t v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend_code(v5, v7, v8) == 1)
  {
    v11 = 0;
    switch(a2)
    {
      case 0:
        break;
      case 1:
        v12 = (void *)MEMORY[0x1E0C94FF8];
        v13 = *MEMORY[0x1E0C94B20];
        v57 = *MEMORY[0x1E0C947A8];
        objc_msgSend_container(*(void **)(a1 + 32), v9, v10);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_account(v14, v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_primaryEmail(v17, v18, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v58[0] = v20;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v21, (uint64_t)v58, &v57, 1);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_participantID(WeakRetained, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_userInfo_format_(v12, v26, v13, 8007, v22, CFSTR("The address of participant %@ is already vetted to caller"), v25);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        break;
      case 2:
        if (_os_feature_enabled_impl())
          v32 = CFSTR("This address is vetted to a different Apple Account");
        else
          v32 = CFSTR("This address is vetted to a different Apple ID");
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v31, *MEMORY[0x1E0C94B20], 8008, v32);
        goto LABEL_17;
      case 3:
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v9, *MEMORY[0x1E0C94B20], 8006, CFSTR("This account has too many vetted email addresses and another cannot be added"));
        goto LABEL_17;
      case 5:
        v37 = (void *)*MEMORY[0x1E0C952F8];
        if (*(_BYTE *)(a1 + 56))
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], v37);
          v38 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1BE990000, v38, OS_LOG_TYPE_DEBUG, "Received LoginRequired from the server, but this was a second attempt, not trying to re-authenticate the user again", buf, 2u);
          }
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v39, *MEMORY[0x1E0C94B20], 2012, CFSTR("Unable to vet due to failed authentification even after successful authentication attempt, giving up"));
LABEL_17:
          v11 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], v37);
          v40 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Received LoginRequired from the server, trying to re-authenticate the user", buf, 2u);
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
          objc_msgSend_address(WeakRetained, v41, v42);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          CKLocalizedString();
          v43 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_container(*(void **)(a1 + 32), v44, v45, v54);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_account(v46, v47, v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_container(*(void **)(a1 + 32), v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v55[0] = MEMORY[0x1E0C809B0];
          v55[1] = 3221225472;
          v55[2] = sub_1BEAF9D00;
          v55[3] = &unk_1E7833420;
          v55[4] = WeakRetained;
          objc_msgSend_renewCloudKitAuthTokenWithReason_shouldForce_container_failedToken_completionHandler_(v49, v53, (uint64_t)v43, 1, v52, 0, v55);

          v11 = 0;
        }
        break;
      default:
        v33 = (void *)MEMORY[0x1E0C94FF8];
        v34 = *MEMORY[0x1E0C94B20];
        objc_msgSend_participantID(WeakRetained, v9, v10);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(v33, v36, v34, 8001, CFSTR("Error code %ld while trying to initiate vetting process for participant %@"), a2, v35);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        break;
    }
  }
  else
  {
    v27 = (void *)MEMORY[0x1E0C94FF8];
    v28 = *MEMORY[0x1E0C94B20];
    objc_msgSend_participantID(WeakRetained, v9, v10);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v27, v30, v28, 8010, CFSTR("Unknown error while trying to initiate vetting process for participant %@: %@"), v29, v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    objc_msgSend__handleVettingInitiationProgress_(WeakRetained, v9, (uint64_t)v11);

}

void sub_1BEAF9D00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  id v7;

  if (a3 || !(_DWORD)a2)
  {
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C94B20], 2012, a3, CFSTR("User session has expired and we were unable to re-authenticate user during vetting"));
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend__handleVettingInitiationProgress_(*(void **)(a1 + 32), v5, (uint64_t)v7);
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v6, (uint64_t)v7);

  }
  else
  {
    objc_msgSend__sendRequest_(*(void **)(a1 + 32), a2, 1, a4, 0);
  }
}

void sub_1BEAF9D90(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  id WeakRetained;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v2 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_error(v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(WeakRetained, v6, (uint64_t)v5);

  }
}

uint64_t sub_1BEAFA248(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAFA994(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_subscriptionID(a2, (const char *)a2, a3);
}

uint64_t sub_1BEAFB824(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_shareRecordID(a2, (const char *)a2, a3);
}

void sub_1BEAFC320(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;

  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1BEAFC3E8;
    v10[3] = &unk_1E7833558;
    v13 = *(id *)(a1 + 56);
    v6 = *(id *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 40);
    v11 = v6;
    v12 = v7;
    objc_msgSend_encryptShareTuples_withCompletionBlock_(v4, v8, v5, v10);

  }
  else
  {
    v9 = *(_QWORD *)(a1 + 56);
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, 0);
  }
}

void sub_1BEAFC3E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void (**v12)(_QWORD);
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend_count(v5, v7, v8))
  {
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = sub_1BEAFC504;
    v21 = &unk_1E78303B0;
    v22 = v5;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(void **)(a1 + 48);
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v12 = (void (**)(_QWORD))_Block_copy(&v18);
    objc_msgSend_zonePCSData(*(void **)(a1 + 40), v13, v14, v18, v19, v20, v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      v12[2](v12);
    else
      objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(*(void **)(a1 + 40), v16, (uint64_t)v12);

  }
  else
  {
    v17 = *(_QWORD *)(a1 + 48);
    if (v17)
      (*(void (**)(uint64_t, id))(v17 + 16))(v17, v6);
  }

}

void sub_1BEAFC504(uint64_t *a1)
{
  CKDAddAnonymousShareToSharedDBOperationInfo *v2;
  const char *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  _QWORD v8[5];
  id v9;

  v2 = objc_alloc_init(CKDAddAnonymousShareToSharedDBOperationInfo);
  objc_msgSend_setEncryptedAnonymousSharesToAdd_(v2, v3, a1[4]);
  v4 = (void *)a1[5];
  v5 = objc_opt_class();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEAFC5B8;
  v8[3] = &unk_1E7830A38;
  v6 = (void *)a1[7];
  v8[4] = a1[6];
  v9 = v6;
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v4, v7, v5, v2, v8);

}

void sub_1BEAFC5B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEAFC68C;
  v6[3] = &unk_1E7833530;
  v4 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v4;
  objc_copyWeak(&v8, &location);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&location);
}

void sub_1BEAFC670(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEAFC68C(void **a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  objc_msgSend_synchronizeQueue(a1[4], a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEAFC734;
  v5[3] = &unk_1E7830220;
  v6 = a1[5];
  objc_copyWeak(&v7, a1 + 6);
  dispatch_async(v4, v5);

  objc_destroyWeak(&v7);
}

void sub_1BEAFC734(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(WeakRetained, v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

  }
}

void sub_1BEAFC880(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CKDAnonymousShareTuple *v12;
  const char *v13;
  void *v14;
  const char *v15;
  const char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3))
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v5 = *(id *)(a1 + 32);
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v26, v30, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v27;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v27 != v9)
            objc_enumerationMutation(v5);
          v11 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v10);
          v12 = [CKDAnonymousShareTuple alloc];
          v14 = (void *)objc_msgSend_initWithZoneID_shareID_(v12, v13, v11, 0);
          objc_msgSend_addObject_(v4, v15, (uint64_t)v14);

          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v16, (uint64_t)&v26, v30, 16);
      }
      while (v8);
    }

    v17 = *(void **)(a1 + 40);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_1BEAFCA78;
    v22[3] = &unk_1E7833558;
    v25 = *(id *)(a1 + 56);
    v18 = *(id *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 40);
    v23 = v18;
    v24 = v19;
    objc_msgSend_encryptShareTuples_withCompletionBlock_(v17, v20, (uint64_t)v4, v22);

  }
  else
  {
    v21 = *(_QWORD *)(a1 + 56);
    if (v21)
      (*(void (**)(uint64_t, _QWORD))(v21 + 16))(v21, 0);
  }
}

void sub_1BEAFCA78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void (**v12)(_QWORD);
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend_count(v5, v7, v8))
  {
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = sub_1BEAFCB94;
    v21 = &unk_1E78303B0;
    v22 = v5;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(void **)(a1 + 48);
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v12 = (void (**)(_QWORD))_Block_copy(&v18);
    objc_msgSend_zonePCSData(*(void **)(a1 + 40), v13, v14, v18, v19, v20, v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      v12[2](v12);
    else
      objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(*(void **)(a1 + 40), v16, (uint64_t)v12);

  }
  else
  {
    v17 = *(_QWORD *)(a1 + 48);
    if (v17)
      (*(void (**)(uint64_t, id))(v17 + 16))(v17, v6);
  }

}

void sub_1BEAFCB94(uint64_t *a1)
{
  CKDRemoveAnonymousShareFromSharedDBOperationInfo *v2;
  const char *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  _QWORD v8[5];
  id v9;

  v2 = objc_alloc_init(CKDRemoveAnonymousShareFromSharedDBOperationInfo);
  objc_msgSend_setEncryptedAnonymousSharesToRemove_(v2, v3, a1[4]);
  v4 = (void *)a1[5];
  v5 = objc_opt_class();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEAFCC48;
  v8[3] = &unk_1E7830A38;
  v6 = (void *)a1[7];
  v8[4] = a1[6];
  v9 = v6;
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v4, v7, v5, v2, v8);

}

void sub_1BEAFCC48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEAFCD1C;
  v6[3] = &unk_1E7833530;
  v4 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v4;
  objc_copyWeak(&v8, &location);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&location);
}

void sub_1BEAFCD00(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEAFCD1C(void **a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  objc_msgSend_synchronizeQueue(a1[4], a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEAFCDC4;
  v5[3] = &unk_1E7830220;
  v6 = a1[5];
  objc_copyWeak(&v7, a1 + 6);
  dispatch_async(v4, v5);

  objc_destroyWeak(&v7);
}

void sub_1BEAFCDC4(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(WeakRetained, v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

  }
}

void sub_1BEAFCEE8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  NSObject *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  void *v10;
  id v11;
  id v12;
  uint8_t buf[16];

  objc_msgSend_zonePCSData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend__locked_encryptShareTuples_withCompletionBlock_(*(void **)(a1 + 32), v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "encryptShareTuple zonePCSData not available yet", buf, 2u);
    }
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1BEAFD018;
    v9[3] = &unk_1E782F678;
    v7 = *(void **)(a1 + 40);
    v10 = *(void **)(a1 + 32);
    v11 = v7;
    v12 = *(id *)(a1 + 48);
    objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(v10, v8, (uint64_t)v9);

  }
}

void sub_1BEAFD018(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  _QWORD v4[4];
  id v5;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEAFD08C;
  v4[3] = &unk_1E78335A8;
  v5 = *(id *)(a1 + 48);
  objc_msgSend__locked_encryptShareTuples_withCompletionBlock_(v1, v3, v2, v4);

}

uint64_t sub_1BEAFD08C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEAFD73C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  NSObject *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint8_t buf[8];
  id location;

  objc_msgSend_zonePCSData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend__locked_decryptShareTuple_withCompletionBlock_(*(void **)(a1 + 32), v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "decryptShareTuple zonePCSData not available yet", buf, 2u);
    }
    v7 = *(void **)(a1 + 32);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1BEAFD8C4;
    v9[3] = &unk_1E78335D0;
    objc_copyWeak(&v12, &location);
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 48);
    objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(v7, v8, (uint64_t)v9);

    objc_destroyWeak(&v12);
    objc_destroyWeak(&location);
  }
}

void sub_1BEAFD8A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEAFD8C4(uint64_t a1)
{
  const char *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__locked_decryptShareTuple_withCompletionBlock_(WeakRetained, v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1BEAFE0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  _Block_object_dispose(&a20, 8);
  objc_destroyWeak((id *)(v21 - 120));
  _Unwind_Resume(a1);
}

void sub_1BEAFE12C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  _QWORD block[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      v27 = v13;
      v28 = 2112;
      v29 = v6;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for zone %@: %@", buf, 0x16u);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (!*(_QWORD *)(v14 + 40))
    {
      v15 = v6;
      v16 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v15;
LABEL_10:

    }
  }
  else if (objc_msgSend_pcs(v5, v7, v8)
         || objc_msgSend_databaseScope(*(void **)(a1 + 32), v11, v12) == 3
         && (objc_msgSend_pcsData(v5, v11, v12),
             v19 = (void *)objc_claimAutoreleasedReturnValue(),
             v19,
             v19))
  {
    objc_msgSend_synchronizeQueue(*(void **)(a1 + 40), v11, v12);
    v17 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEAFE37C;
    block[3] = &unk_1E782E418;
    v23 = *(id *)(a1 + 48);
    v24 = WeakRetained;
    v25 = v5;
    dispatch_async(v17, block);

    v16 = v23;
    goto LABEL_10;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_synchronizeQueue(*(void **)(a1 + 40), v11, v12);
    v18 = objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1BEAFE458;
    v20[3] = &unk_1E782EFD8;
    v21 = *(id *)(a1 + 56);
    dispatch_async(v18, v20);

  }
}

uint64_t sub_1BEAFE37C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Fetched PCS for zone %@:", (uint8_t *)&v6, 0xCu);
  }
  return objc_msgSend_setZonePCSData_(*(void **)(a1 + 40), v3, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1BEAFE458(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1BEAFE658(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordOneTimeStableUrlReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadData();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 40;
              goto LABEL_24;
            case 2u:
              PBReaderReadData();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 32;
              goto LABEL_24;
            case 3u:
              PBReaderReadData();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 16;
LABEL_24:
              v21 = *(void **)(a1 + v19);
              *(_QWORD *)(a1 + v19) = v18;

              goto LABEL_33;
            case 4u:
              PBReaderReadString();
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              if (v23)
                objc_msgSend_addParticipantId_((void *)a1, v22, (uint64_t)v23);

              goto LABEL_33;
            case 5u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v26 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v25);
                *(_QWORD *)(a2 + v24) = v25 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v26 = 0;
              }
              *(_QWORD *)(a1 + 8) = v26;
              goto LABEL_33;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_33:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEAFFBE8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_23;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_23:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 3u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_41;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_41:
          *(_DWORD *)(a1 + 8) = v23;
          continue;
        case 4u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
          goto LABEL_43;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          v29 = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        v29 = 0;
LABEL_45:
      *(_BYTE *)(a1 + 32) = v29 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB00544(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPShare *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPShare);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPShareReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordFieldValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  CKDPAsset *v38;
  void *v39;
  const char *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 128) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_81;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_83;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_81:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_83:
        *(_DWORD *)(a1 + 120) = v20;
        goto LABEL_78;
      case 2u:
        PBReaderReadData();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 40;
        goto LABEL_43;
      case 4u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 128) |= 2u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                v30 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_87:
        *(_QWORD *)(a1 + 16) = v30;
        goto LABEL_78;
      case 5u:
        *(_BYTE *)(a1 + 128) |= 1u;
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v37 = 0;
        }
        *(_QWORD *)(a1 + 8) = v37;
        goto LABEL_78;
      case 6u:
        v38 = (CKDPAsset *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        objc_storeStrong((id *)(a1 + 48), v38);
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0)
          goto LABEL_95;
        goto LABEL_77;
      case 7u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 112;
LABEL_43:
        v39 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_78;
      case 8u:
        v38 = (CKDPAsset *)objc_alloc_init(MEMORY[0x1E0C94C78]);
        objc_storeStrong((id *)(a1 + 72), v38);
        if (!PBReaderPlaceMark() || (CKDPLocationCoordinateReadFrom() & 1) == 0)
          goto LABEL_95;
        goto LABEL_77;
      case 9u:
        v38 = (CKDPAsset *)objc_alloc_init(MEMORY[0x1E0C94C90]);
        objc_storeStrong((id *)(a1 + 96), v38);
        if (!PBReaderPlaceMark() || (CKDPRecordReferenceReadFrom() & 1) == 0)
          goto LABEL_95;
        goto LABEL_77;
      case 0xAu:
        v38 = objc_alloc_init(CKDPAsset);
        objc_storeStrong((id *)(a1 + 32), v38);
        if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v38, a2) & 1) == 0)
          goto LABEL_95;
        goto LABEL_77;
      case 0xBu:
        v38 = objc_alloc_init(CKDPRecordFieldValue);
        objc_msgSend_addListValue_((void *)a1, v40, (uint64_t)v38);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom(v38, a2) & 1) == 0)
          goto LABEL_95;
        goto LABEL_77;
      case 0xCu:
        v38 = objc_alloc_init(CKDPPackage);
        objc_storeStrong((id *)(a1 + 88), v38);
        if (!PBReaderPlaceMark() || !sub_1BEC1B3BC((id *)&v38->super.super.isa, a2))
          goto LABEL_95;
        goto LABEL_77;
      case 0xDu:
        v41 = 0;
        v42 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + 128) |= 8u;
        while (2)
        {
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          v46 = v45 + 1;
          if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              v15 = v42++ >= 9;
              if (v15)
              {
                v43 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v43 = 0;
LABEL_91:
        *(_BYTE *)(a1 + 124) = v43 != 0;
        goto LABEL_78;
      case 0xEu:
        v38 = objc_alloc_init(CKDPFieldCryptoFeatureSet);
        objc_storeStrong((id *)(a1 + 24), v38);
        if (!PBReaderPlaceMark() || !sub_1BEB62908((uint64_t)v38, a2))
          goto LABEL_95;
        goto LABEL_77;
      case 0x11u:
        v38 = objc_alloc_init(CKDPStreamingAsset);
        objc_storeStrong((id *)(a1 + 104), v38);
        if (!PBReaderPlaceMark() || !sub_1BEAC111C((id *)&v38->super.super.isa, a2))
          goto LABEL_95;
        goto LABEL_77;
      case 0x14u:
        v38 = objc_alloc_init(CKDPMergeableValue);
        objc_storeStrong((id *)(a1 + 80), v38);
        if (!PBReaderPlaceMark() || (CKDPMergeableValueReadFrom((uint64_t)v38, a2) & 1) == 0)
          goto LABEL_95;
        goto LABEL_77;
      case 0x15u:
        v38 = objc_alloc_init(CKDPEncryptedMergeableValue);
        objc_storeStrong((id *)(a1 + 56), v38);
        if (PBReaderPlaceMark() && (CKDPEncryptedMergeableValueReadFrom((uint64_t)v38, a2) & 1) != 0)
        {
LABEL_77:
          PBReaderRecallMark();

LABEL_78:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_95:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_78;
    }
  }
}

uint64_t sub_1BEB02DD4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_41:
        v32 = 16;
        goto LABEL_46;
      }
      PBReaderReadString();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v29;

LABEL_47:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 32) |= 1u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_43;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v20 = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_45:
    v32 = 8;
LABEL_46:
    *(_QWORD *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB037B8(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadataCryptoSession *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadataCryptoSession);
        objc_msgSend_addCryptoSessions_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEB64944((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB04204(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_59:
          v45 = 28;
          goto LABEL_68;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_63:
          v45 = 24;
          goto LABEL_68;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_67:
          v45 = 32;
LABEL_68:
          *(_DWORD *)(a1 + v45) = v19;
          continue;
        case 4u:
          v34 = 0;
          v35 = 0;
          v36 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  v36 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v36 = 0;
LABEL_72:
          v46 = 16;
          goto LABEL_77;
        case 5u:
          v40 = 0;
          v41 = 0;
          v36 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v36 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
          goto LABEL_74;
        v40 += 7;
        v14 = v41++ >= 9;
        if (v14)
        {
          v36 = 0;
          goto LABEL_76;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
      if (*(_BYTE *)(a2 + *v5))
        v36 = 0;
LABEL_76:
      v46 = 8;
LABEL_77:
      *(_QWORD *)(a1 + v46) = v36;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL CKDPRecordChainParentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  id v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(id *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(MEMORY[0x1E0C94C90]);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (CKDPRecordReferenceReadFrom() & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB0537C()
{
  void *v0;

  v0 = (void *)qword_1ED700998;
  qword_1ED700998 = (uint64_t)&unk_1E78AF960;

}

uint64_t sub_1BEB055D8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_39;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            v22 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_41:
        *(_BYTE *)(a1 + 24) = v22 != 0;
      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_43;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            LODWORD(v28) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_45:
        *(_DWORD *)(a1 + 8) = v28;
      }
      else if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEB05E58(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v17 = v10 & 7;
      if (v16 || (_DWORD)v17 == 4)
        break;
      v19 = (const char *)(v10 >> 3);
      switch((v10 >> 3))
      {
        case 0u:
          v20 = 0;
          do
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
              goto LABEL_59;
            }
            v24 = *(char *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0)
              break;
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 1;
          *(_BYTE *)(a1 + 48) |= 1u;
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v29 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v29 = 0;
          }
          *(_QWORD *)(a1 + 8) = v29;
          continue;
        case 2u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 2;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                v15 = v31++ >= 9;
                if (v15)
                {
                  v32 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 16) = v32;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 3;
          *(_BYTE *)(a1 + 48) |= 8u;
          break;
        case 4u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 4;
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 32;
          goto LABEL_47;
        case 5u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 5;
          PBReaderReadData();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 24;
LABEL_47:
          v46 = *(void **)(a1 + v45);
          *(_QWORD *)(a1 + v45) = v44;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        v42 = v41 + 1;
        if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          break;
        v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
        *(_QWORD *)(a2 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0)
          goto LABEL_54;
        v37 += 7;
        v15 = v38++ >= 9;
        if (v15)
        {
          v39 = 0;
          goto LABEL_56;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        v39 = 0;
LABEL_56:
      *(_BYTE *)(a1 + 44) = v39 != 0;
LABEL_59:
      ;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB07694()
{
  void *v0;

  v0 = (void *)qword_1ED7009A8;
  qword_1ED7009A8 = (uint64_t)&unk_1E78AF988;

}

uint64_t sub_1BEB07844(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEB07F28(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL CKDPRequestOperationHeaderSupplementalZoneInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(id *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB08B9C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB098B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB098D8(uint64_t a1)
{
  id v2;
  const char *v3;
  const char *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  id v9;

  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), v3, 12);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v2, v4, (uint64_t)CFSTR("%@"), v9));
  v8 = (const char *)objc_msgSend_UTF8String(v5, v6, v7);
  printf("%s", v8);

}

void sub_1BEB09954(uint64_t a1)
{
  id v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  v7 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v2, v3, (uint64_t)CFSTR("\n%@"), *(_QWORD *)(a1 + 32)));
  v6 = (const char *)objc_msgSend_UTF8String(v7, v4, v5);
  puts(v6);

}

uint64_t sub_1BEB099AC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), sel_parseRequestArrayAndPrint_, *(_QWORD *)(a1 + 32));
}

BOOL sub_1BEB099BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v4 = objc_msgSend_seqNum(a2, (const char *)a2, a3);
  return v4 < objc_msgSend_seqNum(*(void **)(a1 + 32), v5, v6);
}

void sub_1BEB0A3DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  const char *v6;
  void (**v7)(void);

  v5 = *(void **)(a1 + 32);
  v7 = a4;
  objc_msgSend_addObject_(v5, v6, a2);
  v7[2]();

}

void sub_1BEB0A428(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  const char *v6;
  void (**v7)(void);

  v5 = *(void **)(a1 + 32);
  v7 = a4;
  objc_msgSend_addObject_(v5, v6, a2);
  v7[2]();

}

void sub_1BEB0A474(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  const char *v6;
  void (**v7)(void);

  v5 = *(void **)(a1 + 32);
  v7 = a4;
  objc_msgSend_addObject_(v5, v6, a2);
  v7[2]();

}

void sub_1BEB0A4C0(uint64_t a1, uint64_t a2)
{
  if (a2)
    NSLog(CFSTR("cloudkitlog parse error: Request objects parsed with error %@"), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB0A4FC(uint64_t a1, uint64_t a2)
{
  if (a2)
    NSLog(CFSTR("cloudkitlog parse error: Response objects parsed with error %@"), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB0A56C()
{
  id v0;
  const char *v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  id v5;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  v5 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v0, v1, (uint64_t)CFSTR("Finished")));
  v4 = (const char *)objc_msgSend_UTF8String(v5, v2, v3);
  puts(v4);

}

void sub_1BEB0A878(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *v62;
  const char *v63;
  int hasPrefix;
  const char *v65;
  const char *v66;
  const char *v67;
  void *v68;
  const char *v69;
  void *v70;
  void *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  void *v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  const char *v90;
  void *v91;
  id v92;
  const char *v93;
  id v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  void *v98;
  id v99;
  const char *v100;
  id v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  void *v117;
  const char *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  const __CFString *v132;
  void *v133;
  const char *v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t i;
  id v142;
  const char *v143;
  id v144;
  const char *v145;
  uint64_t v146;
  const char *v147;
  const char *v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  void *v157;
  const char *v158;
  const char *v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t j;
  id v171;
  const char *v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  id v176;
  const char *v177;
  uint64_t v178;
  const char *v179;
  void *v180;
  void *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _BYTE v190[128];
  _BYTE v191[128];
  _QWORD v192[5];

  v192[3] = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend_uuid(v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v3, v7, (uint64_t)CFSTR("Traffic log for request %@"), v6));
  v11 = (const char *)objc_msgSend_UTF8String(v8, v9, v10);
  puts(v11);

  objc_msgSend_requestTime(v2, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {

  }
  else
  {
    objc_msgSend_responseTime(v2, v15, v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v19)
      goto LABEL_16;
  }
  objc_msgSend_requestTime(v2, v17, v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v20;
  if (v20)
  {
    v24 = v20;
  }
  else
  {
    objc_msgSend_responseTime(v2, v21, v22);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dateByAddingTimeInterval_(v25, v26, v27, -900.0);
    v24 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend_responseTime(v2, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v30;
  if (v30)
  {
    v34 = v30;
  }
  else
  {
    objc_msgSend_requestTime(v2, v31, v32);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dateByAddingTimeInterval_(v35, v36, v37, 900.0);
    v34 = (id)objc_claimAutoreleasedReturnValue();

  }
  v38 = (void *)MEMORY[0x1E0CB3940];
  v181 = v24;
  objc_msgSend_dateByAddingTimeInterval_(v24, v39, v40, -300.0);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSince1970(v41, v42, v43);
  objc_msgSend_stringWithFormat_(v38, v44, (uint64_t)CFSTR("%lf"), v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  v47 = (void *)MEMORY[0x1E0CB3940];
  v180 = v34;
  objc_msgSend_dateByAddingTimeInterval_(v34, v48, v49, 300.0);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSince1970(v50, v51, v52);
  objc_msgSend_stringWithFormat_(v47, v53, (uint64_t)CFSTR("%lf"), v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();

  v56 = (void *)objc_opt_new();
  objc_msgSend_setScheme_(v56, v57, (uint64_t)CFSTR("https"));
  objc_msgSend_responseHeaders(v2, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKObjectForKeyCaseInsensitive_(v60, v61, 0x1E7840F08);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  hasPrefix = objc_msgSend_hasPrefix_(v62, v63, (uint64_t)CFSTR("ICLOUD"));

  if (hasPrefix)
    objc_msgSend_setHost_(v56, v65, (uint64_t)CFSTR("splunk-qa.icloud.apple.com"));
  else
    objc_msgSend_setHost_(v56, v65, (uint64_t)CFSTR("splunk.icloud.apple.com"));
  objc_msgSend_setPath_(v56, v66, (uint64_t)CFSTR("/en-US/app/launcher/search"));
  objc_msgSend_queryItemWithName_value_(MEMORY[0x1E0CB39D8], v67, (uint64_t)CFSTR("earliest"), v46);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v192[0] = v68;
  objc_msgSend_queryItemWithName_value_(MEMORY[0x1E0CB39D8], v69, (uint64_t)CFSTR("latest"), v55);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v192[1] = v70;
  v71 = (void *)MEMORY[0x1E0CB39D8];
  v72 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_uuid(v2, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v72, v76, (uint64_t)CFSTR("search index=ck* %@"), v75);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_queryItemWithName_value_(v71, v78, (uint64_t)CFSTR("q"), v77);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v192[2] = v79;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v80, (uint64_t)v192, 3);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setQueryItems_(v56, v82, (uint64_t)v81);

  objc_msgSend_URL(v56, v83, v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = v85;
  if (v85)
  {
    objc_msgSend_absoluteString(v85, v86, v87);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v89, v90, (uint64_t)CFSTR("*"), CFSTR("%2A"));
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = objc_alloc(MEMORY[0x1E0CB3940]);
    v94 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v92, v93, (uint64_t)CFSTR("%@"), v91));
    v97 = (const char *)objc_msgSend_UTF8String(v94, v95, v96);
    puts(v97);

  }
LABEL_16:
  objc_msgSend_fileHandleWithStandardOutput(MEMORY[0x1E0CB3608], v17, v18);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  v99 = objc_alloc(MEMORY[0x1E0CB3940]);
  v101 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v99, v100, (uint64_t)CFSTR(">>>>>>>> Request")));
  v104 = (const char *)objc_msgSend_UTF8String(v101, v102, v103);
  puts(v104);

  objc_msgSend_requestTime(v2, v105, v106);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKLogToFileHandle_(v107, v108, (uint64_t)v98);

  v109 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_requestMethod(v2, v110, v111);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_requestURL(v2, v113, v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v109, v116, (uint64_t)CFSTR("%@ %@"), v112, v115);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKLogToFileHandle_(v117, v118, (uint64_t)v98);

  objc_msgSend_requestHeaders(v2, v119, v120);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEB0AFC8(v121, v98);

  if (objc_msgSend_bodyStreamResetCount(v2, v122, v123) >= 1)
  {
    v126 = (void *)MEMORY[0x1E0CB3940];
    v127 = objc_msgSend_bodyStreamResetCount(v2, v124, v125);
    v130 = objc_msgSend_bodyStreamResetCount(v2, v128, v129);
    v132 = &stru_1E7838F48;
    if (v130 > 1)
      v132 = CFSTR("s");
    objc_msgSend_stringWithFormat_(v126, v131, (uint64_t)CFSTR("\n=>=>=>=>=>Body stream was reset %li time%@. This was what was streamed the final time:"), v127, v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKLogToFileHandle_(v133, v134, (uint64_t)v98);

  }
  v188 = 0u;
  v189 = 0u;
  v186 = 0u;
  v187 = 0u;
  objc_msgSend_requestObjects(v2, v124, v125);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(v135, v136, (uint64_t)&v186, v191, 16);
  if (v137)
  {
    v139 = v137;
    v140 = *(_QWORD *)v187;
    do
    {
      for (i = 0; i != v139; ++i)
      {
        if (*(_QWORD *)v187 != v140)
          objc_enumerationMutation(v135);
        objc_msgSend_CKLogToFileHandle_(*(void **)(*((_QWORD *)&v186 + 1) + 8 * i), v138, (uint64_t)v98);
      }
      v139 = objc_msgSend_countByEnumeratingWithState_objects_count_(v135, v138, (uint64_t)&v186, v191, 16);
    }
    while (v139);
  }

  v142 = objc_alloc(MEMORY[0x1E0CB3940]);
  v144 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v142, v143, (uint64_t)CFSTR("\n<<<<<<<< Response")));
  v147 = (const char *)objc_msgSend_UTF8String(v144, v145, v146);
  puts(v147);

  objc_msgSend_responseTime(v2, v148, v149);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKLogToFileHandle_(v150, v151, (uint64_t)v98);

  v152 = (void *)MEMORY[0x1E0CB3940];
  v155 = objc_msgSend_responseStatus(v2, v153, v154);
  objc_msgSend_stringWithFormat_(v152, v156, (uint64_t)CFSTR("Status %lu"), v155);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKLogToFileHandle_(v157, v158, (uint64_t)v98);

  objc_msgSend_responseHeaders(v2, v159, v160);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEB0AFC8(v161, v98);

  v184 = 0u;
  v185 = 0u;
  v182 = 0u;
  v183 = 0u;
  objc_msgSend_responseObjects(v2, v162, v163);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v165, (uint64_t)&v182, v190, 16);
  if (v166)
  {
    v168 = v166;
    v169 = *(_QWORD *)v183;
    do
    {
      for (j = 0; j != v168; ++j)
      {
        if (*(_QWORD *)v183 != v169)
          objc_enumerationMutation(v164);
        objc_msgSend_CKLogToFileHandle_(*(void **)(*((_QWORD *)&v182 + 1) + 8 * j), v167, (uint64_t)v98);
      }
      v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v167, (uint64_t)&v182, v190, 16);
    }
    while (v168);
  }

  v171 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend_uuid(v2, v172, v173);
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  v176 = objc_retainAutorelease((id)objc_msgSend_initWithFormat_(v171, v175, (uint64_t)CFSTR("End traffic log for operation %@\n\n"), v174));
  v179 = (const char *)objc_msgSend_UTF8String(v176, v177, v178);
  puts(v179);

}

void sub_1BEB0AFC8(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend_allKeys(v3, v5, v6);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v20, v24, 16);
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
        v14 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend_objectForKeyedSubscript_(v3, v9, v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v14, v16, (uint64_t)CFSTR("%@: %@"), v13, v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_CKLogToFileHandle_(v17, v18, (uint64_t)v4);

      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v20, v24, 16);
    }
    while (v10);
  }

}

void sub_1BEB0B498(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_shareParticipantFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_1BEB0B7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB0B820(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleFetchedInfo_withIdentity_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);

}

void sub_1BEB0B898(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  const char *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend_finishWithError_(WeakRetained, v4, (uint64_t)v3);

}

void sub_1BEB0BB70()
{
  void *v0;

  v0 = (void *)qword_1ED7009B8;
  qword_1ED7009B8 = (uint64_t)&unk_1E78AF9B0;

}

uint64_t sub_1BEB0BF5C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPShareIdentifier *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (PBReaderPlaceMark() && CKDPShareIdentifierReadFrom((uint64_t)v17, a2))
          goto LABEL_30;
        goto LABEL_57;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 8;
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v21 = 48;
        goto LABEL_28;
      case 4u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v21 = 32;
        goto LABEL_28;
      case 5u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v21 = 24;
LABEL_28:
        objc_storeStrong((id *)(a1 + v21), v17);
        if (PBReaderPlaceMark() && sub_1BEA1BDA4((uint64_t)v17, a2))
        {
LABEL_30:
          PBReaderRecallMark();

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_57:

        return 0;
      case 6u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
LABEL_32:
        v22 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_55;
      case 7u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_50:
        *(_DWORD *)(a1 + 40) = v25;
        goto LABEL_55;
      case 8u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
LABEL_54:
        *(_BYTE *)(a1 + 64) = v31 != 0;
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t sub_1BEB0CD90(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPZone *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !sub_1BEAB1B80((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_1BEB0D3B8(int a1, id a2)
{
  return a2;
}

id sub_1BEB0D468(int a1, id a2)
{
  return a2;
}

id sub_1BEB0D5A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = objc_msgSend_operationType(v4, v5, v6);
  objc_msgSend_operationRequestWithType_(v4, v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_opt_new();
  objc_msgSend_setArchiveRecordsRequest_(v9, v11, (uint64_t)v10);

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  objc_msgSend_zoneIDToRecordIDs(*(void **)(a1 + 32), v12, v13, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v14, v15, (uint64_t)v3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v43, v47, 16);
  if (v18)
  {
    v21 = v18;
    v22 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v44 != v22)
          objc_enumerationMutation(v16);
        v24 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend_translator(*(void **)(a1 + 32), v19, v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_pRecordIdentifierFromRecordID_(v25, v26, v24);
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_archiveRecordsRequest(v9, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addIdsToArchive_(v30, v31, (uint64_t)v27);

      }
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v43, v47, 16);
    }
    while (v21);
  }

  objc_msgSend_recordZoneIDByRequestID(*(void **)(a1 + 32), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_request(v9, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationUUID(v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v34, v41, (uint64_t)v3, v40);

  return v9;
}

uint64_t sub_1BEB0E11C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecordFieldIdentifier *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_29;
        goto LABEL_43;
      case 2u:
        v17 = objc_alloc_init(CKDPRecordFieldValue);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_43;
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(CKDPLocationBound);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (sub_1BEB58614((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 32) = v21;
        goto LABEL_41;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sub_1BEB0E874()
{
  CKDPowerLogger *v0;
  void *v1;

  v0 = objc_alloc_init(CKDPowerLogger);
  v1 = (void *)qword_1ED702868;
  qword_1ED702868 = (uint64_t)v0;

}

uint64_t sub_1BEB0F0CC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecordType *v17;
  const char *v18;
  uint64_t result;
  const char *v20;
  const char *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPRecordType);
        objc_msgSend_addTypes_((void *)a1, v18, (uint64_t)v17);
        if (PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_29;
        goto LABEL_54;
      case 2u:
        v17 = objc_alloc_init(CKDPQueryFilter);
        objc_msgSend_addFilters_((void *)a1, v20, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEB0E11C((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_54;
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(CKDPQuerySort);
        objc_msgSend_addSorts_((void *)a1, v21, (uint64_t)v17);
        if (PBReaderPlaceMark() && (sub_1BEA3CCE4((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_52:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_54:

        return 0;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_47:
        *(_BYTE *)(a1 + 40) = v24 != 0;
        goto LABEL_52;
      case 5u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                LODWORD(v30) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v30) = 0;
LABEL_51:
        *(_DWORD *)(a1 + 16) = v30;
        goto LABEL_52;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
    }
  }
}

void sub_1BEB0FFD8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0C949C8];
  v8[0] = *MEMORY[0x1E0C94A00];
  v8[1] = v2;
  v3 = *MEMORY[0x1E0C949C0];
  v8[2] = *MEMORY[0x1E0C949D8];
  v8[3] = v3;
  v4 = *MEMORY[0x1E0C949D0];
  v8[4] = *MEMORY[0x1E0C949E0];
  v8[5] = v4;
  v5 = *MEMORY[0x1E0C949F8];
  v8[6] = *MEMORY[0x1E0C94A18];
  v8[7] = v5;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v8, 8);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1ED702878;
  qword_1ED702878 = v6;

}

void sub_1BEB100B4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[7];
  _QWORD v11[8];

  v11[7] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0C94A00];
  v10[0] = CFSTR("recordID");
  v10[1] = CFSTR("creationDate");
  v3 = *MEMORY[0x1E0C949C0];
  v11[0] = v2;
  v11[1] = v3;
  v4 = *MEMORY[0x1E0C949E0];
  v10[2] = CFSTR("modificationDate");
  v10[3] = CFSTR("creatorUserRecordID");
  v5 = *MEMORY[0x1E0C949C8];
  v11[2] = v4;
  v11[3] = v5;
  v6 = *MEMORY[0x1E0C949D8];
  v10[4] = CFSTR("lastModifiedUserRecordID");
  v10[5] = CFSTR("recordChangeTag");
  v7 = *MEMORY[0x1E0C949D0];
  v11[4] = v6;
  v11[5] = v7;
  v10[6] = CFSTR("shareID");
  v11[6] = *MEMORY[0x1E0C94A18];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v11, v10, 7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)qword_1ED702888;
  qword_1ED702888 = v8;

}

uint64_t sub_1BEB101D0(int a1)
{
  id v2;
  const char *v3;
  id v4;

  if (a1 == 1)
    return 1;
  if (a1 == 2)
    return 0;
  if (a1 != 3)
  {
    v2 = objc_alloc(MEMORY[0x1E0C94D90]);
    v4 = (id)objc_msgSend_initWithCode_format_(v2, v3, 12, CFSTR("Unexpected reference type"));
    objc_exception_throw(v4);
  }
  return *MEMORY[0x1E0C94A40];
}

uint64_t sub_1BEB10238(int a1)
{
  int v1;
  id v3;
  const char *v4;
  id v5;

  v1 = a1 - 1;
  if ((a1 - 1) >= 0x10 || ((0x80F7u >> v1) & 1) == 0)
  {
    v3 = objc_alloc(MEMORY[0x1E0C94D90]);
    v5 = (id)objc_msgSend_initWithCode_format_(v3, v4, 12, CFSTR("Unexpected filter type"));
    objc_exception_throw(v5);
  }
  return qword_1BECBBBA8[v1];
}

id sub_1BEB10290(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  int hasErrorKey;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  int hasErrorDescription;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  int hasRetryAfterSeconds;
  const char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  void *v51;
  const char *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  int hasTypeCode;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  __CFString *v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  __CFString *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  int hasExtensionPayload;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  void *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  unsigned int v115;
  const char *v116;
  void *v117;
  const char *v118;
  const char *v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  int hasAuxiliaryError;
  void *v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  int v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  id v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  const char *v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t i;
  void *v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  int hasValue;
  const char *v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  const char *v178;
  const char *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  void *v188;
  void *v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  void *v215;
  id v216;
  void *v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  int v222;
  const char *v223;
  const char *v224;
  const char *v225;
  void *v226;
  __CFString *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  _BYTE v232[128];
  uint64_t v233;

  v233 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_opt_new();
  if (objc_msgSend_hasError(v4, v6, v7))
  {
    objc_msgSend_error(v4, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    hasErrorKey = objc_msgSend_hasErrorKey(v10, v11, v12);

    if (hasErrorKey)
    {
      objc_msgSend_error(v4, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorKey(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v5, v20, (uint64_t)v19, CFSTR("errorKey"));

    }
    objc_msgSend_error(v4, v14, v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    hasErrorDescription = objc_msgSend_hasErrorDescription(v21, v22, v23);

    if (hasErrorDescription)
    {
      objc_msgSend_error(v4, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorDescription(v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v5, v31, (uint64_t)v30, *MEMORY[0x1E0CB2D50]);

      objc_msgSend_error(v4, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorDescription(v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v5, v38, (uint64_t)v37, *MEMORY[0x1E0C94810]);

    }
    objc_msgSend_error(v4, v25, v26);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    hasRetryAfterSeconds = objc_msgSend_hasRetryAfterSeconds(v39, v40, v41);

    if (hasRetryAfterSeconds)
    {
      v45 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend_error(v4, v43, v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = objc_msgSend_retryAfterSeconds(v46, v47, v48);
      objc_msgSend_numberWithInt_(v45, v50, v49);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v5, v52, (uint64_t)v51, *MEMORY[0x1E0C94808]);

    }
    objc_msgSend_error(v4, v43, v44);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_hasExtensionError(v53, v54, v55) & 1) != 0)
    {
      objc_msgSend_error(v4, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_extensionError(v58, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      hasTypeCode = objc_msgSend_hasTypeCode(v61, v62, v63);

      if (hasTypeCode)
      {
        v67 = (void *)objc_opt_new();
        objc_msgSend_error(v4, v68, v69);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_extensionError(v70, v71, v72);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_extensionName(v73, v74, v75);
        v76 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_length(v76, v77, v78))
        {

          v76 = CFSTR("CKPluginUnknownDomain");
        }
        objc_msgSend_error(v4, v79, v80);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorDescription(v81, v82, v83);
        v84 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_length(v84, v85, v86))
        {

          v84 = CFSTR("Error, details unknown");
        }
        objc_msgSend_setObject_forKeyedSubscript_(v67, v87, (uint64_t)v84, *MEMORY[0x1E0C94810]);
        objc_msgSend_setObject_forKeyedSubscript_(v67, v88, (uint64_t)v84, *MEMORY[0x1E0CB2D50]);
        objc_msgSend_error(v4, v89, v90);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_extensionError(v91, v92, v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        hasExtensionPayload = objc_msgSend_hasExtensionPayload(v94, v95, v96);

        if (hasExtensionPayload)
        {
          objc_msgSend_error(v4, v98, v99);
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_extensionError(v100, v101, v102);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_extensionPayload(v103, v104, v105);
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v67, v107, (uint64_t)v106, *MEMORY[0x1E0C94830]);

        }
        v108 = (void *)MEMORY[0x1E0CB35C8];
        objc_msgSend_error(v4, v98, v99);
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_extensionError(v109, v110, v111);
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        v115 = objc_msgSend_typeCode(v112, v113, v114);
        objc_msgSend_errorWithDomain_code_userInfo_(v108, v116, (uint64_t)v76, v115, v67);
        v117 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_setObject_forKeyedSubscript_(v5, v118, (uint64_t)v117, *MEMORY[0x1E0CB3388]);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v119, (uint64_t)v117, *MEMORY[0x1E0C94B30]);

        goto LABEL_17;
      }
    }
    else
    {

    }
    objc_msgSend_error(v4, v65, v66);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    hasAuxiliaryError = objc_msgSend_hasAuxiliaryError(v120, v121, v122);

    if (hasAuxiliaryError)
    {
      objc_msgSend_error(v4, v8, v9);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_auxiliaryError(v124, v125, v126);
      v67 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_hasDomain(v67, v127, v128))
      {
        objc_msgSend_domain(v67, v129, v130);
        v76 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend_length(v76, v131, v132) || (objc_msgSend_hasCode(v67, v133, v134) & 1) == 0)
          goto LABEL_18;
        v137 = objc_msgSend_code(v67, v135, v136);

        if (v137)
        {
          if (!objc_msgSend_userInfosCount(v67, v138, v139))
          {
            v76 = 0;
            goto LABEL_63;
          }
          v142 = objc_alloc(MEMORY[0x1E0C99E08]);
          v145 = objc_msgSend_userInfosCount(v67, v143, v144);
          v226 = v67;
          v227 = (__CFString *)objc_msgSend_initWithCapacity_(v142, v146, v145);
          v228 = 0u;
          v229 = 0u;
          v230 = 0u;
          v231 = 0u;
          objc_msgSend_userInfos(v67, v147, v148);
          v149 = (void *)objc_claimAutoreleasedReturnValue();
          v151 = objc_msgSend_countByEnumeratingWithState_objects_count_(v149, v150, (uint64_t)&v228, v232, 16);
          if (!v151)
            goto LABEL_48;
          v154 = v151;
          v155 = *(_QWORD *)v229;
          while (1)
          {
            for (i = 0; i != v154; ++i)
            {
              if (*(_QWORD *)v229 != v155)
                objc_enumerationMutation(v149);
              v157 = *(void **)(*((_QWORD *)&v228 + 1) + 8 * i);
              if (objc_msgSend_hasKey(v157, v152, v153))
              {
                objc_msgSend_key(v157, v152, v153);
                v158 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend_length(v158, v159, v160))
                {
                  hasValue = objc_msgSend_hasValue(v157, v161, v162);

                  if (!hasValue)
                    continue;
                  objc_msgSend_value(v157, v152, v153);
                  v158 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend_hasDoubleValue(v158, v164, v165))
                  {
                    v168 = (void *)MEMORY[0x1E0CB37E8];
                    objc_msgSend_doubleValue(v158, v166, v167);
                    objc_msgSend_numberWithDouble_(v168, v169, v170);
                    v171 = objc_claimAutoreleasedReturnValue();
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasInt64Value(v158, v166, v167))
                  {
                    v176 = (void *)MEMORY[0x1E0CB37E8];
                    v177 = objc_msgSend_int64Value(v158, v174, v175);
                    objc_msgSend_numberWithInteger_(v176, v178, v177);
                    v171 = objc_claimAutoreleasedReturnValue();
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasBoolValue(v158, v174, v175))
                  {
                    v181 = (void *)MEMORY[0x1E0CB37E8];
                    v182 = objc_msgSend_BOOLValue(v158, v179, v180);
                    objc_msgSend_numberWithBool_(v181, v183, v182);
                    v171 = objc_claimAutoreleasedReturnValue();
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasStringValue(v158, v179, v180))
                  {
                    objc_msgSend_stringValue(v158, v184, v185);
                    v171 = objc_claimAutoreleasedReturnValue();
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasBytesValue(v158, v184, v185))
                  {
                    objc_msgSend_bytesValue(v158, v186, v187);
                    v171 = objc_claimAutoreleasedReturnValue();
LABEL_44:
                    v188 = (void *)v171;
                    objc_msgSend_key(v157, v172, v173);
                    v189 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setObject_forKeyedSubscript_(v227, v190, (uint64_t)v188, v189);

                  }
                }

                continue;
              }
            }
            v154 = objc_msgSend_countByEnumeratingWithState_objects_count_(v149, v152, (uint64_t)&v228, v232, 16);
            if (!v154)
            {
LABEL_48:

              v76 = v227;
              if (!objc_msgSend_count(v227, v191, v192))
              {

                v76 = 0;
              }
              v67 = v226;
LABEL_63:
              v218 = (void *)MEMORY[0x1E0CB35C8];
              objc_msgSend_domain(v67, v140, v141);
              v219 = (void *)objc_claimAutoreleasedReturnValue();
              v222 = objc_msgSend_code(v67, v220, v221);
              objc_msgSend_errorWithDomain_code_userInfo_(v218, v223, (uint64_t)v219, v222, v76);
              v84 = (__CFString *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_setObject_forKeyedSubscript_(v5, v224, (uint64_t)v84, *MEMORY[0x1E0CB3388]);
              objc_msgSend_setObject_forKeyedSubscript_(v5, v225, (uint64_t)v84, *MEMORY[0x1E0C94B30]);
LABEL_17:

LABEL_18:
              break;
            }
          }
        }
      }

    }
  }
  objc_msgSend_requestUUID(v3, v8, v9);
  v193 = (void *)objc_claimAutoreleasedReturnValue();

  if (v193)
  {
    objc_msgSend_requestUUID(v3, v194, v195);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v5, v197, (uint64_t)v196, *MEMORY[0x1E0C94A48]);

  }
  objc_msgSend_operation(v3, v194, v195);
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_topmostParentOperation(v198, v199, v200);
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationID(v201, v202, v203);
  v204 = (void *)objc_claimAutoreleasedReturnValue();

  if (v204)
    objc_msgSend_setObject_forKeyedSubscript_(v5, v205, (uint64_t)v204, *MEMORY[0x1E0C947F8]);
  objc_msgSend_container(v3, v205, v206);
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v207, v208, v209);
  v210 = (void *)objc_claimAutoreleasedReturnValue();

  if (v210)
  {
    objc_msgSend_containerIdentifier(v210, v211, v212);
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v5, v214, (uint64_t)v213, *MEMORY[0x1E0C946F8]);

  }
  if (objc_msgSend_count(v5, v211, v212))
    v215 = v5;
  else
    v215 = 0;
  v216 = v215;

  return v216;
}

uint64_t sub_1BEB10AC0(int a1)
{
  uint64_t result;

  result = 1000;
  switch(a1)
  {
    case 1:
    case 6:
LABEL_5:
      result = 2000;
      break;
    case 2:
LABEL_6:
      result = 2002;
      break;
    case 3:
      result = 2003;
      break;
    case 4:
      result = 2031;
      break;
    case 5:
      return result;
    case 7:
      result = 2029;
      break;
    case 8:
      result = 2030;
      break;
    case 9:
      result = 2023;
      break;
    default:
      switch(a1)
      {
        case 200001:
          result = 1014;
          break;
        case 200002:
          goto LABEL_6;
        case 200003:
          goto LABEL_5;
        case 200004:
        case 200005:
          result = 2022;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t sub_1BEB10B5C(int a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = 1000;
  v2 = a1 - 1;
  result = 2017;
  switch(v2)
  {
    case 0:
    case 12:
    case 13:
      return 2005;
    case 1:
      return 2013;
    case 2:
      return 2014;
    case 3:
      return 2006;
    case 4:
      return 2007;
    case 5:
      return 2009;
    case 6:
      return 2010;
    case 7:
      return 2027;
    case 8:
      return result;
    case 9:
      return 2040;
    case 10:
      return 2011;
    case 11:
      return 2012;
    case 14:
      return 2004;
    case 15:
      return 2024;
    case 16:
      return 1016;
    case 17:
    case 19:
    case 27:
    case 28:
    case 29:
    case 30:
    case 32:
    case 33:
    case 35:
    case 36:
    case 54:
    case 55:
    case 56:
    case 57:
    case 76:
    case 80:
      return 2023;
    case 18:
      return 2022;
    case 20:
      return 1014;
    case 21:
    case 22:
    case 31:
    case 34:
      return 2018;
    case 23:
    case 37:
      return 2019;
    case 24:
      return 2020;
    case 25:
      return 2015;
    case 26:
      return 2016;
    case 38:
      return 2025;
    case 39:
      return 2026;
    case 40:
      return 2028;
    case 41:
      return 2033;
    case 42:
      return 2032;
    case 45:
      return 3005;
    case 46:
      return 2035;
    case 47:
      return 2036;
    case 48:
      return 2007;
    case 49:
    case 50:
      return 2039;
    case 51:
    case 52:
      return 2037;
    case 53:
      return 2038;
    case 58:
      return 2042;
    case 59:
      return 2041;
    case 60:
      return 2045;
    case 61:
      return 2043;
    case 63:
      return 2044;
    case 64:
      return 2046;
    case 65:
      return 2047;
    case 66:
      return 2048;
    case 67:
      return 2049;
    case 68:
      return 2050;
    case 69:
      return 2051;
    case 70:
      return 2052;
    case 71:
      return 2053;
    case 72:
      return 2054;
    case 74:
      return 8014;
    case 75:
    case 83:
      return 2005;
    case 77:
      return 2056;
    case 78:
    case 81:
      return 2003;
    case 79:
    case 82:
      return 1017;
    case 84:
    case 85:
    case 86:
      return 1029;
    case 87:
      return 2057;
    case 88:
      return 2060;
    case 89:
      return 3014;
    case 93:
      return 5022;
    default:
      return v1;
  }
}

uint64_t sub_1BEB10D5C(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  int hasType;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  int hasAuxiliaryError;

  v1 = a1;
  if (!objc_msgSend_hasCode(v1, v2, v3))
    goto LABEL_14;
  if (objc_msgSend_code(v1, v4, v5) != 1)
  {
    if (objc_msgSend_hasError(v1, v6, v7))
    {
      objc_msgSend_error(v1, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_serverError(v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      hasType = objc_msgSend_hasType(v14, v15, v16);

      objc_msgSend_error(v1, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v20;
      if (hasType)
      {
        objc_msgSend_serverError(v20, v21, v22);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend_type(v24, v25, v26);
        v28 = sub_1BEB10AC0(v27);
LABEL_9:
        v8 = v28;

        goto LABEL_15;
      }
      objc_msgSend_clientError(v20, v21, v22);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend_hasType(v29, v30, v31);

      objc_msgSend_error(v1, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v35;
      if (v32)
      {
        objc_msgSend_clientError(v35, v36, v37);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = objc_msgSend_type(v24, v38, v39);
        v28 = sub_1BEB10B5C(v40);
        goto LABEL_9;
      }
      if (objc_msgSend_hasExtensionError(v35, v36, v37))
      {

LABEL_13:
        v8 = 6000;
        goto LABEL_15;
      }
      objc_msgSend_error(v1, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      hasAuxiliaryError = objc_msgSend_hasAuxiliaryError(v43, v44, v45);

      if (hasAuxiliaryError)
        goto LABEL_13;
    }
LABEL_14:
    v8 = 1000;
    goto LABEL_15;
  }
  v8 = 0;
LABEL_15:

  return v8;
}

uint64_t sub_1BEB10EA4(uint64_t a1, const char *a2, uint64_t a3)
{
  unsigned int v3;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;

  if (a1)
  {
    if (a1 == 2)
      v3 = 2;
    else
      v3 = 1;
    if (a1 == 3)
      return 3;
    else
      return v3;
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"CKDPParticipant_ShareParticipantKeyHealth CKDPShareParticipantKeyHealthForCKShareParticipantInvitationTokenStatus(CKShareParticipantInvitationTokenStatus)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v8, (uint64_t)v7, CFSTR("CKDEnumConversion.m"), 537, CFSTR("Unexpected share participant invitation token status: %ld"), 0);

    return 1;
  }
}

uint64_t sub_1BEB10F48(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;

  result = 2;
  switch(a1)
  {
    case 0:
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"CKDPShare_Permission CKDPSharePermissionForCKShareParticipantPermission(CKShareParticipantPermission)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v8, (uint64_t)v7, CFSTR("CKDEnumConversion.m"), 567, CFSTR("Unexpected share participant permissions: %ld"), 0);

      goto LABEL_3;
    case 2:
      return result;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    default:
LABEL_3:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_1BEB11000(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;

  if ((unint64_t)(result - 1) < 4)
    return result;
  v3 = result;
  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, (uint64_t)"CKDPParticipant_ShareParticipantType CKDPShareParticipantTypeForCKShareParticipantRole(CKShareParticipantRole)");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v7, (uint64_t)v6, CFSTR("CKDEnumConversion.m"), 600, CFSTR("Unexpected share participant role: %ld"), v3);

  return 3;
}

uint64_t CKDPRequestOperationHeader_DatabaseDatabaseFromCKDatabaseScope(unint64_t a1)
{
  if (a1 > 4)
    return 1;
  else
    return dword_1BECBBC28[a1];
}

BOOL sub_1BEB113E0(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CKDPResponseOperationHeaderAssetAuthorizationResponseHeaderInfo *v20;
  const char *v21;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
LABEL_26:
        v20 = *(CKDPResponseOperationHeaderAssetAuthorizationResponseHeaderInfo **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(CKDPResponseOperationHeaderAssetAuthorizationResponseHeaderInfo);
    objc_msgSend_addResponseHeaders_(a1, v21, (uint64_t)v20);
    if (!PBReaderPlaceMark() || !sub_1BEB64300((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPResponseOperationResultErrorExtensionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v21 += 7;
            v14 = v22++ >= 9;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
      }
      v20 = *(void **)(a1 + v19);
      *(_QWORD *)(a1 + v19) = v18;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  CKDPRecordType *v19;
  uint64_t v20;
  uint64_t result;
  const char *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  const char *v32;
  void *v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_72;
      case 2u:
        v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 136), v19);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 3u:
        v19 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 192), v19);
        if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 4u:
        v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        v20 = 48;
        goto LABEL_37;
      case 5u:
        v19 = objc_alloc_init(CKDPDateStatistics);
        objc_storeStrong((id *)(a1 + 176), v19);
        if (!PBReaderPlaceMark() || !CKDPDateStatisticsReadFrom((uint64_t)v19, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 7u:
        v19 = objc_alloc_init(CKDPRecordField);
        objc_msgSend_addFields_((void *)a1, v22, (uint64_t)v19);
        goto LABEL_44;
      case 8u:
        v19 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 144), v19);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v19, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 9u:
        v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        v20 = 80;
LABEL_37:
        objc_storeStrong((id *)(a1 + v20), v19);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 0xAu:
        PBReaderReadString();
        v19 = (CKDPRecordType *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend_addConflictLoserEtags_((void *)a1, v23, (uint64_t)v19);
        goto LABEL_95;
      case 0xBu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_72;
      case 0xCu:
        v19 = objc_alloc_init(CKDPRecordField);
        objc_msgSend_addPluginFields_((void *)a1, v24, (uint64_t)v19);
LABEL_44:
        if (!PBReaderPlaceMark() || !CKDPRecordFieldReadFrom((id *)&v19->super.super.isa, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 0xDu:
        v19 = objc_alloc_init(CKDPProtectionInfo);
        v25 = 120;
        goto LABEL_60;
      case 0xFu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 212) |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_101:
        *(_DWORD *)(a1 + 104) = v28;
        goto LABEL_96;
      case 0x10u:
        v19 = objc_alloc_init(CKDPShare);
        objc_storeStrong((id *)(a1 + 152), v19);
        if (!PBReaderPlaceMark() || (CKDPShareReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 0x11u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_72;
      case 0x12u:
        v19 = objc_alloc_init(CKDPProtectionInfo);
        v25 = 32;
LABEL_60:
        objc_storeStrong((id *)(a1 + v25), v19);
        if (!PBReaderPlaceMark() || !sub_1BEA1BDA4((uint64_t)v19, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 0x15u:
        v19 = objc_alloc_init(CKDPRecordChainParent);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !CKDPRecordChainParentReadFrom((uint64_t)v19, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 0x16u:
        v19 = objc_alloc_init(CKDPRecordStableUrl);
        objc_storeStrong((id *)(a1 + 160), v19);
        if (!PBReaderPlaceMark() || !CKDPRecordStableUrlReadFrom((uint64_t)v19, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 0x17u:
        PBReaderReadData();
        v19 = (CKDPRecordType *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend_addTombstonedPublicKeyIDs_((void *)a1, v32, (uint64_t)v19);
        goto LABEL_95;
      case 0x18u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 200;
LABEL_72:
        v33 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_96;
      case 0x1Au:
        v19 = objc_alloc_init(CKDPStorageExpiration);
        objc_storeStrong((id *)(a1 + 168), v19);
        if (!PBReaderPlaceMark() || (sub_1BEC5BA08((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 0x1Cu:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 212) |= 2u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              v14 = v35++ >= 9;
              if (v14)
              {
                v36 = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_105:
        *(_BYTE *)(a1 + 208) = v36 != 0;
        goto LABEL_96;
      case 0x1Du:
        v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        objc_storeStrong((id *)(a1 + 64), v19);
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 0x1Eu:
        v19 = objc_alloc_init(CKDPRecordCryptoFeatureSet);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (!PBReaderPlaceMark() || (sub_1BEC67BD4((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_107;
        goto LABEL_94;
      case 0x1Fu:
        v19 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        objc_storeStrong((id *)(a1 + 128), v19);
        if (!PBReaderPlaceMark() || !sub_1BEC7FC90(v19, a2))
          goto LABEL_107;
        goto LABEL_94;
      case 0x20u:
        v19 = objc_alloc_init(CKDPRecordOneTimeStableUrlInfo);
        objc_storeStrong((id *)(a1 + 96), v19);
        if (PBReaderPlaceMark() && (CKDPRecordOneTimeStableUrlInfoReadFrom(v19, a2) & 1) != 0)
        {
LABEL_94:
          PBReaderRecallMark();
LABEL_95:

LABEL_96:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_107:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_96;
    }
  }
}

void sub_1BEB16F48()
{
  void *v0;

  v0 = (void *)qword_1ED7009C8;
  qword_1ED7009C8 = (uint64_t)&unk_1E78AF9D8;

}

uint64_t sub_1BEB17400(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecordField *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  const char *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  const char *v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPRecordField *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          goto LABEL_27;
        goto LABEL_44;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

        goto LABEL_42;
      case 3u:
        v17 = objc_alloc_init(CKDPRecordField);
        objc_msgSend_addPluginFields_((void *)a1, v21, (uint64_t)v17);
        if (PBReaderPlaceMark() && CKDPRecordFieldReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_37:

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_41:
        *(_BYTE *)(a1 + 40) = v24 != 0;
        goto LABEL_42;
      case 5u:
        PBReaderReadData();
        v17 = (CKDPRecordField *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend_addPublicKeys_((void *)a1, v28, (uint64_t)v17);
        goto LABEL_37;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

void sub_1BEB18298(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_activity_t v8;

  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_packageGCPeriod(v3, v4, v5);

  v6 = NSTimeIntervalToClosestXPCActivityInterval();
  v7 = NSTimeIntervalToClosestXPCActivityInterval();
  v8 = _os_activity_create(&dword_1BE990000, "packageGarbageCollection", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  CKRegisterRepeatingXPCActivity("com.apple.cloudkit.packageGarbageCollection", v8, v6, v7, 0, &unk_1E7833A48);

}

void sub_1BEB18348(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_sharedPurger(CKDPackageDirectoryPurger, a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_purgeAll(v5, v3, v4);

}

void sub_1BEB1841C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEB18430(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_once_t *v10;
  os_log_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  objc_msgSend_rootDirectories(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v18, v24, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v19;
    v10 = (dispatch_once_t *)MEMORY[0x1E0C95300];
    v11 = (os_log_t *)MEMORY[0x1E0C952B0];
    *(_QWORD *)&v7 = 138412290;
    v17 = v7;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v4);
        v13 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v12);
        if (*v10 != -1)
          dispatch_once(v10, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v14 = *v11;
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v17;
          v23 = v13;
          _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Purging packages in: %@", buf, 0xCu);
        }
        objc_msgSend_purgeRootDirectory_(WeakRetained, v15, v13, v17);
        ++v12;
      }
      while (v8 != v12);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v16, (uint64_t)&v18, v24, 16);
    }
    while (v8);
  }

}

uint64_t sub_1BEB185E0()
{
  return 0;
}

uint64_t sub_1BEB18AAC()
{
  return 1;
}

void sub_1BEB18B84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB18BA8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v9 = 138412290;
    v10 = v3;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Adding %@ to package purger", (uint8_t *)&v9, 0xCu);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_rootDirectories(WeakRetained, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v7, v8, *(_QWORD *)(a1 + 32));

}

void sub_1BEB18CEC()
{
  CKDPackageDirectoryPurger *v0;
  const char *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v0 = [CKDPackageDirectoryPurger alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2);
  v4 = (void *)qword_1ED7028A0;
  qword_1ED7028A0 = inited;

  objc_msgSend_currentProcess(CKDDaemonProcess, v5, v6);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isSystemInstalledBinary(v16, v7, v8) & 1) != 0)
  {
    objc_msgSend_currentProcess(CKDDaemonProcess, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_processType(v11, v12, v13);

    if (v14 != 2)
      MEMORY[0x1E0DE7D20](qword_1ED7028A0, sel_registerXPCActivity, v15);
  }
  else
  {

  }
}

id sub_1BEB192E8(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  const char *v6;
  void *v7;

  v4 = (void *)MEMORY[0x1E0CB3540];
  objc_msgSend_objectRepresentationFromFieldValue_(a4, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expressionForConstantValue_(v4, v6, (uint64_t)v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id sub_1BEB19334(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  id v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  void *v65;
  const char *v66;
  void *v67;
  void *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  const char *v94;
  void *v95;
  const char *v96;
  const char *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  void *v112;
  const char *v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  void *v119;
  const char *v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  const char *v131;
  const char *v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  const char *v138;
  const char *v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  const char *v145;
  const char *v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  const char *v152;
  const char *v153;
  void *v154;
  const char *v155;
  const char *v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  void *v161;
  const char *v162;
  const char *v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  const char *v167;
  void *v168;
  const char *v169;
  _QWORD v171[2];
  _QWORD v172[2];

  v172[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  if ((unint64_t)objc_msgSend_count(v5, v7, v8) >= 2)
  {
    v11 = (void *)MEMORY[0x1E0CB3880];
    objc_msgSend_objectAtIndexedSubscript_(v5, v9, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v172[0] = v12;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v13, (uint64_t)v172, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_predicateWithCKDPQueryFilters_translator_(v11, v15, (uint64_t)v14, v6);
    v16 = (id)objc_claimAutoreleasedReturnValue();

    v17 = (void *)MEMORY[0x1E0CB3880];
    v20 = objc_msgSend_count(v5, v18, v19);
    objc_msgSend_subarrayWithRange_(v5, v21, 1, v20 - 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_predicateWithCKDPQueryFilters_translator_(v17, v23, (uint64_t)v22, v6);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      if (v24)
      {
        v26 = (void *)MEMORY[0x1E0CB3528];
        v171[0] = v16;
        v171[1] = v24;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v25, (uint64_t)v171, 2);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_andPredicateWithSubpredicates_(v26, v28, (uint64_t)v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_10:
        goto LABEL_34;
      }
      v55 = v16;
    }
    else
    {
      v55 = v24;
    }
    v29 = v55;
    goto LABEL_10;
  }
  objc_msgSend_lastObject(v5, v9, v10);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  switch(objc_msgSend_type(v30, v31, v32))
  {
    case 1u:
    case 2u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      v35 = (void *)MEMORY[0x1E0CB35D0];
      objc_msgSend_fieldName(v30, v33, v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_expressionForKeyPath_(v35, v40, (uint64_t)v39);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      v42 = (void *)MEMORY[0x1E0CB35D0];
      objc_msgSend_fieldValue(v30, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_expressionWithCKDPRecordFieldValue_translator_(v42, v46, (uint64_t)v45, v6);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      v48 = (void *)MEMORY[0x1E0CB3518];
      v51 = objc_msgSend_type(v30, v49, v50);
      v52 = sub_1BEB10238(v51);
      objc_msgSend_predicateWithLeftExpression_rightExpression_modifier_type_options_(v48, v53, (uint64_t)v41, v47, 0, v52, 0);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_33;
    case 3u:
      v56 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v57, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v61, v62);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v64, (uint64_t)v63);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v56, v66, (uint64_t)CFSTR("%K IN %@"), v60, v65);
      goto LABEL_27;
    case 4u:
      v67 = (void *)MEMORY[0x1E0CB3528];
      v68 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v76, (uint64_t)v75);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v68, v78, (uint64_t)CFSTR("%K IN %@"), v72, v77);
      goto LABEL_31;
    case 9u:
      v79 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v57, v80, v81);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v82, v83);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v84, (uint64_t)v63);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_bounds(v30, v85, v86);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_radius(v87, v88, v89);
      objc_msgSend_predicateWithFormat_(v79, v90, (uint64_t)CFSTR("distanceToLocation:fromLocation:(%K, %@) < %f"), v60, v65, v91);
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_28;
    case 0xAu:
      v92 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldValue(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v93, (uint64_t)v57);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v92, v94, (uint64_t)CFSTR("ALL tokenize(%@, 'cdl') IN allTokens"), v60);
      goto LABEL_17;
    case 0xBu:
      v95 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldValue(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v96, (uint64_t)v57);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v95, v97, (uint64_t)CFSTR("ANY tokenize(%@, 'cdl') IN allTokens"), v60);
LABEL_17:
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_29;
    case 0xCu:
      v98 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v57, v99, v100);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v101, v102);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v103, (uint64_t)v63);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v98, v104, (uint64_t)CFSTR("%K CONTAINS %@"), v60, v65);
      goto LABEL_27;
    case 0xDu:
      v67 = (void *)MEMORY[0x1E0CB3528];
      v105 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v69, v106, v107);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v108, v109);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v110, (uint64_t)v75);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v105, v111, (uint64_t)CFSTR("%K CONTAINS %@"), v72, v77);
      goto LABEL_31;
    case 0xEu:
      v112 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldValue(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v113, (uint64_t)v57);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldName(v30, v114, v115);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v63, v116, v117);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v112, v118, (uint64_t)CFSTR("ANY %@ IN %K"), v60, v65);
      goto LABEL_27;
    case 0xFu:
      v67 = (void *)MEMORY[0x1E0CB3528];
      v119 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldValue(v30, v33, v34);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v120, (uint64_t)v69);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldName(v30, v121, v122);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v75, v123, v124);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v119, v125, (uint64_t)CFSTR("ANY %@ IN %K"), v72, v77);
      goto LABEL_31;
    case 0x10u:
      v126 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v57, v127, v128);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v129, v130);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v131, (uint64_t)v63);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v126, v132, (uint64_t)CFSTR("%K BEGINSWITH %@"), v60, v65);
      goto LABEL_27;
    case 0x11u:
      v67 = (void *)MEMORY[0x1E0CB3528];
      v133 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v69, v134, v135);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v136, v137);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v138, (uint64_t)v75);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v133, v139, (uint64_t)CFSTR("%K BEGINSWITH %@"), v72, v77);
      goto LABEL_31;
    case 0x12u:
      v140 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v57, v141, v142);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v143, v144);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v145, (uint64_t)v63);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v140, v146, (uint64_t)CFSTR("ANY %K BEGINSWITH %@"), v60, v65);
      goto LABEL_27;
    case 0x13u:
      v67 = (void *)MEMORY[0x1E0CB3528];
      v147 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldName(v30, v33, v34);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v69, v148, v149);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValue(v30, v150, v151);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v152, (uint64_t)v75);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v147, v153, (uint64_t)CFSTR("ANY %K BEGINSWITH %@"), v72, v77);
      goto LABEL_31;
    case 0x14u:
      v154 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldValue(v30, v33, v34);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v155, (uint64_t)v57);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldName(v30, v156, v157);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v63, v158, v159);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v154, v160, (uint64_t)CFSTR("ALL %@ IN %K"), v60, v65);
LABEL_27:
      v54 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_28:

LABEL_29:
      break;
    case 0x15u:
      v67 = (void *)MEMORY[0x1E0CB3528];
      v161 = (void *)MEMORY[0x1E0CB3880];
      objc_msgSend_fieldValue(v30, v33, v34);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectRepresentationFromFieldValue_(v6, v162, (uint64_t)v69);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldName(v30, v163, v164);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v75, v165, v166);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_predicateWithFormat_(v161, v167, (uint64_t)CFSTR("ALL %@ IN %K"), v72, v77);
LABEL_31:
      v168 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_notPredicateWithSubpredicate_(v67, v169, (uint64_t)v168);
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      v54 = 0;
      break;
  }
  v41 = 0;
  v47 = 0;
LABEL_33:
  v16 = v54;

  v29 = v16;
LABEL_34:

  return v29;
}

id sub_1BEB19B8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;

  v5 = a3;
  v6 = a4;
  if ((unint64_t)objc_msgSend_count(v5, v7, v8) >= 2)
  {
    objc_msgSend_sortedArrayUsingComparator_(v5, v9, (uint64_t)&unk_1E7833B28);
    v10 = objc_claimAutoreleasedReturnValue();

    v5 = (id)v10;
  }
  objc_msgSend_predicateWithSortedCKDPQueryFilters_translator_(MEMORY[0x1E0CB3880], v9, (uint64_t)v5, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t sub_1BEB19C18(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v6;
  uint64_t v7;
  objc_class *v8;
  void *v9;
  const char *v10;

  NSClassFromString(CFSTR("NSTruePredicate"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return MEMORY[0x1E0C9AA60];
  if (a4)
  {
    v6 = (void *)MEMORY[0x1E0C94FF8];
    v7 = *MEMORY[0x1E0C94B20];
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v6, v10, v7, 1017, CFSTR("Unexpected predicate type: %@"), v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

id sub_1BEB19CCC(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  double v29;
  double v30;
  const char *v31;
  uint64_t v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;

  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = (void *)objc_opt_new();
  v13 = (void *)objc_opt_new();
  objc_msgSend_setFieldName_(v12, v14, (uint64_t)v13);

  objc_msgSend_fieldName(v12, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v17, v18, (uint64_t)v11);

  objc_msgSend_setType_(v12, v19, 9);
  v20 = (void *)objc_opt_new();
  objc_msgSend_setBounds_(v12, v21, (uint64_t)v20);

  objc_msgSend_bounds(v12, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRadius_(v24, v25, v26, a1);

  objc_msgSend_coordinate(v10, v27, v28);
  v30 = v29;
  objc_msgSend_coordinate(v10, v31, v32);
  v34 = v33;

  objc_msgSend_locationFieldValueWithLatitude_longitude_(v9, v35, v36, v30, v34);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setFieldValue_(v12, v38, (uint64_t)v37);
  return v12;
}

id sub_1BEB19E08(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_allValues(v1, v2, v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_allObjects(v1, v5, v6);
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = v1;
    }
  }
  v7 = v4;

  return v7;
}

uint64_t sub_1BEB19E90(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v10;
  const char *v11;

  v3 = a3;
  if (objc_msgSend_rangeOfString_(v3, v4, (uint64_t)CFSTR("n")) == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend_rangeOfString_(v3, v5, (uint64_t)CFSTR("N")) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = objc_msgSend_rangeOfString_(v3, v6, (uint64_t)CFSTR("c")) != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend_rangeOfString_(v3, v7, (uint64_t)CFSTR("C")) != 0x7FFFFFFFFFFFFFFFLL;
    if (objc_msgSend_rangeOfString_(v3, v7, (uint64_t)CFSTR("d")) != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend_rangeOfString_(v3, v10, (uint64_t)CFSTR("D")) != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 |= 2uLL;
    }
    if (objc_msgSend_rangeOfString_(v3, v10, (uint64_t)CFSTR("l")) != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend_rangeOfString_(v3, v11, (uint64_t)CFSTR("L")) != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 |= 8uLL;
    }
  }
  else
  {
    v8 = 4;
  }

  return v8;
}

id sub_1BEB19FA0(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;

  v2 = (void *)objc_opt_new();
  if (objc_msgSend_ascending(a1, v3, v4))
    objc_msgSend_setOrder_(v2, v5, 1);
  else
    objc_msgSend_setOrder_(v2, v5, 2);
  objc_msgSend_key(a1, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE9B2630(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFieldName_(v2, v10, (uint64_t)v9);

  return v2;
}

id sub_1BEB1A024(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  void *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  double v74;
  double v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  objc_super v82;

  v82.receiver = a1;
  v82.super_class = (Class)&off_1EF5CD128;
  objc_msgSendSuper2(&v82, sel_CKDPQuerySort);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_relativeLocation(a1, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = (void *)objc_opt_new();
    objc_msgSend_relativeLocation(a1, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_coordinate(v9, v10, v11);
    objc_msgSend_setLatitude_(v6, v12, v13);

    objc_msgSend_relativeLocation(a1, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_coordinate(v16, v17, v18);
    objc_msgSend_setLongitude_(v6, v19, v20, v21);

    objc_msgSend_relativeLocation(a1, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_horizontalAccuracy(v24, v25, v26);
    objc_msgSend_setHorizontalAccuracy_(v6, v27, v28);

    objc_msgSend_relativeLocation(a1, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_altitude(v31, v32, v33);
    objc_msgSend_setAltitude_(v6, v34, v35);

    objc_msgSend_relativeLocation(a1, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_verticalAccuracy(v38, v39, v40);
    objc_msgSend_setVerticalAccuracy_(v6, v41, v42);

    objc_msgSend_relativeLocation(a1, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_course(v45, v46, v47);
    objc_msgSend_setCourse_(v6, v48, v49);

    objc_msgSend_relativeLocation(a1, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_speed(v52, v53, v54);
    objc_msgSend_setSpeed_(v6, v55, v56);

    objc_msgSend_relativeLocation(a1, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timestamp(v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();

    if (v62)
    {
      v64 = (void *)objc_opt_new();
      objc_msgSend_setTimestamp_(v6, v65, (uint64_t)v64);

      objc_msgSend_relativeLocation(a1, v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_timestamp(v68, v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_timeIntervalSinceReferenceDate(v71, v72, v73);
      v75 = v74;
      objc_msgSend_timestamp(v6, v76, v77);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTime_(v78, v79, v80, v75);

    }
    objc_msgSend_setCoordinate_(v2, v63, (uint64_t)v6);

  }
  return v2;
}

uint64_t sub_1BEB1A234(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  int hasName;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  const char *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;

  v4 = a2;
  v5 = a3;
  objc_msgSend_fieldName(v4, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_hasName(v8, v9, v10) & 1) == 0)
  {

    goto LABEL_11;
  }
  objc_msgSend_fieldName(v5, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  hasName = objc_msgSend_hasName(v13, v14, v15);

  if (!hasName)
  {
LABEL_11:
    v30 = 0;
    goto LABEL_12;
  }
  objc_msgSend_fieldName(v4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_name(v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fieldName(v5, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_name(v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend_compare_(v22, v29, (uint64_t)v28);

  if (!v30)
  {
    v33 = objc_msgSend_type(v4, v31, v32);
    v34 = sub_1BEB1A350(v33);
    v37 = objc_msgSend_type(v5, v35, v36);
    v38 = sub_1BEB1A350(v37);
    if (v34 >= v38)
      v39 = 0;
    else
      v39 = -1;
    if (v34 > v38)
      v30 = 1;
    else
      v30 = v39;
  }
LABEL_12:

  return v30;
}

uint64_t sub_1BEB1A350(int a1)
{
  if ((a1 - 2) > 0x13)
    return 1;
  else
    return dword_1BECBBCF0[a1 - 2];
}

id sub_1BEB1B69C(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  v2 = a2;
  v3 = (void *)objc_opt_new();
  objc_msgSend_data(v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWrappedInvocationKey_(v3, v7, (uint64_t)v6);

  objc_msgSend_routingToken(v2, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setRoutingToken_(v3, v11, (uint64_t)v10);
  return v3;
}

void sub_1BEB1CA5C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  const __CFString *v38;
  __int16 v39;
  const __CFString *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  objc_msgSend_syncStatus(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_BOOLValue(v4, v5, v6);

  objc_msgSend_syncError(*(void **)(a1 + 32), v8, v9);
  v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
  {
    v14 = *(void **)(a1 + 32);
    v15 = v11;
    objc_msgSend_requestorOperationID(v14, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = *(_QWORD *)(a1 + 40);
    objc_msgSend_serviceName(*(void **)(a1 + 32), v20, v21);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v22;
    v29 = 138544642;
    v24 = CFSTR(" NO");
    v30 = v18;
    v31 = 2114;
    v32 = v19;
    v33 = 2114;
    if ((_DWORD)v7)
      v24 = CFSTR(" YES");
    v34 = v22;
    if (v10)
      v25 = CFSTR(" error: ");
    else
      v25 = &stru_1E7838F48;
    v35 = 2114;
    if (v10)
      v26 = v10;
    else
      v26 = &stru_1E7838F48;
    v36 = v24;
    v37 = 2114;
    v38 = v25;
    v39 = 2112;
    v40 = v26;
    _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_INFO, "User key sync completion for operation %{public}@ calling out to waiter operation %{public}@ for service %{public}@ with success:%{public}@%{public}@%@", (uint8_t *)&v29, 0x3Eu);

  }
  v27 = *(_QWORD *)(a1 + 48);
  if (v27)
  {
    v28 = objc_msgSend_KRSReturnedExistingIdentity(*(void **)(a1 + 32), v12, v13);
    (*(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(v27 + 16))(v27, v7, v10, v28);
  }

}

void sub_1BEB1CD8C()
{
  CKDPCSKeySyncManager *v0;
  void *v1;

  v0 = objc_alloc_init(CKDPCSKeySyncManager);
  v1 = (void *)qword_1ED7028A8;
  qword_1ED7028A8 = (uint64_t)v0;

}

void sub_1BEB1D05C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB1D228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB1D81C(uint64_t a1, char a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  char v13;

  v5 = a3;
  objc_msgSend_keySyncQueue(*(void **)(a1 + 32), v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEB1D8CC;
  block[3] = &unk_1E7830628;
  v13 = a2;
  v11 = *(id *)(a1 + 40);
  v12 = v5;
  v9 = v5;
  dispatch_async(v8, block);

}

void sub_1BEB1D8CC(uint64_t a1)
{
  _QWORD *v2;
  os_log_t *v3;
  void *v4;
  const char *v5;
  const __CFString *v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  os_log_t v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const __CFString *v33;
  const __CFString *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  int v42;
  const __CFString *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (os_log_t *)MEMORY[0x1E0C952D8];
  v4 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(a1 + 48))
      v6 = &stru_1E7838F48;
    else
      v6 = CFSTR("un");
    v7 = *(void **)(a1 + 32);
    v8 = v4;
    objc_msgSend_serviceName(v7, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_requestorOperationID(*(void **)(a1 + 32), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 40);
    v42 = 138544130;
    v43 = v6;
    v44 = 2114;
    v45 = v11;
    v46 = 2114;
    v47 = v14;
    v48 = 2112;
    v49 = v15;
    _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "Finished user key sync %{public}@successfully for service %{public}@ for operation %{public}@. Error: %@", (uint8_t *)&v42, 0x2Au);

  }
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v5, *(unsigned __int8 *)(a1 + 48));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSyncStatus_(*(void **)(a1 + 32), v17, (uint64_t)v16);

  if (*(_BYTE *)(a1 + 48) && !*(_QWORD *)(a1 + 40))
    goto LABEL_14;
  if (objc_msgSend_isManatee(*(void **)(a1 + 32), v18, v19))
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v20, *MEMORY[0x1E0C94B20], 5009, *(_QWORD *)(a1 + 40), CFSTR("Failed user key sync"));
  else
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v20, *MEMORY[0x1E0C94B20], 5000, *(_QWORD *)(a1 + 40), CFSTR("Failed user key sync"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSyncError_(*(void **)(a1 + 32), v22, (uint64_t)v21);

  if (*(_BYTE *)(a1 + 48))
  {
LABEL_14:
    objc_msgSend_date(MEMORY[0x1E0C99D68], v18, v19);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setCompletionDate_(*(void **)(a1 + 32), v24, (uint64_t)v23);

    if (*v2 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v25 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      v26 = *(void **)(a1 + 32);
      v27 = v25;
      objc_msgSend_completionDate(v26, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_timeIntervalSince1970(v30, v31, v32);
      v34 = v33;
      objc_msgSend_serviceName(*(void **)(a1 + 32), v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_requestorOperationID(*(void **)(a1 + 32), v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 134218498;
      v43 = v34;
      v44 = 2114;
      v45 = v37;
      v46 = 2114;
      v47 = v40;
      _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Setting user key sync completion date %f for service %{public}@ requested by operation %{public}@", (uint8_t *)&v42, 0x20u);

    }
  }
  objc_msgSend_syncGroup(*(void **)(a1 + 32), v18, v19);
  v41 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v41);

}

void sub_1BEB1DBDC(void **a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v3 = a2;
  objc_msgSend_syncGroup(a1[4], v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v6);

  objc_msgSend_keySyncQueue(a1[5], v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEB1DCB4;
  block[3] = &unk_1E782E418;
  v12 = v3;
  v13 = a1[4];
  v14 = a1[6];
  v10 = v3;
  dispatch_async(v9, block);

}

void sub_1BEB1DCB4(void **a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const __CFString *v19;
  int isManatee;
  const __CFString *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  _BYTE v31[12];
  __int16 v32;
  void *v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  const __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1[4])
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v7 = a1[5];
      v8 = v4;
      objc_msgSend_serviceName(v7, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_requestorOperationID(a1[5], v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_returnedExistingIdentity(a1[4], v15, v16))
        v19 = CFSTR("YES");
      else
        v19 = CFSTR("NO");
      isManatee = objc_msgSend_isManatee(a1[5], v17, v18);
      *(_DWORD *)v31 = 138544130;
      if (isManatee)
        v21 = CFSTR("YES");
      else
        v21 = CFSTR("NO");
      *(_QWORD *)&v31[4] = v11;
      v32 = 2114;
      v33 = v14;
      v34 = 2114;
      v35 = v19;
      v36 = 2114;
      v37 = v21;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "User key sync for service %{public}@ for operation %{public}@ returned existing identity: %{public}@. Service is manatee: %{public}@", v31, 0x2Au);

    }
    v22 = objc_msgSend_returnedExistingIdentity(a1[4], v5, v6, *(_QWORD *)v31);
    objc_msgSend_setKRSReturnedExistingIdentity_(a1[5], v23, v22);
  }
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend__pcsTestOverrideForKey_(a1[6], a2, (uint64_t)CFSTR("ForceKRSReturnExistingIdentityValue"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v24;
    if (v24)
    {
      v28 = objc_msgSend_BOOLValue(v24, v25, v26);
      objc_msgSend_setKRSReturnedExistingIdentity_(a1[5], v29, v28);
    }

  }
  objc_msgSend_syncGroup(a1[5], a2, a3);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

void sub_1BEB1E168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB1E17C(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const __CFString *v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  const __CFString *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (void **)(a1 + 32);
  objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v5);
  objc_msgSend__on_queue_getKeySyncTrackerByServicenameForAccount_(*v4, v6, *(_QWORD *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v8, *(_QWORD *)(a1 + 48));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_completionDate(v9, v10, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = *(void **)(a1 + 56);
    if (v15)
    {
      objc_msgSend_completionDate(v9, v12, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v15) = objc_msgSend_compare_(v15, v17, (uint64_t)v16) == -1;

    }
  }
  else
  {
    LODWORD(v15) = 0;
  }

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v18 = (id)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    objc_msgSend_completionDate(v9, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSince1970(v21, v22, v23);
    v25 = v24;
    objc_msgSend_timeIntervalSince1970(*(void **)(a1 + 56), v26, v27);
    v29 = CFSTR("E");
    v31 = 134218498;
    v32 = v25;
    if ((_DWORD)v15)
      v29 = CFSTR("Ine");
    v33 = 2048;
    v34 = v28;
    v35 = 2112;
    v36 = v29;
    _os_log_impl(&dword_1BE990000, v18, OS_LOG_TYPE_INFO, "Compared tracker completion date %f to decryptee modification date %f. %@ligible for user key sync", (uint8_t *)&v31, 0x20u);

  }
  objc_sync_exit(v5);

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, v15 ^ 1);
  return result;
}

void sub_1BEB1E378(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB1E764(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB1E788(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  double v32;
  double v33;
  const char *v34;
  uint64_t v35;
  double v36;
  double v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  const char *v52;
  void *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  void *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  NSObject *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unsigned __int8 v84;
  void *v85;
  _QWORD aBlock[4];
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  char v91;
  uint8_t buf[4];
  uint64_t v93;
  __int16 v94;
  void *v95;
  _QWORD v96[2];
  _QWORD v97[2];
  uint64_t v98;
  _QWORD v99[3];

  v99[1] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 104))
  {
    objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), a2, a3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v4);
    objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllObjects(v7, v8, v9);

    objc_sync_exit(v4);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEB1EE1C;
  aBlock[3] = &unk_1E7833C00;
  v10 = *(id *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 96);
  v87 = v10;
  v90 = v11;
  v88 = *(id *)(a1 + 48);
  v91 = *(_BYTE *)(a1 + 105);
  v89 = *(id *)(a1 + 88);
  v12 = _Block_copy(aBlock);
  objc_msgSend_syncTrackerForAccount_requestorOperationID_service_manatee_testOverrideProvider_(*(void **)(a1 + 32), v13, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 105), *(_QWORD *)(a1 + 80));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  switch(objc_msgSend_state(v14, v15, v16))
  {
    case 0:
      goto LABEL_26;
    case 1:
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v19 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v22 = *(_QWORD *)(a1 + 72);
        v23 = v19;
        objc_msgSend_requestorOperationID(v14, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v22;
        v94 = 2112;
        v95 = v26;
        _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "A user key sync for service %{public}@ is already in progress due to operation %@, queueing ourselves behind it", buf, 0x16u);

      }
      objc_msgSend_keySyncQueue(*(void **)(a1 + 32), v20, v21);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_waitOnSyncWithQueue_waiterOperationID_handler_(v14, v28, (uint64_t)v27, *(_QWORD *)(a1 + 64), v12);

      goto LABEL_30;
    case 2:
      if (*(_BYTE *)(a1 + 106) && *(_BYTE *)(a1 + 107))
      {
        objc_msgSend_completionDate(v14, v17, v18);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_timeIntervalSinceNow(v29, v30, v31);
        v33 = v32;

        objc_msgSend_timeIntervalSinceNow(*(void **)(a1 + 48), v34, v35);
        v36 = fabs(v33);
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = fabs(v37);
        v38 = (void *)MEMORY[0x1E0C94FF8];
        v39 = *MEMORY[0x1E0C94808];
        v98 = *MEMORY[0x1E0C94808];
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v40, v41, 1800.0 - v36);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v99[0] = v42;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v43, (uint64_t)v99, &v98, 1);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = *MEMORY[0x1E0C94B20];
        objc_msgSend_errorWithDomain_code_userInfo_format_(v38, v46, *MEMORY[0x1E0C94B20], 5012, v44, CFSTR("PCS Sync throttled"));
        v85 = (void *)objc_claimAutoreleasedReturnValue();

        if (*(_BYTE *)(a1 + 105))
          v49 = 5008;
        else
          v49 = 2008;
        v50 = (void *)MEMORY[0x1E0C94FF8];
        v96[0] = v39;
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v47, v48, 1800.0 - v36);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v96[1] = *MEMORY[0x1E0CB3388];
        v97[0] = v51;
        v97[1] = v85;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v52, (uint64_t)v97, v96, 2);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = *(_QWORD *)(a1 + 72);
        objc_msgSend_requestorOperationID(v14, v55, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_userInfo_format_(v50, v58, v45, v49, v53, CFSTR("Recently completed user key sync for the %@ service %f seconds ago for operation %@. Throttling..."), v54, *(_QWORD *)&v36, v57);
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_setKeySyncResult_(*(void **)(a1 + 40), v60, 0x1E783DC68);
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v61, v62, v36);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setThrottledDurationSec_(*(void **)(a1 + 40), v64, (uint64_t)v63);

        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v65, v66, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setKeySyncDurationSec_(*(void **)(a1 + 40), v68, (uint64_t)v67);

        v69 = *(_QWORD *)(a1 + 88);
        if (v69)
          (*(void (**)(uint64_t, _QWORD, void *, _QWORD))(v69 + 16))(v69, 0, v59, *(_QWORD *)(a1 + 40));

      }
      else
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v77 = (void *)*MEMORY[0x1E0C952D8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
        {
          v78 = *(_QWORD *)(a1 + 72);
          v79 = v77;
          objc_msgSend_requestorOperationID(v14, v80, v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v93 = v78;
          v94 = 2112;
          v95 = v82;
          _os_log_impl(&dword_1BE990000, v79, OS_LOG_TYPE_INFO, "Ignoring user key sync throttling for service %{public}@, operation %@", buf, 0x16u);

        }
LABEL_25:
        objc_msgSend_createSyncTrackerForAccount_requestorOperationID_service_manatee_testOverrideProvider_(*(void **)(a1 + 32), v71, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 105), *(_QWORD *)(a1 + 80));
        v83 = objc_claimAutoreleasedReturnValue();

        v14 = (void *)v83;
LABEL_26:
        if (*(_BYTE *)(a1 + 108))
          v84 = 2;
        else
          v84 = *MEMORY[0x1E0C95280];
        objc_msgSend_performKeySyncWithSyncTracker_testableSyncConfig_shouldThrottle_testOverrideProvider_requestorOperationID_completionHandler_(*(void **)(a1 + 32), v17, (uint64_t)v14, v84, *(unsigned __int8 *)(a1 + 106), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), v12);
      }
LABEL_30:

      return;
    case 3:
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v70 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v72 = *(_QWORD *)(a1 + 72);
        v73 = v70;
        objc_msgSend_requestorOperationID(v14, v74, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v72;
        v94 = 2112;
        v95 = v76;
        _os_log_impl(&dword_1BE990000, v73, OS_LOG_TYPE_INFO, "No longer throttled for user key sync for service %{public}@, operation %@", buf, 0x16u);

      }
      goto LABEL_25;
    default:
      goto LABEL_30;
  }
}

void sub_1BEB1EDF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB1EE1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  const char *v7;
  __CFString **v8;
  const char *v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a3;
  if (((v21 == 0) & a2) != 0)
    v8 = off_1E7834D20;
  else
    v8 = off_1E7834D28;
  objc_msgSend_setKeySyncResult_(*(void **)(a1 + 32), v7, (uint64_t)*v8);
  objc_msgSend_timeIntervalSinceNow(*(void **)(a1 + 40), v9, v10);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = fabs(v11);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v12, v13, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setKeySyncDurationSec_(*(void **)(a1 + 32), v15, (uint64_t)v14);

  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v16, a4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setKRSReturnedExistingIdentity_(*(void **)(a1 + 32), v18, (uint64_t)v17);

  }
  v19 = *(_QWORD *)(a1 + 48);
  v20 = v21;
  if (v19)
  {
    (*(void (**)(uint64_t, uint64_t, id, _QWORD))(v19 + 16))(v19, a2, v21, *(_QWORD *)(a1 + 32));
    v20 = v21;
  }

}

void sub_1BEB1F2B0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_subscriptionFetchedProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_subscriptionFetchedProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEB1F538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  id *v16;
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v19 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEB1F590(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleSubscriptionFetched_withID_responseCode_(WeakRetained, v10, (uint64_t)v9, v8, v7);

}

void sub_1BEB1F608(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  objc_class *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)MEMORY[0x1E0C94FF8];
  v6 = *MEMORY[0x1E0C94B20];
  v7 = sub_1BEB10D5C(v3);
  objc_msgSend_request(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEB10290(v10, v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v3, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_errorDescription(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_format_(v5, v18, v6, v7, v11, CFSTR("Error fetching all subscriptions from server: %@"), v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v20 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = v20;
    v26 = (objc_class *)objc_opt_class();
    NSStringFromClass(v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v27;
    v33 = 2048;
    v34 = WeakRetained;
    v35 = 2114;
    v36 = v30;
    v37 = 2112;
    v38 = v19;
    _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Fetch subscriptions operation <%{public}@: %p; %{public}@> hit top-level error %@",
      buf,
      0x2Au);

  }
  objc_msgSend_error(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
    objc_msgSend_setError_(WeakRetained, v24, (uint64_t)v19);

}

void sub_1BEB1F834(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v11, (uint64_t)v10);

  }
  objc_msgSend_error(WeakRetained, v5, v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v13, (uint64_t)v12);

}

void sub_1BEB2024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  objc_destroyWeak((id *)(v30 - 120));
  _Unwind_Resume(a1);
}

void sub_1BEB20298(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  int v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v11 = objc_msgSend_pcs(v6, v9, v10);
  v12 = (void *)*MEMORY[0x1E0C952F8];
  if (v11)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v13 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v14 = v13;
      objc_msgSend_shareID(v6, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v27 = 138412546;
      v28 = v17;
      v29 = 2112;
      v30 = v18;
      _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Successfully decrypted PCS data for share %@: %@", (uint8_t *)&v27, 0x16u);

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v19 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v21 = *(void **)(a1 + 32);
      v22 = v19;
      objc_msgSend_shareID(v21, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138412546;
      v28 = v25;
      v29 = 2112;
      v30 = v7;
      _os_log_impl(&dword_1BE990000, v22, OS_LOG_TYPE_INFO, "Warn: Couldn't decrypt existing share protection data on share %@: %@", (uint8_t *)&v27, 0x16u);

    }
    objc_msgSend_setState_(WeakRetained, v20, 12);
    if (v7)
      objc_msgSend_setError_(WeakRetained, v26, (uint64_t)v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEB204D0(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    objc_msgSend__fetchSharePCSData(WeakRetained, v3, v4);
  else
    objc_msgSend__prepareDependentPCSUpdateIfNeededForShareWithSharePCS_error_(WeakRetained, v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v7);

}

void sub_1BEB20818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  uint64_t v25;

  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose((const void *)(v25 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB20870(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  id WeakRetained;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  _QWORD v22[5];
  __int128 v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }
  else if (v7 && !objc_msgSend_CKIsObjectNotFoundError(v7, v8, v9))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v16 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v17 = v16;
      objc_msgSend_shareID(WeakRetained, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v26 = v20;
      v27 = 2112;
      v28 = v7;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS data for share %@: %@. Refusing to save share.", buf, 0x16u);

    }
  }
  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_1BEB20A88;
    v22[3] = &unk_1E7833CC8;
    v13 = *(_QWORD *)(a1 + 48);
    v22[4] = WeakRetained;
    v24 = v13;
    v21 = *(_OWORD *)(a1 + 32);
    v14 = (id)v21;
    v23 = v21;
    objc_msgSend__fetchRootRecordPublicSharingIdentityWithCompletionHandler_(WeakRetained, v15, (uint64_t)v22);

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)
    && (objc_msgSend_CKIsObjectNotFoundError(v7, v11, v12) & 1) == 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEB20A88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  char isEqualToData;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  dispatch_once_t *v65;
  uint64_t v66;
  os_log_t *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  os_log_t v71;
  const char *v72;
  NSObject *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  id v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  dispatch_once_t *v86;
  uint64_t v87;
  os_log_t *v88;
  uint64_t v89;
  void *v90;
  os_log_t v91;
  const char *v92;
  uint64_t v93;
  NSObject *v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  const char *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  NSObject *v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  NSObject *v134;
  const char *v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  NSObject *v142;
  const char *v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  void *v154;
  id v155;
  id v156;
  void *v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  id v167;
  _BYTE v168[128];
  uint8_t v169[128];
  uint8_t buf[4];
  void *v171;
  __int16 v172;
  void *v173;
  __int16 v174;
  id v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v6 && !objc_msgSend_CKIsObjectNotFoundError(v6, v7, v8))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v38 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v41 = *(void **)(a1 + 32);
      v42 = v38;
      objc_msgSend_share(v41, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_rootRecordID(v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v171 = v48;
      v172 = 2112;
      v173 = v9;
      _os_log_error_impl(&dword_1BE990000, v42, OS_LOG_TYPE_ERROR, "Error fetching PCS data for root record %@: %@", buf, 0x16u);

    }
  }
  else
  {
    v158 = a1;
    v156 = v5;
    if (v5)
    {
      objc_msgSend_share(*(void **)(a1 + 32), v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_mutableEncryptedPSK(v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_data(v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v16)
        goto LABEL_7;
      objc_msgSend_data(v5, v17, v18);
      v19 = objc_claimAutoreleasedReturnValue();
      if (!v19)
        goto LABEL_7;
      v22 = (void *)v19;
      objc_msgSend_data(v5, v20, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToData = objc_msgSend_isEqualToData_(v16, v24, (uint64_t)v23);

      if ((isEqualToData & 1) == 0)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v108 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
        {
          v141 = *(void **)(a1 + 32);
          v142 = v108;
          objc_msgSend_share(v141, v143, v144);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_recordID(v145, v146, v147);
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_share(*(void **)(a1 + 32), v149, v150);
          v151 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_rootRecordID(v151, v152, v153);
          v154 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v171 = v148;
          v172 = 2112;
          v173 = v154;
          _os_log_error_impl(&dword_1BE990000, v142, OS_LOG_TYPE_ERROR, "Public sharing identity on share %@ does not match the public sharing identity from its root record (%@). Failing share save", buf, 0x16u);

        }
        v111 = (void *)MEMORY[0x1E0C94FF8];
        v112 = *MEMORY[0x1E0C94B20];
        objc_msgSend_share(*(void **)(a1 + 32), v109, v110);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_recordID(v30, v113, v114);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_share(*(void **)(a1 + 32), v115, v116);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_rootRecordID(v35, v117, v118);
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(v111, v120, v112, 1017, CFSTR("Public sharing identity on share %@ does not match the public sharing identity from its root record (%@)."), v32, v119);
        v121 = objc_claimAutoreleasedReturnValue();

        a1 = v158;
        v9 = (void *)v121;
      }
      else
      {
LABEL_7:
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v26 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v122 = *(void **)(a1 + 32);
          v123 = v26;
          objc_msgSend_share(v122, v124, v125);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_rootRecordID(v126, v127, v128);
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_shareID(*(void **)(a1 + 32), v130, v131);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412802;
          v171 = v129;
          v172 = 2112;
          v173 = v132;
          v174 = 2112;
          v175 = v5;
          _os_log_debug_impl(&dword_1BE990000, v123, OS_LOG_TYPE_DEBUG, "Setting public sharing identity from root record %@ on share %@: %@", buf, 0x20u);

        }
        v27 = objc_alloc(MEMORY[0x1E0C94D18]);
        objc_msgSend_data(v5, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = (void *)objc_msgSend_initWithData_(v27, v31, (uint64_t)v30);
        objc_msgSend_share(*(void **)(a1 + 32), v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setMutableEncryptedPSK_(v35, v36, (uint64_t)v32);
      }

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v49 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v133 = *(void **)(a1 + 32);
        v134 = v49;
        objc_msgSend_share(v133, v135, v136);
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_rootRecordID(v137, v138, v139);
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v171 = v140;
        _os_log_debug_impl(&dword_1BE990000, v134, OS_LOG_TYPE_DEBUG, "Didn't get a public sharing identity for root record %@", buf, 0xCu);

      }
    }
    v50 = *(void **)(a1 + 32);
    v167 = v9;
    objc_msgSend__createNewSharePCSDataWithError_(v50, v37, (uint64_t)&v167);
    v51 = objc_claimAutoreleasedReturnValue();
    v155 = v167;

    v52 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v53 = *(void **)(v52 + 40);
    *(_QWORD *)(v52 + 40) = v51;

    v157 = (void *)objc_opt_new();
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    objc_msgSend_share(*(void **)(a1 + 32), v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_participants(v56, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v60, (uint64_t)&v163, v169, 16);
    if (v61)
    {
      v64 = v61;
      v65 = (dispatch_once_t *)MEMORY[0x1E0C95300];
      v66 = *(_QWORD *)v164;
      v67 = (os_log_t *)MEMORY[0x1E0C952B0];
      do
      {
        v68 = 0;
        do
        {
          if (*(_QWORD *)v164 != v66)
            objc_enumerationMutation(v59);
          v69 = *(void **)(*((_QWORD *)&v163 + 1) + 8 * v68);
          objc_msgSend_protectionInfo(v69, v62, v63);
          v70 = (void *)objc_claimAutoreleasedReturnValue();

          if (v70)
          {
            if (*v65 != -1)
              dispatch_once(v65, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v71 = *v67;
            if (os_log_type_enabled(*v67, OS_LOG_TYPE_INFO))
            {
              v73 = v71;
              objc_msgSend_participantID(v69, v74, v75);
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_shareID(*(void **)(v158 + 32), v77, v78);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412546;
              v171 = v76;
              v172 = 2112;
              v173 = v79;
              _os_log_impl(&dword_1BE990000, v73, OS_LOG_TYPE_INFO, "Removing protectionInfo from existing share participant %@ because share PCS was re-created for share %@.", buf, 0x16u);

            }
            objc_msgSend_setProtectionInfo_(v69, v72, 0);
            if (objc_msgSend_role(v69, v80, v81) != 1 && (objc_msgSend_isCurrentUser(v69, v62, v63) & 1) == 0)
              objc_msgSend_addObject_(v157, v62, (uint64_t)v69);
          }
          ++v68;
        }
        while (v64 != v68);
        v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v62, (uint64_t)&v163, v169, 16);
      }
      while (v64);
    }

    v161 = 0u;
    v162 = 0u;
    v159 = 0u;
    v160 = 0u;
    v82 = v157;
    v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v83, (uint64_t)&v159, v168, 16);
    a1 = v158;
    if (v84)
    {
      v85 = v84;
      v86 = (dispatch_once_t *)MEMORY[0x1E0C95300];
      v87 = *(_QWORD *)v160;
      v88 = (os_log_t *)MEMORY[0x1E0C952B0];
      do
      {
        v89 = 0;
        do
        {
          if (*(_QWORD *)v160 != v87)
            objc_enumerationMutation(v82);
          v90 = *(void **)(*((_QWORD *)&v159 + 1) + 8 * v89);
          if (*v86 != -1)
            dispatch_once(v86, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v91 = *v88;
          if (os_log_type_enabled(*v88, OS_LOG_TYPE_INFO))
          {
            v94 = v91;
            objc_msgSend_participantID(v90, v95, v96);
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_shareID(*(void **)(a1 + 32), v98, v99);
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v171 = v97;
            v172 = 2112;
            v173 = v100;
            _os_log_impl(&dword_1BE990000, v94, OS_LOG_TYPE_INFO, "Removing and re-adding existing share participant %@ because share PCS was re-created for share %@.", buf, 0x16u);

            a1 = v158;
          }
          objc_msgSend_share(*(void **)(a1 + 32), v92, v93);
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removeParticipant_(v101, v102, (uint64_t)v90);

          objc_msgSend_share(*(void **)(a1 + 32), v103, v104);
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addParticipant_(v105, v106, (uint64_t)v90);

          ++v89;
        }
        while (v85 != v89);
        v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v107, (uint64_t)&v159, v168, 16);
      }
      while (v85);
    }

    v9 = v155;
    v5 = v156;
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
    && (objc_msgSend_CKIsObjectNotFoundError(v9, v39, v40) & 1) == 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v9);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEB213B4(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__prepareDependentPCSUpdateIfNeededForShareWithSharePCS_error_(WeakRetained, v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  objc_msgSend_operation(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stateTransitionGroup(v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEB216B0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a3;
  objc_msgSend_encryptedPublicSharingKey(a2, v6, v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v8, v5);

}

void sub_1BEB226C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  _Block_object_dispose(&a29, 8);
  objc_destroyWeak((id *)(v30 - 160));
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB22714(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  os_log_t *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char v36;
  const char *v37;
  uint64_t v38;
  os_log_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  void *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  id v68;
  NSObject *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint8_t buf[4];
  void *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v10 = objc_msgSend_pcs(v5, v8, v9);
  if (!v6 && v10)
  {
    v13 = (void *)objc_msgSend_copy(v5, v11, v12);
    objc_msgSend_share(*(void **)(a1 + 40), v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_currentUserParticipant(v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_role(v19, v20, v21);

    if (v22 == 1)
    {
      v23 = (_QWORD *)MEMORY[0x1E0C95300];
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v24 = (os_log_t *)MEMORY[0x1E0C952B0];
      v25 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v69 = v25;
        objc_msgSend_shareID(WeakRetained, v70, v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v75 = v72;
        _os_log_debug_impl(&dword_1BE990000, v69, OS_LOG_TYPE_DEBUG, "Adding invited PCS to zone PCS for zone-wide share %@", buf, 0xCu);

      }
      objc_msgSend_pcsManager(WeakRetained, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend_pcs(*(void **)(a1 + 48), v29, v30);
      v34 = objc_msgSend_pcs(v13, v32, v33);
      v73 = 0;
      v36 = objc_msgSend_addSharePCS_toRecordPCS_error_(v28, v35, v31, v34, &v73);
      v6 = v73;

      if ((v36 & 1) != 0)
      {
        if (*v23 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v39 = *v24;
        if (os_log_type_enabled(*v24, OS_LOG_TYPE_INFO))
        {
          v42 = *(void **)(a1 + 40);
          v43 = v39;
          objc_msgSend_shareID(v42, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v75 = v46;
          _os_log_impl(&dword_1BE990000, v43, OS_LOG_TYPE_INFO, "Updating signing key on invited pcs for zone-wide share %@", buf, 0xCu);

        }
        objc_msgSend_pcsManager(WeakRetained, v40, v41);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = objc_msgSend_pcs(*(void **)(a1 + 48), v48, v49);
        v53 = objc_msgSend_pcs(v13, v51, v52);
        LOBYTE(v50) = objc_msgSend_updateSigningIdentityOnPCS_usingSignedPCS_(v47, v54, v50, v53);

        if ((v50 & 1) != 0 || v6)
          goto LABEL_22;
        v57 = (void *)MEMORY[0x1E0C94FF8];
        v58 = *MEMORY[0x1E0C94B20];
        objc_msgSend_shareID(WeakRetained, v55, v56);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(v57, v60, v58, 5001, CFSTR("Couldn't update signing key on invited pcs for share %@"), v59);
        goto LABEL_21;
      }
      if (!v6)
      {
        v61 = (void *)MEMORY[0x1E0C94FF8];
        v62 = *MEMORY[0x1E0C94B20];
        objc_msgSend_shareID(WeakRetained, v37, v38);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(v61, v63, v62, 5001, CFSTR("Couldn't add invited PCS to zone PCS for zone-wide share %@"), v59);
LABEL_21:
        v6 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      v6 = 0;
    }
LABEL_22:
    v64 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v65 = *(void **)(v64 + 40);
    *(_QWORD *)(v64 + 40) = v13;

    goto LABEL_23;
  }
  if (!v6)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v11, *MEMORY[0x1E0C94B20], 5001, CFSTR("Didn't get PCS data for zone %@"), *(_QWORD *)(a1 + 32));
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_23:
  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v67 = *(void **)(v66 + 40);
  *(_QWORD *)(v66 + 40) = v6;
  v68 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1BEB22AD0(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  const __CFString *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  const __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = WeakRetained;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend__rollShareAndZonePCSIfNeededForSharePCS_zonePCSData_(WeakRetained, v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      objc_msgSend__handleSharePCSData_zonePCSData_(v4, v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

    }
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v12 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v14 = v12;
    objc_msgSend_shareID(v4, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v17;
    v19 = CFSTR(" with error: ");
    v20 = *(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v20)
    {
      v19 = &stru_1E7838F48;
      v20 = &stru_1E7838F48;
    }
    v32 = 138412802;
    v33 = v17;
    v34 = 2114;
    v35 = v19;
    v36 = 2112;
    v37 = v20;
    _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Done updating pcs for share %@%{public}@%@", (uint8_t *)&v32, 0x20u);

  }
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v21)
  {
    objc_msgSend_setError_(v4, v13, v21);
    objc_msgSend_setState_(v4, v22, 12);
  }
  else
  {
    objc_msgSend_setState_(v4, v13, 2);
  }
  objc_msgSend_pcsGroup(v4, v23, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v25);

  objc_msgSend_operation(v4, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stateTransitionGroup(v28, v29, v30);
  v31 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v31);

}

void sub_1BEB22E6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB22E88(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  const char *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = WeakRetained;
  if (v3)
  {
    objc_msgSend_setError_(WeakRetained, v5, (uint64_t)v3);
    objc_msgSend_setState_(v7, v8, 12);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    objc_msgSend_operation(WeakRetained, v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1BEB22FA8;
    v13[3] = &unk_1E7833DB8;
    objc_copyWeak(&v17, (id *)(a1 + 48));
    v16 = *(id *)(a1 + 40);
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 32);
    v14 = v10;
    v15 = v11;
    objc_msgSend__addPublicKeyToSelfParticipantWithCompletionHandler_(v7, v12, (uint64_t)v13);

    objc_destroyWeak(&v17);
  }

}

void sub_1BEB22F94(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB22FA8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const char *v5;
  void *v6;
  const char *v7;
  char v8;
  id v9;
  const char *v10;
  id v11;
  char updated;
  id v13;
  const char *v14;
  char v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t j;
  void *v45;
  void *v46;
  const char *v47;
  void *v48;
  const char *v49;
  const char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  void *v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  int hasOutOfProcessUIEntitlement;
  const char *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  objc_super v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  id v104;
  id v105;
  id v106;
  _BYTE v107[128];
  _BYTE v108[128];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v6 = WeakRetained;
  if (!v3)
  {
    v106 = 0;
    v8 = objc_msgSend__setupParticipantsProtectionInfos_(WeakRetained, v5, (uint64_t)&v106);
    v9 = v106;
    v11 = v9;
    if ((v8 & 1) != 0)
    {
      v105 = v9;
      updated = objc_msgSend__updateSharePublicPCSWithError_(v6, v10, (uint64_t)&v105);
      v13 = v105;

      if ((updated & 1) == 0)
      {
        objc_msgSend_setError_(v6, v14, (uint64_t)v13);
        objc_msgSend_setState_(v6, v50, 12);
        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        v11 = v13;
        goto LABEL_37;
      }
      v104 = v13;
      v15 = objc_msgSend__serializePCSDataForShareWithError_(v6, v14, (uint64_t)&v104);
      v11 = v104;

      if ((v15 & 1) != 0)
      {
        v94 = v11;
        objc_msgSend_container(*(void **)(a1 + 32), v10, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_options(v17, v18, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_useAnonymousToServerShareParticipants(v20, v21, v22) & 1) != 0)
        {
          objc_msgSend_share(v6, v23, v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_currentUserParticipant(v25, v26, v27);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend_role(v28, v29, v30);

          if (v31 != 1)
          {
LABEL_24:
            v98 = 0u;
            v99 = 0u;
            v96 = 0u;
            v97 = 0u;
            objc_msgSend_share(v6, v32, v33);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addedParticipants(v51, v52, v53);
            v54 = (void *)objc_claimAutoreleasedReturnValue();

            v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v55, (uint64_t)&v96, v107, 16);
            if (v56)
            {
              v59 = v56;
              v60 = *(_QWORD *)v97;
              do
              {
                for (i = 0; i != v59; ++i)
                {
                  if (*(_QWORD *)v97 != v60)
                    objc_enumerationMutation(v54);
                  v62 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * i);
                  objc_msgSend_container(*(void **)(a1 + 32), v57, v58);
                  v63 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_entitlements(v63, v64, v65);
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v66, v67, v68);
                  objc_msgSend_setCreatedInProcess_(v62, v70, hasOutOfProcessUIEntitlement ^ 1u);

                }
                v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v57, (uint64_t)&v96, v107, 16);
              }
              while (v59);
            }

            objc_msgSend_sharePCSData(v6, v71, v72);
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            v76 = objc_msgSend_invitedPCS(v73, v74, v75);

            if (v76)
            {
              objc_msgSend_share(v6, v77, v78);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_sharePCSData(v6, v80, v81);
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              v85 = objc_msgSend_invitedPCS(v82, v83, v84);
              objc_msgSend_pcsManager(v6, v86, v87);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend__decryptPersonalInfoWithPCSBlob_pcsManager_(v79, v89, v85, v88);

            }
            objc_msgSend__alignParticipantPermissions(v6, v77, v78);
            if (objc_msgSend_state(v6, v90, v91) == 5)
            {
              v92 = *(_QWORD *)(a1 + 48);
              v95.receiver = *(id *)(a1 + 40);
              v95.super_class = (Class)CKDModifyShareHandler;
              objc_msgSendSuper2(&v95, sel_prepareForSaveWithCompletionHandler_, v92);
            }
            else
            {
              (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
            }
            v11 = v94;
            goto LABEL_37;
          }
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          objc_msgSend_share(v6, v32, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_allParticipants(v34, v35, v36);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v37, (uint64_t)&v100, v108, 16);
          if (v38)
          {
            v41 = v38;
            v93 = v6;
            v42 = *(_QWORD *)v101;
            v43 = (_BYTE *)MEMORY[0x1E0C95280];
            do
            {
              for (j = 0; j != v41; ++j)
              {
                if (*(_QWORD *)v101 != v42)
                  objc_enumerationMutation(v17);
                v45 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * j);
                if (objc_msgSend_role(v45, v39, v40) != 1)
                {
                  objc_msgSend_setIsAnonymousInvitedParticipant_(v45, v39, 1);
                  if (*v43)
                  {
                    objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v39, v40);
                    v46 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_objectForKeyedSubscript_(v46, v47, (uint64_t)CFSTR("ForceSendPublicKeyForAnonymousParticipants"));
                    v48 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v48)
                      objc_msgSend_setForceSendPublicKeyForAnonymousParticipants_(v45, v39, 1);
                  }
                }
              }
              v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v39, (uint64_t)&v100, v108, 16);
            }
            while (v41);
            v6 = v93;
            v3 = 0;
          }
        }
        else
        {

        }
        goto LABEL_24;
      }
    }
    objc_msgSend_setError_(v6, v10, (uint64_t)v11);
    objc_msgSend_setState_(v6, v49, 12);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_37:

    goto LABEL_38;
  }
  objc_msgSend_setError_(WeakRetained, v5, (uint64_t)v3);
  objc_msgSend_setState_(v6, v7, 12);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_38:

}

void sub_1BEB236DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB23708(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v18 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v25 = *(void **)(a1 + 32);
      v26 = v18;
      objc_msgSend_participantID(v25, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_shareID(WeakRetained, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v34 = v29;
      v35 = 2114;
      v36 = v32;
      v37 = 2114;
      v38 = v5;
      _os_log_error_impl(&dword_1BE990000, v26, OS_LOG_TYPE_ERROR, "Failed to decrypt self participant PCS for participant %{public}@ on share %{public}@, error: %{public}@", buf, 0x20u);

      if (v5)
        goto LABEL_17;
    }
    else if (v5)
    {
LABEL_17:
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

      goto LABEL_18;
    }
    v21 = (void *)MEMORY[0x1E0C94FF8];
    v22 = *MEMORY[0x1E0C94B20];
    objc_msgSend_participantID(*(void **)(a1 + 32), v19, v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v21, v24, v22, 5005, CFSTR("Couldn't decrypt self PPPCS for participant %@ when setting up other participants"), v23);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_17;
  }
  v7 = (const void *)PCSFPGetOwnerIdentity();
  WeakRetained[19] = v7;
  if (v7)
    CFRetain(v7);
  v8 = (const void *)WeakRetained[18];
  if (v8)
    CFRetain(v8);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v9;
    objc_msgSend_participantID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_shareID(WeakRetained, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = a2;
    v35 = 2112;
    v36 = v14;
    v37 = 2114;
    v38 = v17;
    _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Successfully decrypted self participant PCS %{public}@ for participant %@ on share %{public}@", buf, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_18:

}

void sub_1BEB26048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB26074(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  _QWORD *v20;
  os_log_t *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  char v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  os_log_t v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_operation(WeakRetained, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 || (a2 & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v33 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v36 = v33;
      objc_msgSend_operationID(v11, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v39;
      v74 = 2112;
      v75 = v5;
      _os_log_impl(&dword_1BE990000, v36, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@", buf, 0x16u);

    }
    if (!v5)
    {
      v40 = (void *)MEMORY[0x1E0C94FF8];
      v41 = *MEMORY[0x1E0C94B20];
      objc_msgSend_shareID(WeakRetained, v34, v35);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v40, v43, v41, 5000, CFSTR("Couldn't get a current public CloudDocs identity for the owner on share %@"), v42);
      v5 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    objc_msgSend_pcsManager(WeakRetained, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 56);
    v71 = 0;
    objc_msgSend_participantPublicKeyForServiceType_error_(v12, v14, v13, &v71);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v71;
    objc_msgSend_userIdentity(*(void **)(a1 + 32), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPublicSharingKey_(v18, v19, (uint64_t)v15);

    v20 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = (os_log_t *)MEMORY[0x1E0C952B0];
    v22 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v25 = v22;
      objc_msgSend_operationID(v11, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v73 = v28;
      v74 = 2112;
      v75 = v29;
      _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@. Obtained the public sharing key for participant %@ on a retry", buf, 0x16u);

    }
    objc_msgSend_protectionInfo(*(void **)(a1 + 32), v23, v24);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (v30)
    {

    }
    else
    {
      objc_msgSend_share(WeakRetained, v31, v32);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addedParticipants(v44, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = objc_msgSend_containsObject_(v47, v48, *(_QWORD *)(a1 + 32));

      if ((v49 & 1) == 0)
      {
        objc_msgSend_setIsALegacyPublicShareThatNeedsOwnerPPPCSUpgrade_(WeakRetained, v50, 1);
        objc_msgSend_share(WeakRetained, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = objc_msgSend_privatePCS(v53, v54, v55);

        if (v56)
        {
          v59 = *(_QWORD *)(a1 + 32);
          objc_msgSend_share(WeakRetained, v57, v58);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          v63 = objc_msgSend_privatePCS(v60, v61, v62);
          objc_msgSend__ensurePrivateParticipant_isInInvitedSharePCS_(WeakRetained, v64, v59, v63);
          v65 = objc_claimAutoreleasedReturnValue();

          v5 = (id)v65;
        }
        else
        {
          if (*v20 != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v66 = *v21;
          if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
          {
            v67 = v66;
            objc_msgSend_shareID(WeakRetained, v68, v69);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v73 = v70;
            _os_log_debug_impl(&dword_1BE990000, v67, OS_LOG_TYPE_DEBUG, "Couldn't get a private PCS for the share %@, so we can't upgrade our owner's PPPCS", buf, 0xCu);

          }
        }
      }
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1BEB27920(uint64_t a1)
{
  char *v2;
  char *v3;

  PCSPublicIdentityGetPublicID();
  v2 = (char *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    objc_msgSend_addObject_(*(void **)(a1 + 32), v2, (uint64_t)v2);
    v2 = v3;
  }

}

id sub_1BEB2AEBC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend_userIdentity(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lookupInfo(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_lookupField(v6, v7, v8))
    v9 = v6;
  else
    v9 = 0;
  v10 = v9;

  return v10;
}

void sub_1BEB2BA40()
{
  void *v0;

  v0 = (void *)qword_1ED7028B8;
  qword_1ED7028B8 = (uint64_t)&unk_1E78AFA00;

}

uint64_t sub_1BEB2BB68(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPSubscription *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPSubscription);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1BEB9D738((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB2C024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB2C03C()
{
  return 1;
}

void sub_1BEB2C044(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;

  v11 = a2;
  if (v11)
  {
    v5 = objc_alloc(MEMORY[0x1E0D446A0]);
    v7 = objc_msgSend_initWithSource_(v5, v6, (uint64_t)v11);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    objc_msgSend_setFlags_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v10, 391);
  }
  else
  {
    NSLog(CFSTR("Couldn't open os log event store: %@"), a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1BEB2C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB2C1DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;

  v11 = a2;
  if (v11)
  {
    v5 = objc_alloc(MEMORY[0x1E0D44678]);
    v7 = objc_msgSend_initWithLiveSource_(v5, v6, (uint64_t)v11);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    objc_msgSend_setFlags_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v10, 391);
  }
  else
  {
    NSLog(CFSTR("Couldn't open os log event live store: %@"), a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1BEB2C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id location)
{
  id *v38;
  id *v39;
  id *v40;
  id *v41;

  objc_destroyWeak(v41);
  objc_destroyWeak(v40);
  objc_destroyWeak(v39);
  objc_destroyWeak(v38);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB2C930(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x1C3B83E24]();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend_streamObservers(WeakRetained, v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v15, v19, 16);
  if (v10)
  {
    v12 = v10;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v8);
        objc_msgSend__handleEvent_(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v14++), v11, (uint64_t)v3);
      }
      while (v12 != v14);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v15, v19, 16);
    }
    while (v12);
  }

  objc_autoreleasePoolPop(v5);
}

void sub_1BEB2CA58(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x1C3B83E24]();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend_streamObservers(WeakRetained, v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v15, v19, 16);
  if (v10)
  {
    v12 = v10;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v8);
        objc_msgSend__handleEvent_(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v14++), v11, (uint64_t)v3);
      }
      while (v12 != v14);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v15, v19, 16);
    }
    while (v12);
  }

  objc_autoreleasePoolPop(v5);
}

void sub_1BEB2CB80(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void (**v20)(_QWORD, _QWORD);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend_streamObservers(WeakRetained, v4, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v21, v25, 16);
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v22 != v12)
          objc_enumerationMutation(v6);
        objc_msgSend_finish(*(void **)(*((_QWORD *)&v21 + 1) + 8 * i), v9, v10);
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v21, v25, 16);
    }
    while (v11);
  }

  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    v16 = 0;
  }
  else
  {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v14, (uint64_t)CFSTR("IMadeUpThisErrorDomain"), a2, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_completionHandler(WeakRetained, v14, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend_completionHandler(WeakRetained, v18, v19);
    v20 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v20)[2](v20, v16);

  }
}

void sub_1BEB2CCF8(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_liveStream(WeakRetained, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 && (a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    objc_msgSend_liveStream(WeakRetained, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_activate(v9, v10, v11);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

uint64_t sub_1BEB2CD84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEB2CEB4(void *a1, const char *a2, void *a3)
{
  const char *v4;
  id v5;

  objc_msgSend_dataUsingEncoding_(a3, a2, 4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(a1, v4, (uint64_t)v5);

}

void sub_1BEB2CEFC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  id v8;

  v4 = a3;
  objc_msgSend_description(a1, v5, v6);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v4, v7, (uint64_t)v8);

}

void sub_1BEB2CF4C(void *a1, uint64_t a2, void *a3, int a4)
{
  id v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  const char *v21;
  void *v22;
  const char *v23;
  const char *v24;
  void *v25;
  const char *v26;
  const char *v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  sub_1BEB2D148();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v5, v7, (uint64_t)v6);

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  objc_msgSend_allKeys(a1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v33, v37, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v34;
    v15 = (a4 + 1);
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v34 != v14)
          objc_enumerationMutation(v10);
        v17 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v16);
        v18 = (void *)MEMORY[0x1C3B83E24]();
        sub_1BEB2D188();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_writeData_(v5, v20, (uint64_t)v19);

        sub_1BEB2D1C8(v15, v5);
        objc_msgSend__CKLogToFileHandle_atDepth_(v17, v21, (uint64_t)v5, v15);
        sub_1BEB2D410();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_writeData_(v5, v23, (uint64_t)v22);

        objc_msgSend_objectForKeyedSubscript_(a1, v24, (uint64_t)v17);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__CKLogToFileHandle_atDepth_(v25, v26, (uint64_t)v5, v15);

        objc_autoreleasePoolPop(v18);
        ++v16;
      }
      while (v13 != v16);
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v27, (uint64_t)&v33, v37, 16);
    }
    while (v13);
  }

  sub_1BEB2D188();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v5, v29, (uint64_t)v28);

  sub_1BEB2D1C8(a4, v5);
  sub_1BEB2D450();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v5, v31, (uint64_t)v30);

}

id sub_1BEB2D148()
{
  if (qword_1ED7028F0 != -1)
    dispatch_once(&qword_1ED7028F0, &unk_1E7834020);
  return (id)qword_1ED7028E8;
}

id sub_1BEB2D188()
{
  if (qword_1ED702900 != -1)
    dispatch_once(&qword_1ED702900, &unk_1E7834040);
  return (id)qword_1ED7028F8;
}

void sub_1BEB2D1C8(int a1, void *a2)
{
  int v2;
  const char *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  void *v11;
  id v12;

  v12 = a2;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      sub_1BEB30738();
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_25;
    case 2:
      if (qword_1ED702920 != -1)
        dispatch_once(&qword_1ED702920, &unk_1E7834080);
      objc_msgSend_writeData_(v12, v4, qword_1ED702918);
      break;
    case 3:
      if (qword_1ED702930 != -1)
        dispatch_once(&qword_1ED702930, &unk_1E78340A0);
      objc_msgSend_writeData_(v12, v4, qword_1ED702928);
      break;
    case 4:
      if (qword_1ED702940 != -1)
        dispatch_once(&qword_1ED702940, &unk_1E78340C0);
      objc_msgSend_writeData_(v12, v4, qword_1ED702938);
      break;
    case 5:
      if (qword_1ED702950 != -1)
        dispatch_once(&qword_1ED702950, &unk_1E78340E0);
      objc_msgSend_writeData_(v12, v4, qword_1ED702948);
      break;
    case 6:
      if (qword_1ED702960 != -1)
        dispatch_once(&qword_1ED702960, &unk_1E7834100);
      objc_msgSend_writeData_(v12, v4, qword_1ED702958);
      break;
    case 7:
      if (qword_1ED702970 != -1)
        dispatch_once(&qword_1ED702970, &unk_1E7834120);
      objc_msgSend_writeData_(v12, v4, qword_1ED702968);
      break;
    case 8:
      sub_1BEB30778();
      v5 = objc_claimAutoreleasedReturnValue();
LABEL_25:
      v11 = (void *)v5;
      objc_msgSend_writeData_(v12, v6, v5);

      break;
    default:
      sub_1BEB30778();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writeData_(v12, v8, (uint64_t)v7);

      if (a1 >= 9)
      {
        do
        {
          sub_1BEB30738();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_writeData_(v12, v10, (uint64_t)v9);

          --v2;
        }
        while (v2);
      }
      break;
  }

}

id sub_1BEB2D410()
{
  if (qword_1ED702990 != -1)
    dispatch_once(&qword_1ED702990, &unk_1E7834160);
  return (id)qword_1ED702988;
}

id sub_1BEB2D450()
{
  if (qword_1ED7029A0 != -1)
    dispatch_once(&qword_1ED7029A0, &unk_1E7834180);
  return (id)qword_1ED702998;
}

void sub_1BEB2D490(void *a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  sub_1BEB2D840();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v6, v8, (uint64_t)v7);

  sub_1BEB2D188();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v6, v10, (uint64_t)v9);

  v35 = a4;
  v11 = (a4 + 1);
  sub_1BEB2D1C8(a4 + 1, v6);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v12 = a1;
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v37, v41, 16);
  if (v14)
  {
    v15 = v14;
    v16 = 0;
    v17 = *(_QWORD *)v38;
    do
    {
      v18 = 0;
      v36 = v16;
      v19 = v16 + 1;
      do
      {
        if (*(_QWORD *)v38 != v17)
          objc_enumerationMutation(v12);
        v20 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v18);
        v21 = (void *)MEMORY[0x1C3B83E24]();
        objc_msgSend__CKLogToFileHandle_atDepth_(v20, v22, (uint64_t)v6, v11);
        if (v19 + v18 < (unint64_t)objc_msgSend_count(v12, v23, v24))
        {
          sub_1BEB2D880();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_writeData_(v6, v26, (uint64_t)v25);

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            goto LABEL_10;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            goto LABEL_10;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            goto LABEL_10;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                  {
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) == 0)
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                      {
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) == 0)
                        {
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) == 0)
                          {
                            objc_opt_class();
                            if ((objc_opt_isKindOfClass() & 1) == 0)
                            {
                              objc_opt_class();
                              if ((objc_opt_isKindOfClass() & 1) == 0)
                              {
LABEL_10:
                                sub_1BEB2D188();
                                v27 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend_writeData_(v6, v28, (uint64_t)v27);

                                sub_1BEB2D1C8(v11, v6);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        objc_autoreleasePoolPop(v21);
        ++v18;
      }
      while (v15 != v18);
      v16 = v15 + v36;
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v29, (uint64_t)&v37, v41, 16);
      v15 = v30;
    }
    while (v30);
  }

  sub_1BEB2D188();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v6, v32, (uint64_t)v31);

  sub_1BEB2D1C8(v35, v6);
  sub_1BEB2D8C0();
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v6, v34, (uint64_t)v33);

}

id sub_1BEB2D840()
{
  if (qword_1ED7029B0 != -1)
    dispatch_once(&qword_1ED7029B0, &unk_1E78341A0);
  return (id)qword_1ED7029A8;
}

id sub_1BEB2D880()
{
  if (qword_1ED7029C0 != -1)
    dispatch_once(&qword_1ED7029C0, &unk_1E78341C0);
  return (id)qword_1ED7029B8;
}

id sub_1BEB2D8C0()
{
  if (qword_1ED7029D0 != -1)
    dispatch_once(&qword_1ED7029D0, &unk_1E78341E0);
  return (id)qword_1ED7029C8;
}

uint64_t sub_1BEB2D900(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_writeString_(a3, a2, a1);
}

void sub_1BEB2D910(void *a1, uint64_t a2, void *a3)
{
  const char *v4;
  id v5;
  NSUInteger v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  const char *v20;
  void *v21;
  const char *v22;

  v5 = a3;
  if (qword_1ED7029E0 != -1)
    dispatch_once(&qword_1ED7029E0, &unk_1E7834200);
  objc_msgSend_writeData_(v5, v4, qword_1ED7029D8);
  v6 = NSPageSize();
  v9 = objc_msgSend_length(a1, v7, v8);
  if (v9)
  {
    v11 = v9;
    v12 = 0;
    v13 = v9;
    do
    {
      v14 = v13 - v6;
      v15 = a1;
      objc_msgSend_bytes(v15, v16, v17);
      v18 = CKHexCharFromBytes();
      v19 = objc_alloc(MEMORY[0x1E0C99D50]);
      v21 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v19, v20, v18, 0, 1);
      objc_msgSend_writeData_(v5, v22, (uint64_t)v21);
      v12 += v6;

      v13 = v14;
    }
    while (v12 < v11);
  }
  if (qword_1ED7029F0 != -1)
    dispatch_once(&qword_1ED7029F0, &unk_1E7834220);
  objc_msgSend_writeData_(v5, v10, qword_1ED7029E8);

}

id sub_1BEB2DA64()
{
  if (qword_1ED7028D0 != -1)
    dispatch_once(&qword_1ED7028D0, &unk_1E7833FE0);
  return (id)qword_1ED7028C8;
}

void sub_1BEB2DAA4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_currentCalendar(MEMORY[0x1E0C99D48], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED7028C8;
  qword_1ED7028C8 = v3;

}

void sub_1BEB2DAD0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  id v8;

  v8 = a3;
  if (qword_1ED7028E0 != -1)
    dispatch_once(&qword_1ED7028E0, &unk_1E7834000);
  v4 = (void *)MEMORY[0x1C3B83E24]();
  objc_msgSend_stringFromDate_((void *)qword_1ED7028D8, v5, a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v8, v7, (uint64_t)v6);

  objc_autoreleasePoolPop(v4);
}

uint64_t sub_1BEB2DB60()
{
  id v0;
  void *v1;
  const char *v2;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED7028D8;
  qword_1ED7028D8 = (uint64_t)v0;

  return objc_msgSend_setDateFormat_((void *)qword_1ED7028D8, v2, (uint64_t)CFSTR("yyyy-MM-dd HH:mm:ss ZZZ"));
}

void sub_1BEB2DBA0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  id v8;

  v4 = a3;
  objc_msgSend_stringValue(a1, v5, v6);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v4, v7, (uint64_t)v8);

}

uint64_t sub_1BEB2DBF0(void *a1, int a2, Ivar v)
{
  const char *Name;
  const char *TypeEncoding;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSString *v11;
  const char *v12;
  objc_class *v13;
  IMP MethodImplementation;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  Name = ivar_getName(v);
  TypeEncoding = ivar_getTypeEncoding(v);
  if (strncmp(Name, "_has", 4uLL) && *TypeEncoding != 123)
  {
    v8 = (void *)MEMORY[0x1E0CB3940];
    v9 = __toupper(Name[1]);
    objc_msgSend_stringWithFormat_(v8, v10, (uint64_t)CFSTR("has%c%s"), v9, Name + 2);
    v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    v12 = NSSelectorFromString(v11);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v13 = (objc_class *)objc_opt_class();
      MethodImplementation = class_getMethodImplementation(v13, v12);
      if (MethodImplementation)
      {
        v7 = ((uint64_t (*)(void *, const char *))MethodImplementation)(a1, v12);
LABEL_16:

        return v7;
      }
LABEL_10:
      v7 = 0;
      goto LABEL_16;
    }
    object_getIvar(a1, v);
    v15 = objc_claimAutoreleasedReturnValue();
    if (!v15)
      goto LABEL_10;
    v16 = (void *)v15;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v19 = objc_msgSend_count(v16, v17, v18);
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
        v7 = 1;
        goto LABEL_15;
      }
      v19 = objc_msgSend_length(v16, v20, v21);
    }
    v7 = v19 != 0;
LABEL_15:

    goto LABEL_16;
  }
  return 0;
}

void sub_1BEB2DD4C(char *a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  objc_class *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  objc_class *v14;
  Ivar *v15;
  unint64_t v16;
  Ivar *v17;
  size_t v18;
  const char *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  objc_ivar *v28;
  const char *v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  NSString *v36;
  const char *v37;
  objc_class *v38;
  IMP MethodImplementation;
  const char *v40;
  id v41;
  int v42;
  void *v43;
  const char *v44;
  void *v45;
  ptrdiff_t Offset;
  const char *v47;
  uint64_t v48;
  void *v49;
  ptrdiff_t v50;
  const char *v51;
  void *v52;
  ptrdiff_t v53;
  const char *v54;
  void *v55;
  ptrdiff_t v56;
  const char *v57;
  void *v58;
  ptrdiff_t v59;
  const char *v60;
  void *v61;
  ptrdiff_t v62;
  const char *v63;
  void *v64;
  ptrdiff_t v65;
  const char *v66;
  void *v67;
  ptrdiff_t v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  double v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  ptrdiff_t v76;
  const char *v77;
  void *v78;
  ptrdiff_t v79;
  const char *v80;
  void *v81;
  ptrdiff_t v82;
  const char *v83;
  void *v84;
  ptrdiff_t v85;
  const char *v86;
  void *v87;
  ptrdiff_t v88;
  const char *v89;
  void *v90;
  const char *v91;
  void *v92;
  const char *v93;
  void *v94;
  const char *v95;
  Ivar *v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (objc_class *)objc_opt_class();
  NSStringFromClass(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v6, v9, (uint64_t)v8);

  sub_1BEB2E4A0();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v6, v11, (uint64_t)v10);

  sub_1BEB2D148();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v6, v13, (uint64_t)v12);

  HIDWORD(v98) = 0;
  v14 = (objc_class *)objc_opt_class();
  v15 = class_copyIvarList(v14, (unsigned int *)&v98 + 1);
  v16 = 8 * HIDWORD(v98);
  v17 = (Ivar *)((char *)&v96 - ((v16 + 15) & 0xFFFFFFFF0));
  if (v16 >= 0x200)
    v18 = 512;
  else
    v18 = 8 * HIDWORD(v98);
  bzero((char *)&v96 - ((v16 + 15) & 0xFFFFFFFF0), v18);
  if (!HIDWORD(v98))
    goto LABEL_57;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = (uint64_t)v15[v20];
    if (objc_msgSend__hasIvar_(a1, v19, v22))
      v17[v21++] = (Ivar)v22;
    ++v20;
  }
  while (v20 < HIDWORD(v98));
  if (v21)
  {
    v96 = v15;
    v97 = (void **)&v96;
    v23 = v21;
    LODWORD(v98) = a4;
    v24 = (a4 + 1);
    do
    {
      v25 = (void *)MEMORY[0x1C3B83E24]();
      sub_1BEB2D188();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writeData_(v6, v27, (uint64_t)v26);

      sub_1BEB2D1C8(v24, v6);
      v28 = *v17;
      v29 = ivar_getName(*v17) + 1;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v30, (uint64_t)v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writeString_(v6, v32, (uint64_t)v31);

      sub_1BEB2D410();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writeData_(v6, v34, (uint64_t)v33);

      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v35, (uint64_t)CFSTR("_%sCKLogValue"), v29);
      v36 = (NSString *)objc_claimAutoreleasedReturnValue();
      v37 = NSSelectorFromString(v36);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v38 = (objc_class *)objc_opt_class();
        MethodImplementation = class_getMethodImplementation(v38, v37);
        if (MethodImplementation)
        {
          ((void (*)(char *, const char *))MethodImplementation)(a1, v37);
          v41 = (id)objc_claimAutoreleasedReturnValue();
          if (v41)
            goto LABEL_42;
        }
      }
      v42 = *ivar_getTypeEncoding(v28);
      if (v42 > 80)
      {
        switch(v42)
        {
          case 'c':
            v45 = (void *)MEMORY[0x1E0CB37E8];
            Offset = ivar_getOffset(v28);
            objc_msgSend_numberWithChar_(v45, v47, a1[Offset]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'd':
            v67 = (void *)MEMORY[0x1E0CB37E8];
            v68 = ivar_getOffset(v28);
            objc_msgSend_numberWithDouble_(v67, v69, v70, *(double *)&a1[v68]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'e':
          case 'g':
          case 'h':
          case 'j':
          case 'k':
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'r':
            goto LABEL_43;
          case 'f':
            v71 = (void *)MEMORY[0x1E0CB37E8];
            LODWORD(v72) = *(_DWORD *)&a1[ivar_getOffset(v28)];
            objc_msgSend_numberWithFloat_(v71, v73, v74, v72);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'i':
            v75 = (void *)MEMORY[0x1E0CB37E8];
            v76 = ivar_getOffset(v28);
            objc_msgSend_numberWithInt_(v75, v77, *(unsigned int *)&a1[v76]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'l':
            v78 = (void *)MEMORY[0x1E0CB37E8];
            v79 = ivar_getOffset(v28);
            objc_msgSend_numberWithLong_(v78, v80, *(_QWORD *)&a1[v79]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'q':
            v81 = (void *)MEMORY[0x1E0CB37E8];
            v82 = ivar_getOffset(v28);
            objc_msgSend_numberWithLongLong_(v81, v83, *(_QWORD *)&a1[v82]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 's':
            v84 = (void *)MEMORY[0x1E0CB37E8];
            v85 = ivar_getOffset(v28);
            objc_msgSend_numberWithShort_(v84, v86, *(__int16 *)&a1[v85]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          default:
            if (v42 == 81)
            {
              v87 = (void *)MEMORY[0x1E0CB37E8];
              v88 = ivar_getOffset(v28);
              objc_msgSend_numberWithUnsignedLongLong_(v87, v89, *(_QWORD *)&a1[v88], v96, v97, v98, v99);
              v48 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              if (v42 != 83)
                goto LABEL_43;
              v52 = (void *)MEMORY[0x1E0CB37E8];
              v53 = ivar_getOffset(v28);
              objc_msgSend_numberWithUnsignedShort_(v52, v54, *(unsigned __int16 *)&a1[v53]);
              v48 = objc_claimAutoreleasedReturnValue();
            }
            break;
        }
      }
      else
      {
        switch(v42)
        {
          case '@':
            object_getIvar(a1, v28);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              goto LABEL_19;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              goto LABEL_19;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              goto LABEL_19;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_56;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              goto LABEL_56;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              goto LABEL_56;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
LABEL_56:
              v41 = v43;
            }
            else
            {
LABEL_19:
              objc_msgSend__CKLogToFileHandle_atDepth_(v43, v44, (uint64_t)v6, v24, v96);
              v41 = 0;
            }

            if (v41)
              goto LABEL_42;
            goto LABEL_43;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_43;
          case 'B':
            v55 = (void *)MEMORY[0x1E0CB37E8];
            v56 = ivar_getOffset(v28);
            objc_msgSend_numberWithBool_(v55, v57, a1[v56]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'C':
            v58 = (void *)MEMORY[0x1E0CB37E8];
            v59 = ivar_getOffset(v28);
            objc_msgSend_numberWithUnsignedChar_(v58, v60, a1[v59]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          case 'I':
            v61 = (void *)MEMORY[0x1E0CB37E8];
            v62 = ivar_getOffset(v28);
            objc_msgSend_numberWithUnsignedInt_(v61, v63, *(unsigned int *)&a1[v62]);
            v48 = objc_claimAutoreleasedReturnValue();
            break;
          default:
            if (v42 == 42)
            {
              v64 = (void *)MEMORY[0x1E0CB3940];
              v65 = ivar_getOffset(v28);
              objc_msgSend_stringWithUTF8String_(v64, v66, (uint64_t)&a1[v65]);
              v48 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              if (v42 != 76)
                goto LABEL_43;
              v49 = (void *)MEMORY[0x1E0CB37E8];
              v50 = ivar_getOffset(v28);
              objc_msgSend_numberWithUnsignedLong_(v49, v51, *(_QWORD *)&a1[v50]);
              v48 = objc_claimAutoreleasedReturnValue();
            }
            break;
        }
      }
      v41 = (id)v48;
      if (v48)
      {
LABEL_42:
        objc_msgSend__CKLogToFileHandle_atDepth_(v41, v40, (uint64_t)v6, v24, v96);

      }
LABEL_43:

      objc_autoreleasePoolPop(v25);
      ++v17;
      --v23;
    }
    while (v23);
    free(v96);
    sub_1BEB2D188();
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_writeData_(v6, v93, (uint64_t)v92);

    sub_1BEB2D1C8(v98, v6);
    sub_1BEB2D450();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_writeData_(v6, v95, (uint64_t)v94);

  }
  else
  {
LABEL_57:
    sub_1BEB2D450();
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_writeData_(v6, v91, (uint64_t)v90);

    free(v15);
  }

}

id sub_1BEB2E4A0()
{
  if (qword_1ED702A00 != -1)
    dispatch_once(&qword_1ED702A00, &unk_1E7834240);
  return (id)qword_1ED7029F8;
}

id sub_1BEB2E9F4()
{
  if (qword_1ED702A10 != -1)
    dispatch_once(&qword_1ED702A10, &unk_1E7834260);
  return (id)qword_1ED702A08;
}

id sub_1BEB2EA34()
{
  if (qword_1ED702A20 != -1)
    dispatch_once(&qword_1ED702A20, &unk_1E7834280);
  return (id)qword_1ED702A18;
}

id sub_1BEB2EA74()
{
  if (qword_1ED702A30 != -1)
    dispatch_once(&qword_1ED702A30, &unk_1E78342A0);
  return (id)qword_1ED702A28;
}

void sub_1BEB2EB90(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __CFString *v21;
  void *v22;
  const char *v23;
  id v24;

  v24 = a3;
  v4 = (void *)MEMORY[0x1C3B83E24]();
  sub_1BEB2EA74();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v24, v6, (uint64_t)v5);

  objc_msgSend_name(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v24, v10, (uint64_t)v9);

  sub_1BEB2EA74();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v24, v12, (uint64_t)v11);

  sub_1BEB2E4A0();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v24, v14, (uint64_t)v13);

  sub_1BEB2E9F4();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v24, v16, (uint64_t)v15);

  v19 = objc_msgSend_type(a1, v17, v18);
  if ((v19 - 1) >= 8)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v20, (uint64_t)CFSTR("(unknown: %i)"), v19);
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = off_1E7834360[(int)v19 - 1];
  }
  objc_msgSend_writeString_(v24, v20, (uint64_t)v21);

  sub_1BEB2EA34();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v24, v23, (uint64_t)v22);

  objc_autoreleasePoolPop(v4);
}

void sub_1BEB2ECDC(void *a1, uint64_t a2, void *a3, int a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  id v21;

  v21 = a3;
  v6 = (void *)MEMORY[0x1C3B83E24]();
  if (objc_msgSend_hasValue(a1, v7, v8))
  {
    objc_msgSend_value(a1, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__CKLogToFileHandle_atDepth_(v11, v12, (uint64_t)v21, (a4 + 1));

  }
  sub_1BEB2ED9C();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v21, v14, (uint64_t)v13);

  if (objc_msgSend_hasZoneIdentifier(a1, v15, v16))
  {
    objc_msgSend_zoneIdentifier(a1, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__CKLogToFileHandle_atDepth_(v19, v20, (uint64_t)v21, (a4 + 1));

  }
  objc_autoreleasePoolPop(v6);

}

id sub_1BEB2ED9C()
{
  if (qword_1ED702A50 != -1)
    dispatch_once(&qword_1ED702A50, &unk_1E78342E0);
  return (id)qword_1ED702A48;
}

void sub_1BEB2EDDC(void *a1, uint64_t a2, void *a3, int a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  id v27;

  v27 = a3;
  v6 = (void *)MEMORY[0x1C3B83E24]();
  if (objc_msgSend_hasValue(a1, v7, v8))
  {
    objc_msgSend_value(a1, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__CKLogToFileHandle_atDepth_(v11, v12, (uint64_t)v27, (a4 + 1));

  }
  sub_1BEB2ED9C();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v27, v14, (uint64_t)v13);

  if (objc_msgSend_hasOwnerIdentifier(a1, v15, v16))
  {
    objc_msgSend_ownerIdentifier(a1, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__CKLogToFileHandle_atDepth_(v19, v20, (uint64_t)v27, (a4 + 1));

  }
  if (objc_msgSend_hasDatabaseType(a1, v17, v18))
  {
    sub_1BEB2ED9C();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_writeData_(v27, v22, (uint64_t)v21);

    objc_msgSend_databaseType(a1, v23, v24);
    CKDatabaseScopeString();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__CKLogToFileHandle_atDepth_(v25, v26, (uint64_t)v27, (a4 + 1));

  }
  objc_autoreleasePoolPop(v6);

}

void sub_1BEB2F47C(void *a1, uint64_t a2, void *a3, int a4)
{
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  id v27;

  v6 = (void *)MEMORY[0x1E0C99D68];
  v7 = a3;
  objc_msgSend_time(a1, v8, v9);
  objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v6, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (a4 + 1);
  objc_msgSend__CKLogToFileHandle_atDepth_(v12, v14, (uint64_t)v7, v13);

  sub_1BEB2E4A0();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v7, v16, (uint64_t)v15);

  sub_1BEB2E9F4();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v7, v18, (uint64_t)v17);

  v19 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_time(a1, v20, v21);
  objc_msgSend_numberWithDouble_(v19, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__CKLogToFileHandle_atDepth_(v24, v25, (uint64_t)v7, v13);

  sub_1BEB2EA34();
  v27 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v7, v26, (uint64_t)v27);

}

void sub_1BEB306D8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("{ "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7028E8;
  qword_1ED7028E8 = v2;

}

void sub_1BEB30708(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("\n"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7028F8;
  qword_1ED7028F8 = v2;

}

id sub_1BEB30738()
{
  if (qword_1ED702910 != -1)
    dispatch_once(&qword_1ED702910, &unk_1E7834060);
  return (id)qword_1ED702908;
}

id sub_1BEB30778()
{
  if (qword_1ED702980 != -1)
    dispatch_once(&qword_1ED702980, &unk_1E7834140);
  return (id)qword_1ED702978;
}

void sub_1BEB307B8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("  "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702908;
  qword_1ED702908 = v2;

}

void sub_1BEB307E8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("    "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702918;
  qword_1ED702918 = v2;

}

void sub_1BEB30818(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("      "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702928;
  qword_1ED702928 = v2;

}

void sub_1BEB30848(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("        "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702938;
  qword_1ED702938 = v2;

}

void sub_1BEB30878(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("          "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702948;
  qword_1ED702948 = v2;

}

void sub_1BEB308A8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("            "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702958;
  qword_1ED702958 = v2;

}

void sub_1BEB308D8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("              "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702968;
  qword_1ED702968 = v2;

}

void sub_1BEB30908(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("                "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702978;
  qword_1ED702978 = v2;

}

void sub_1BEB30938(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(" = "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702988;
  qword_1ED702988 = v2;

}

void sub_1BEB30968(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(" }"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702998;
  qword_1ED702998 = v2;

}

void sub_1BEB30998(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("[ "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7029A8;
  qword_1ED7029A8 = v2;

}

void sub_1BEB309C8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(", "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7029B8;
  qword_1ED7029B8 = v2;

}

void sub_1BEB309F8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(" ]"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7029C8;
  qword_1ED7029C8 = v2;

}

void sub_1BEB30A28(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("<"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7029D8;
  qword_1ED7029D8 = v2;

}

void sub_1BEB30A58(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(">"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7029E8;
  qword_1ED7029E8 = v2;

}

void sub_1BEB30A88(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(" "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED7029F8;
  qword_1ED7029F8 = v2;

}

void sub_1BEB30AB8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("("), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A08;
  qword_1ED702A08 = v2;

}

void sub_1BEB30AE8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(")"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A18;
  qword_1ED702A18 = v2;

}

void sub_1BEB30B18(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("\""), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A28;
  qword_1ED702A28 = v2;

}

void sub_1BEB30B48(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(": "), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A38;
  qword_1ED702A38 = v2;

}

void sub_1BEB30B78(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("|"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A48;
  qword_1ED702A48 = v2;

}

void sub_1BEB30BA8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("["), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A58;
  qword_1ED702A58 = v2;

}

void sub_1BEB30BD8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR(","), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A68;
  qword_1ED702A68 = v2;

}

void sub_1BEB30C08(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_dataUsingEncoding_(CFSTR("]"), a2, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702A78;
  qword_1ED702A78 = v2;

}

uint64_t sub_1BEB30D34(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB313B0(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void (**v35)(_QWORD);
  void *v36;
  _BOOL4 v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  id v43;
  const char *v44;
  const char *v45;
  void *v46;
  void *v47;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  id v53;
  _QWORD aBlock[5];
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend_needsEncryption(a1, v7, v8))
  {
    v11 = (void *)objc_msgSend_copy(v6, v9, v10);
    objc_msgSend_mergeableValueID(v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
    {
      objc_msgSend_valueID(a1, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setMergeableValueID_(v11, v18, (uint64_t)v17);

    }
    objc_msgSend_metadata(a1, v15, v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_envelope(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v25 = (void *)*MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
        v49 = v25;
        objc_msgSend_deltaID(a1, v50, v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf[0]) = 138412290;
        *(_QWORD *)((char *)buf + 4) = v52;
        _os_log_debug_impl(&dword_1BE990000, v49, OS_LOG_TYPE_DEBUG, "Throwing away cached envelope for %@", (uint8_t *)buf, 0xCu);

      }
      objc_msgSend_metadata(a1, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setEnvelope_(v28, v29, 0);

    }
    objc_msgSend_metadata(a1, v23, v24);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend__encryptWithContext_error_(v30, v31, (uint64_t)v11, a4);

    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1BEB3174C;
    aBlock[3] = &unk_1E7830348;
    aBlock[4] = v32;
    v35 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (v32)
    {
      objc_msgSend_asset(a1, v33, v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v36 == 0;

      if (!v37)
      {
LABEL_12:
        v39 = 1;
LABEL_24:
        v35[2](v35);

        goto LABEL_25;
      }
      buf[0] = 0;
      v53 = 0;
      objc_msgSend_dataWithError_(a1, v38, (uint64_t)&v53);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = v53;
      if (v40)
      {
        objc_msgSend_shareProtection(v11, v41, v42);
        objc_msgSend_dataUsingEncoding_(CFSTR("payload"), v44, 4);
        v46 = (void *)PCSKeyEnvelopeEncrypt();
        if (v46)
        {
          objc_msgSend_setEncryptedData_(a1, v45, (uint64_t)v46);

          goto LABEL_12;
        }
        if (a4)
        {
          v47 = (void *)buf[0];
          objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v45, *MEMORY[0x1E0C94B20], 1000, buf[0], CFSTR("Failed to encrypt delta payload"));
          *a4 = (id)objc_claimAutoreleasedReturnValue();

        }
      }
      else
      {
        if (a4)
        {
          objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v41, *MEMORY[0x1E0C94B20], 2003, v43, CFSTR("Mergeable delta encryption failed, missing delta payload"));
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }

      }
    }
    v39 = 0;
    goto LABEL_24;
  }
  v39 = 1;
LABEL_25:

  return v39;
}

void sub_1BEB3171C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB3174C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_1BEB3175C(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void (**v34)(_QWORD);
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  const char *v47;
  void *v48;
  const char *v49;
  _QWORD aBlock[5];

  v6 = a3;
  objc_msgSend_asset(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9
    || (v12 = objc_msgSend_shareProtection(v6, v10, v11),
        objc_msgSend_pcsManager(v6, v13, v14),
        v15 = (void *)objc_claimAutoreleasedReturnValue(),
        LODWORD(v12) = objc_msgSend_unwrapAssetKeyWithShareProtection_pcsManager_error_(a1, v16, v12, v15, a4),
        v15,
        (_DWORD)v12))
  {
    v17 = (void *)objc_msgSend_copy(v6, v10, v11);
    objc_msgSend_mergeableValueID(v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v20)
    {
      objc_msgSend_valueID(a1, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setMergeableValueID_(v17, v24, (uint64_t)v23);

    }
    objc_msgSend_metadata(a1, v21, v22);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_needsDecryption(v25, v26, v27);

    if (v28)
    {
      objc_msgSend_metadata(a1, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend__decryptWithContext_error_(v31, v32, (uint64_t)v17, a4);

    }
    else
    {
      v33 = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1BEB31A34;
    aBlock[3] = &unk_1E7830348;
    aBlock[4] = v33;
    v34 = (void (**)(_QWORD))_Block_copy(aBlock);
    if ((objc_msgSend_needsDecryption(a1, v35, v36) & 1) == 0)
      goto LABEL_11;
    if (v33)
    {
      objc_msgSend_asset(a1, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      if (v39)
      {
LABEL_11:
        v42 = 1;
LABEL_22:
        v34[2](v34);

        goto LABEL_23;
      }
      objc_msgSend_encryptedData(a1, v40, v41);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      if (v45)
      {
        objc_msgSend_shareProtection(v17, v43, v44);
        objc_msgSend_dataUsingEncoding_(CFSTR("payload"), v46, 4);
        v48 = (void *)PCSKeyEnvelopeDecrypt();
        if (v48)
        {
          objc_msgSend_set_data_(a1, v47, (uint64_t)v48);
          objc_msgSend_setEncryptedData_(a1, v49, 0);

          goto LABEL_11;
        }
        if (a4)
        {
          objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v47, *MEMORY[0x1E0C94B20], 5004, 0, CFSTR("Failed to decrypt mergeable delta payload"));
          *a4 = (id)objc_claimAutoreleasedReturnValue();

        }
      }
      else if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v43, *MEMORY[0x1E0C94B20], 2003, CFSTR("Mergeable delta decryption failed, encrypted payload missing"));
        v42 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_22;
      }
    }
    v42 = 0;
    goto LABEL_22;
  }
  v42 = 0;
LABEL_23:

  return v42;
}

void sub_1BEB31A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB31A34(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

BOOL sub_1BEB31A44(void *a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  CKDWrappingContext *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  id v54;
  const char *v55;
  void *v56;
  uint64_t v58;
  void *v59;
  id v60;

  v8 = a4;
  objc_msgSend_asset(a1, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueID(a1, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend_valueID(a1, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_key(v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      if (v11)
      {
        v25 = [CKDWrappingContext alloc];
        objc_msgSend_valueID(a1, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_recordID(v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_valueID(a1, v32, v33);
        v59 = v8;
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_key(v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deltaID(a1, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_signature(v11, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_referenceSignature(v11, v44, v45);
        v58 = a3;
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = (void *)objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v25, v47, (uint64_t)v31, v37, v40, v43, v46);

        v8 = v59;
        objc_msgSend_wrappedAssetKey(v11, v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = 0;
        objc_msgSend_unwrapAssetKey_withRecordPCS_inContext_withError_(v59, v52, (uint64_t)v51, v58, v48, &v60);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = v60;

        if (v53)
        {
          objc_msgSend_setAssetKey_(v11, v55, (uint64_t)v53);
          v56 = 0;
        }
        else
        {
          objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v55, *MEMORY[0x1E0C94B20], 5004, v54, CFSTR("Failed to unwrap mergeable delta asset key"));
          v56 = (void *)objc_claimAutoreleasedReturnValue();
        }

      }
      else
      {
        v56 = 0;
      }
      goto LABEL_12;
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v24, *MEMORY[0x1E0C94B20], 1017, CFSTR("Can't unwrap asset key for mergeable delta with no field name"));
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v18, *MEMORY[0x1E0C94B20], 1017, CFSTR("Can't unwrap asset key for mergeable delta with no record ID"));
  }
  v56 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:
  if (a5)
    *a5 = objc_retainAutorelease(v56);

  return v56 == 0;
}

uint64_t sub_1BEB31CD4(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t isEncrypted;

  objc_msgSend_valueID(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  isEncrypted = objc_msgSend_isEncrypted(v3, v4, v5);

  return isEncrypted;
}

BOOL sub_1BEB31D08(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;

  objc_msgSend_valueID(a1, a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEncrypted(v4, v5, v6))
  {
    objc_msgSend_encryptedData(a1, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9 != 0;

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_1BEB31D60(void *a1)
{
  return objc_getAssociatedObject(a1, "CKEnvelopeData");
}

void sub_1BEB31D6C(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "CKEnvelopeData", a3, (void *)3);
}

id sub_1BEB31D7C(void *a1)
{
  return objc_getAssociatedObject(a1, "CKEncryptedTimestampsKey");
}

void sub_1BEB31D88(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "CKEncryptedTimestampsKey", a3, (void *)3);
}

id sub_1BEB31D98(void *a1)
{
  return objc_getAssociatedObject(a1, "CKEnvelopeAuthenticatedTimestampsKey");
}

void sub_1BEB31DA4(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "CKEnvelopeAuthenticatedTimestampsKey", a3, (void *)3);
}

uint64_t sub_1BEB31DB4(void *a1, uint64_t a2, void *a3, int a4, _QWORD *a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t Envelope;
  const char *v25;

  v8 = a3;
  objc_msgSend_identifier(a1, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_envelopeContextWithIdentifier_error_(v8, v12, (uint64_t)v11, a5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend_envelope(a1, v14, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      objc_msgSend_shareProtection(v8, v16, v17);
      v19 = PCSKeyEnvelopeCreateWithValues();
      if (v19)
      {
        v21 = v19;
LABEL_17:

        goto LABEL_18;
      }
      if (a5)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v20, *MEMORY[0x1E0C94B20], 5004, 0, CFSTR("Failed to decrypt mergeable delta envelope"));
LABEL_15:
        *a5 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else if (a4)
    {
      objc_msgSend_shareProtection(v8, v16, v17);
      v22 = PCSKeyEnvelopeCreate();
      if (v22)
      {
        v21 = v22;
        Envelope = PCSKeyEnvelopeGetEnvelope();
        objc_msgSend_setEnvelope_(a1, v25, Envelope);
        goto LABEL_17;
      }
      if (a5)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v23, *MEMORY[0x1E0C94B20], 1000, 0, CFSTR("Failed to create mergeable delta envelope"));
        goto LABEL_15;
      }
    }
    else if (a5)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v16, *MEMORY[0x1E0C94B20], 2003, CFSTR("Mergeable delta envelope missing"));
      v21 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
    v21 = 0;
    goto LABEL_17;
  }
  v21 = 0;
LABEL_18:

  return v21;
}

const void *sub_1BEB31F60(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  const void *v8;
  const char *v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  void *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  void *v25;
  const char *v26;
  id v27;
  const char *v28;
  void *v29;
  const char *v30;
  void *v31;
  _QWORD aBlock[5];

  v6 = a3;
  v8 = (const void *)objc_msgSend__envelopeWithContext_allowCreation_error_(a1, v7, (uint64_t)v6, 1, a4);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEB321BC;
  aBlock[3] = &unk_1E7830348;
  aBlock[4] = v8;
  v11 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (v8)
  {
    v12 = (void *)MEMORY[0x1E0C94EC8];
    objc_msgSend_vectors(a1, v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pDistributedTimestampsFromDeltaMetadataVectors_(v12, v14, (uint64_t)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_data(v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_encryptMergeableValueMetadata(v6, v19, v20) & 1) != 0)
    {
      objc_msgSend_shareProtection(v6, v21, v22);
      objc_msgSend_dataUsingEncoding_(CFSTR("encryptedTimestamps"), v23, 4);
      v25 = (void *)PCSKeyEnvelopeEncrypt();
      if (v25)
      {
        objc_msgSend_setEncryptedTimestamps_(a1, v24, (uint64_t)v25);
LABEL_7:

        CFRetain(v8);
LABEL_14:

        goto LABEL_15;
      }
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v24, *MEMORY[0x1E0C94B20], 1000, 0, CFSTR("Failed to encrypt mergeable delta timestamps"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:
        *a4 = v31;

      }
    }
    else
    {
      objc_msgSend_shareProtection(v6, v21, v22);
      v25 = (void *)PCSKeyEnvelopeAuthenticate();
      if (v25)
      {
        v27 = objc_alloc(MEMORY[0x1E0C951F8]);
        v29 = (void *)objc_msgSend_initWithObject1_object2_(v27, v28, (uint64_t)v18, v25);
        objc_msgSend_setAuthenticatedTimestamps_(a1, v30, (uint64_t)v29);

        goto LABEL_7;
      }
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v26, *MEMORY[0x1E0C94B20], 1000, 0, CFSTR("Failed to authenticate mergeable delta timestamps"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_12;
      }
    }
    v8 = 0;
    goto LABEL_14;
  }
LABEL_15:
  v11[2](v11);

  return v8;
}

void sub_1BEB32194(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB321BC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

BOOL sub_1BEB321CC(void *a1, const char *a2, uint64_t a3)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)objc_msgSend__decryptWithContext_error_(a1, a2, a3);
  v4 = v3;
  if (v3)
    CFRelease(v3);
  return v4 != 0;
}

const void *sub_1BEB32200(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  const void *v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const char *v11;
  uint64_t v12;
  void (**v13)(_QWORD);
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const __CFBoolean *v27;
  const char *v28;
  void (**v29)(_QWORD);
  id v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  id v110;
  const char *v111;
  void *v112;
  const char *v113;
  int v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  const char *v119;
  void *v120;
  id v121;
  const char *v122;
  void *v123;
  const char *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  const char *v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  const char *v188;
  uint64_t v189;
  void *v190;
  const char *v191;
  uint64_t v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  id v198;
  const char *v199;
  void *v200;
  const char *v201;
  void *v202;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void (**v212)(_QWORD);
  void *v213;
  void *v214;
  _QWORD v215[5];
  void *v216;
  _QWORD aBlock[6];

  v6 = a3;
  v8 = (const void *)objc_msgSend__envelopeWithContext_allowCreation_error_(a1, v7, (uint64_t)v6, 0, a4);
  v9 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEB329FC;
  aBlock[3] = &unk_1E7830348;
  aBlock[4] = v8;
  v10 = (void (**)(_QWORD))_Block_copy(aBlock);
  v13 = v10;
  if (v8)
  {
    v214 = v6;
    v212 = v10;
    objc_msgSend_packageProcessBasePath(MEMORY[0x1E0C94FC8], v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_standaloneTranslatorWithPackageStagingDirectory_databaseScope_(CKDProtocolTranslator, v15, (uint64_t)v14, 2);
    v213 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_authenticatedTimestamps(a1, v16, v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v20)
      goto LABEL_14;
    v216 = 0;
    objc_msgSend_shareProtection(v214, v18, v19);
    objc_msgSend_v2(v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_v1(v20, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (const __CFBoolean *)PCSKeyEnvelopeVerify();

    v215[0] = v9;
    v215[1] = 3221225472;
    v215[2] = sub_1BEB32A0C;
    v215[3] = &unk_1E7830348;
    v215[4] = v27;
    v29 = (void (**)(_QWORD))_Block_copy(v215);
    if (v27 && CFBooleanGetValue(v27))
    {
      v30 = objc_alloc(MEMORY[0x1E0C94C68]);
      objc_msgSend_v1(v20, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = (void *)objc_msgSend_initWithData_(v30, v34, (uint64_t)v33);

      objc_msgSend_deltaMetadataVectorsFromPDistributedTimestamps_error_(v213, v36, (uint64_t)v35, a4);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (v39)
      {
        objc_msgSend_vectors(a1, v37, v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_previous(v40, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v210 = (void *)objc_msgSend_mutableCopy(v43, v44, v45);

        objc_msgSend_vectors(a1, v46, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_contents(v48, v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v208 = (void *)objc_msgSend_mutableCopy(v51, v52, v53);

        objc_msgSend_vectors(a1, v54, v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removals(v56, v57, v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v206 = (void *)objc_msgSend_mutableCopy(v59, v60, v61);

        objc_msgSend_vectors(a1, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dependencies(v64, v65, v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v204 = (void *)objc_msgSend_mutableCopy(v67, v68, v69);

        objc_msgSend_backingVector(v210, v70, v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_previous(v39, v73, v74);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_backingVector(v75, v76, v77);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addAllClockValuesFromVector_(v72, v79, (uint64_t)v78);

        objc_msgSend_backingVector(v208, v80, v81);
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_contents(v39, v83, v84);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_backingVector(v85, v86, v87);
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addAllClockValuesFromVector_(v82, v89, (uint64_t)v88);

        objc_msgSend_backingVector(v206, v90, v91);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removals(v39, v93, v94);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_backingVector(v95, v96, v97);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addAllClockValuesFromVector_(v92, v99, (uint64_t)v98);

        objc_msgSend_backingVector(v204, v100, v101);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dependencies(v39, v103, v104);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_backingVector(v105, v106, v107);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addAllClockValuesFromVector_(v102, v109, (uint64_t)v108);

        v110 = objc_alloc(MEMORY[0x1E0C94EC8]);
        v112 = (void *)objc_msgSend_initWithPreviousVector_contentsVector_removalsVector_dependenciesVector_(v110, v111, (uint64_t)v210, v208, v206, v204);

        objc_msgSend_setVectors_(a1, v113, (uint64_t)v112);
        v114 = 0;
LABEL_10:

        goto LABEL_12;
      }
    }
    else
    {
      if (!a4)
      {
        v114 = 1;
LABEL_12:
        v29[2](v29);

        if (v114)
        {
          v8 = 0;
LABEL_24:

          v13 = v212;
          v6 = v214;
          goto LABEL_25;
        }
LABEL_14:
        objc_msgSend_encryptedTimestamps(a1, v18, v19);
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        if (v117)
        {
          v216 = 0;
          objc_msgSend_shareProtection(v214, v115, v116);
          objc_msgSend_dataUsingEncoding_(CFSTR("encryptedTimestamps"), v118, 4);
          v120 = (void *)PCSKeyEnvelopeDecrypt();
          if (v120)
          {
            v121 = objc_alloc(MEMORY[0x1E0C94C68]);
            v123 = (void *)objc_msgSend_initWithData_(v121, v122, (uint64_t)v120);
            objc_msgSend_deltaMetadataVectorsFromPDistributedTimestamps_error_(v213, v124, (uint64_t)v123, a4);
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            if (v127)
            {
              objc_msgSend_vectors(a1, v125, v126);
              v128 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_previous(v128, v129, v130);
              v131 = (void *)objc_claimAutoreleasedReturnValue();
              v211 = (void *)objc_msgSend_mutableCopy(v131, v132, v133);

              objc_msgSend_vectors(a1, v134, v135);
              v136 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_contents(v136, v137, v138);
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              v209 = (void *)objc_msgSend_mutableCopy(v139, v140, v141);

              objc_msgSend_vectors(a1, v142, v143);
              v144 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_removals(v144, v145, v146);
              v147 = (void *)objc_claimAutoreleasedReturnValue();
              v207 = (void *)objc_msgSend_mutableCopy(v147, v148, v149);

              objc_msgSend_vectors(a1, v150, v151);
              v152 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_dependencies(v152, v153, v154);
              v155 = (void *)objc_claimAutoreleasedReturnValue();
              v205 = (void *)objc_msgSend_mutableCopy(v155, v156, v157);

              objc_msgSend_backingVector(v211, v158, v159);
              v160 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_previous(v127, v161, v162);
              v163 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_backingVector(v163, v164, v165);
              v166 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addAllClockValuesFromVector_(v160, v167, (uint64_t)v166);

              objc_msgSend_backingVector(v209, v168, v169);
              v170 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_contents(v127, v171, v172);
              v173 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_backingVector(v173, v174, v175);
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addAllClockValuesFromVector_(v170, v177, (uint64_t)v176);

              objc_msgSend_backingVector(v207, v178, v179);
              v180 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_removals(v127, v181, v182);
              v183 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_backingVector(v183, v184, v185);
              v186 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addAllClockValuesFromVector_(v180, v187, (uint64_t)v186);

              objc_msgSend_backingVector(v205, v188, v189);
              v190 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_dependencies(v127, v191, v192);
              v193 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_backingVector(v193, v194, v195);
              v196 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addAllClockValuesFromVector_(v190, v197, (uint64_t)v196);

              v198 = objc_alloc(MEMORY[0x1E0C94EC8]);
              v200 = (void *)objc_msgSend_initWithPreviousVector_contentsVector_removalsVector_dependenciesVector_(v198, v199, (uint64_t)v211, v209, v207, v205);

              objc_msgSend_setVectors_(a1, v201, (uint64_t)v200);
              goto LABEL_18;
            }

          }
          else if (a4)
          {
            v202 = v216;
            objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v119, *MEMORY[0x1E0C94B20], 5004, v216, CFSTR("Failed to decrypt mergeable delta timestamps"));
            *a4 = (id)objc_claimAutoreleasedReturnValue();

          }
          v8 = 0;
          goto LABEL_23;
        }
LABEL_18:
        CFRetain(v8);
LABEL_23:

        goto LABEL_24;
      }
      v35 = v216;
      objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v28, *MEMORY[0x1E0C94B20], 5004, v216, CFSTR("Failed to verify mergeable delta timestamps"));
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    v114 = 1;
    goto LABEL_10;
  }
LABEL_25:
  v13[2](v13);

  return v8;
}

void sub_1BEB32988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  (*(void (**)(void))(a14 + 16))();
  _Unwind_Resume(a1);
}

void sub_1BEB329FC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void sub_1BEB32A0C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

BOOL sub_1BEB32A1C(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  void *v8;

  objc_msgSend_encryptedTimestamps(a1, a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    objc_msgSend_authenticatedTimestamps(a1, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v8 == 0;

  }
  return v7;
}

BOOL sub_1BEB32A70(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  void *v8;

  objc_msgSend_encryptedTimestamps(a1, a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = 1;
  }
  else
  {
    objc_msgSend_authenticatedTimestamps(a1, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v8 != 0;

  }
  return v7;
}

BOOL sub_1BEB33010(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 80;
          goto LABEL_35;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_35;
        case 3u:
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v20)
            objc_msgSend_addLocalizedArguments_(a1, v19, (uint64_t)v20);
          goto LABEL_36;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_35;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_35;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_35;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_35;
        case 8u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 88;
          goto LABEL_35;
        case 9u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 104;
          goto LABEL_35;
        case 0xAu:
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v20)
            objc_msgSend_addTitleLocalizedArguments_(a1, v21, (uint64_t)v20);
          goto LABEL_36;
        case 0xBu:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_35;
        case 0xCu:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 72;
LABEL_35:
          v20 = *(void **)&a1[v18];
          *(_QWORD *)&a1[v18] = v17;
          goto LABEL_36;
        case 0xDu:
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v20)
            objc_msgSend_addSubtitleLocalizedArguments_(a1, v22, (uint64_t)v20);
LABEL_36:

          goto LABEL_37;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB34DE4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecordType *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          goto LABEL_37;
        goto LABEL_44;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

        goto LABEL_42;
      case 3u:
        v17 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_44;
        goto LABEL_37;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_41:
        *(_DWORD *)(a1 + 40) = v23;
        goto LABEL_42;
      case 5u:
        v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

void sub_1BEB357BC()
{
  void *v0;

  v0 = (void *)qword_1ED7009D8;
  qword_1ED7009D8 = (uint64_t)&unk_1E78AFA28;

}

uint64_t sub_1BEB35AB0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPAssetsToDownload *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPAssetsToDownload *)objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom() & 1) != 0)
          goto LABEL_41;
        goto LABEL_52;
      case 2u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

        goto LABEL_50;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_45:
        *(_BYTE *)(a1 + 40) = v23 != 0;
        goto LABEL_50;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_49:
        *(_DWORD *)(a1 + 24) = v29;
        goto LABEL_50;
      case 5u:
        v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (sub_1BEC1BD10((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_50:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

uint64_t sub_1BEB367B8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPUserAlias *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPUserAlias *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && (CKDPIdentifierReadFrom() & 1) != 0)
          goto LABEL_32;
        goto LABEL_46;
      case 2u:
        v17 = objc_alloc_init(CKDPUserAlias);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1BEAFA248((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_46;
        goto LABEL_32;
      case 3u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
        goto LABEL_29;
      case 4u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 32;
LABEL_29:
        v21 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_44;
      case 5u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && sub_1BEA1BDA4((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      case 6u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_43:
        *(_BYTE *)(a1 + 48) = v24 != 0;
        goto LABEL_44;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

BOOL sub_1BEB37558(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecordFieldIdentifier *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPAsset);
    objc_msgSend_addAssets_(a1, v18, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB389DC(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPUserPrivacySettingsBatchLookupResponseContainerPrivacySettings *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPUserPrivacySettingsBatchLookupResponseContainerPrivacySettings);
        objc_msgSend_addContainerPrivacySettings_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEA3E344((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB392E4(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPSubscription *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPSubscription);
        objc_msgSend_addSubscriptions_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEB9D738((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB39B70(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB3A704(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPUserInformationBlockedRequestAccess *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(CKDPUserInformationBlockedRequestAccess);
        objc_msgSend_addBlockedUsers_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !CKDPUserInformationBlockedRequestAccessReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *CKDMMCSRegisterOptionDescription(uint64_t a1, const char *a2, uint64_t a3)
{
  char v3;
  void *v4;
  const char *v5;
  void *v6;
  __CFString *v7;

  if (!a1)
  {
    v7 = CFSTR("none");
    return v7;
  }
  v3 = a1;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v4;
  if ((v3 & 2) != 0)
  {
    objc_msgSend_addObject_(v4, v5, (uint64_t)CFSTR("chunk"));
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend_addObject_(v6, v5, (uint64_t)CFSTR("fetch"));
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  objc_msgSend_addObject_(v6, v5, (uint64_t)CFSTR("fetch-chunks"));
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
LABEL_16:
    objc_msgSend_addObject_(v6, v5, (uint64_t)CFSTR("inline-put-complete"));
    if ((v3 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  objc_msgSend_addObject_(v6, v5, (uint64_t)CFSTR("preauth"));
  if ((v3 & 0x20) != 0)
    goto LABEL_16;
LABEL_7:
  if ((v3 & 0x40) != 0)
LABEL_8:
    objc_msgSend_addObject_(v6, v5, (uint64_t)CFSTR("chunk-padding"));
LABEL_9:
  objc_msgSend_componentsJoinedByString_(v6, v5, (uint64_t)CFSTR(", "));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1BEB3B1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  uint64_t v18;

  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v18 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB3B200(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  int v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_checkoutCount(*(void **)(a1 + 32), a2, a3) <= 0)
    __assert_rtn("-[CKDMMCS drop]_block_invoke", "CKDMMCS.m", 129, "self.checkoutCount > 0");
  v6 = *(void **)(a1 + 32);
  v7 = objc_msgSend_checkoutCount(v6, v4, v5);
  objc_msgSend_setCheckoutCount_(v6, v8, v7 - 1);
  result = objc_msgSend_checkoutCount(*(void **)(a1 + 32), v9, v10);
  if (!result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    v14 = *(void **)(a1 + 32);
    objc_msgSend_sharedWrappersByPath(CKDMMCS, v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(*(void **)(a1 + 32), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v15, v19, (uint64_t)v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14 == v20)
    {
      objc_msgSend_sharedWrappersByPath(CKDMMCS, v21, v22);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_path(*(void **)(a1 + 32), v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removeObjectForKey_(v34, v38, (uint64_t)v37);

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v23 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v26 = *(void **)(a1 + 32);
        v27 = v23;
        objc_msgSend_path(v26, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_CKSanitizedPath(v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 138412546;
        v43 = v26;
        v44 = 2114;
        v45 = v33;
        _os_log_error_impl(&dword_1BE990000, v27, OS_LOG_TYPE_ERROR, "%@ not in the sharedWrappers map at key %{public}@", (uint8_t *)&v42, 0x16u);

      }
    }
    objc_msgSend_drop(*(void **)(*(_QWORD *)(a1 + 32) + 40), v24, v25);
    v39 = *(_QWORD *)(a1 + 32);
    v40 = *(void **)(v39 + 40);
    *(_QWORD *)(v39 + 40) = 0;

    result = objc_msgSend_tearDownMMCSEngineWithContext_(CKDMMCSEngineContext, v41, *(_QWORD *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = result;
  }
  return result;
}

void sub_1BEB3B484()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  void *v6;

  MMCSSignatureGeneratorCreate();
  MEMORY[0x1C3B82FC0]();
  v0 = MMCSSignatureGeneratorFinish();
  v1 = (void *)v0;
  if (v0)
  {
    v2 = (void *)MEMORY[0x1E0C99D50];
    v3 = MEMORY[0x1C3B82F9C](v0);
    objc_msgSend_dataWithBytes_length_(v2, v4, (uint64_t)v1, v3);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  free(v1);
  v6 = (void *)qword_1ED702A88;
  qword_1ED702A88 = v5;

}

void sub_1BEB3BE0C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_weakToWeakObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED702A98;
  qword_1ED702A98 = v3;

}

void sub_1BEB3C3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB3C3EC(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  char hasCachedCKDMMCSEngineContextForPath;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  CKDMMCS *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id obj;
  char v97;
  id v98;
  uint8_t buf[4];
  void *v100;
  __int16 v101;
  void *v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1C3B83E24]();
  objc_msgSend_sharedWrappersByPath(CKDMMCS, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v5, v9, (uint64_t)v8);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v15 = (id)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v79 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v16, v17);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKSanitizedPath(v80, v81, v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = objc_msgSend_checkoutCount(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v84, v85);
      *(_DWORD *)buf = 138412802;
      v100 = v79;
      v101 = 2114;
      v102 = v83;
      v103 = 2048;
      v104 = v86;
      _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Found a cached MMCS wrapper %@ at path %{public}@ count %lld", buf, 0x20u);

    }
    v18 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v21 = objc_msgSend_checkoutCount(v18, v19, v20);
    objc_msgSend_setCheckoutCount_(v18, v22, v21 + 1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    objc_msgSend_containerCloudKitDirectory(*(void **)(a1 + 32), v13, v14);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    hasCachedCKDMMCSEngineContextForPath = objc_msgSend_hasCachedCKDMMCSEngineContextForPath_(CKDMMCSEngineContext, v27, (uint64_t)v26);

    if ((hasCachedCKDMMCSEngineContextForPath & 1) != 0)
    {
      v31 = 0;
    }
    else
    {
      buf[0] = 0;
      v67 = *(_QWORD *)(a1 + 32);
      v66 = *(_QWORD *)(a1 + 40);
      v68 = *(_QWORD *)(a1 + 48);
      v69 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v98 = *(id *)(v69 + 40);
      objc_msgSend_assetCacheWithApplicationBundleID_directoryContext_database_didInit_error_(CKDAssetCache, v29, v66, v67, v68, buf, &v98);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_storeStrong((id *)(v69 + 40), v98);
      if (!v31)
        goto LABEL_28;
      if (buf[0] && objc_msgSend_isNewEmptyCache(v31, v29, v30))
      {
        v70 = *(void **)(a1 + 80);
        objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v29, v30);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_path(v71, v72, v73);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_purgeMMCSDirectoryWithPath_(v70, v75, (uint64_t)v74);

      }
    }
    v97 = 0;
    v32 = *(_QWORD *)(a1 + 40);
    objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v29, v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    obj = *(id *)(v37 + 40);
    objc_msgSend_setupMMCSEngineWithApplicationBundleID_path_wasCached_error_(CKDMMCSEngineContext, v38, v32, v36, &v97, &obj);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(v37 + 40), obj);

    if (v39)
    {
      if (!v97 && !v31)
        __assert_rtn("+[CKDMMCS MMCSWrapperForApplicationBundleID:directoryContext:database:error:]_block_invoke", "CKDMMCS.m", 467, "(wasCached || assetCache) && \"MMCS engine context was cached or we created an asset cache\"");
      if (v31)
      {
        v40 = [CKDMMCS alloc];
        v42 = objc_msgSend_initWithMMCSEngineContext_directoryContext_(v40, v41, (uint64_t)v39, *(_QWORD *)(a1 + 32));
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v44 = *(void **)(v43 + 40);
        *(_QWORD *)(v43 + 40) = v42;

        v45 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v48 = objc_msgSend_checkoutCount(v45, v46, v47);
        objc_msgSend_setCheckoutCount_(v45, v49, v48 + 1);
        objc_msgSend_setMMCS_(v39, v50, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
        objc_msgSend_setAssetCache_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v51, (uint64_t)v31);
        objc_msgSend_setMMCS_(v31, v52, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
        objc_msgSend_setupPersistentStateAtStartup(v31, v53, v54);
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v55 = (id)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend_path(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v56, v57);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_CKSanitizedPath(v87, v88, v89);
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          v94 = objc_msgSend_checkoutCount(v91, v92, v93);
          *(_DWORD *)buf = 138543874;
          v100 = v90;
          v101 = 2112;
          v102 = v91;
          v103 = 2048;
          v104 = v94;
          _os_log_debug_impl(&dword_1BE990000, v55, OS_LOG_TYPE_DEBUG, "setting sharedWrappers map key %{public}@ value %@ count %lld", buf, 0x20u);

        }
        objc_msgSend_sharedWrappersByPath(CKDMMCS, v58, v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        objc_msgSend_path(v61, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKey_(v60, v65, (uint64_t)v61, v64);

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v76 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v95 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v100 = v95;
        _os_log_error_impl(&dword_1BE990000, v76, OS_LOG_TYPE_ERROR, "Couldn't create a context, %@", buf, 0xCu);
      }
      objc_msgSend_drop(v31, v77, v78);
    }

  }
LABEL_28:
  objc_autoreleasePoolPop(v2);
}

void sub_1BEB3C9C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  id v13;
  NSObject *v14;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_error_impl(&dword_1BE990000, v14, OS_LOG_TYPE_ERROR, "Exception %{public}@", (uint8_t *)&buf, 0xCu);
    }

    objc_end_catch();
    JUMPOUT(0x1BEB3C7A8);
  }
  _Unwind_Resume(a1);
}

void sub_1BEB3CCD8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_1BEB3D400(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  const char *v8;
  const char *v9;
  void *v10;
  id v11;
  const char *v12;
  void *v13;
  id v14;
  const char *v15;
  _QWORD v17[5];

  v5 = a3;
  v6 = *MEMORY[0x1E0D46878];
  v7 = a2;
  if (objc_msgSend_isEqualToString_(v7, v8, v6))
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1BEB3D4F0;
    v17[3] = &unk_1E7834510;
    v17[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_CKMap_(v5, v9, (uint64_t)v17);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_alloc(MEMORY[0x1E0C951F8]);
    v13 = (void *)objc_msgSend_initWithObject1_object2_(v11, v12, (uint64_t)v7, v10);

  }
  else
  {
    v14 = objc_alloc(MEMORY[0x1E0C951F8]);
    v13 = (void *)objc_msgSend_initWithObject1_object2_(v14, v15, (uint64_t)v7, v5);

  }
  return v13;
}

id sub_1BEB3D4F0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  void *v50;
  const char *v51;

  v3 = a2;
  v6 = (void *)objc_msgSend_mutableCopy(v3, v4, v5);
  v7 = *MEMORY[0x1E0D46920];
  objc_msgSend_objectForKeyedSubscript_(v3, v8, *MEMORY[0x1E0D46920]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v9, v10, v11);

  v13 = *MEMORY[0x1E0D467E0];
  objc_msgSend_objectForKeyedSubscript_(v12, v14, *MEMORY[0x1E0D467E0]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    v17 = (void *)MEMORY[0x1E0CB3940];
    v18 = *(void **)(a1 + 32);
    objc_msgSend_objectForKeyedSubscript_(v12, v16, v13);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__referenceIdentifierFromAssetKey_(v18, v20, (uint64_t)v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v17, v22, (uint64_t)CFSTR("<key hash: %@>"), v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v12, v24, (uint64_t)v23, v13);

  }
  if (v12)
    objc_msgSend_setObject_forKeyedSubscript_(v6, v16, (uint64_t)v12, v7);
  v25 = *MEMORY[0x1E0D46930];
  objc_msgSend_objectForKeyedSubscript_(v3, v16, *MEMORY[0x1E0D46930]);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (void *)objc_msgSend_mutableCopy(v26, v27, v28);

  objc_msgSend_objectForKeyedSubscript_(v29, v30, v13);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v31)
  {
    v33 = (void *)MEMORY[0x1E0CB3940];
    v34 = *(void **)(a1 + 32);
    objc_msgSend_objectForKeyedSubscript_(v29, v32, v13);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__referenceIdentifierFromAssetKey_(v34, v36, (uint64_t)v35);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v33, v38, (uint64_t)CFSTR("<key hash: %@>"), v37);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v29, v40, (uint64_t)v39, v13);

  }
  if (v29)
    objc_msgSend_setObject_forKeyedSubscript_(v6, v32, (uint64_t)v29, v25);
  v41 = *MEMORY[0x1E0D46708];
  objc_msgSend_objectForKeyedSubscript_(v3, v32, *MEMORY[0x1E0D46708]);
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    v44 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_objectForKeyedSubscript_(v3, v43, v41);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_length(v45, v46, v47);
    objc_msgSend_stringWithFormat_(v44, v49, (uint64_t)CFSTR("<%lu bytes>"), v48);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v51, (uint64_t)v50, v41);

  }
  return v6;
}

void sub_1BEB3D7D0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_assetCache(*(void **)(a1 + 32), a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expireAssetHandlesIfNecessary(v5, v3, v4);

}

void sub_1BEB3DACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB3DAF0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  const char *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = a2;
  sub_1BEB3DBD8(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BEB3DC78;
  v12[3] = &unk_1E7834588;
  v19 = *(_QWORD *)(a1 + 72);
  v13 = *(id *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 80);
  v7 = *(id *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 64);
  v14 = v7;
  v15 = v3;
  v8 = *(id *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v16 = v8;
  v17 = v9;
  v10 = v3;
  objc_msgSend_MMCSRunSerialized_(v6, v11, (uint64_t)v12);

}

id sub_1BEB3DBD8(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;

  objc_msgSend_MMCS(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_MMCSEngineContext(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v11, (uint64_t)"CKDMMCSEngineContext *mmcsEngineContext(CKDMMCSItemGroupContext *__strong)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v10, v13, (uint64_t)v12, CFSTR("CKDMMCS.m"), 768, CFSTR("Expected non nil CKDMMCSEngineContext"));

  }
  return v6;
}

void sub_1BEB3DC78(uint64_t a1, const char *a2, uint64_t a3)
{
  unsigned int v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  id v18;
  const char *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  _QWORD v29[6];
  char v30;
  char v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 80);
  objc_msgSend_items(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_count(v5, v6, v7);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (v4 >> 4) & 1;
  v10 = (v4 >> 6) & 1;
  v11 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v27 = "Fetching";
    v28 = *(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 88))
      v27 = "Registering";
    *(_DWORD *)buf = 136315906;
    v33 = v27;
    v34 = 2048;
    v35 = v8;
    v36 = 2114;
    v37 = v28;
    v38 = 2112;
    v39 = v5;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "%s %lu MMCS items, operationID:%{public}@: %@", buf, 0x2Au);
  }
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = sub_1BEB3DF50;
  v29[3] = &unk_1E7834560;
  v30 = v9;
  v31 = v10;
  v13 = *(_QWORD *)(a1 + 80);
  v29[4] = *(_QWORD *)(a1 + 72);
  v29[5] = v13;
  objc_msgSend_CKCompactMap_(v5, v12, (uint64_t)v29);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v14, v15, v16))
  {
    v18 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend_setObject_forKeyedSubscript_(v18, v19, (uint64_t)v14, *MEMORY[0x1E0D46878]);
    if (*(_BYTE *)(a1 + 88))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    }
    else
    {
      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v20, (*(_QWORD *)(a1 + 80) >> 4) & 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v18, v22, (uint64_t)v21, *MEMORY[0x1E0D468D0]);

    }
    v23 = *(_QWORD *)(a1 + 56);
    if (v23)
      objc_msgSend_setObject_forKeyedSubscript_(v18, v20, v23, *MEMORY[0x1E0D46840]);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      objc_msgSend_setObject_forKeyedSubscript_(v18, v20, MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D468C0]);
    objc_msgSend_cloneContext(*(void **)(a1 + 32), v20, v23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26)
      objc_msgSend_setObject_forKeyedSubscript_(v18, v24, (uint64_t)v26, *MEMORY[0x1E0D468C8]);
    objc_msgSend_getMMCSEngine(*(void **)(a1 + 64), v24, v25);
    MMCSRegisterItems();

  }
  else
  {
    objc_msgSend_didCompleteRequestWithError_(*(void **)(a1 + 48), v17, 0);
  }

}

id sub_1BEB3DF50(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  int isReference;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend_isAlreadyRegistered(v3, v4, v5) || *(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 49))
  {
    v8 = (void *)objc_opt_new();
    v9 = (void *)MEMORY[0x1E0CB37E8];
    v12 = objc_msgSend_itemID(v3, v10, v11);
    objc_msgSend_numberWithUnsignedLongLong_(v9, v13, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v15, (uint64_t)v14, *MEMORY[0x1E0D467A0]);

    if ((*(_BYTE *)(a1 + 40) & 0x42) != 0)
      objc_msgSend_setObject_forKey_(v8, v16, MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D467F0]);
    objc_msgSend_boundaryKey(v3, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend_boundaryKey(v3, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v8, v22, (uint64_t)v21, *MEMORY[0x1E0D46708]);

    }
    if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
    {
      objc_msgSend_referenceSignature(v3, v19, v20);
      v23 = objc_claimAutoreleasedReturnValue();
      if (v23)
      {
        v24 = (void *)v23;
        objc_msgSend_assetKey(v3, v19, v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        if (v25)
        {
          v26 = (void *)objc_opt_new();
          objc_msgSend_referenceSignature(v3, v27, v28);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v26, v30, (uint64_t)v29, *MEMORY[0x1E0D467E8]);

          objc_msgSend_assetKey(v3, v31, v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v26, v34, (uint64_t)v33, *MEMORY[0x1E0D467E0]);

          objc_msgSend_setObject_forKeyedSubscript_(v8, v35, (uint64_t)v26, *MEMORY[0x1E0D46930]);
        }
      }
    }
    objc_msgSend_asset(v3, v19, v20);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    isReference = objc_msgSend_isReference(v36, v37, v38);

    if (isReference)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    objc_msgSend_signature(v3, v6, v7);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v41)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v42 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v46 = v42;
        v49 = 134217984;
        v50 = objc_msgSend_itemID(v3, v47, v48);
        _os_log_error_impl(&dword_1BE990000, v46, OS_LOG_TYPE_ERROR, "itemID:%llu is missing file signature", (uint8_t *)&v49, 0xCu);

      }
      objc_msgSend_signature(v3, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v45)
        __assert_rtn("-[CKDMMCS _contextToRegisterItemGroup:operation:options:completionHandler:]_block_invoke", "CKDMMCS.m", 951, "MMCSItem.signature");

    }
    v8 = 0;
  }

  return v8;
}

void sub_1BEB3E26C(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  _QWORD v7[6];

  sub_1BEB3DBD8(a1, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEB43DB8;
  v7[3] = &unk_1E78317F8;
  v7[4] = a1;
  v7[5] = a2;
  objc_msgSend_MMCSRunSerialized_(v5, v6, (uint64_t)v7);

}

void sub_1BEB3E2E4(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  _QWORD v7[6];

  sub_1BEB3DBD8(a1, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEB45770;
  v7[3] = &unk_1E78317F8;
  v7[4] = a1;
  v7[5] = a2;
  objc_msgSend_MMCSRunSerialized_(v5, v6, (uint64_t)v7);

}

void sub_1BEB3E8A8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t shouldCloneFileInAssetCache;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  void *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  const char *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  void *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  const char *v95;
  void *v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  void *v102;
  void *v103;
  const char *v104;
  void *v105;
  const char *v106;
  void *v107;
  const char *v108;
  double v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  int v130;
  const char *v131;
  const char *v132;
  const char *v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  void *v149;
  const char *v150;
  const char *v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  CFTypeRef v167;
  uint64_t v168;
  const char *v169;
  void *v170;
  const char *v171;
  size_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  void *v176;
  CFTypeRef v177;
  NSObject *v178;
  uint64_t v179;
  const char *v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  size_t v197;
  void *v198;
  void *v199;
  CFTypeRef cf;
  uint8_t buf[4];
  size_t v202;
  __int16 v203;
  uint64_t v204;
  __int16 v205;
  void *v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v172 = *(_QWORD *)(a1 + 32);
    v173 = *(_QWORD *)(a1 + 40);
    v174 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    v202 = v172;
    v203 = 2114;
    v204 = v173;
    v205 = 2112;
    v206 = v174;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Getting MMCS item group %@ for operationID:%{public}@ with options %@", buf, 0x20u);
  }
  objc_msgSend_items(*(void **)(a1 + 32), v5, v6);
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_count(v198, v7, v8);
  v196 = malloc_type_calloc(v9, 8uLL, 0x100004000313F17uLL);
  v195 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  v194 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v10, v9);
  v199 = (void *)objc_claimAutoreleasedReturnValue();
  v184 = a1;
  shouldCloneFileInAssetCache = objc_msgSend_shouldCloneFileInAssetCache(*(void **)(a1 + 48), v11, v12);
  objc_msgSend_setShouldCloneFileInAssetCache_(v3, v14, shouldCloneFileInAssetCache);
  v183 = v3;
  objc_msgSend_operation(v3, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfo(v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v185 = v20;
  v25 = objc_msgSend_fetchingAssetsForRereference(v20, v21, v22);
  v197 = v9;
  if (v9)
  {
    v26 = 0;
    v27 = *MEMORY[0x1E0D467C8];
    v189 = *MEMORY[0x1E0D467E0];
    v190 = *MEMORY[0x1E0D467E8];
    v187 = *MEMORY[0x1E0D46718];
    v188 = *MEMORY[0x1E0D46920];
    v192 = *MEMORY[0x1E0D46728];
    v28 = -1;
    v191 = *MEMORY[0x1E0D46720];
    v186 = *MEMORY[0x1E0D46778];
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v198, v23, v26);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_signature(v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_itemID(v29, v33, v34))
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v35, v36);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v103, v104, *(_QWORD *)(v184 + 72), *(_QWORD *)(v184 + 56), CFSTR("CKDMMCS.m"), 1066, CFSTR("Zero item ID"));

      }
      objc_msgSend_signature(v29, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v37)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v38, v39);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v105, v106, *(_QWORD *)(v184 + 72), *(_QWORD *)(v184 + 56), CFSTR("CKDMMCS.m"), 1067, CFSTR("Null item signature"));

      }
      v196[v26] = objc_msgSend_itemID(v29, v38, v39);
      v195[v26] = objc_msgSend_bytes(v32, v40, v41);
      objc_msgSend_authToken(v29, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v44)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v45, v46);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v107, v108, *(_QWORD *)(v184 + 72), *(_QWORD *)(v184 + 56), CFSTR("CKDMMCS.m"), 1072, CFSTR("No auth-token for item: %@"), v29);

      }
      objc_msgSend_authToken(v29, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v194[v26] = objc_msgSend_UTF8String(v47, v48, v49);
      if (objc_msgSend_downloadTokenExpiration(v29, v50, v51) < v28)
        v28 = objc_msgSend_downloadTokenExpiration(v29, v52, v53);
      v54 = (void *)objc_opt_new();
      v55 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend_asset(v29, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = objc_msgSend_paddedFileSize(v58, v59, v60);
      objc_msgSend_numberWithUnsignedLongLong_(v55, v62, v61);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v54, v64, (uint64_t)v63, v27);

      objc_msgSend_referenceSignature(v29, v65, v66);
      v67 = objc_claimAutoreleasedReturnValue();
      if (v67)
      {
        v70 = (void *)v67;
        objc_msgSend_assetKey(v29, v68, v69);
        v71 = (void *)objc_claimAutoreleasedReturnValue();

        if (v71)
        {
          v72 = (void *)objc_opt_new();
          objc_msgSend_referenceSignature(v29, v73, v74);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v72, v76, (uint64_t)v75, v190);

          objc_msgSend_assetKey(v29, v77, v78);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v72, v80, (uint64_t)v79, v189);

          objc_msgSend_setObject_forKeyedSubscript_(v54, v81, (uint64_t)v72, v188);
        }
      }
      objc_msgSend_asset(v29, v68, v69);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_assetTransferOptions(v82, v83, v84);
      v85 = (void *)objc_claimAutoreleasedReturnValue();

      if (v85)
      {
        objc_msgSend_sparseAware(v85, v86, v87);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        if (v89)
          objc_msgSend_setObject_forKeyedSubscript_(v54, v88, (uint64_t)v89, v187);

      }
      objc_msgSend_constructedAssetDownloadURL(v29, v86, v87);
      v90 = (void *)objc_claimAutoreleasedReturnValue();

      if (v90)
      {
        v93 = (void *)MEMORY[0x1E0CB37E8];
        v94 = objc_msgSend_constructedAssetEstimatedSize(v29, v91, v92);
        objc_msgSend_numberWithUnsignedLongLong_(v93, v95, v94);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v54, v97, (uint64_t)v96, v192);

        objc_msgSend_constructedAssetDownloadURL(v29, v98, v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v54, v101, (uint64_t)v100, v191);

      }
      if (v25)
      {
        objc_msgSend_package(v29, v91, v92);
        v102 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v102)
          objc_msgSend_setObject_forKeyedSubscript_(v54, v91, MEMORY[0x1E0C9AAB0], v186);
      }
      objc_msgSend_addObject_(v199, v91, (uint64_t)v54);

      ++v26;
    }
    while (v197 != v26);
  }
  else
  {
    v28 = -1;
  }
  v109 = (double)v28 + -978307200.0;
  objc_msgSend_MMCSOptions(*(void **)(v184 + 48), v23, v24);
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_downloadPreauthorization(*(void **)(v184 + 32), v111, v112);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_contentResponseHeaders(v113, v114, v115);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKObjectForKeyCaseInsensitive_(v116, v117, (uint64_t)CFSTR("x-apple-mmcs-proto-version"));
  v118 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_downloadPreauthorization(*(void **)(v184 + 32), v119, v120);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_contentResponseBody(v121, v122, v123);
  v124 = (void *)objc_claimAutoreleasedReturnValue();

  if (v118)
  {
    if (v124)
    {
      objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v125, v126);
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      v130 = objc_msgSend_usePreauth(v127, v128, v129);

      if (v130)
      {
        objc_msgSend_setObject_forKeyedSubscript_(v110, v125, (uint64_t)v118, *MEMORY[0x1E0D468D8]);
        objc_msgSend_setObject_forKeyedSubscript_(v110, v131, (uint64_t)v124, *MEMORY[0x1E0D46898]);
      }
    }
  }
  objc_msgSend_setObject_forKeyedSubscript_(v110, v125, (uint64_t)v199, *MEMORY[0x1E0D46878]);
  objc_msgSend_setObject_forKeyedSubscript_(v110, v132, *(_QWORD *)(v184 + 64), *MEMORY[0x1E0D46840]);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v133, v134, v109);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v110, v136, (uint64_t)v135, *MEMORY[0x1E0D46818]);

  v137 = v183;
  objc_msgSend_operationInfo(v183, v138, v139);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_destination(v140, v141, v142))
    objc_msgSend_setObject_forKeyedSubscript_(v110, v143, MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D468B0]);
  v193 = v140;
  if (objc_msgSend_destination(v140, v143, v144) == 1)
  {
    v147 = MEMORY[0x1E0C9AAA0];
    objc_msgSend_setObject_forKeyedSubscript_(v110, v145, MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0D46900]);
    objc_msgSend_setObject_forKeyedSubscript_(v110, v148, v147, *MEMORY[0x1E0D46908]);
  }
  if (v25)
  {
    objc_msgSend_cloneContextReturnBlock(v185, v145, v146);
    v149 = (void *)objc_claimAutoreleasedReturnValue();

    if (v149)
      objc_msgSend_setObject_forKeyedSubscript_(v110, v150, MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D468C8]);
  }
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C8], OS_LOG_TYPE_INFO))
    objc_msgSend__logMMCSOptions_(*(void **)(v184 + 56), v151, (uint64_t)v110);
  cf = 0;
  objc_msgSend_contentBaseURL(*(void **)(v184 + 32), v151, v152);
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_owner(*(void **)(v184 + 32), v154, v155);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v153, v157, (uint64_t)v156);
  v158 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_getMMCSEngine(*(void **)(v184 + 56), v159, v160);
  objc_msgSend_requestor(*(void **)(v184 + 32), v161, v162);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v182 = v194;
  LODWORD(v153) = MMCSGetItems();

  free(v196);
  free(v195);
  free(v194);
  if (!(_DWORD)v153)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v164 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v175 = *(_QWORD *)(v184 + 40);
      v176 = (void *)MEMORY[0x1E0C94FF8];
      v177 = cf;
      v178 = v164;
      v179 = (uint64_t)v177;
      v137 = v183;
      objc_msgSend_undeprecatedDescriptionForError_(v176, v180, v179, v194, &cf);
      v181 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v202 = v197;
      v203 = 2114;
      v204 = v175;
      v205 = 2112;
      v206 = v181;
      _os_log_error_impl(&dword_1BE990000, v178, OS_LOG_TYPE_ERROR, "Failed getting %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);

    }
    v167 = cf;
    v168 = objc_msgSend_mmcsOperationType(v137, v165, v166, v182);
    objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v169, (uint64_t)v167, CFSTR("Fetching asset batch failed"), v168);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_didCompleteRequestWithError_(v137, v171, (uint64_t)v170);
    if (cf)
      CFRelease(cf);

  }
}

void sub_1BEB3F980(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t shouldCloneFileInAssetCache;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  int isReference;
  const char *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  const char *v85;
  void *v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  const char *v92;
  void *v93;
  const char *v94;
  void *v95;
  const char *v96;
  void *v97;
  const char *v98;
  void *v99;
  const char *v100;
  const char *v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  CFTypeRef v128;
  uint64_t v129;
  const char *v130;
  void *v131;
  const char *v132;
  size_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  CFTypeRef v138;
  NSObject *v139;
  const char *v140;
  void *v141;
  _QWORD *v142;
  _DWORD *v143;
  CFTypeRef *p_cf;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  size_t v154;
  uint64_t v155;
  _DWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  void *v161;
  CFTypeRef cf;
  uint8_t buf[4];
  size_t v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  void *v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v133 = *(_QWORD *)(a1 + 32);
    v134 = *(_QWORD *)(a1 + 40);
    v135 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    v164 = v133;
    v165 = 2114;
    v166 = v134;
    v167 = 2112;
    v168 = v135;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Putting MMCS item group %@ for operationID:%{public}@ with options %@", buf, 0x20u);
  }
  objc_msgSend_items(*(void **)(a1 + 32), v5, v6);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_count(v160, v7, v8);
  v159 = malloc_type_calloc(v9, 8uLL, 0x100004000313F17uLL);
  v158 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  v157 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  v156 = malloc_type_calloc(v9, 4uLL, 0x100004052888210uLL);
  v146 = a1;
  shouldCloneFileInAssetCache = objc_msgSend_shouldCloneFileInAssetCache(*(void **)(a1 + 48), v10, v11);
  v145 = v3;
  objc_msgSend_setShouldCloneFileInAssetCache_(v3, v13, shouldCloneFileInAssetCache);
  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v14, v9);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v17 = 0;
    v150 = *MEMORY[0x1E0D467E8];
    v149 = *MEMORY[0x1E0D467E0];
    v148 = *MEMORY[0x1E0D46930];
    v147 = *MEMORY[0x1E0D46778];
    v155 = *MEMORY[0x1E0D46708];
    v153 = *MEMORY[0x1E0D467C8];
    v18 = -1;
    v152 = *MEMORY[0x1E0D46928];
    v151 = *MEMORY[0x1E0D468F8];
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v160, v15, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_itemID(v19, v20, v21))
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v22, v23);
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v93, v94, *(_QWORD *)(v146 + 72), *(_QWORD *)(v146 + 56), CFSTR("CKDMMCS.m"), 1221, CFSTR("Zero item ID"));

      }
      objc_msgSend_signature(v19, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v24)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v25, v26);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v95, v96, *(_QWORD *)(v146 + 72), *(_QWORD *)(v146 + 56), CFSTR("CKDMMCS.m"), 1222, CFSTR("Null signature"));

      }
      objc_msgSend_authToken(v19, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v27)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v28, v29);
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v97, v98, *(_QWORD *)(v146 + 72), *(_QWORD *)(v146 + 56), CFSTR("CKDMMCS.m"), 1223, CFSTR("Null auth-token"));

      }
      v159[v17] = objc_msgSend_itemID(v19, v28, v29);
      objc_msgSend_signature(v19, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v158[v17] = objc_msgSend_bytes(v32, v33, v34);
      objc_msgSend_authToken(v19, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v157[v17] = objc_msgSend_UTF8String(v37, v38, v39);
      v156[v17] = 1;
      if (objc_msgSend_uploadTokenExpiration(v19, v40, v41) < v18)
        v18 = objc_msgSend_uploadTokenExpiration(v19, v42, v43);
      v44 = (void *)objc_opt_new();
      objc_msgSend_referenceSignature(v19, v45, v46);
      v47 = objc_claimAutoreleasedReturnValue();
      if (v47)
      {
        v50 = (void *)v47;
        objc_msgSend_assetKey(v19, v48, v49);
        v51 = (void *)objc_claimAutoreleasedReturnValue();

        if (v51)
        {
          v52 = (void *)objc_opt_new();
          objc_msgSend_referenceSignature(v19, v53, v54);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v52, v56, (uint64_t)v55, v150);

          objc_msgSend_assetKey(v19, v57, v58);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v52, v60, (uint64_t)v59, v149);

          objc_msgSend_setObject_forKeyedSubscript_(v44, v61, (uint64_t)v52, v148);
          objc_msgSend_asset(v19, v62, v63);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          isReference = objc_msgSend_isReference(v64, v65, v66);

          if (isReference)
            objc_msgSend_setObject_forKeyedSubscript_(v44, v68, MEMORY[0x1E0C9AAB0], v147);

        }
      }
      objc_msgSend_boundaryKey(v19, v48, v49);
      v69 = (void *)objc_claimAutoreleasedReturnValue();

      if (v69)
      {
        objc_msgSend_boundaryKey(v19, v70, v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v44, v73, (uint64_t)v72, v155);

      }
      objc_msgSend_assetZoneKey(v19, v70, v71);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_useMMCSEncryptionV2(v74, v75, v76);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = objc_msgSend_BOOLValue(v77, v78, v79);

      if (v80)
      {
        v83 = (void *)MEMORY[0x1E0CB37E8];
        v84 = objc_msgSend_paddedFileSize(v19, v81, v82);
        objc_msgSend_numberWithUnsignedLongLong_(v83, v85, v84);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v44, v87, (uint64_t)v86, v153);

        objc_msgSend_verificationKey(v19, v88, v89);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v44, v91, (uint64_t)v90, v152);

        objc_msgSend_setObject_forKeyedSubscript_(v44, v92, MEMORY[0x1E0C9AAB0], v151);
      }
      objc_msgSend_addObject_(v161, v81, (uint64_t)v44);

      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    v18 = -1;
  }
  objc_msgSend_MMCSOptions(*(void **)(v146 + 48), v15, v16);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v99, v100, (uint64_t)v161, *MEMORY[0x1E0D46878]);
  objc_msgSend_setObject_forKeyedSubscript_(v99, v101, *(_QWORD *)(v146 + 64), *MEMORY[0x1E0D46840]);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v102, v103, (double)v18 + -978307200.0);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v99, v105, (uint64_t)v104, *MEMORY[0x1E0D46818]);

  objc_msgSend_cloneContext(*(void **)(v146 + 32), v106, v107);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  if (v109)
    objc_msgSend_setObject_forKeyedSubscript_(v99, v108, (uint64_t)v109, *MEMORY[0x1E0D468C8]);
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C8], OS_LOG_TYPE_INFO))
    objc_msgSend__logMMCSOptions_(*(void **)(v146 + 56), v110, (uint64_t)v99);
  objc_msgSend_contentBaseURL(*(void **)(v146 + 32), v110, v111);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_owner(*(void **)(v146 + 32), v113, v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v112, v116, (uint64_t)v115);
  v117 = (void *)objc_claimAutoreleasedReturnValue();

  cf = 0;
  objc_msgSend_getMMCSEngine(*(void **)(v146 + 56), v118, v119);
  objc_msgSend_requestor(*(void **)(v146 + 32), v120, v121);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v143 = v156;
  p_cf = &cf;
  v142 = v157;
  v154 = v9;
  v123 = v99;
  LODWORD(v112) = MMCSPutItems();

  free(v159);
  free(v158);
  free(v157);
  free(v156);
  if (!(_DWORD)v112)
  {
    v124 = v99;
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v125 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v136 = *(_QWORD *)(v146 + 40);
      v137 = (void *)MEMORY[0x1E0C94FF8];
      v138 = cf;
      v139 = v125;
      objc_msgSend_undeprecatedDescriptionForError_(v137, v140, (uint64_t)v138, v157, v156, &cf);
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v164 = v154;
      v165 = 2114;
      v166 = v136;
      v167 = 2112;
      v168 = v141;
      _os_log_error_impl(&dword_1BE990000, v139, OS_LOG_TYPE_ERROR, "Failed putting %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);

    }
    v128 = cf;
    v129 = objc_msgSend_mmcsOperationType(v145, v126, v127, v142, v143, p_cf);
    objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v130, (uint64_t)v128, CFSTR("Saving asset batch failed"), v129);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_didCompleteRequestWithError_(v145, v132, (uint64_t)v131);
    if (cf)
      CFRelease(cf);

    v123 = v124;
  }

}

uint64_t sub_1BEB40894(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  return MMCSGetChunks();
}

uint64_t sub_1BEB408E4(void *a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  id v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  int v25;
  id v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1C3B83E24]();
  v7 = a1;
  objc_msgSend_signatureToMutableData(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v11, a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    v13 = objc_alloc(MEMORY[0x1E0C99DF0]);
    v12 = (void *)objc_msgSend_initWithLength_(v13, v14, 0);
    objc_msgSend_signatureToMutableData(v7, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v17, v18, (uint64_t)v12, a2);

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v19 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v21 = v19;
    objc_msgSend_signatureToMutableData(v7, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138413058;
    v26 = v7;
    v27 = 2112;
    v28 = a2;
    v29 = 2112;
    v30 = v24;
    v31 = 2112;
    v32 = v12;
    _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "_C3MMCSGetChunksChunkCallback(%@, %@, ...), signatureToMutableData=%@, mutableData=%@", (uint8_t *)&v25, 0x2Au);

    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a3)
LABEL_7:
    *a3 = MMCSItemReaderWriterCreateWithMutableData();
LABEL_8:

  objc_autoreleasePoolPop(v6);
  return 1;
}

void sub_1BEB40AB0()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x1C3B83E24]());
}

void sub_1BEB40BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB40BD0(_QWORD *a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];

  v4 = a1[4];
  v3 = a1[5];
  v5 = *(void **)(v4 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEB40C4C;
  v9[3] = &unk_1E7834600;
  v9[4] = v4;
  objc_msgSend_registeredMMCSItemForRereferencedAsset_copyBlock_(v5, a2, v3, v9);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

id sub_1BEB40C4C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  void *v4;

  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  if (MMCSDuplicateRegisteredfile())
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v3, *MEMORY[0x1E0C94B20], 1017, CFSTR("failed to duplicate MMCS item for re-reference"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

void sub_1BEB40EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB40EC8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  v4 = MMCSEngineCopyStatusReport();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1BEB41294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB412C0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  result = MMCSRegisteredItemCount();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)result != 0;
  return result;
}

void sub_1BEB41AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB41B44(_QWORD *a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char RegisteredItemsGreaterThan_itemIds_itemCount_error;
  id obj;

  v3 = (void *)a1[4];
  v4 = a1[8];
  v5 = a1[9];
  v6 = *(_QWORD *)(a1[6] + 8) + 24;
  v7 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v7 + 40);
  RegisteredItemsGreaterThan_itemIds_itemCount_error = objc_msgSend__getRegisteredItemsGreaterThan_itemIds_itemCount_error_(v3, a2, v4, v5, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = RegisteredItemsGreaterThan_itemIds_itemCount_error;
}

intptr_t sub_1BEB41BB4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1BEB42100(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__unregisterItemIDs_, *(_QWORD *)(a1 + 40));
}

void sub_1BEB4249C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  void *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  double v70;
  void *v71;
  const char *v72;
  void *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  CFTypeRef v100;
  uint64_t v101;
  const char *v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  CFTypeRef v107;
  NSObject *v108;
  const char *v109;
  void *v110;
  void *v111;
  const char *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  id v121;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  void *v128;
  _QWORD v129[3];

  v129[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_sectionItems(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_count(v6, v7, v8);
  objc_msgSend_signature(*(void **)(a1 + 32), v10, v11);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bytes(v119, v12, v13);
  objc_msgSend_authToken(*(void **)(a1 + 32), v14, v15);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  v117 = objc_msgSend_UTF8String(v118, v16, v17);
  objc_msgSend_putPackageSectionIdentifier(*(void **)(a1 + 32), v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v20)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v21, v22);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v111, v112, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), CFSTR("CKDMMCS.m"), 1508, CFSTR("nil section ID"));

  }
  objc_msgSend_setMMCSPackageSectionItem_(v3, v21, *(_QWORD *)(a1 + 32));
  v24 = malloc_type_calloc(v9, 8uLL, 0x100004000313F17uLL);
  if (v9)
  {
    v25 = 0;
    v26 = -1;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v6, v23, v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_itemID(v27, v28, v29))
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v30, v31);
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v120, v36, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), CFSTR("CKDMMCS.m"), 1514, CFSTR("Zero item ID"));

      }
      v24[v25] = objc_msgSend_itemID(v27, v30, v31);
      if (objc_msgSend_uploadTokenExpiration(v27, v32, v33) < v26)
        v26 = objc_msgSend_uploadTokenExpiration(v27, v34, v35);

      ++v25;
    }
    while (v9 != v25);
  }
  else
  {
    v26 = -1;
  }
  v121 = v3;
  v37 = (void *)objc_opt_new();
  objc_msgSend_referenceSignature(*(void **)(a1 + 32), v38, v39);
  v40 = objc_claimAutoreleasedReturnValue();
  if (v40)
  {
    v43 = (void *)v40;
    objc_msgSend_assetKey(*(void **)(a1 + 32), v41, v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    if (v44)
    {
      v45 = (void *)objc_opt_new();
      objc_msgSend_referenceSignature(*(void **)(a1 + 32), v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v45, v49, (uint64_t)v48, *MEMORY[0x1E0D467E8]);

      objc_msgSend_assetKey(*(void **)(a1 + 32), v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v45, v53, (uint64_t)v52, *MEMORY[0x1E0D467E0]);

      objc_msgSend_boundaryKey(*(void **)(a1 + 32), v54, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v37, v57, (uint64_t)v56, *MEMORY[0x1E0D46708]);

      v58 = (void *)MEMORY[0x1E0CB37E8];
      v61 = objc_msgSend_paddedFileSize(*(void **)(a1 + 32), v59, v60);
      objc_msgSend_numberWithUnsignedLongLong_(v58, v62, v61);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v37, v64, (uint64_t)v63, *MEMORY[0x1E0D467C8]);

      objc_msgSend_setObject_forKeyedSubscript_(v37, v65, (uint64_t)v45, *MEMORY[0x1E0D46930]);
      objc_msgSend_verificationKey(*(void **)(a1 + 32), v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v37, v69, (uint64_t)v68, *MEMORY[0x1E0D46928]);

    }
  }
  v70 = (double)v26 + -978307200.0;
  objc_msgSend_MMCSOptions(*(void **)(a1 + 48), v41, v42);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v116 = v37;
  v129[0] = v37;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v72, (uint64_t)v129, 1);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v71, v74, (uint64_t)v73, *MEMORY[0x1E0D46878]);

  objc_msgSend_setObject_forKeyedSubscript_(v71, v75, *(_QWORD *)(a1 + 56), *MEMORY[0x1E0D46840]);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v76, v77, v70);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v71, v79, (uint64_t)v78, *MEMORY[0x1E0D46818]);

  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C8], OS_LOG_TYPE_INFO))
    objc_msgSend__logMMCSOptions_(*(void **)(a1 + 40), v80, (uint64_t)v71);
  objc_msgSend_contentBaseURL(*(void **)(a1 + 32), v80, v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_owner(*(void **)(a1 + 32), v83, v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v82, v86, (uint64_t)v85);
  v87 = (void *)objc_claimAutoreleasedReturnValue();

  cf = 0;
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 40), v88, v89);
  objc_msgSend_requestor(*(void **)(a1 + 32), v90, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_putPackageSectionIdentifier(*(void **)(a1 + 32), v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v115) = 1;
  v113 = v24;
  v114 = v117;
  v96 = v121;
  LODWORD(v82) = MMCSPutSection();

  free(v24);
  if (!(_DWORD)v82)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v97 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v105 = *(_QWORD *)(a1 + 64);
      v106 = (void *)MEMORY[0x1E0C94FF8];
      v107 = cf;
      v108 = v97;
      objc_msgSend_undeprecatedDescriptionForError_(v106, v109, (uint64_t)v107, v113, v117, 1, &cf);
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v124 = v9;
      v125 = 2114;
      v126 = v105;
      v127 = 2112;
      v128 = v110;
      _os_log_error_impl(&dword_1BE990000, v108, OS_LOG_TYPE_ERROR, "Failed putting section with %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);

      v96 = v121;
    }
    v100 = cf;
    v101 = objc_msgSend_mmcsOperationType(v96, v98, v99, v113, v114, v115);
    objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v102, (uint64_t)v100, CFSTR("Saving asset batch failed"), v101);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_didCompleteRequestWithError_(v96, v104, (uint64_t)v103);
    if (cf)
      CFRelease(cf);

  }
}

void sub_1BEB430D4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  size_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  const char *v67;
  void *v68;
  const char *v69;
  void *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  void *v96;
  NSObject *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  void *v114;
  CFTypeRef v115;
  uint8_t buf[4];
  size_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  void *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_sectionItems(*(void **)(a1 + 32), v4, v5);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_count(v112, v6, v7);
  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v9, v8);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_signature(*(void **)(a1 + 32), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bytes(v12, v13, v14);
  objc_msgSend_authToken(*(void **)(a1 + 32), v15, v16);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_UTF8String(v101, v17, v18);
  v19 = (void *)objc_opt_new();
  v111 = malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  v110 = malloc_type_calloc(v8, 8uLL, 0x10040436913F5uLL);
  v109 = malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  v113 = malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  v102 = v3;
  objc_msgSend_operation(v3, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfo(v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v100 = v25;
  v28 = objc_msgSend_fetchingAssetsForRereference(v25, v26, v27);
  if (v8)
  {
    v31 = v28;
    v32 = 0;
    v105 = *MEMORY[0x1E0D467E8];
    v104 = *MEMORY[0x1E0D467E0];
    v103 = *MEMORY[0x1E0D46920];
    v107 = *MEMORY[0x1E0D46778];
    v33 = -1;
    do
    {
      v34 = v12;
      objc_msgSend_objectAtIndexedSubscript_(v112, v29, v32);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_signature(v35, v36, v37);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend_itemID(v35, v38, v39))
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v40, v41);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v68, v69, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), CFSTR("CKDMMCS.m"), 1628, CFSTR("Zero item ID"));

      }
      v42 = v8;
      v111[v32] = objc_msgSend_itemID(v35, v40, v41);
      v110[v32] = objc_msgSend_bytes(v12, v43, v44);
      v109[v32] = objc_msgSend_offset(v35, v45, v46);
      v113[v32] = objc_msgSend_fileSize(v35, v47, v48);
      if (objc_msgSend_downloadTokenExpiration(v35, v49, v50) < v33)
        v33 = objc_msgSend_downloadTokenExpiration(v35, v51, v52);
      objc_msgSend_referenceSignature(*(void **)(a1 + 32), v51, v52);
      v53 = objc_claimAutoreleasedReturnValue();
      if (v53)
      {
        v56 = (void *)v53;
        objc_msgSend_assetKey(*(void **)(a1 + 32), v54, v55);
        v57 = (void *)objc_claimAutoreleasedReturnValue();

        if (v57)
        {
          v58 = (void *)objc_opt_new();
          objc_msgSend_referenceSignature(*(void **)(a1 + 32), v59, v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v58, v62, (uint64_t)v61, v105);

          objc_msgSend_assetKey(*(void **)(a1 + 32), v63, v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v58, v66, (uint64_t)v65, v104);

          objc_msgSend_setObject_forKeyedSubscript_(v19, v67, (uint64_t)v58, v103);
        }
      }
      if (v31)
        objc_msgSend_setObject_forKeyedSubscript_(v19, v54, MEMORY[0x1E0C9AAB0], v107);
      objc_msgSend_addObject_(v114, v54, (uint64_t)v19);

      ++v32;
      v8 = v42;
    }
    while (v42 != v32);
  }
  else
  {
    v33 = -1;
  }
  objc_msgSend_MMCSOptions(*(void **)(a1 + 48), v29, v30);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v70, v71, (uint64_t)v114, *MEMORY[0x1E0D46878]);
  objc_msgSend_setObject_forKeyedSubscript_(v70, v72, *(_QWORD *)(a1 + 56), *MEMORY[0x1E0D46840]);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v73, v74, (double)v33 + -978307200.0);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v70, v76, (uint64_t)v75, *MEMORY[0x1E0D46818]);

  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C8], OS_LOG_TYPE_INFO))
    objc_msgSend__logMMCSOptions_(*(void **)(a1 + 40), v77, (uint64_t)v70);
  objc_msgSend_contentBaseURL(*(void **)(a1 + 32), v77, v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_owner(*(void **)(a1 + 32), v80, v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v79, v83, (uint64_t)v82);
  v108 = (void *)objc_claimAutoreleasedReturnValue();

  v115 = 0;
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 40), v84, v85);
  objc_msgSend_requestor(*(void **)(a1 + 32), v86, v87);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v70;
  v106 = MMCSGetItemsWithSection();

  free(v111);
  free(v110);
  free(v109);
  free(v113);
  if (!v106)
  {
    v92 = v70;
    v93 = (uint64_t)v115;
    v94 = objc_msgSend_mmcsOperationType(v102, v90, v91, v111, v110, v109, v113, &v115);
    objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v95, v93, CFSTR("Fetching section failed"), v94);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v97 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v99 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 134218498;
      v117 = v8;
      v118 = 2114;
      v119 = v99;
      v120 = 2112;
      v121 = v96;
      _os_log_error_impl(&dword_1BE990000, v97, OS_LOG_TYPE_ERROR, "Failed getting a section with %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);
    }
    objc_msgSend_didCompleteRequestWithError_(v102, v98, (uint64_t)v96);
    if (v115)
      CFRelease(v115);

    v89 = v92;
  }

}

void sub_1BEB43AE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB43C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB43CF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB43DB8(uint64_t a1)
{
  sub_1BEB43DC8(*(void **)(a1 + 32), *(void **)(a1 + 40), 1);
}

void sub_1BEB43DC8(void *a1, void *a2, int a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  id v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t j;
  void *v58;
  void *v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  void *v106;
  const char *v107;
  void *v108;
  const char *v109;
  void *v110;
  const char *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  const char *v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  int isEqualToData;
  const char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL4 v145;
  dispatch_once_t *v146;
  void *v147;
  void *v148;
  const char *v149;
  const char *v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  void *v154;
  NSObject *v155;
  const char *v156;
  uint64_t v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  void *v171;
  uint64_t v172;
  const char *v173;
  void *v174;
  id v175;
  const char *v176;
  void *v177;
  int v178;
  id v179;
  const char *v180;
  void *v181;
  id v182;
  const char *v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  const char *v187;
  uint64_t v188;
  void *v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  void *v193;
  const char *v194;
  const char *v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  NSObject *v199;
  NSObject *v200;
  NSObject *v201;
  const char *v202;
  char v203;
  NSObject *v204;
  void *v205;
  NSObject *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  unsigned int v215;
  void *v216;
  void *v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  unint64_t v226;
  const char *v227;
  uint64_t v228;
  void *v229;
  NSObject *v230;
  const char *v231;
  uint32_t v232;
  uint64_t v233;
  void *v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  void *v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  void *v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  void *v260;
  NSObject *v261;
  const char *v262;
  uint64_t v263;
  void *v264;
  NSObject *v265;
  const char *v266;
  uint64_t v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  void *v271;
  NSObject *v272;
  const char *v273;
  uint64_t v274;
  char *v275;
  void *v276;
  const char *v277;
  void *v278;
  const char *v279;
  void *v280;
  const char *v281;
  void *v282;
  const char *v283;
  void *v284;
  const char *v285;
  void *v286;
  const char *v287;
  void *v288;
  void *v289;
  void *v290;
  const char *v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t i;
  void *v296;
  void *v297;
  void *v298;
  uint64_t v299;
  void *v300;
  void *v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  NSObject *v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  const char *v311;
  NSObject *v312;
  uint32_t v313;
  uint64_t v314;
  void *v315;
  void *v316;
  const char *v317;
  uint64_t v318;
  void *v319;
  const char *v320;
  id v321;
  NSObject *v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  const char *v326;
  uint64_t v327;
  void *v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  NSObject *v333;
  const char *v334;
  uint64_t v335;
  void *v336;
  id v337;
  const char *v338;
  void *v339;
  void *v340;
  void *v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  void *v345;
  void *v346;
  int v347;
  void *context;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  void *v354;
  uint64_t v355;
  void *v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  const char *v363;
  void *v364;
  id v365;
  id v366;
  id v367;
  id v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  _QWORD v381[4];
  char v382;
  char v383;
  BOOL v384;
  uint8_t buf[4];
  const char *v386;
  __int16 v387;
  uint64_t v388;
  __int16 v389;
  uint64_t v390;
  __int16 v391;
  uint64_t v392;
  __int16 v393;
  unint64_t v394;
  __int16 v395;
  void *v396;
  __int16 v397;
  void *v398;
  _BYTE v399[128];
  _BYTE v400[128];
  _BYTE v401[128];
  uint64_t v402;

  v402 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v8 = v5;
  v9 = "register";
  if (a3)
    v9 = "fetch";
  v363 = v9;
  v10 = "Registered";
  if (a3)
    v10 = "Fetched";
  v338 = v10;
  objc_msgSend_operation(v5, v6, v7);
  v345 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = a2;
  v360 = *MEMORY[0x1E0D46910];
  objc_msgSend_objectForKeyedSubscript_(v11, v12, *MEMORY[0x1E0D46910]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v11, v14, *MEMORY[0x1E0D46878]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v11, v16, *MEMORY[0x1E0D468D0]);
  v19 = objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    objc_msgSend_itemGroup(v8, v17, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAuthPutRequest_(v20, v21, v19);

  }
  v341 = (void *)v19;
  v22 = objc_msgSend_count(v15, v17, v18);
  objc_msgSend_itemGroup(v8, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_items(v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_operationInfo(v8, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_options(v31, v32, v33);

  v35 = (v34 >> 4) & 1;
  objc_msgSend_operationInfo(v8, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v34) = objc_msgSend_options(v38, v39, v40);

  v381[0] = MEMORY[0x1E0C809B0];
  v381[1] = 3221225472;
  v381[2] = sub_1BEB45724;
  v381[3] = &unk_1E7834698;
  v382 = v35;
  v383 = a3;
  v384 = (v34 & 0x40) != 0;
  v343 = v28;
  objc_msgSend_CKFilter_(v28, v41, (uint64_t)v381);
  v339 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend_count(v339, v42, v43);
  v46 = (_QWORD *)MEMORY[0x1E0C95300];
  v342 = v22;
  v340 = v15;
  if (!v13)
  {
    v60 = v44;
    if (v44 != v22)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v45, *MEMORY[0x1E0C94B20], 3001, CFSTR("Failed to register all assets"));
      v289 = (void *)objc_claimAutoreleasedReturnValue();
      if (*v46 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v290 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v333 = v290;
        objc_msgSend_operationID(v345, v334, v335);
        v336 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        v386 = v363;
        v387 = 2048;
        v388 = v22;
        v389 = 2048;
        v390 = v60;
        v391 = 2114;
        v392 = (uint64_t)v336;
        v393 = 2112;
        v394 = (unint64_t)v289;
        _os_log_error_impl(&dword_1BE990000, v333, OS_LOG_TYPE_ERROR, "Failed to %{public}s MMCS items (%lu/%lu) not already registered for operationID:%{public}@: %@", buf, 0x34u);

      }
      v49 = v289;
      v373 = 0u;
      v374 = 0u;
      v375 = 0u;
      v376 = 0u;
      v50 = v28;
      v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v291, (uint64_t)&v373, v400, 16);
      if (!v54)
      {
        v288 = v49;
        goto LABEL_149;
      }
      v55 = v11;
      v294 = *(_QWORD *)v374;
      do
      {
        for (i = 0; i != v54; ++i)
        {
          if (*(_QWORD *)v374 != v294)
            objc_enumerationMutation(v50);
          v296 = *(void **)(*((_QWORD *)&v373 + 1) + 8 * i);
          objc_msgSend_error(v296, v292, v293);
          v297 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v297)
            objc_msgSend_setError_(v296, v292, (uint64_t)v49);
        }
        v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v292, (uint64_t)&v373, v400, 16);
      }
      while (v54);
      goto LABEL_148;
    }
    v371 = 0u;
    v372 = 0u;
    v369 = 0u;
    v370 = 0u;
    v50 = v15;
    v361 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v61, (uint64_t)&v369, v399, 16);
    if (!v361)
    {
      v49 = 0;
      v54 = 0;
      v288 = 0;
      goto LABEL_149;
    }
    v337 = v11;
    v49 = 0;
    v355 = 0;
    v358 = *MEMORY[0x1E0D467A0];
    v359 = *(_QWORD *)v370;
    v344 = *MEMORY[0x1E0C947D8];
    v352 = *MEMORY[0x1E0D46918];
    v351 = *MEMORY[0x1E0D46770];
    v350 = *MEMORY[0x1E0D467C8];
    v349 = *MEMORY[0x1E0D46710];
    v346 = v8;
    v347 = a3;
LABEL_25:
    v63 = 0;
    while (1)
    {
      if (*(_QWORD *)v370 != v359)
        objc_enumerationMutation(v50);
      v64 = *(void **)(*((_QWORD *)&v369 + 1) + 8 * v63);
      objc_msgSend_objectForKeyedSubscript_(v64, v62, v358);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v67)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v65, v66);
        v276 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v277, (uint64_t)"void CKDMMCSFetchOrRegisterCompleteCallback(void *, CFDictionaryRef, BOOL)");
        v278 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v276, v279, (uint64_t)v278, CFSTR("CKDMMCS.m"), 634, CFSTR("Invalid response from MMCS"));

      }
      v68 = objc_msgSend_unsignedLongLongValue(v67, v65, v66);
      objc_msgSend_findTrackedMMCSItemByItemID_(v8, v69, v68);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v72)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v70, v71);
        v280 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v281, (uint64_t)"void CKDMMCSFetchOrRegisterCompleteCallback(void *, CFDictionaryRef, BOOL)");
        v282 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v280, v283, (uint64_t)v282, CFSTR("CKDMMCS.m"), 636, CFSTR("Item not found"));

      }
      v73 = objc_msgSend_itemID(v72, v70, v71);
      if (v73 != objc_msgSend_unsignedLongLongValue(v67, v74, v75))
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v76, v77);
        v284 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v285, (uint64_t)"void CKDMMCSFetchOrRegisterCompleteCallback(void *, CFDictionaryRef, BOOL)");
        v286 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v284, v287, (uint64_t)v286, CFSTR("CKDMMCS.m"), 637, CFSTR("itemID mismatch"));

      }
      v362 = objc_msgSend_itemID(v72, v76, v77);
      objc_msgSend_fileURL(v72, v78, v79);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_path(v80, v81, v82);
      v364 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_objectForKeyedSubscript_(v64, v83, v360);
      v84 = (void *)objc_claimAutoreleasedReturnValue();

      if (v84)
        goto LABEL_35;
      if ((objc_msgSend_isAlreadyRegistered(v72, v85, v86) & 1) == 0
        && (objc_msgSend_isReaderReadFrom(v72, v94, v95) & 1) == 0)
      {
        if (objc_msgSend_canBeRegistered(v72, v94, v96))
        {
          v98 = (void *)MEMORY[0x1E0C94FF8];
          objc_msgSend_fileURL(v72, v94, v97);
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_CKSanitizedPath(v99, v100, v101);
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_errorWithDomain_code_path_format_(v98, v103, v344, 17, v102, CFSTR("Stale chunk state found during registration when none expected"));
          v84 = (void *)objc_claimAutoreleasedReturnValue();

          v8 = v346;
          if (v84)
          {
LABEL_35:
            v87 = (void *)*MEMORY[0x1E0C952F8];
            if (a3)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], v87);
              v88 = (void *)*MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              {
                v261 = v88;
                objc_msgSend_operationID(v345, v262, v263);
                v264 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134218498;
                v386 = (const char *)v362;
                v387 = 2114;
                v388 = (uint64_t)v264;
                v389 = 2112;
                v390 = (uint64_t)v84;
                _os_log_error_impl(&dword_1BE990000, v261, OS_LOG_TYPE_ERROR, "Failed to fetch registered MMCS item %llu for operationID:%{public}@ %@", buf, 0x20u);

              }
              v91 = objc_msgSend_mmcsOperationType(v8, v89, v90);
              objc_msgSend__errorWithMMCSError_path_description_operationType_(CKDMMCS, v92, (uint64_t)v84, 0, CFSTR("Failed to check registered asset"), v91);
              v49 = (id)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], v87);
              v120 = (void *)*MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              {
                v265 = v120;
                objc_msgSend_operationID(v345, v266, v267);
                v268 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_CKSanitizedPath(v364, v269, v270);
                v271 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134218754;
                v386 = (const char *)v362;
                v387 = 2114;
                v388 = (uint64_t)v268;
                v389 = 2114;
                v390 = (uint64_t)v271;
                v391 = 2112;
                v392 = (uint64_t)v84;
                _os_log_error_impl(&dword_1BE990000, v265, OS_LOG_TYPE_ERROR, "Failed to register MMCS item %llu for operationID:%{public}@ at %{public}@: %@", buf, 0x2Au);

              }
              objc_msgSend_CKSanitizedPath(v364, v121, v122);
              v123 = (void *)objc_claimAutoreleasedReturnValue();
              v126 = objc_msgSend_mmcsOperationType(v8, v124, v125);
              objc_msgSend__errorWithMMCSError_path_description_operationType_(CKDMMCS, v127, (uint64_t)v84, v123, CFSTR("Failed to register asset"), v126);
              v49 = (id)objc_claimAutoreleasedReturnValue();

            }
            objc_msgSend_setError_(v72, v93, (uint64_t)v49);
            goto LABEL_131;
          }
        }
      }
      objc_msgSend_objectForKeyedSubscript_(v64, v94, v352);
      v104 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v64, v105, v351);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v64, v107, v350);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v64, v109, v349);
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      v356 = (void *)v104;
      objc_msgSend_setSignature_(v72, v111, v104);
      v354 = v106;
      v114 = objc_msgSend_unsignedLongLongValue(v106, v112, v113);
      objc_msgSend_setFileSize_(v72, v115, v114);
      v353 = v108;
      v118 = v108 ? objc_msgSend_unsignedLongLongValue(v108, v116, v117) : objc_msgSend_fileSize(v72, v116, v117);
      objc_msgSend_setPaddedFileSize_(v72, v119, v118);
      v357 = v110;
      v130 = objc_msgSend_unsignedIntValue(v110, v128, v129);
      objc_msgSend_setChunkCount_(v72, v131, v130);
      objc_msgSend_signature(v72, v132, v133);
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zeroSizeFileSignature(CKDMMCS, v135, v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToData = objc_msgSend_isEqualToData_(v134, v138, (uint64_t)v137);

      v144 = objc_msgSend_mmcsOperationType(v8, v140, v141);
      v145 = v144 == 6 && objc_msgSend_chunkCount(v72, v142, v143) == 0;
      v146 = (dispatch_once_t *)MEMORY[0x1E0C95300];
      if (((isEqualToData | v145) & 1) == 0 && ((a3 & 1) != 0 || objc_msgSend_fileSize(v72, v142, v143)))
      {
        v154 = v357;
        if (v144 == 6 && !objc_msgSend_chunkCount(v72, v142, v143))
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 684, "MMCSItem.chunkCount != 0 && \"Expected MMCSItem.chunkCount != 0\"");
      }
      else
      {
        v147 = (void *)MEMORY[0x1E0C95138];
        objc_msgSend_signature(v72, v142, v143);
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v147) = objc_msgSend_isValidV2Signature_(v147, v149, (uint64_t)v148);

        if (((v147 | isEqualToData) & 1) == 0)
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 676, "isZeroFileSignature && \"Expected zeroSizeFileSignature\"");
        if (objc_msgSend_mmcsOperationType(v8, v150, v151) == 6
          && objc_msgSend_chunkCount(v72, v152, v153))
        {
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 679, "MMCSItem.chunkCount == 0 && \"Expected MMCSItem.chunkCount == 0\"");
        }
        if (objc_msgSend_fileSize(v72, v152, v153))
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 681, "MMCSItem.fileSize == 0 && \"MMCSItem.size == 0\"");
        if (*v146 != -1)
          dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v154 = v357;
        v155 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          v386 = (const char *)v362;
          _os_log_debug_impl(&dword_1BE990000, v155, OS_LOG_TYPE_DEBUG, "Zero-length asset with itemID %llu", buf, 0xCu);
        }
      }
      if ((objc_msgSend_isAlreadyRegistered(v72, v142, v143) & 1) == 0 && (a3 & 1) == 0)
      {
        objc_msgSend_asset(v72, v156, v157);
        v158 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_signature(v72, v159, v160);
        v161 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setSignature_(v158, v162, (uint64_t)v161);

        v165 = objc_msgSend_fileSize(v72, v163, v164);
        objc_msgSend_setSize_(v158, v166, v165);
        v169 = objc_msgSend_paddedFileSize(v72, v167, v168);
        objc_msgSend_setPaddedFileSize_(v158, v170, v169);
        if (*v146 != -1)
          dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v171 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v272 = v171;
          objc_msgSend_asset(v72, v273, v274);
          v275 = (char *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v386 = v275;
          v387 = 2112;
          v388 = (uint64_t)v72;
          _os_log_debug_impl(&dword_1BE990000, v272, OS_LOG_TYPE_DEBUG, "Register complete: Pushed sig and size to asset:%@ for item %@", buf, 0x16u);

        }
        v172 = MEMORY[0x1C3B83E24]();
        v368 = 0;
        objc_msgSend_getCKDMMCSItemReaderByPathForMMCSItem_error_(v8, v173, (uint64_t)v72, &v368);
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        v175 = v368;
        v177 = v175;
        context = (void *)v172;
        if (v174)
        {
          v367 = v175;
          v178 = objc_msgSend_openWithError_(v174, v176, (uint64_t)&v367);
          v179 = v367;

          if (v178)
          {
            v366 = v179;
            objc_msgSend_getFileMetadataWithError_(v174, v180, (uint64_t)&v366);
            v181 = (void *)objc_claimAutoreleasedReturnValue();
            v182 = v366;

            if (v181)
            {
              objc_msgSend_deviceID(v181, v183, v184);
              v185 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setDeviceID_(v72, v186, (uint64_t)v185);

              objc_msgSend_fileID(v181, v187, v188);
              v189 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setFileID_(v72, v190, (uint64_t)v189);

              objc_msgSend_generationID(v181, v191, v192);
              v193 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setGenerationID_(v72, v194, (uint64_t)v193);

              objc_msgSend_modTimeInSeconds(v181, v195, v196);
              v197 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setModTimeInSeconds_(v72, v198, (uint64_t)v197);
            }
            else
            {
              if (*v146 != -1)
                dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v201 = *MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v386 = (const char *)v72;
                v387 = 2112;
                v388 = (uint64_t)v182;
                _os_log_error_impl(&dword_1BE990000, v201, OS_LOG_TYPE_ERROR, "Unable to get info for %@: %@", buf, 0x16u);
              }
              v197 = v182;
              v182 = 0;
            }

            v365 = v182;
            v203 = objc_msgSend_closeWithError_(v174, v202, (uint64_t)&v365);
            v179 = v365;

            if ((v203 & 1) != 0)
            {
              v146 = (dispatch_once_t *)MEMORY[0x1E0C95300];
            }
            else
            {
              v146 = (dispatch_once_t *)MEMORY[0x1E0C95300];
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v204 = *MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v386 = (const char *)v72;
                v387 = 2112;
                v388 = (uint64_t)v179;
                _os_log_error_impl(&dword_1BE990000, v204, OS_LOG_TYPE_ERROR, "Unable to close for %@: %@", buf, 0x16u);
              }

              v179 = 0;
            }

            v8 = v346;
          }
          else
          {
            if (*v146 != -1)
              dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v8 = v346;
            v200 = *MEMORY[0x1E0C952B0];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v386 = (const char *)v72;
              v387 = 2112;
              v388 = (uint64_t)v179;
              _os_log_error_impl(&dword_1BE990000, v200, OS_LOG_TYPE_ERROR, "Unable to open for %@: %@", buf, 0x16u);
            }
          }

        }
        else
        {
          if (*v146 != -1)
            dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v199 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v386 = (const char *)v72;
            v387 = 2112;
            v388 = (uint64_t)v177;
            _os_log_error_impl(&dword_1BE990000, v199, OS_LOG_TYPE_ERROR, "Unable to open reader for %@: %@", buf, 0x16u);
          }
          v174 = v177;
        }

        objc_autoreleasePoolPop(context);
        a3 = v347;
        v154 = v357;
      }
      if ((a3 & 1) == 0)
        break;
      if (!v154)
      {
        v233 = objc_msgSend_fileSize(v72, v156, v157);
        v234 = (void *)*MEMORY[0x1E0C952F8];
        if (!v233)
        {
          if (*v146 != -1)
            dispatch_once(v146, v234);
          v257 = (void *)*MEMORY[0x1E0C952B0];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
            goto LABEL_130;
          v206 = v257;
          objc_msgSend_signature(v72, v258, v259);
          v260 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446722;
          v386 = "Fetched";
          v387 = 2048;
          v388 = v362;
          v389 = 2112;
          v390 = (uint64_t)v260;
          _os_log_debug_impl(&dword_1BE990000, v206, OS_LOG_TYPE_DEBUG, "%{public}s MMCS item %llu signature:%@", buf, 0x20u);

          goto LABEL_129;
        }
        if (*v146 != -1)
          dispatch_once(v146, v234);
        v235 = (void *)*MEMORY[0x1E0C952B0];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          goto LABEL_130;
        v206 = v235;
        v238 = objc_msgSend_fileSize(v72, v236, v237);
        v241 = objc_msgSend_paddedFileSize(v72, v239, v240);
        objc_msgSend_signature(v72, v242, v243);
        v229 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        v386 = "Fetched";
        v387 = 2048;
        v388 = v362;
        v389 = 2048;
        v390 = v238;
        v391 = 2048;
        v392 = v241;
        v393 = 2112;
        v394 = (unint64_t)v229;
        v230 = v206;
        v231 = "%{public}s MMCS item %llu with size:%llu, paddedSize:%llu, signature:%@";
        v232 = 52;
LABEL_120:
        _os_log_debug_impl(&dword_1BE990000, v230, OS_LOG_TYPE_DEBUG, v231, buf, v232);

        v154 = v357;
        goto LABEL_129;
      }
      if (*v146 != -1)
        dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v205 = (void *)*MEMORY[0x1E0C952B0];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        goto LABEL_130;
      v206 = v205;
      v209 = objc_msgSend_fileSize(v72, v207, v208);
      v212 = objc_msgSend_paddedFileSize(v72, v210, v211);
      v215 = objc_msgSend_chunkCount(v72, v213, v214);
      *(_DWORD *)buf = 136447490;
      v386 = "Fetched";
      v387 = 2048;
      v388 = v362;
      v389 = 2048;
      v390 = v209;
      v391 = 2048;
      v392 = v212;
      v393 = 2048;
      v394 = v215;
      v395 = 2112;
      v396 = v356;
      _os_log_debug_impl(&dword_1BE990000, v206, OS_LOG_TYPE_DEBUG, "%{public}s MMCS item %llu with size:%llu, paddedSize:%llu, chunkCount:%lu, signature:%@", buf, 0x3Eu);
LABEL_129:

LABEL_130:
      ++v355;

      v49 = 0;
LABEL_131:

      if (v361 == ++v63)
      {
        v361 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v62, (uint64_t)&v369, v399, 16);
        if (!v361)
        {
          v288 = 0;
          v11 = v337;
          v47 = v342;
          v54 = v355;
          goto LABEL_150;
        }
        goto LABEL_25;
      }
    }
    v216 = (void *)*MEMORY[0x1E0C952F8];
    if (!v154)
    {
      if (*v146 != -1)
        dispatch_once(v146, v216);
      v244 = (void *)*MEMORY[0x1E0C952B0];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        goto LABEL_130;
      v206 = v244;
      v247 = objc_msgSend_fileSize(v72, v245, v246);
      v250 = objc_msgSend_paddedFileSize(v72, v248, v249);
      objc_msgSend_signature(v72, v251, v252);
      v253 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKSanitizedPath(v364, v254, v255);
      v256 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316418;
      v386 = "Registered";
      v387 = 2048;
      v388 = v362;
      v389 = 2048;
      v390 = v247;
      v391 = 2048;
      v392 = v250;
      v393 = 2112;
      v394 = (unint64_t)v253;
      v395 = 2112;
      v396 = v256;
      _os_log_debug_impl(&dword_1BE990000, v206, OS_LOG_TYPE_DEBUG, "{public}%s MMCS item %llu with size:%llu, paddedSize:%llu, signature:%@, path:%@", buf, 0x3Eu);

      v154 = v357;
      v8 = v346;
      goto LABEL_129;
    }
    if (*v146 != -1)
      dispatch_once(v146, v216);
    v217 = (void *)*MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      goto LABEL_130;
    v206 = v217;
    v220 = objc_msgSend_fileSize(v72, v218, v219);
    v223 = objc_msgSend_paddedFileSize(v72, v221, v222);
    v226 = objc_msgSend_chunkCount(v72, v224, v225);
    objc_msgSend_CKSanitizedPath(v364, v227, v228);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447746;
    v386 = "Registered";
    v387 = 2048;
    v388 = v362;
    v389 = 2048;
    v390 = v220;
    v391 = 2048;
    v392 = v223;
    v393 = 2048;
    v394 = v226;
    v8 = v346;
    v395 = 2112;
    v396 = v356;
    v397 = 2112;
    v398 = v229;
    v230 = v206;
    v231 = "%{public}s MMCS item %llu with size:%llu, paddedSize:%llu, chunkCount:%lu, signature:%@, path:%@";
    v232 = 72;
    goto LABEL_120;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v47 = v22;
  v48 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    v322 = v48;
    v325 = objc_msgSend_count(v28, v323, v324);
    objc_msgSend_operationID(v345, v326, v327);
    v328 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446978;
    v386 = v363;
    v387 = 2048;
    v388 = v325;
    v47 = v22;
    v389 = 2114;
    v390 = (uint64_t)v328;
    v391 = 2112;
    v392 = (uint64_t)v13;
    _os_log_error_impl(&dword_1BE990000, v322, OS_LOG_TYPE_ERROR, "Failed to %{public}s %lu MMCS items for operationID:%{public}@: %@", buf, 0x2Au);

  }
  v49 = v13;
  v377 = 0u;
  v378 = 0u;
  v379 = 0u;
  v380 = 0u;
  v50 = v28;
  v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v377, v401, 16);
  if (!v54)
  {
    v288 = v49;
    goto LABEL_150;
  }
  v55 = v11;
  v56 = *(_QWORD *)v378;
  do
  {
    for (j = 0; j != v54; ++j)
    {
      if (*(_QWORD *)v378 != v56)
        objc_enumerationMutation(v50);
      v58 = *(void **)(*((_QWORD *)&v377 + 1) + 8 * j);
      objc_msgSend_error(v58, v52, v53);
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v59)
        objc_msgSend_setError_(v58, v52, (uint64_t)v49);
    }
    v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v52, (uint64_t)&v377, v401, 16);
  }
  while (v54);
LABEL_148:
  v288 = v49;
  v11 = v55;
LABEL_149:
  v47 = v342;
LABEL_150:

  v298 = (void *)*MEMORY[0x1E0C952F8];
  v299 = *MEMORY[0x1E0C95300];
  if (v54 == v47)
  {
    v301 = v339;
    v300 = v340;
    if (v299 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v298);
    v302 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v305 = v302;
      objc_msgSend_operationID(v345, v306, v307);
      v308 = objc_claimAutoreleasedReturnValue();
      v309 = v47;
      v310 = (void *)v308;
      *(_DWORD *)buf = 136446722;
      v386 = v338;
      v387 = 2048;
      v388 = v309;
      v389 = 2114;
      v390 = v308;
      v311 = "%{public}s %lu MMCS items for operationID:%{public}@";
      v312 = v305;
      v313 = 32;
      goto LABEL_164;
    }
  }
  else
  {
    v314 = v54;
    v301 = v339;
    v300 = v340;
    if (v299 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v298);
    v315 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v305 = v315;
      objc_msgSend_operationID(v345, v329, v330);
      v331 = objc_claimAutoreleasedReturnValue();
      v332 = v47;
      v310 = (void *)v331;
      *(_DWORD *)buf = 136446978;
      v386 = v338;
      v387 = 2048;
      v388 = v314;
      v389 = 2048;
      v390 = v332;
      v391 = 2114;
      v392 = v331;
      v311 = "%{public}s %lu/%lu MMCS items for operationID:%{public}@";
      v312 = v305;
      v313 = 42;
LABEL_164:
      _os_log_debug_impl(&dword_1BE990000, v312, OS_LOG_TYPE_DEBUG, v311, buf, v313);

      if ((a3 & 1) != 0)
        goto LABEL_160;
      goto LABEL_159;
    }
  }
  if ((a3 & 1) == 0)
  {
LABEL_159:
    objc_msgSend_MMCS(v8, v303, v304);
    v316 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_assetCache(v316, v317, v318);
    v319 = (void *)objc_claimAutoreleasedReturnValue();
    v321 = (id)objc_msgSend_updateAssetHandlesForRegisteredMMCSItems_error_(v319, v320, (uint64_t)v301, 0);

  }
LABEL_160:
  objc_msgSend_didCompleteRequestWithError_(v8, v303, (uint64_t)v288);

}

BOOL sub_1BEB45724(_BYTE *a1, void *a2, uint64_t a3)
{
  return !objc_msgSend_isAlreadyRegistered(a2, (const char *)a2, a3) || a1[32] || a1[33] || a1[34] != 0;
}

void sub_1BEB45770(uint64_t a1)
{
  sub_1BEB43DC8(*(void **)(a1 + 32), *(void **)(a1 + 40), 0);
}

void sub_1BEB45B80(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_declineCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_declineCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEB463C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  id *v23;
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1BEB46420(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleShareURLDeclined_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);

}

void sub_1BEB46484(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = v9;
      objc_msgSend_error(v3, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138412290;
      v20 = v15;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Error declining shares: %@", (uint8_t *)&v19, 0xCu);

    }
    objc_msgSend_error(v3, v10, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v17, (uint64_t)v16);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v18);

}

void sub_1BEB494C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB494FC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  uint64_t v30;
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    objc_msgSend_sharePCSData(v3, v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v8 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v22 = *(void **)(a1 + 40);
        v23 = v8;
        objc_msgSend_zoneID(v22, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v32 = v26;
        _os_log_debug_impl(&dword_1BE990000, v23, OS_LOG_TYPE_DEBUG, "Fetched zone PCS for zone %@ and it has a share PCS on it. Setting signing PCS for our record to be the per-participant PCS", buf, 0xCu);

      }
      objc_msgSend_sharePCSData(v3, v9, v10);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_myParticipantPCS(v11, v12, v13);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = PCSFPCopyObject();
    }
    else
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v14 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Record should be of a hierarchical share. Fetching its signing PCS by fetching its record PCS", buf, 2u);
      }
      objc_msgSend_pcsCache(WeakRetained, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(void **)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 48);
      v20 = *(_QWORD *)(a1 + 72);
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = sub_1BEB49784;
      v27[3] = &unk_1E78346C0;
      v30 = *(_QWORD *)(a1 + 56);
      v28 = v18;
      v29 = *(id *)(a1 + 32);
      objc_msgSend_fetchPCSForRecordWithID_forOperation_options_withCompletionHandler_(v17, v21, (uint64_t)v28, v19, v20, v27);

      v11 = v28;
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEB49784(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v5)
  {
    objc_msgSend_signingPCS(v5, v6, v7);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = PCSFPCopyObject();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 138412290;
      v12 = v10;
      _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Could not fetch record PCS for record %@. Record may not exist on server. Done with our attempt with fetch signing PCS", (uint8_t *)&v11, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEB498A8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  const void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*MEMORY[0x1E0C952F8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v2);
    v3 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_QWORD *)(a1 + 32);
      v22 = 138412290;
      v23 = v20;
      _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Successfully fetched signing PCS (PPPCS) for record %@", (uint8_t *)&v22, 0xCu);
    }
    v4 = (void *)objc_opt_new();
    objc_msgSend_setRecordPCSData_(*(void **)(a1 + 40), v5, (uint64_t)v4);

    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    objc_msgSend_recordPCSData(*(void **)(a1 + 40), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSigningPCS_(v9, v10, v6);

    v12 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v2);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a1 + 32);
      v22 = 138412290;
      v23 = v21;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Could not fetch the signing PCS for record %@", (uint8_t *)&v22, 0xCu);
    }
  }
  objc_msgSend_setState_(*(void **)(a1 + 40), v11, 5);
  objc_msgSend_pcsGroup(*(void **)(a1 + 40), v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v16);

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v17, v18);
  v19 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v19);

}

void sub_1BEB4AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB4AC90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  int found;
  const __CFString *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  int v54;
  void *v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (v5)
  {
    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v8, (uint64_t)v5, v6);
    goto LABEL_21;
  }
  objc_msgSend_domain(v6, v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x1E0C94B20];
  if (objc_msgSend_isEqualToString_(v11, v13, *MEMORY[0x1E0C94B20])
    && objc_msgSend_code(v6, v14, v15) == 5010)
  {
    v16 = *(_QWORD *)(a1 + 48);

    if ((v16 & 2) != 0)
    {
      v19 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFDLL;
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v20 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v22 = *(void **)(a1 + 32);
        v23 = v20;
        objc_msgSend_recordID(v22, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = 138412546;
        v55 = v26;
        v56 = 2048;
        v57 = v19;
        _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "Got an error fetching PCS data locally for record %@. Attempting another network-based fetch with options %lx", (uint8_t *)&v54, 0x16u);

      }
      objc_msgSend__reallyFetchPCSDataWithOptions_(v10, v21, v19);
      goto LABEL_21;
    }
  }
  else
  {

  }
  if (!v6 || (objc_msgSend_CKIsObjectNotFoundError(v6, v17, v18) & 1) != 0)
    goto LABEL_14;
  objc_msgSend_domain(v6, v27, v28);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v42, v43, v12) && objc_msgSend_code(v6, v44, v45) == 5007)
  {
    v46 = *(_QWORD *)(a1 + 48);

    if ((v46 & 2) != 0)
    {
LABEL_14:
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v29 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v31 = *(void **)(a1 + 32);
        v32 = v29;
        objc_msgSend_recordID(v31, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        found = objc_msgSend_CKIsNotFoundError(v6, v36, v37);
        v39 = CFSTR("no PCS data and no error");
        if (found)
          v39 = CFSTR("record does not exist");
        v54 = 138412546;
        v55 = v35;
        v56 = 2114;
        v57 = (unint64_t)v39;
        _os_log_impl(&dword_1BE990000, v32, OS_LOG_TYPE_INFO, "Didn't get PCS data for record %@: %{public}@. Fetching the zone PCS and creating new PCS data", (uint8_t *)&v54, 0x16u);

      }
      objc_msgSend_setRequiresRecordSaveForMergeableDeltas_(*(void **)(a1 + 32), v30, 1);
      objc_msgSend__createAndSavePCS(v10, v40, v41);
      goto LABEL_21;
    }
  }
  else
  {

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v47 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v49 = *(void **)(a1 + 32);
    v50 = v47;
    objc_msgSend_recordID(v49, v51, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = 138412546;
    v55 = v53;
    v56 = 2112;
    v57 = (unint64_t)v6;
    _os_log_debug_impl(&dword_1BE990000, v50, OS_LOG_TYPE_DEBUG, "Got an error fetching PCS data for record %@: %@", (uint8_t *)&v54, 0x16u);

  }
  objc_msgSend__addShareToPCSData_withError_(v10, v48, 0, v6);
LABEL_21:

}

void sub_1BEB4B3E8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend_recordPCSData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)*MEMORY[0x1E0C952F8];
  if (v4)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v5);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v20 = *(void **)(a1 + 32);
      v21 = v6;
      objc_msgSend_recordPCSData(v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v32 = v24;
      _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Using parent PCS data from our current batch %@", buf, 0xCu);

    }
    v9 = 0;
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v5);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v26 = *(void **)(a1 + 40);
      v25 = *(void **)(a1 + 48);
      v27 = v10;
      objc_msgSend_recordID(v25, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v32 = v26;
      v33 = 2112;
      v34 = v30;
      _os_log_debug_impl(&dword_1BE990000, v27, OS_LOG_TYPE_DEBUG, "Parent record %@ in the same batch didn't have chain PCS data on it for record %@", buf, 0x16u);

    }
    v13 = (void *)MEMORY[0x1E0C94FF8];
    v14 = *MEMORY[0x1E0C94B20];
    v15 = *(_QWORD *)(a1 + 40);
    objc_msgSend_recordID(*(void **)(a1 + 48), v11, v12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v13, v17, v14, 5001, CFSTR("Parent record %@ in the same batch didn't have chain PCS data on it for record %@"), v15, v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v18 = *(_QWORD *)(a1 + 56);
  objc_msgSend_recordPCSData(*(void **)(a1 + 32), v7, v8);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, void *))(v18 + 16))(v18, v19, v9);

}

uint64_t sub_1BEB4B624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEB4B898(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  id v17;

  objc_msgSend_sharePCSData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_pcs(v4, v5, v6);

  if (v7)
  {
    v17 = 0;
  }
  else
  {
    v10 = (void *)MEMORY[0x1E0C94FF8];
    v11 = *MEMORY[0x1E0C94B20];
    v12 = *(_QWORD *)(a1 + 40);
    objc_msgSend_recordID(*(void **)(a1 + 48), v8, v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v10, v14, v11, 5001, CFSTR("Couldn't get PCS data for share %@ to add to record %@"), v12, v13);
    v17 = (id)objc_claimAutoreleasedReturnValue();

  }
  v15 = *(_QWORD *)(a1 + 56);
  objc_msgSend_sharePCSData(*(void **)(a1 + 32), v8, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v15 + 16))(v15, v16, v17);

}

void sub_1BEB4B970(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!objc_msgSend_pcs(v5, v7, v8))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v22 = v12;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Warn: Failed to fetch share with ID %@. Not adding it to the record PCS: %@", buf, 0x16u);
    }
    if (v6)
    {
      if (objc_msgSend_CKIsNotFoundError(v6, v10, v11))
      {
        v15 = (void *)MEMORY[0x1E0C94FF8];
        v16 = *MEMORY[0x1E0C94B20];
        v17 = *(_QWORD *)(a1 + 32);
        objc_msgSend_recordID(*(void **)(a1 + 40), v13, v14);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(v15, v19, v16, 2025, CFSTR("Share record %@ referenced by record %@ does not exist on the server"), v17, v18);
        v20 = objc_claimAutoreleasedReturnValue();

        v6 = (id)v20;
      }
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v10, *MEMORY[0x1E0C94B20], 5001, CFSTR("Didn't get PCS data for share %@"), *(_QWORD *)(a1 + 32));
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1BEB4C580(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 184));
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB4C5D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char v20;
  id v21;
  id v22;
  const char *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  id v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!objc_msgSend_pcs(v5, v7, v8))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v26 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v29 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v44 = v29;
      v45 = 2112;
      v46 = v6;
      _os_log_impl(&dword_1BE990000, v26, OS_LOG_TYPE_INFO, "Warn: Failed to fetch share with ID %@. Not adding it to the record PCS: %@", buf, 0x16u);
    }
    if (v6)
    {
      if (!objc_msgSend_CKIsNotFoundError(v6, v27, v28))
      {
LABEL_18:
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v6);
        v22 = v6;
        goto LABEL_19;
      }
      v32 = (void *)MEMORY[0x1E0C94FF8];
      v33 = *MEMORY[0x1E0C94B20];
      v34 = *(_QWORD *)(a1 + 40);
      objc_msgSend_recordID(*(void **)(a1 + 48), v30, v31);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v32, v36, v33, 2025, CFSTR("Share record %@ referenced by record %@ does not exist on the server"), v34, v35);
      v37 = objc_claimAutoreleasedReturnValue();

      v6 = (id)v37;
    }
    else
    {
      v38 = (void *)MEMORY[0x1E0C94FF8];
      v39 = *MEMORY[0x1E0C94B20];
      v40 = *(_QWORD *)(a1 + 40);
      objc_msgSend_recordID(*(void **)(a1 + 48), v27, v28);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v38, v41, v39, 5001, CFSTR("Didn't get PCS data for share %@ to add to record %@"), v40, v35);
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_18;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend_pcsManager(WeakRetained, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_pcs(v5, v13, v14);
  v18 = objc_msgSend_pcs(*(void **)(a1 + 32), v16, v17);
  v42 = v6;
  v20 = objc_msgSend_addSharePCS_toRecordPCS_error_(v12, v19, v15, v18, &v42);
  v21 = v42;
  v22 = v42;

  if ((v20 & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v24 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v25 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v44 = v5;
      v45 = 2112;
      v46 = v25;
      v47 = 2112;
      v48 = v22;
      _os_log_impl(&dword_1BE990000, v24, OS_LOG_TYPE_INFO, "Warn: Error adding share PCS %@ to record PCS %@: %@", buf, 0x20u);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v21);
  }
  objc_msgSend_setSharePCSData_(*(void **)(a1 + 32), v23, (uint64_t)v5);
LABEL_19:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_1BEB4C8E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char v20;
  id v21;
  id v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  int v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint8_t buf[4];
  id v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (objc_msgSend_pcs(v5, v8, v9))
  {
    objc_msgSend_pcsManager(WeakRetained, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_pcs(v5, v13, v14);
    v18 = objc_msgSend_pcs(*(void **)(a1 + 32), v16, v17);
    v54 = v6;
    v20 = objc_msgSend_removeSharePCS_fromRecordPCS_error_(v12, v19, v15, v18, &v54);
    v21 = v54;
    v22 = v54;

    if ((v20 & 1) != 0)
    {
      if ((objc_msgSend_didRollRecordPCSMasterKey(WeakRetained, v23, v24) & 1) == 0)
      {
        objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v25, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend_rollRecordMasterKeysOnUnshare(v27, v28, v29);

        if (v30)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v31 = (void *)*MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            v49 = *(void **)(a1 + 40);
            v50 = v31;
            objc_msgSend_recordID(v49, v51, v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v56 = v53;
            _os_log_debug_impl(&dword_1BE990000, v50, OS_LOG_TYPE_DEBUG, "Rolling record PCS master key since we removed a share for record %@", buf, 0xCu);

          }
          objc_msgSend_pcsManager(WeakRetained, v32, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = objc_msgSend_pcs(*(void **)(a1 + 32), v35, v36);
          objc_msgSend_operation(WeakRetained, v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_rollMasterKeyForRecordPCS_forOperation_(v34, v41, v37, v40);
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
          v44 = *(void **)(v43 + 40);
          *(_QWORD *)(v43 + 40) = v42;

          if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
            objc_msgSend_setDidRollRecordPCSMasterKey_(WeakRetained, v25, 1);
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v47 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v48 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        v56 = v5;
        v57 = 2112;
        v58 = v48;
        v59 = 2112;
        v60 = v22;
        _os_log_impl(&dword_1BE990000, v47, OS_LOG_TYPE_INFO, "Warn: Error remvoing share PCS %@ from record PCS %@: %@", buf, 0x20u);
      }
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v21);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v45 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v46 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      v56 = v46;
      v57 = 2112;
      v58 = v6;
      _os_log_impl(&dword_1BE990000, v45, OS_LOG_TYPE_INFO, "Warn: Failed to fetch share with ID %@. Not removing it from the record PCS: %@", buf, 0x16u);
    }
    v22 = v6;
  }
  objc_msgSend_setSharePCSData_(*(void **)(a1 + 32), v25, (uint64_t)v5);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

uint64_t sub_1BEB4CC8C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*MEMORY[0x1E0C952F8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v2);
    v3 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v13 = 138412290;
      v14 = v5;
      _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Error fetching share PCS and adding it to the record PCS: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v2);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v6;
      objc_msgSend_recordID(v8, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v12;
      _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "All shares have been fetched and the record PCS is updated for %@", (uint8_t *)&v13, 0xCu);

    }
  }
  return objc_msgSend__fetchParentPCSForData_withError_(*(void **)(a1 + 32), v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void sub_1BEB4D6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB4D71C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint8_t buf[4];
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend_recordPCSData(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v35 = v9;
      _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Using PCS data for parent from our current batch: %@", buf, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v29 = *(void **)(a1 + 40);
      v30 = v10;
      objc_msgSend_recordID(v29, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v35 = v33;
      _os_log_debug_impl(&dword_1BE990000, v30, OS_LOG_TYPE_DEBUG, "Parent exists in the same batch but it doesn't have any chain PCS data, so we can't save %@", buf, 0xCu);

    }
    v13 = (void *)MEMORY[0x1E0C94FF8];
    v14 = *MEMORY[0x1E0C94B20];
    objc_msgSend_record(*(void **)(a1 + 40), v11, v12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_parent(v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(*(void **)(a1 + 40), v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v13, v25, v14, 5001, CFSTR("Parent record %@ in the same batch didn't have chain PCS data on it for record %@"), v21, v24);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1BEB4D968(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  int v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v14 = *(void **)(a1 + 32);
      v15 = v8;
      objc_msgSend_record(v14, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_parent(v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(*(void **)(a1 + 32), v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138412802;
      v43 = v24;
      v44 = 2112;
      v45 = v27;
      v46 = 2112;
      v47 = v5;
      _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Fetched parent PCS data with record ID %@ for record %@: %@", (uint8_t *)&v42, 0x20u);

    }
    v9 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v10 = v5;
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v11 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v28 = *(void **)(a1 + 32);
      v29 = v11;
      objc_msgSend_record(v28, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_parent(v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(*(void **)(a1 + 32), v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138412546;
      v43 = v38;
      v44 = 2112;
      v45 = v41;
      _os_log_debug_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEBUG, "Couldn't get PCS data for parent %@ of record %@", (uint8_t *)&v42, 0x16u);

    }
    v9 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v10 = v6;
  }
  v12 = v10;
  v13 = *v9;
  *v9 = v12;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1BEB4DBE8(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (!v3)
  {
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (v8)
    {
      if (!objc_msgSend_CKIsNotFoundError(v8, a2, 0))
        goto LABEL_8;
      v11 = (void *)MEMORY[0x1E0C94FF8];
      v12 = *MEMORY[0x1E0C94B20];
      objc_msgSend_record(*(void **)(a1 + 32), v9, v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_parent(v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v11, v20, v12, 2025, CFSTR("Parent record %@ does not exist on the server"), v19);
    }
    else
    {
      v21 = (void *)MEMORY[0x1E0C94FF8];
      v22 = *MEMORY[0x1E0C94B20];
      objc_msgSend_record(*(void **)(a1 + 32), a2, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_parent(v13, v23, v24);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v16, v25, v26);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v21, v27, v22, 5001, CFSTR("Couldn't fetch parent PCS data for parent record %@"), v19);
    }
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v30 = *(void **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v28;

    goto LABEL_8;
  }
  objc_msgSend__addParentPCS_toRecordPCS_(*(void **)(a1 + 32), a2, v3, *(_QWORD *)(a1 + 40));
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  objc_msgSend_setParentPCSData_(*(void **)(a1 + 40), v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
LABEL_8:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1BEB4DD54(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*MEMORY[0x1E0C952F8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v2);
    v3 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v13 = 138412290;
      v14 = v5;
      _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Error fetching parent PCS and adding it to the record PCS: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v2);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v6;
      objc_msgSend_recordID(v8, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v12;
      _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "All parent records have been fetched and the record PCS is updated for %@", (uint8_t *)&v13, 0xCu);

    }
  }
  return objc_msgSend__handlePCSData_withError_(*(void **)(a1 + 32), v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void sub_1BEB4E9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB4EA28(uint64_t a1, void *a2, void *a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v9 = a3;
  if (v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v11 = *(void **)(a1 + 40);
      v12 = v10;
      objc_msgSend_recordID(v11, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneID(v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138412546;
      v29 = v18;
      v30 = 2112;
      v31 = v9;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for zone %@: %@", (uint8_t *)&v28, 0x16u);

    }
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v21 = *(_QWORD *)(v19 + 40);
    v20 = (id *)(v19 + 40);
    if (!v21)
    {
      v22 = a3;
LABEL_10:
      objc_storeStrong(v20, v22);
    }
  }
  else if (objc_msgSend_pcs(v6, v7, v8)
         || objc_msgSend_databaseScope(*(void **)(a1 + 32), v23, v24) == 3
         && (objc_msgSend_pcsData(v6, v25, v26),
             v27 = (void *)objc_claimAutoreleasedReturnValue(),
             v27,
             v27))
  {
    v20 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v22 = a2;
    goto LABEL_10;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1BEB4EBE0(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  id *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6 && !v7)
  {
    v9 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v10 = a2;
LABEL_10:
    objc_storeStrong(v9, v10);
    goto LABEL_11;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v12 = *(_QWORD *)(a1 + 32);
    v15 = 138412546;
    v16 = v12;
    v17 = 2112;
    v18 = v8;
    _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for share %@: %@", (uint8_t *)&v15, 0x16u);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v14 = *(_QWORD *)(v13 + 40);
  v9 = (id *)(v13 + 40);
  if (!v14)
  {
    v10 = a3;
    goto LABEL_10;
  }
LABEL_11:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_1BEB4ED2C(uint64_t a1)
{
  _QWORD *v2;
  id *v3;
  void *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t v16;
  const char *v17;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  const __CFString *v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (id *)MEMORY[0x1E0C952B0];
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v19 = *(void **)(a1 + 32);
    v20 = v4;
    objc_msgSend_recordID(v19, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138412290;
    v25 = (uint64_t)v23;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "All PCS data fetched. Creating PCS for record %@", (uint8_t *)&v24, 0xCu);

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    return objc_msgSend__continueCreateAndSavePCSWithZonePCS_sharePCS_(*(void **)(a1 + 40), v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  if (*v2 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *v3;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    objc_msgSend_recordID(*(void **)(a1 + 32), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v9, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    v14 = CFSTR(" and share ");
    v15 = &stru_1E7838F48;
    if (*(_BYTE *)(a1 + 72))
      v15 = *(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    else
      v14 = &stru_1E7838F48;
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v24 = 138413058;
    v25 = v12;
    v26 = 2114;
    v27 = v14;
    v28 = 2114;
    v29 = v15;
    v30 = 2112;
    v31 = v16;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Warn: Couldn't get PCS data for zone %@%{public}@%{public}@. Error was %@", (uint8_t *)&v24, 0x2Au);

  }
  return objc_msgSend__addShareToPCSData_withError_(*(void **)(a1 + 40), v17, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void sub_1BEB4FB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB4FB58(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  int isEqualToData;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  const void *v53;
  const char *v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  const char *v58;
  void *v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  id v81;
  uint8_t buf[4];
  id v83;
  __int16 v84;
  id v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (v5 && !v6)
  {
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_operation(WeakRetained, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_deviceContext(v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_testDeviceReference(v14, v15, v16);
      v17 = objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        v20 = (void *)v17;
        objc_msgSend_protectionData(*(void **)(a1 + 32), v18, v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dataUsingEncoding_(CFSTR("_NEW_PROTECTION_DATA_PLOX"), v22, 4);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToData = objc_msgSend_isEqualToData_(v21, v24, (uint64_t)v23);

        if (isEqualToData)
        {
          objc_msgSend__createAndSavePCS(v10, v8, v9);
          v26 = 0;
          v6 = 0;
LABEL_37:

          goto LABEL_38;
        }
      }
      else
      {

      }
    }
    objc_msgSend_pcsManager(v10, v8, v9);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_protectionData(*(void **)(a1 + 32), v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend_pcs(v5, v49, v50);
    v81 = 0;
    v53 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v45, v52, (uint64_t)v48, 1, v51, &v81);
    v6 = v81;

    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v56 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v83 = v6;
        _os_log_impl(&dword_1BE990000, v56, OS_LOG_TYPE_INFO, "Warn: Couldn't deserialize record PCS provided by the client: %@", buf, 0xCu);
      }
    }
    if (v53)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v57 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v59 = *(void **)(a1 + 32);
        v60 = v57;
        objc_msgSend_recordID(v59, v61, v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v83 = v63;
        _os_log_impl(&dword_1BE990000, v60, OS_LOG_TYPE_INFO, "Successfully deserialized client PCS data for record %@", buf, 0xCu);

      }
      objc_msgSend_dataWithRecord_(CKDRecordPCSData, v58, *(_QWORD *)(a1 + 32));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPcs_(v26, v64, (uint64_t)v53);
      objc_msgSend_setZonePCSData_(v26, v65, (uint64_t)v5);
      if ((objc_msgSend__canSetPreviousProtectionEtag(v10, v66, v67) & 1) != 0)
      {
        objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v68, v69);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setEtag_(v26, v71, (uint64_t)v70);

      }
      else
      {
        objc_msgSend_setEtag_(v26, v68, 0);
      }
      objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v72, v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();

      if (v74)
      {
        objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v75, v76);
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setEtag_(v26, v78, (uint64_t)v77);

      }
      objc_msgSend_etag(v26, v75, v76);
    }
    else
    {
      v26 = 0;
      objc_msgSend_etag(0, v54, v55);
    }
    v79 = (void *)objc_claimAutoreleasedReturnValue();

    if (v53 && v79)
    {
      objc_msgSend__addShareToPCSData_withError_(v10, v80, (uint64_t)v26, 0);
    }
    else
    {
      objc_msgSend__fetchExistingPCSForProvidedPCSData_(v10, v80, (uint64_t)v26);
      if (!v53)
        goto LABEL_37;
    }
    CFRelease(v53);
    goto LABEL_37;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v27 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v30 = *(void **)(a1 + 32);
    v31 = v27;
    objc_msgSend_recordID(v30, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v83 = v37;
    v84 = 2112;
    v85 = v6;
    _os_log_impl(&dword_1BE990000, v31, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for zone %@: %@", buf, 0x16u);

  }
  if (!v6)
  {
    v38 = (void *)MEMORY[0x1E0C94FF8];
    v39 = *MEMORY[0x1E0C94B20];
    objc_msgSend_recordID(*(void **)(a1 + 32), v28, v29);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v38, v44, v39, 5001, CFSTR("Couldn't fetch PCS for zone %@"), v43);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend__addShareToPCSData_withError_(v10, v28, 0, v6);
LABEL_38:

}

void sub_1BEB50134(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB50150(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  int isEqualToData;
  void *v26;
  NSObject *v27;
  const char *v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const void *v38;
  const char *v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  const char *v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  void *v64;
  const char *v65;
  id v66;
  uint8_t buf[4];
  id v68;
  __int16 v69;
  id v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v10 = WeakRetained;
  if (v5 && !v6)
  {
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_operation(WeakRetained, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_deviceContext(v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_testDeviceReference(v14, v15, v16);
      v17 = objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        v20 = (void *)v17;
        objc_msgSend_protectionData(*(void **)(a1 + 32), v18, v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dataUsingEncoding_(CFSTR("_NEW_PROTECTION_DATA_PLOX"), v22, 4);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToData = objc_msgSend_isEqualToData_(v21, v24, (uint64_t)v23);

        if (isEqualToData)
        {
          objc_msgSend__createAndSavePCS(v10, v8, v9);
          v26 = 0;
          v6 = 0;
LABEL_37:

          goto LABEL_38;
        }
      }
      else
      {

      }
    }
    objc_msgSend_pcsManager(v10, v8, v9);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_protectionData(*(void **)(a1 + 32), v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend_pcs(v5, v34, v35);
    v66 = 0;
    v38 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v30, v37, (uint64_t)v33, 1, v36, &v66);
    v6 = v66;

    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v41 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v68 = v6;
        _os_log_impl(&dword_1BE990000, v41, OS_LOG_TYPE_INFO, "Warn: Couldn't deserialize record PCS provided by the client: %@", buf, 0xCu);
      }
    }
    if (v38)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v42 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v44 = *(void **)(a1 + 32);
        v45 = v42;
        objc_msgSend_recordID(v44, v46, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v68 = v48;
        _os_log_impl(&dword_1BE990000, v45, OS_LOG_TYPE_INFO, "Successfully deserialized client PCS data for record %@", buf, 0xCu);

      }
      objc_msgSend_dataWithRecord_(CKDRecordPCSData, v43, *(_QWORD *)(a1 + 32));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPcs_(v26, v49, (uint64_t)v38);
      objc_msgSend_setSharePCSData_(v26, v50, (uint64_t)v5);
      if ((objc_msgSend__canSetPreviousProtectionEtag(v10, v51, v52) & 1) != 0)
      {
        objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v53, v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setEtag_(v26, v56, (uint64_t)v55);

      }
      else
      {
        objc_msgSend_setEtag_(v26, v53, 0);
      }
      objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v57, v58);
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      if (v59)
      {
        objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v60, v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setEtag_(v26, v63, (uint64_t)v62);

      }
      objc_msgSend_etag(v26, v60, v61);
    }
    else
    {
      v26 = 0;
      objc_msgSend_etag(0, v39, v40);
    }
    v64 = (void *)objc_claimAutoreleasedReturnValue();

    if (v38 && v64)
    {
      objc_msgSend__addShareToPCSData_withError_(v10, v65, (uint64_t)v26, 0);
    }
    else
    {
      objc_msgSend__fetchExistingPCSForProvidedPCSData_(v10, v65, (uint64_t)v26);
      if (!v38)
        goto LABEL_37;
    }
    CFRelease(v38);
    goto LABEL_37;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v27 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v29 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v68 = v29;
    v69 = 2112;
    v70 = v6;
    _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for share %@: %@", buf, 0x16u);
  }
  if (!v6)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v28, *MEMORY[0x1E0C94B20], 5001, CFSTR("Couldn't fetch PCS for share %@"), *(_QWORD *)(a1 + 40));
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend__addShareToPCSData_withError_(v10, v28, 0, v6);
LABEL_38:

}

void sub_1BEB506E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB5070C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  NSObject *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  int isEqualToData;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const void *v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  const char *v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  id v71;
  uint8_t buf[4];
  id v73;
  __int16 v74;
  id v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!v6)
  {
    objc_msgSend_chainPCSData(v5, v7, v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      if (*MEMORY[0x1E0C95280])
      {
        objc_msgSend_operation(WeakRetained, v14, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deviceContext(v16, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_testDeviceReference(v19, v20, v21);
        v22 = objc_claimAutoreleasedReturnValue();
        if (v22)
        {
          v25 = (void *)v22;
          objc_msgSend_protectionData(*(void **)(a1 + 32), v23, v24);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_dataUsingEncoding_(CFSTR("_NEW_PROTECTION_DATA_PLOX"), v27, 4);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          isEqualToData = objc_msgSend_isEqualToData_(v26, v29, (uint64_t)v28);

          if (isEqualToData)
          {
            objc_msgSend__createAndSavePCS(WeakRetained, v14, v15);
            v6 = 0;
            v31 = 0;
LABEL_37:

            goto LABEL_38;
          }
        }
        else
        {

        }
      }
      objc_msgSend_pcsManager(WeakRetained, v14, v15);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_protectionData(*(void **)(a1 + 32), v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_chainPCSData(v5, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend_pcs(v38, v39, v40);
      v71 = 0;
      v43 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v32, v42, (uint64_t)v35, 1, v41, &v71);
      v6 = v71;

      if (v6)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v46 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v73 = v6;
          _os_log_impl(&dword_1BE990000, v46, OS_LOG_TYPE_INFO, "Warn: Couldn't deserialize record PCS provided by the client: %@", buf, 0xCu);
        }
      }
      if (v43)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v47 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
        {
          v49 = *(void **)(a1 + 32);
          v50 = v47;
          objc_msgSend_recordID(v49, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v73 = v53;
          _os_log_impl(&dword_1BE990000, v50, OS_LOG_TYPE_INFO, "Successfully deserialized client PCS data for record %@", buf, 0xCu);

        }
        objc_msgSend_dataWithRecord_(CKDRecordPCSData, v48, *(_QWORD *)(a1 + 32));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setPcs_(v31, v54, (uint64_t)v43);
        objc_msgSend_setParentPCSData_(v31, v55, (uint64_t)v5);
        if ((objc_msgSend__canSetPreviousProtectionEtag(WeakRetained, v56, v57) & 1) != 0)
        {
          objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v58, v59);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setEtag_(v31, v61, (uint64_t)v60);

        }
        else
        {
          objc_msgSend_setEtag_(v31, v58, 0);
        }
        objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        if (v64)
        {
          objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v65, v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setEtag_(v31, v68, (uint64_t)v67);

        }
        objc_msgSend_etag(v31, v65, v66);
      }
      else
      {
        v31 = 0;
        objc_msgSend_etag(0, v44, v45);
      }
      v69 = (void *)objc_claimAutoreleasedReturnValue();

      if (v43 && v69)
      {
        objc_msgSend__addShareToPCSData_withError_(WeakRetained, v70, (uint64_t)v31, 0);
      }
      else
      {
        objc_msgSend__fetchExistingPCSForProvidedPCSData_(WeakRetained, v70, (uint64_t)v31);
        if (!v43)
          goto LABEL_37;
      }
      CFRelease(v43);
      goto LABEL_37;
    }
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v12 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v73 = v12;
    v74 = 2112;
    v75 = v6;
    _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for parent %@: %@", buf, 0x16u);
  }
  if (!v6)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v11, *MEMORY[0x1E0C94B20], 5001, CFSTR("Couldn't fetch PCS for parent %@"), *(_QWORD *)(a1 + 40));
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend__addShareToPCSData_withError_(WeakRetained, v11, 0, v6);
LABEL_38:

}

void sub_1BEB50D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB50D24(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  void *v42;
  BOOL v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  id v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  void *v76;
  void *v77;
  NSObject *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  NSObject *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  NSObject *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  NSObject *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint8_t buf[4];
  void *v108;
  __int16 v109;
  id v110;
  __int16 v111;
  void *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_operation(WeakRetained, v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v13 = objc_msgSend_pcs(v5, v10, v11);
    objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v14, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKUppercaseHexStringWithoutSpaces(v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = objc_msgSend_pcs(a1[4], v19, v20);
    objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v22, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKUppercaseHexStringWithoutSpaces(v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (*MEMORY[0x1E0C95280])
    {
      v106 = v26;
      v29 = WeakRetained;
      v30 = v5;
      v31 = v18;
      v32 = v6;
      v33 = v12;
      objc_msgSend_container(v12, v27, v28);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_deviceContext(v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_testDeviceReference(v37, v38, v39);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (v41)
      {
        objc_msgSend_objectForKeyedSubscript_(a1[5], v40, (uint64_t)CFSTR("UNIT_TESTING_FAIL_PCS_ETAG_CHECK"));
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v42 != 0;

      }
      else
      {
        v43 = 0;
      }

      v12 = v33;
      v6 = v32;
      v18 = v31;
      v5 = v30;
      WeakRetained = v29;
      v26 = v106;
    }
    else
    {
      v43 = 0;
    }
    if (!objc_msgSend_isEqualToString_(v26, v27, (uint64_t)v18) || v43)
    {
      if (!objc_msgSend_retryPCSFailures(v12, v50, v51))
      {
        v68 = (void *)MEMORY[0x1E0C94FF8];
        v69 = v6;
        v70 = v12;
        v71 = *MEMORY[0x1E0C94B20];
        objc_msgSend_recordID(a1[5], v58, v59);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        v73 = v71;
        v12 = v70;
        v6 = v69;
        objc_msgSend_errorWithDomain_code_format_(v68, v74, v73, 5004, CFSTR("Attempted PCS data (%@) had a different identifier than the server PCS data (%@) for record %@"), v26, v18, v72);
        v48 = (id)objc_claimAutoreleasedReturnValue();

        v47 = 0;
        goto LABEL_32;
      }
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v60 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v63 = a1[5];
        v64 = v60;
        objc_msgSend_recordID(v63, v65, v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v108 = v26;
        v109 = 2114;
        v110 = v18;
        v111 = 2112;
        v112 = v67;
        _os_log_impl(&dword_1BE990000, v64, OS_LOG_TYPE_INFO, "Attempted PCS data (%{public}@) had a different identifier than the server PCS data (%{public}@) for record %@. Using the server's PCS data", buf, 0x20u);

      }
      objc_msgSend__clearRecordProtectionDataForRecord(WeakRetained, v61, v62);
      v57 = v5;
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v52 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v86 = v6;
        v87 = v12;
        v88 = a1[5];
        v89 = v52;
        objc_msgSend_recordID(v88, v90, v91);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_etag(v5, v93, v94);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v108 = v92;
        v109 = 2114;
        v110 = v26;
        v111 = 2114;
        v112 = v95;
        _os_log_debug_impl(&dword_1BE990000, v89, OS_LOG_TYPE_DEBUG, "PCS identifiers for record %@ match (%{public}@), so we'll use %{public}@ as our previous protection etag", buf, 0x20u);

        v12 = v87;
        v6 = v86;

      }
      objc_msgSend_etag(v5, v53, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setEtag_(a1[4], v56, (uint64_t)v55);

      v57 = a1[4];
    }
    v47 = v57;
    v48 = 0;
LABEL_32:

    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v75, (uint64_t)v47, v48);
LABEL_33:

    goto LABEL_34;
  }
  if (v6 && !objc_msgSend_CKIsObjectNotFoundError(v6, v10, v11))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v76 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v77 = a1[5];
      v78 = v76;
      objc_msgSend_recordID(v77, v79, v80);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v108 = v81;
      v109 = 2112;
      v110 = v6;
      _os_log_impl(&dword_1BE990000, v78, OS_LOG_TYPE_INFO, "Couldn't fetch PCS data to verify client provided protection data for record %@: %@", buf, 0x16u);

    }
    v48 = v6;
    v47 = 0;
    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v82, 0, v48);
    goto LABEL_33;
  }
  if (!objc_msgSend_CKIsObjectNotFoundError(v6, v10, v11) || objc_msgSend_pcs(a1[4], v44, v45))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v46 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v96 = a1[5];
      v97 = v46;
      objc_msgSend_recordID(v96, v98, v99);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v108 = v100;
      _os_log_debug_impl(&dword_1BE990000, v97, OS_LOG_TYPE_DEBUG, "PCS data for record %@ wasn't fetched from the server. Using the client-provided PCS data", buf, 0xCu);

    }
    v47 = a1[4];
    v48 = 0;
    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v49, (uint64_t)v47, 0);
    goto LABEL_33;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v83 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v101 = a1[5];
    v102 = v83;
    objc_msgSend_recordID(v101, v103, v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v108 = v105;
    _os_log_debug_impl(&dword_1BE990000, v102, OS_LOG_TYPE_DEBUG, "We couldn't deserialize the client-provided PCS and PCS data for record %@ wasn't fetched from the server because the record doesn't exist on the server. Creating new record PCS", buf, 0xCu);

  }
  objc_msgSend__createAndSavePCS(WeakRetained, v84, v85);
LABEL_34:

}

void sub_1BEB52E60(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(_QWORD *)(a1 + 32) + v5);

}

void sub_1BEB54218(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3D0], 8);
  _Block_object_dispose(&STACK[0x3F0], 8);
  _Unwind_Resume(a1);
}

BOOL sub_1BEB542E0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  id v13;
  void *v14;
  void *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  void *v31;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint8_t buf[4];
  id v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  __int16 v61;
  void *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v54 = 0;
  v12 = objc_msgSend__prepareAsset_recordKey_mergeableDeltaID_record_error_(v9, v11, (uint64_t)v7, v8, a4, v10, &v54);
  v13 = v54;
  v14 = (void *)*MEMORY[0x1E0C952F8];
  if (v13)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v14);
    v15 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v33 = *(void **)(a1 + 40);
      v34 = v15;
      objc_msgSend_recordID(v33, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v56 = v37;
      v57 = 2114;
      v58 = v8;
      v59 = 2112;
      v60 = v13;
      _os_log_error_impl(&dword_1BE990000, v34, OS_LOG_TYPE_ERROR, "Failing save of record %@ due to error preparing asset for upload for key \"%{public}@\": %@", buf, 0x20u);

    }
    objc_msgSend_setState_(*(void **)(a1 + 32), v16, 12);
    v17 = (void *)MEMORY[0x1E0C94FF8];
    v18 = *MEMORY[0x1E0C94B20];
    objc_msgSend_recordID(*(void **)(a1 + 40), v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_error_format_(v17, v22, v18, 1021, v13, CFSTR("Error preparing asset for upload for key \"%@\" on record %@: %@"), v8, v21, v13);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v24, (uint64_t)v23);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  else if (v12)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v14);
    v25 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v38 = *(void **)(a1 + 40);
      v39 = v25;
      objc_msgSend_recordID(v38, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(*(void **)(a1 + 48), v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      v56 = v7;
      v57 = 2114;
      v58 = v8;
      v59 = 2112;
      v60 = v42;
      v61 = 2114;
      v62 = v45;
      _os_log_debug_impl(&dword_1BE990000, v39, OS_LOG_TYPE_DEBUG, "Uploading asset %@ for key \"%{public}@\" on record %@ and operation %{public}@", buf, 0x2Au);

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    v28 = objc_msgSend_batchRank(*(void **)(a1 + 32), v26, v27);
    objc_msgSend_setUploadRank_(v7, v29, v28);
    objc_msgSend_addObject_(*(void **)(a1 + 56), v30, (uint64_t)v7);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v14);
    v31 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v46 = *(void **)(a1 + 40);
      v47 = v31;
      objc_msgSend_recordID(v46, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(*(void **)(a1 + 48), v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      v56 = v7;
      v57 = 2114;
      v58 = v8;
      v59 = 2112;
      v60 = v50;
      v61 = 2114;
      v62 = v53;
      _os_log_debug_impl(&dword_1BE990000, v47, OS_LOG_TYPE_DEBUG, "Skipping asset %@ for key \"%{public}@\" on record %@ and operation %{public}@", buf, 0x2Au);

    }
  }

  return v13 == 0;
}

uint64_t sub_1BEB580C4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t result;

  objc_msgSend_parserData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v7 = (void *)objc_opt_new();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);

  }
  objc_msgSend_parserData(*(void **)(a1 + 32), v5, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendData_(v9, v10, *(_QWORD *)(a1 + 40));

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEB581E8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  id v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void (**v22)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void (**v32)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  id v37;
  _QWORD block[5];
  id v39;
  _QWORD v40[4];
  NSObject *v41;
  _QWORD v42[4];
  NSObject *v43;
  id v44;

  v2 = dispatch_group_create();
  objc_msgSend_parserData(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_length(v5, v6, v7);

  if (v8)
  {
    v11 = (void *)MEMORY[0x1E0CB36D8];
    objc_msgSend_parserData(*(void **)(a1 + 32), v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 0;
    objc_msgSend_JSONObjectWithData_options_error_(v11, v13, (uint64_t)v12, 0, &v44);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v44;

    objc_msgSend_setParserError_(*(void **)(a1 + 32), v16, (uint64_t)v15);
    if (v14)
    {
      if (!v15)
      {
        objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          dispatch_group_enter(v2);
          objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v20, v21);
          v22 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          objc_msgSend_parserData(*(void **)(a1 + 32), v23, v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = MEMORY[0x1E0C809B0];
          v42[0] = MEMORY[0x1E0C809B0];
          v42[1] = 3221225472;
          v42[2] = sub_1BEB58460;
          v42[3] = &unk_1E782EA40;
          v27 = v2;
          v43 = v27;
          ((void (**)(_QWORD, void *, void *, _QWORD *))v22)[2](v22, v14, v25, v42);

          if (*MEMORY[0x1E0C95280]
            && objc_msgSend_testRepeatedParseResults(*(void **)(a1 + 32), v28, v29))
          {
            dispatch_group_enter(v27);
            objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v30, v31);
            v32 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
            objc_msgSend_parserData(*(void **)(a1 + 32), v33, v34);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v40[0] = v26;
            v40[1] = 3221225472;
            v40[2] = sub_1BEB58468;
            v40[3] = &unk_1E782EA40;
            v41 = v27;
            ((void (**)(_QWORD, void *, void *, _QWORD *))v32)[2](v32, v14, v35, v40);

          }
        }
      }
    }

  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v9, v10);
    CKGetGlobalQueue();
    v36 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEB58470;
    block[3] = &unk_1E782EC68;
    v37 = *(id *)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v39 = v37;
    dispatch_group_notify(v2, v36, block);

  }
}

void sub_1BEB58460(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB58468(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB58470(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

uint64_t sub_1BEB58614(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB58A50()
{
  void *v0;

  v0 = (void *)qword_1ED702AA8;
  qword_1ED702AA8 = (uint64_t)&unk_1E78AFA50;

}

uint64_t sub_1BEB58B78(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB58FC0()
{
  void *v0;

  v0 = (void *)qword_1ED7009E8;
  qword_1ED7009E8 = (uint64_t)&unk_1E78AFA78;

}

uint64_t sub_1BEB59470(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  id v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  const char *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = objc_alloc_init(MEMORY[0x1E0C94C88]);
              objc_storeStrong((id *)(a1 + 48), v18);
              if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
              {
                PBReaderRecallMark();
                goto LABEL_54;
              }

              return 0;
            case 2u:
              v19 = 0;
              v20 = 0;
              v21 = 0;
              *(_BYTE *)(a1 + 68) |= 2u;
              while (2)
              {
                v22 = *v3;
                v23 = *(_QWORD *)(a2 + v22);
                if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
                  *(_QWORD *)(a2 + v22) = v23 + 1;
                  v21 |= (unint64_t)(v24 & 0x7F) << v19;
                  if (v24 < 0)
                  {
                    v19 += 7;
                    v14 = v20++ >= 9;
                    if (v14)
                    {
                      v21 = 0;
                      goto LABEL_58;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v21 = 0;
LABEL_58:
              *(_BYTE *)(a1 + 64) = v21 != 0;
              goto LABEL_73;
            case 3u:
              v25 = 0;
              v26 = 0;
              v27 = 0;
              *(_BYTE *)(a1 + 68) |= 1u;
              while (2)
              {
                v28 = *v3;
                v29 = *(_QWORD *)(a2 + v28);
                if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
                  *(_QWORD *)(a2 + v28) = v29 + 1;
                  v27 |= (unint64_t)(v30 & 0x7F) << v25;
                  if (v30 < 0)
                  {
                    v25 += 7;
                    v14 = v26++ >= 9;
                    if (v14)
                    {
                      v27 = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v27 = 0;
LABEL_62:
              *(_QWORD *)(a1 + 32) = v27;
              goto LABEL_73;
            case 4u:
              PBReaderReadString();
              v31 = objc_claimAutoreleasedReturnValue();
              v32 = *(void **)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v31;

              goto LABEL_73;
            case 5u:
              if (v16 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v34 = 0;
                  v35 = 0;
                  v36 = 0;
                  while (1)
                  {
                    v37 = *v3;
                    v38 = *(_QWORD *)(a2 + v37);
                    if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
                    *(_QWORD *)(a2 + v37) = v38 + 1;
                    v36 |= (unint64_t)(v39 & 0x7F) << v34;
                    if (v39 < 0)
                    {
                      v34 += 7;
                      v14 = v35++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_51;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
                  PBRepeatedInt64Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v41 = 0;
                v42 = 0;
                v43 = 0;
                while (1)
                {
                  v44 = *v3;
                  v45 = *(_QWORD *)(a2 + v44);
                  if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
                  *(_QWORD *)(a2 + v44) = v45 + 1;
                  v43 |= (unint64_t)(v46 & 0x7F) << v41;
                  if (v46 < 0)
                  {
                    v41 += 7;
                    v14 = v42++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_72;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_72:
                PBRepeatedInt64Add();
              }
LABEL_73:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            case 6u:
              PBReaderReadString();
              v18 = (id)objc_claimAutoreleasedReturnValue();
              if (v18)
                objc_msgSend_addPackagePutReceipts_((void *)a1, v40, (uint64_t)v18);
LABEL_54:

              goto LABEL_73;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_73;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEB5A474(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEB5AB30(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPUserPrivacySettings *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPUserPrivacySettings);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (sub_1BEC58768((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (CKDPUserPrivacySettings *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend_addApplicationBundle_(a1, v18, (uint64_t)v17);
LABEL_25:

    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB5B604()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED700A00;
  qword_1ED700A00 = v0;

}

void sub_1BEB5BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEB5BB00(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BEB5BC68(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint8_t buf[8];
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t v26;

  v4 = objc_msgSend_invalidateCachedAccountInfo(MEMORY[0x1E0C94B88], a2, a3);
  v5 = (void *)MEMORY[0x1E0CB3940];
  CKTestNotificationPrefix();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v5, v7, (uint64_t)CFSTR("%@%@"), v6, *MEMORY[0x1E0C95308]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_BYTE *)(a1 + 32))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Supressing account change notification while warming up", buf, 2u);
    }
    v12 = (id)*MEMORY[0x1E0C95310];

    v15 = objc_msgSend_UTF8String(v12, v13, v14);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v23 = 3221225472;
    v24 = sub_1BEB5BFCC;
    v25 = &unk_1E7830348;
    v26 = v15;
    if (qword_1ED700A08 != -1)
      dispatch_once(&qword_1ED700A08, buf);
    notify_set_state(dword_1ED700820, v4);
    v8 = v12;
    v18 = (const char *)objc_msgSend_UTF8String(v12, v16, v17);
  }
  else
  {
    v19 = objc_msgSend_UTF8String(v8, v9, v10);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v23 = 3221225472;
    v24 = sub_1BEB5BFDC;
    v25 = &unk_1E7830348;
    v26 = v19;
    if (qword_1ED700A10 != -1)
      dispatch_once(&qword_1ED700A10, buf);
    notify_set_state(dword_1ED700824, v4);
    v18 = (const char *)objc_msgSend_UTF8String(v8, v20, v21);
  }
  notify_post(v18);

}

void sub_1BEB5BE6C(uint64_t a1, void *a2, char a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  char v12;

  v5 = a2;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEB5BF18;
  v8[3] = &unk_1E7834A10;
  v9 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v10 = v5;
  v11 = v6;
  v12 = a3;
  v7 = v5;
  CKMuckingWithPersonas(v8);

}

uint64_t sub_1BEB5BF18(uint64_t a1)
{
  uint64_t result;

  result = CKAdoptPersonaID(*(void **)(a1 + 32));
  if ((_DWORD)result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  return result;
}

uint64_t sub_1BEB5BFCC(uint64_t a1)
{
  return notify_register_check(*(const char **)(a1 + 32), &dword_1ED700820);
}

uint64_t sub_1BEB5BFDC(uint64_t a1)
{
  return notify_register_check(*(const char **)(a1 + 32), &dword_1ED700824);
}

void sub_1BEB5C02C()
{
  void *v0;

  v0 = (void *)qword_1ED700A18;
  qword_1ED700A18 = (uint64_t)&unk_1E78AFAA0;

}

BOOL sub_1BEB5C194(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPMergeableValueIdentifier *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !sub_1BEAE7D18((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(CKDPMergeableValueIdentifier **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

SecCertificateRef sub_1BEB5CF6C(uint64_t a1, const __CFData *a2)
{
  return SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
}

void sub_1BEB5DAC8(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  id v7;

  objc_msgSend_defaultContext(CKDLogicalDeviceContext, a2, a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_tokenRegistrationScheduler(v7, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_refreshAllClientsNow_(v5, v6, 0);

}

void sub_1BEB5DEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB5DF30(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    objc_msgSend_operations(*(void **)(a1 + 32), v2, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    objc_msgSend_operations(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operation(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObject_(v8, v12, (uint64_t)v11);

    objc_sync_exit(v5);
  }
  objc_msgSend_error(WeakRetained, v2, v3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v16 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v17 = v16;
      objc_msgSend_error(WeakRetained, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412290;
      v24 = v20;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "Failed to refresh token with server: %@", (uint8_t *)&v23, 0xCu);

    }
  }
  v21 = *(_QWORD *)(a1 + 40);
  objc_msgSend_error(WeakRetained, v14, v15);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v22);

}

void sub_1BEB5E0E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB5E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB5E4AC(void **a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    objc_msgSend_operations(a1[4], v2, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    objc_msgSend_operations(a1[4], v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operation(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObject_(v8, v12, (uint64_t)v11);

    objc_sync_exit(v5);
  }
  objc_msgSend_queue(a1[4], v2, v3);
  v13 = objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1BEB5E5CC;
  v16[3] = &unk_1E782EC68;
  v14 = a1[5];
  v17 = WeakRetained;
  v18 = v14;
  v15 = WeakRetained;
  dispatch_async(v13, v16);

}

void sub_1BEB5E5B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB5E5CC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_1BEB5E9A4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  id v7;
  uint64_t v8;
  char v9;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEB5EA34;
  v5[3] = &unk_1E7834AE8;
  v2 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v2;
  v3 = *(id *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v7 = v3;
  v8 = v4;
  v9 = *(_BYTE *)(a1 + 64);
  CKMuckingWithPersonas(v5);

}

void sub_1BEB5EA34(uint64_t a1)
{
  _QWORD *v2;
  os_log_t *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  int isTestContainer;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  void *v54;
  const char *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  void *v63;
  os_log_t v64;
  const char *v65;
  NSObject *v66;
  void *v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  _QWORD v79[5];
  id v80;
  id v81;
  uint8_t buf[4];
  void *v83;
  __int16 v84;
  void *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (os_log_t *)MEMORY[0x1E0C952B0];
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v67 = *(void **)(a1 + 32);
    v68 = v4;
    objc_msgSend_appContainerTuple(v67, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_accountID(*(void **)(a1 + 32), v72, v73);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v83 = v71;
    v84 = 2112;
    v85 = v74;
    _os_log_debug_impl(&dword_1BE990000, v68, OS_LOG_TYPE_DEBUG, "Checking push token for container tuple %@, accountID %@", buf, 0x16u);

  }
  objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  isTestContainer = objc_msgSend_isTestContainer(v10, v11, v12);

  if (isTestContainer
    || (objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v14, v15),
        v16 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend_personaID(v16, v17, v18),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        v20 = CKAdoptPersonaID(v19),
        v19,
        v16,
        !v20))
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    objc_msgSend_metadataCache(*(void **)(a1 + 48), v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_applicationID(v7, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_applicationMetadataForApplicationID_(v23, v27, (uint64_t)v26);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = *(_QWORD *)(a1 + 32);
    objc_msgSend_deviceContext(*(void **)(a1 + 56), v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sharedInternalUseContainers(CKDContainer, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v36, v29, v32, v35);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = objc_msgSend_adopterProcessType(v28, v38, v39);
    v43 = objc_msgSend_adopterProcessType(v37, v41, v42);
    if (v40 == 4 || v43 != 4)
    {
      if (*(_BYTE *)(a1 + 64))
      {
        if (*v2 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v49 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v83 = v7;
          _os_log_debug_impl(&dword_1BE990000, v49, OS_LOG_TYPE_DEBUG, "Tossing push token for container tuple %@", buf, 0xCu);
        }
        objc_msgSend_metadataCache(*(void **)(a1 + 48), v50, v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setPushToken_forAppContainerAccountTuple_(v52, v53, 0, *(_QWORD *)(a1 + 32));

      }
      objc_msgSend_metadataCache(*(void **)(a1 + 48), v44, v45);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v54, v55, *(_QWORD *)(a1 + 32));
      v56 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_tokenRegistered(v56, v57, v58) == 1)
      {
        objc_msgSend_apsEnvironmentString(v37, v59, v60);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_sharedConnectionForAPSEnvironmentString_(CKDPushConnection, v62, (uint64_t)v61);
        v63 = (void *)objc_claimAutoreleasedReturnValue();

        if (*v2 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v64 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          v75 = v64;
          objc_msgSend_applicationBundleIdentifierForPush(v37, v76, v77);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v83 = v7;
          v84 = 2114;
          v85 = v78;
          _os_log_debug_impl(&dword_1BE990000, v75, OS_LOG_TYPE_DEBUG, "Requesting token for container tuple %@, push bundle identifier %{public}@", buf, 0x16u);

        }
        v79[0] = MEMORY[0x1E0C809B0];
        v79[1] = 3221225472;
        v79[2] = sub_1BEB5F018;
        v79[3] = &unk_1E7834AC0;
        v79[4] = *(_QWORD *)(a1 + 56);
        v80 = v37;
        v81 = *(id *)(a1 + 40);
        objc_msgSend_getToken_(v63, v65, (uint64_t)v79);

      }
      else
      {
        if (*v2 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v66 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v83 = v7;
          _os_log_debug_impl(&dword_1BE990000, v66, OS_LOG_TYPE_DEBUG, "NOT requesting token for container tuple %@", buf, 0xCu);
        }
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
      }

    }
    else
    {
      if (*v2 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v46 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v83 = v37;
        _os_log_impl(&dword_1BE990000, v46, OS_LOG_TYPE_INFO, "Unregistering push token for %@ because it is no longer installed", buf, 0xCu);
      }
      objc_msgSend_unregisterTokenForAppContainerAccountTuple_(*(void **)(a1 + 56), v47, *(_QWORD *)(a1 + 32));
      if (*v2 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v48 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v83 = v7;
        _os_log_debug_impl(&dword_1BE990000, v48, OS_LOG_TYPE_DEBUG, "NOT registering token for container tuple %@", buf, 0xCu);
      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    }

  }
}

void sub_1BEB5F018(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  _QWORD v6[4];
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEB5F09C;
  v6[3] = &unk_1E782EA40;
  v7 = *(id *)(a1 + 48);
  objc_msgSend__handlePushToken_forContainer_completionBlock_(v3, v5, a2, v4, v6);

}

void sub_1BEB5F09C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB5F0A4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;

  objc_msgSend_metadataCache(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dateOfLastTokenUpdate(v4, v5, v6);
  v12 = (const char *)objc_claimAutoreleasedReturnValue();

  v8 = (char *)v12;
  if (!v12 || (v9 = objc_msgSend_compare_(*(void **)(a1 + 40), v12, (uint64_t)v12), v8 = (char *)v12, v9 == 1))
  {
    objc_msgSend_metadataCache(*(void **)(a1 + 32), v8, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setDateOfLastTokenUpdate_(v10, v11, *(_QWORD *)(a1 + 40));

    v8 = (char *)v12;
  }

}

void sub_1BEB5F444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BEB5F470(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  const char *v47;
  _QWORD v48[4];
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  objc_msgSend_callbackTimers(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    dispatch_source_cancel(v6);
    objc_msgSend_callbackTimers(*(void **)(a1 + 32), v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v11, v12, *(_QWORD *)(a1 + 40));

  }
  objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), v7, v8);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = *(void **)(a1 + 32);
  if (v13)
  {
    objc_msgSend_unitTestingPushTokens(v16, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v17, v18, *(_QWORD *)(a1 + 48));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_deviceContext(v16, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadataCache(v17, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pushTokenForAppContainerAccountTuple_filterOldTokens_(v22, v23, *(_QWORD *)(a1 + 40), 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (v19
    && objc_msgSend_isEqual_(v19, v24, *(_QWORD *)(a1 + 56))
    && objc_msgSend_tokenRegistered(*(void **)(a1 + 64), v24, v25) == 1
    || (objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), v24, v25),
        v26 = (void *)objc_claimAutoreleasedReturnValue(),
        v26,
        !v6)
    && v26)
  {
    objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v24, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v27, v28, *(_QWORD *)(a1 + 40));
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v30 = v29;
    v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v54, v58, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v55;
      do
      {
        v35 = 0;
        do
        {
          if (*(_QWORD *)v55 != v34)
            objc_enumerationMutation(v30);
          (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * v35++) + 16))();
        }
        while (v33 != v35);
        v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v36, (uint64_t)&v54, v58, 16);
      }
      while (v33);
    }

    objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v39, v40, *(_QWORD *)(a1 + 40));

    v41 = *(_QWORD *)(a1 + 80);
    if (v41)
      (*(void (**)(void))(v41 + 16))();
  }
  else
  {
    v42 = *(void **)(a1 + 32);
    objc_msgSend_apsToken(*(void **)(a1 + 56), v24, v25);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = *(_QWORD *)(a1 + 72);
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = sub_1BEB5F770;
    v48[3] = &unk_1E7834B10;
    v45 = *(id *)(a1 + 48);
    v46 = *(_QWORD *)(a1 + 32);
    v49 = v45;
    v50 = v46;
    v51 = *(id *)(a1 + 56);
    v52 = *(id *)(a1 + 40);
    v53 = *(id *)(a1 + 80);
    objc_msgSend__refreshApsToken_container_completionBlock_(v42, v47, (uint64_t)v43, v44, v48);

    v30 = v49;
  }

}

void sub_1BEB5F770(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  int8x16_t v39;
  _QWORD v40[5];
  id v41;
  id v42;
  _QWORD block[4];
  int8x16_t v44;
  id v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)*MEMORY[0x1E0C952F8];
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v4);
    v5 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v47 = v8;
      v48 = 2112;
      v49 = v3;
      v9 = "Warn: Failed to register push token for %@: %@";
      v10 = v5;
      v11 = 22;
LABEL_10:
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v4);
    v12 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v47 = v13;
      v9 = "Successfully registered push token for %@";
      v10 = v12;
      v11 = 12;
      goto LABEL_10;
    }
  }
  objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 40), v6, v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = MEMORY[0x1E0C809B0];
  if (v14)
  {
    if (!v3)
    {
      objc_msgSend_queue(*(void **)(a1 + 40), v15, v16);
      v18 = objc_claimAutoreleasedReturnValue();
      block[0] = v17;
      block[1] = 3221225472;
      block[2] = sub_1BEB5FA94;
      block[3] = &unk_1E782E418;
      v39 = *(int8x16_t *)(a1 + 32);
      v19 = (id)v39.i64[0];
      v44 = vextq_s8(v39, v39, 8uLL);
      v45 = *(id *)(a1 + 48);
      dispatch_async(v18, block);

    }
  }
  else
  {
    objc_msgSend_deviceContext(*(void **)(a1 + 40), v15, v16);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadataCache(v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v23, v24, *(_QWORD *)(a1 + 56));
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = CKTernaryFromBOOL();
    objc_msgSend_setTokenRegistered_(v25, v27, v26);
    objc_msgSend_metadataCache(v20, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAppContainerAccountMetadata_forAppContainerAccountTuple_(v30, v31, (uint64_t)v25, *(_QWORD *)(a1 + 56));

    objc_msgSend_metadataCache(v20, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPushToken_forAppContainerAccountTuple_(v34, v35, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
  objc_msgSend_queue(*(void **)(a1 + 40), v15, v16, *(_OWORD *)&v39);
  v36 = objc_claimAutoreleasedReturnValue();
  v40[0] = v17;
  v40[1] = 3221225472;
  v40[2] = sub_1BEB5FADC;
  v40[3] = &unk_1E782E418;
  v40[4] = *(_QWORD *)(a1 + 40);
  v41 = *(id *)(a1 + 56);
  v37 = v3;
  v42 = v37;
  dispatch_async(v36, v40);

  v38 = *(_QWORD *)(a1 + 64);
  if (v38)
    (*(void (**)(void))(v38 + 16))();

}

void sub_1BEB5FA94(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), a2, a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v5, v4, *(_QWORD *)(a1 + 40));

}

void sub_1BEB5FADC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend_callbackBlocks(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend_copy(v6, v7, v8);

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = v9;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v21, v25, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v22;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v22 != v14)
          objc_enumerationMutation(v10);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v15) + 16))(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v15));
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v16, (uint64_t)&v21, v25, 16);
    }
    while (v13);
  }

  objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v17, v18, (_QWORD)v21);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v19, v20, *(_QWORD *)(a1 + 40));

}

void sub_1BEB5FEAC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_metadataCache(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pushTokenForAppContainerAccountTuple_filterOldTokens_(v7, v8, *(_QWORD *)(a1 + 40), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_metadataCache(v4, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v12, v13, *(_QWORD *)(a1 + 40));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_tokenRegistered(v14, v15, v16) == 1)
    {
      v19 = *(void **)(a1 + 32);
      objc_msgSend_apsToken(v9, v17, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(_QWORD *)(a1 + 40);
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = sub_1BEB600C8;
      v27[3] = &unk_1E7831228;
      v28 = v14;
      v29 = v4;
      v30 = *(id *)(a1 + 40);
      objc_msgSend__removeApsToken_appContainerAccountTuple_completionBlock_(v19, v22, (uint64_t)v20, v21, v27);

    }
    objc_msgSend_metadataCache(v4, v17, v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPushToken_forAppContainerAccountTuple_(v23, v24, 0, *(_QWORD *)(a1 + 40));

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v25 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v32 = v26;
      _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "No registered token found for appContainerAccountTuple %@. Skipping token unregister.", buf, 0xCu);
    }
  }

}

void sub_1BEB600C8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  id v6;

  if (!a2)
  {
    objc_msgSend_setTokenRegistered_(*(void **)(a1 + 32), 0, 0);
    objc_msgSend_metadataCache(*(void **)(a1 + 40), v3, v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAppContainerAccountMetadata_forAppContainerAccountTuple_(v6, v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEB60384(uint64_t a1)
{
  dispatch_group_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  _QWORD *v9;
  _QWORD v10[5];
  id v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD v14[5];
  id v15;

  v2 = dispatch_group_create();
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = sub_1BE9BB0A8;
  v14[4] = sub_1BE9BAE08;
  v15 = 0;
  v10[2] = sub_1BEB604D4;
  v10[3] = &unk_1E7830880;
  v3 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v11 = v3;
  v5 = v2;
  v12 = v5;
  v13 = v14;
  CKMuckingWithPersonas(v10);
  CKGetGlobalQueue();
  v6 = objc_claimAutoreleasedReturnValue();
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEB60914;
  v7[3] = &unk_1E782ECB8;
  v8 = *(id *)(a1 + 48);
  v9 = v14;
  dispatch_group_notify(v5, v6, v7);

  _Block_object_dispose(v14, 8);
}

void sub_1BEB604BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB604D4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  dispatch_once_t *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  const char *v46;
  NSObject *v47;
  __int128 v48;
  id v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[4];
  id v53;
  id v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t buf[4];
  void *v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_metadataCache(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = a1;
  objc_msgSend_knownAppContainerAccountTuplesForAccountID_(v7, v8, *(_QWORD *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v10 = v9;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v57, v63, 16);
  if (v12)
  {
    v16 = v12;
    v17 = *(_QWORD *)v58;
    v18 = (dispatch_once_t *)MEMORY[0x1E0C95300];
    *(_QWORD *)&v15 = 138412290;
    v48 = v15;
    v49 = v10;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v58 != v17)
          objc_enumerationMutation(v10);
        v20 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v19);
        objc_msgSend_appContainerTuple(v20, v13, v14, v48);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_personaID(v21, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = CKAdoptPersonaID(v24);

        if (v25)
        {
          objc_msgSend_metadataCache(v4, v13, v14);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_pushTokenForAppContainerAccountTuple_filterOldTokens_(v26, v27, (uint64_t)v20, 0);
          v28 = (void *)objc_claimAutoreleasedReturnValue();

          if (v28)
          {
            objc_msgSend_metadataCache(v4, v29, v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v31, v32, (uint64_t)v20);
            v33 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_metadataCache(v4, v34, v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setPushToken_forAppContainerAccountTuple_(v36, v37, 0, v20);

            if (objc_msgSend_tokenRegistered(v33, v38, v39) == 1)
            {
              dispatch_group_enter(*(dispatch_group_t *)(v51 + 48));
              if (*v18 != -1)
                dispatch_once(v18, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v40 = *MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = v48;
                v62 = v20;
                _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Unregistering token for %@", buf, 0xCu);
              }
              v43 = *(void **)(v51 + 32);
              objc_msgSend_apsToken(v28, v41, v42);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              v52[0] = MEMORY[0x1E0C809B0];
              v52[1] = 3221225472;
              v52[2] = sub_1BEB60888;
              v52[3] = &unk_1E7834B60;
              v53 = v33;
              v54 = v4;
              v55 = v20;
              v50 = *(_OWORD *)(v51 + 48);
              v45 = (id)v50;
              v56 = v50;
              objc_msgSend__removeApsToken_appContainerAccountTuple_completionBlock_(v43, v46, (uint64_t)v44, v20, v52);

              v10 = v49;
              v18 = (dispatch_once_t *)MEMORY[0x1E0C95300];
            }

          }
          else
          {
            if (*v18 != -1)
              dispatch_once(v18, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v47 = *MEMORY[0x1E0C952B0];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = v48;
              v62 = v20;
              _os_log_debug_impl(&dword_1BE990000, v47, OS_LOG_TYPE_DEBUG, "No registered token found for appContainerAccountTuple %@. Skipping token unregister.", buf, 0xCu);
            }
          }

        }
        ++v19;
      }
      while (v16 != v19);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v57, v63, 16);
    }
    while (v16);
  }

}

void sub_1BEB60888(uint64_t a1, void *a2)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (!v12)
  {
    objc_msgSend_setTokenRegistered_(*(void **)(a1 + 32), v4, 0);
    objc_msgSend_metadataCache(*(void **)(a1 + 40), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAppContainerAccountMetadata_forAppContainerAccountTuple_(v7, v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(_QWORD *)(v9 + 40);
  v10 = (id *)(v9 + 40);
  if (!v11)
    objc_storeStrong(v10, a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

uint64_t sub_1BEB60914(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

void sub_1BEB60AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1BEB60ABC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  id WeakRetained;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_callbackBlocks(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = v6;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v26, v30, 16);
  if (v9)
  {
    v11 = v9;
    v12 = *(_QWORD *)v27;
    v13 = *MEMORY[0x1E0C94B20];
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v7);
        v15 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v14);
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v10, v13, 1015, CFSTR("Failed to get push token"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

        ++v14;
      }
      while (v11 != v14);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v26, v30, 16);
    }
    while (v11);
  }

  objc_msgSend_callbackBlocks(WeakRetained, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v19, v20, *(_QWORD *)(a1 + 32));

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  objc_msgSend_callbackTimers(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v23, v24, *(_QWORD *)(a1 + 32));

}

uint64_t sub_1BEB60C70(uint64_t a1, const char *a2)
{
  return objc_msgSend__handlePushToken_forContainer_completionBlock_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(_QWORD *)(a1 + 40), 0);
}

uint64_t sub_1BEB60DEC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPMergeableValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEB62908(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__minimumSchemaVersion;
              goto LABEL_53;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__minimumSchemaVersion;
              goto LABEL_56;
            }
          }
          v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__minimumSchemaVersion;
          goto LABEL_54;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__mmcsVersion;
              goto LABEL_53;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__mmcsVersion;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__mmcsVersion;
          goto LABEL_54;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__encryptedFieldContextType;
              goto LABEL_53;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__encryptedFieldContextType;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__encryptedFieldContextType;
          goto LABEL_54;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__assetKeyEncryptionType;
          goto LABEL_54;
        }
        v35 += 7;
        v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__assetKeyEncryptionType;
          goto LABEL_56;
        }
      }
      v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__assetKeyEncryptionType;
LABEL_53:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB64164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB64194(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v6, (uint64_t)v5);

}

BOOL sub_1BEB64300(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEB64944(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_1BEB65024(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend_translator(v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerPrivacySettingsFromPContainerPrivacySettings_(v6, v7, (uint64_t)v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

BOOL CKDPUserInformationBlockedRequestAccessReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPContactInformation *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPContactInformation **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPContactInformation);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !CKDPContactInformationReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB660E4()
{
  void *v0;

  v0 = (void *)qword_1ED700A28;
  qword_1ED700A28 = (uint64_t)&unk_1E78AFAC8;

}

BOOL sub_1BEB66244(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPUserPrivacySettings *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPUserPrivacySettings **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPUserPrivacySettings);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (sub_1BEC58768((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB668AC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPListRange *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPListRange);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !sub_1BEBC0194((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB67158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1BEB67190(uint64_t a1)
{
  id WeakRetained;
  id v3;
  _QWORD *v4;
  os_log_t *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  os_log_t v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = (os_log_t *)MEMORY[0x1E0C952B8];
  v6 = *MEMORY[0x1E0C952B8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v22) = 0;
    _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "Completed updating missing asset status", (uint8_t *)&v22, 2u);
  }
  objc_msgSend_error(v3, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (*v4 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      v15 = v12;
      objc_msgSend_error(v3, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412290;
      v23 = v18;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_INFO, "Error updating missing asset status: %@", (uint8_t *)&v22, 0xCu);

    }
    objc_msgSend_error(v3, v13, v14);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v20, (uint64_t)v19);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v10, v11);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

uint64_t sub_1BEB675C4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t result;

  objc_msgSend_parserData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v7 = (void *)objc_opt_new();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);

  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_parserData(*(void **)(a1 + 32), v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendData_(v9, v10, *(_QWORD *)(a1 + 40));

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEB676F0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void (**v16)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void (**v28)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  id v36;
  _QWORD v37[5];
  id v38;
  _QWORD v39[4];
  NSObject *v40;
  _QWORD v41[4];
  NSObject *v42;

  v2 = dispatch_group_create();
  objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v8 = MEMORY[0x1E0C809B0];
  if (v5)
  {
    v9 = (void *)v5;
    objc_msgSend_parserData(*(void **)(a1 + 32), v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend_length(v10, v11, v12);

    if (v13)
    {
      dispatch_group_enter(v2);
      objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v14, v15);
      v16 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend_parserData(*(void **)(a1 + 32), v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_parserData(*(void **)(a1 + 32), v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v41[0] = v8;
      v41[1] = 3221225472;
      v41[2] = sub_1BEB67920;
      v41[3] = &unk_1E782EA40;
      v23 = v2;
      v42 = v23;
      ((void (**)(_QWORD, void *, void *, _QWORD *))v16)[2](v16, v19, v22, v41);

      if (*MEMORY[0x1E0C95280] && objc_msgSend_testRepeatedParseResults(*(void **)(a1 + 32), v24, v25))
      {
        dispatch_group_enter(v23);
        objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v26, v27);
        v28 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend_parserData(*(void **)(a1 + 32), v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_parserData(*(void **)(a1 + 32), v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v39[0] = v8;
        v39[1] = 3221225472;
        v39[2] = sub_1BEB67928;
        v39[3] = &unk_1E782EA40;
        v40 = v23;
        ((void (**)(_QWORD, void *, void *, _QWORD *))v28)[2](v28, v31, v34, v39);

      }
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v6, v7);
    CKGetGlobalQueue();
    v35 = objc_claimAutoreleasedReturnValue();
    v37[0] = v8;
    v37[1] = 3221225472;
    v37[2] = sub_1BEB67930;
    v37[3] = &unk_1E782EC68;
    v36 = *(id *)(a1 + 40);
    v37[4] = *(_QWORD *)(a1 + 32);
    v38 = v36;
    dispatch_group_notify(v2, v35, v37);

  }
}

void sub_1BEB67920(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB67928(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB67930(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

uint64_t CKDPShareMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  CKDPParticipant *v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_23;
      case 2u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_23:
        v20 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_66;
      case 3u:
        v21 = objc_alloc_init(CKDPParticipant);
        v22 = 16;
        goto LABEL_26;
      case 4u:
        v21 = objc_alloc_init(CKDPParticipant);
        v22 = 8;
LABEL_26:
        objc_storeStrong((id *)(a1 + v22), v21);
        if (!PBReaderPlaceMark() || (CKDPParticipantReadFrom((uint64_t)v21, a2) & 1) == 0)
          goto LABEL_68;
        goto LABEL_52;
      case 5u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_56:
        v39 = 24;
        goto LABEL_65;
      case 6u:
        v29 = 0;
        v30 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_60:
        v39 = 28;
        goto LABEL_65;
      case 7u:
        v34 = 0;
        v35 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 64) |= 4u;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v25 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              v14 = v35++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_64:
        v39 = 32;
LABEL_65:
        *(_DWORD *)(a1 + v39) = v25;
        goto LABEL_66;
      case 8u:
        v21 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 48), v21);
        if (PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v21, a2) & 1) != 0)
        {
LABEL_52:
          PBReaderRecallMark();

LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_68:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

uint64_t sub_1BEB69188(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPCodeFunctionInvokeResponseAttestationResponseAttestation *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPCodeFunctionInvokeResponseAttestationResponseAttestation);
        objc_msgSend_addAttestations_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEAEF048((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB69920(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v6 = a3;
  if (v10)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v10, v5, v7);
    else
      objc_msgSend_remoteObjectProxyWithErrorHandler_(v10, v5, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1BEB69AD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = *(id *)(a1 + 32);
  objc_sync_enter(v8);
  if (v7)
  {
    v9 = *(id *)(a1 + 32);
    objc_sync_enter(v9);
    objc_msgSend_logicalDeviceScopedClientProxyCreator(*(void **)(a1 + 32), v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v14 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v25 = 138412546;
        v26 = v17;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Ignoring superfluous logical device scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
      }
      objc_msgSend_logicalDeviceScopedClientProxyCreator(*(void **)(a1 + 32), v15, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend_setLogicalDeviceScopedClientProxyCreator_(*(void **)(a1 + 32), v13, (uint64_t)v7);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v23 = *MEMORY[0x1E0C952B0];
      v18 = v7;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = 138412546;
        v26 = v24;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "Got a logical device scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
        v18 = v7;
      }
    }
    objc_sync_exit(v9);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v25 = 138412546;
      v26 = v22;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_1BE990000, v19, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get logical device scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
    }
    objc_msgSend_logicalDeviceScopedClientProxyCreator(*(void **)(a1 + 32), v20, v21);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_sync_exit(v8);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1BEB69DB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB6A068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB6A090(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEB6A0DC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  __int128 v6;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEB6A168;
  v7[3] = &unk_1E78306A0;
  v9 = *(_QWORD *)(a1 + 56);
  v6 = *(_OWORD *)(a1 + 40);
  v4 = (id)v6;
  v8 = v6;
  objc_msgSend_openFileWithOpenInfo_reply_(a2, v5, v3, v7);

}

void sub_1BEB6A168(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEB6A49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB6A4C4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEB6A510(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  const char *v7;
  __int128 v8;
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEB6A5B0;
  v9[3] = &unk_1E78300B8;
  v11 = *(_QWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 40);
  v6 = (id)v8;
  v10 = v8;
  objc_msgSend_readBytesOfInMemoryAssetContentWithUUID_offset_length_reply_(a2, v7, v3, v5, v4, v9);

}

void sub_1BEB6A5B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1BEB6A728(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_resetThrottles(a2, (const char *)a2, a3);
}

void sub_1BEB6A7B8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend_throttleBlockingUntilNextRequestWindow(v2, v4, v5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addThrottle_(v3, v6, (uint64_t)v7);

}

uint64_t sub_1BEB6A9AC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB6AEB4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
LABEL_24:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 4u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_33;
        v21 += 7;
        v14 = v22++ >= 9;
        if (v14)
        {
          v23 = 0;
          goto LABEL_35;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_35:
      *(_QWORD *)(a1 + 8) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB6BBDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint8_t buf[4];
  NSObject *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  v9 = *(void **)(a1 + 32);
  if (v8)
  {
    objc_msgSend_setError_(v9, v6, (uint64_t)v8);
LABEL_3:
    v10 = 0;
    goto LABEL_4;
  }
  v15 = objc_msgSend_type(v9, v6, v7);
  if (!v15)
  {
    objc_msgSend_container(*(void **)(a1 + 32), v16, v17);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerID(v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_transcodeServerPublicKeyURLs_(v5, v30, (uint64_t)v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
    {
      objc_msgSend_transcodeServerHostname(*(void **)(a1 + 32), v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v31, v35, (uint64_t)v34);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {

        goto LABEL_15;
      }
      v54 = (void *)MEMORY[0x1E0C94FF8];
      v55 = *MEMORY[0x1E0C94B20];
      objc_msgSend_transcodeServerHostname(*(void **)(a1 + 32), v36, v37);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v54, v56, v55, 2005, CFSTR("Could not find assetKeyEncryption URL for template URL %@"), v52);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 32), v58, (uint64_t)v57);

    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v32, *MEMORY[0x1E0C94B20], 2005, CFSTR("Server configuration did not contain assetKeyEncryption URL info"));
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 32), v53, (uint64_t)v52);
    }

    goto LABEL_3;
  }
  if (v15 != 1)
    goto LABEL_3;
  objc_msgSend_container(*(void **)(a1 + 32), v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cloudMediaProcessingPublicKeyURLString_(v5, v22, (uint64_t)v21);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v23, *MEMORY[0x1E0C94B20], 2005, CFSTR("Server configuration did not contain CMP public key URL"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v25, (uint64_t)v24);

    goto LABEL_3;
  }
LABEL_15:
  objc_msgSend_URLWithString_(MEMORY[0x1E0C99E98], v23, (uint64_t)v10);
  v38 = objc_claimAutoreleasedReturnValue();
  if (v38)
  {
    v40 = v38;
    objc_msgSend_setTranscodeServerPublicKeyURL_(*(void **)(a1 + 32), v39, v38);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v41 = (void *)*MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      goto LABEL_22;
    v42 = *(void **)(a1 + 32);
    v43 = v41;
    objc_msgSend_transcodeServerPublicKeyURL(v42, v44, v45);
    v46 = objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v60 = v46;
    _os_log_debug_impl(&dword_1BE990000, v43, OS_LOG_TYPE_DEBUG, "Transcode server public key hosted at %{public}@", buf, 0xCu);

LABEL_21:
LABEL_22:

    goto LABEL_7;
  }
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v39, *MEMORY[0x1E0C94B20], 1005, CFSTR("Couldn't create URL from transcode server URL string: %@"), v10);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setError_(*(void **)(a1 + 32), v51, (uint64_t)v50);

LABEL_4:
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    v47 = *(void **)(a1 + 32);
    v40 = v11;
    objc_msgSend_error(v47, v48, v49);
    v43 = objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v60 = v43;
    _os_log_error_impl(&dword_1BE990000, v40, OS_LOG_TYPE_ERROR, "Error getting transcode server public key URL: %@", buf, 0xCu);
    goto LABEL_21;
  }
LABEL_7:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v14);

}

void sub_1BEB6C55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB6C584(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  char hasExpired;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  int v44;
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v37 = v3;
    objc_msgSend_verifiedPublicKey(WeakRetained, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(WeakRetained, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 138412546;
    v45 = v40;
    v46 = 2112;
    v47 = v43;
    _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Fetched transcode server public key %@ with error %@", (uint8_t *)&v44, 0x16u);

  }
  objc_msgSend_error(WeakRetained, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setError_(*(void **)(a1 + 32), v7, (uint64_t)v6);

  objc_msgSend_error(WeakRetained, v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    goto LABEL_8;
  objc_msgSend_verifiedPublicKey(WeakRetained, v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  hasExpired = objc_msgSend_hasExpired(v13, v14, v15);

  if ((hasExpired & 1) == 0)
  {
    objc_msgSend_verifiedPublicKey(WeakRetained, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTranscodeServerPublicKey_(*(void **)(a1 + 32), v20, (uint64_t)v19);

    objc_msgSend_deviceContext(*(void **)(a1 + 32), v21, v22);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadataCache(v12, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_verifiedPublicKey(WeakRetained, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_transcodeServerPublicKeyURL(*(void **)(a1 + 32), v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_absoluteString(v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPublicKey_ofType_withIdentifier_(v25, v35, (uint64_t)v28, CFSTR("transcodeServerPublicKey"), v34);

LABEL_8:
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v17, v18);
  v36 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v36);

}

void sub_1BEB6CBF8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;

  v11 = 0;
  objc_msgSend_invocation(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getArgument_atIndex_(v5, v6, (uint64_t)&v11, a2);

  if (!v11)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDLongLivedOperationPersistedCallback.m"), 47, CFSTR("Unexpectedly nil reply block for -[%@ %@]"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEB6CC94(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  objc_class *Superclass;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  void *v17;
  const char *v18;
  id v19;

  v19 = 0;
  objc_msgSend_invocation(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getArgument_atIndex_(v5, v6, (uint64_t)&v19, a2);

  v7 = v19;
  if (v7)
  {
    CKOperationProgressCallbackClasses();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    if (v9)
    {
      Superclass = (objc_class *)v9;
      while ((objc_msgSend_containsObject_(v8, v10, (uint64_t)Superclass) & 1) == 0)
      {
        Superclass = class_getSuperclass(Superclass);
        if (!Superclass)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v10, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 32);
      v16 = (objc_class *)objc_opt_class();
      NSStringFromClass(v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v18, v14, v15, CFSTR("CKDLongLivedOperationPersistedCallback.m"), 68, CFSTR("Unsuitable object type %@ for -[%@ %@]"), v17, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

    }
  }

}

void sub_1BEB6D448(uint64_t a1, const char *a2)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Argument-%lu"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  v5 = objc_retainAutorelease(*(id *)(a1 + 32));
  v7 = objc_msgSend_decodeBytesForKey_returnedLength_(v5, v6, (uint64_t)v4, &v9);
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 40), v8, v7, a2);

}

void sub_1BEB6D4C4(uint64_t a1, const char *a2)
{
  void *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  id v9;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Argument-%lu"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CKOperationProgressCallbackClasses();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_decodeObjectOfClasses_forKey_(*(void **)(a1 + 32), v6, (uint64_t)v5, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = 0;

  }
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 40), v8, (uint64_t)&v9, a2);

}

void sub_1BEB6D588(uint64_t a1, const char *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  id v12;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Argument-%lu"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 32);
  v6 = objc_opt_class();
  objc_msgSend_decodeObjectOfClass_forKey_(v5, v7, v6, v4);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend_UTF8String(v8, v9, v10);
  v12 = (id)__NSMakeSpecialForwardingCaptureBlock();
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 40), v11, (uint64_t)&v12, a2);

}

void sub_1BEB6D8D8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Argument-%lu"), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invocation(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getArgument_atIndex_(v9, v10, (uint64_t)v12 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0), a2);

  objc_msgSend_encodeBytes_length_forKey_(*(void **)(a1 + 40), v11, (uint64_t)v12 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
}

void sub_1BEB6D9C0(uint64_t a1, const char *a2)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  id v11;
  id v12;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Argument-%lu"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend_invocation(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getArgument_atIndex_(v7, v8, (uint64_t)&v12, a2);

  v11 = v12;
  if (!v11)
  {
    objc_msgSend_null(MEMORY[0x1E0C99E38], v9, v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_encodeObject_forKey_(*(void **)(a1 + 40), v9, (uint64_t)v11, v4);

}

void sub_1BEB6DA70(uint64_t a1, const char *a2)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *aBlock;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Argument-%lu"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock = 0;
  objc_msgSend_invocation(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getArgument_atIndex_(v7, v8, (uint64_t)&aBlock, a2);

  v9 = _Block_signature(aBlock);
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v10, (uint64_t)v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(*(void **)(a1 + 40), v12, (uint64_t)v11, v4);

}

uint64_t CKDPMergeableDeltaReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v16;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  void *v27;
  CKDPAsset *v28;
  uint64_t v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || (_DWORD)v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v18 = (const char *)(v10 >> 3);
    switch((v10 >> 3))
    {
      case 0x10u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(_BYTE *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 48) = 1;
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
        goto LABEL_30;
      case 0x11u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(_BYTE *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 48) = 2;
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 32;
LABEL_30:
        v27 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_42;
      case 0x12u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(_BYTE *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 48) = 3;
        v28 = objc_alloc_init(CKDPAsset);
        v29 = 8;
        goto LABEL_33;
      case 0x13u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(_BYTE *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 48) = 4;
        v28 = objc_alloc_init(CKDPAsset);
        v29 = 24;
LABEL_33:
        objc_storeStrong((id *)(a1 + v29), v28);
        if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v28, a2) & 1) == 0)
          goto LABEL_44;
        goto LABEL_38;
      default:
        if ((_DWORD)v18 != 1)
        {
          if ((_DWORD)v18)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            v21 = 0;
            while (1)
            {
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
                break;
              v24 = v23 + 1;
              v25 = *(char *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v24;
              if (v25 < 0 && v21++ <= 8)
                continue;
              goto LABEL_42;
            }
            *(_BYTE *)(a2 + *v5) = 1;
          }
          goto LABEL_42;
        }
        v28 = objc_alloc_init(CKDPMergeableDeltaMetadata);
        objc_storeStrong((id *)(a1 + 40), v28);
        if (PBReaderPlaceMark() && sub_1BEC5363C((id *)&v28->super.super.isa, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
    }
  }
}

uint64_t sub_1BEB6ECD8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("itemID == $ITEMID"));
}

void sub_1BEB6EFE8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend_setFetchedProperties_(v3, v4, v2);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v5, (uint64_t)CFSTR("status=$STATUS"));
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v6, (uint64_t)v7);

}

void sub_1BEB6F148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BEB6F160(_QWORD *a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  id v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v18[0] = CFSTR("FILE_SIGNATURE");
  v18[1] = CFSTR("STATUS");
  v19[0] = v3;
  v19[1] = &unk_1E78B0220;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v19, v18, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)a1[5];
  v17 = 0;
  objc_msgSend_entriesWithValues_label_error_setupBlock_(v5, v6, (uint64_t)v4, off_1E7835168, &v17, &unk_1E7835180);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v17;
  if (!v10)
  {
    objc_msgSend_nextObject(v7, v8, v9);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1[6] + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    objc_msgSend_error(v7, v14, v15);
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

void sub_1BEB6F274(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  id v6;

  v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1E78AF318);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v4, (uint64_t)CFSTR("fileSignature = $FILE_SIGNATURE AND status = $STATUS"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);

}

void sub_1BEB6F3D0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  id v19;

  v3 = a2;
  objc_msgSend_volumeIndex(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
  objc_msgSend_volumeUUID(v3, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v11, (uint64_t)v6, v10);

  objc_msgSend_volumeUUID(v3, v12, v13);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  v14 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  objc_msgSend_volumeIndex(v3, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setObject_forKeyedSubscript_(v14, v18, (uint64_t)v19, v17);
}

void sub_1BEB6F90C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  id v27;
  NSObject *v28;
  int v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_volumeIndex(v3, v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6
    && (v9 = (void *)v6,
        objc_msgSend_volumeUUID(v3, v7, v8),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        v10,
        v9,
        v10))
  {
    objc_msgSend_volumeUUID(v3, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deviceIDForVolumeUUID_(CKDVolumeManager, v14, (uint64_t)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 104));
      v17 = *(void **)(a1 + 40);
      objc_msgSend_volumeIndex(v3, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_volumeUUID(v3, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__lockedSetVolumeIndex_forVolumeUUID_(v17, v24, (uint64_t)v20, v23);

      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 104));
    }
    else
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v3);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v28 = *MEMORY[0x1E0C952A8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
      {
        v29 = 138412290;
        v30 = v3;
        _os_log_error_impl(&dword_1BE990000, v28, OS_LOG_TYPE_ERROR, "Volume %@ is not mounted. Deleting all asset handles for this volume", (uint8_t *)&v29, 0xCu);
      }
    }

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v25 = *MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v29 = 138412290;
      v30 = v3;
      _os_log_error_impl(&dword_1BE990000, v25, OS_LOG_TYPE_ERROR, "Invalid device volume %@", (uint8_t *)&v29, 0xCu);
    }
    v27 = (id)objc_msgSend_deleteObject_(*(void **)(a1 + 40), v26, (uint64_t)v3);
  }

}

void sub_1BEB6FEE8()
{
  objc_class *v0;
  const char *v1;
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  id v7;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v3 = (const char *)objc_msgSend_UTF8String(v7, v1, v2);
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create(v3, v4);
  v6 = (void *)qword_1ED700A38;
  qword_1ED700A38 = (uint64_t)v5;

}

void sub_1BEB6FF9C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED700A48;
  qword_1ED700A48 = v3;

}

void sub_1BEB701E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB70218(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  CKDAssetCache *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  id obj;

  objc_msgSend_containerCloudKitDirectory(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v7, v8, (uint64_t)v4);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v14)
    goto LABEL_2;
  v17 = [CKDAssetCache alloc];
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v21 + 40);
  v23 = objc_msgSend__initWithApplicationBundleID_directoryContext_database_error_(v17, v22, v18, v19, v20, &obj);
  objc_storeStrong((id *)(v21 + 40), obj);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v25 = *(void **)(v24 + 40);
  *(_QWORD *)(v24 + 40) = v23;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v28, v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v4);

    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (v14)
    {
LABEL_2:
      v15 = objc_msgSend_checkoutCount(v14, v12, v13);
      objc_msgSend_setCheckoutCount_(v14, v16, v15 + 1);
    }
  }

}

void sub_1BEB709D8(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD block[5];

  objc_msgSend__sharedCachesQueue(CKDAssetCache, a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEB70A50;
  block[3] = &unk_1E782EA40;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_sync(v4, block);

}

void sub_1BEB70A50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  void **v9;
  os_log_t *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend_checkoutCount(*(void **)(a1 + 32), a2, a3);
  if (v4 <= 0)
    __assert_rtn("-[CKDAssetCache drop]_block_invoke_2", "CKDAssetCache.m", 471, "checkoutCount > 0");
  v6 = v4;
  objc_msgSend_setCheckoutCount_(*(void **)(a1 + 32), v5, v4 - 1);
  if (v6 == 1)
  {
    objc_msgSend_setDidDrop_(*(void **)(a1 + 32), v7, 1);
    v8 = (uint64_t *)MEMORY[0x1E0C95300];
    v9 = (void **)MEMORY[0x1E0C952F8];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = (os_log_t *)MEMORY[0x1E0C952A8];
    v11 = *MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
    {
      v37 = *(_QWORD *)(a1 + 32);
      v39 = 138412290;
      v40 = v37;
      _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Did drop: %@", (uint8_t *)&v39, 0xCu);
    }
    objc_msgSend_directoryContext(*(void **)(a1 + 32), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerCloudKitDirectory(v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = *(void **)(a1 + 32);
    objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v21, v22, (uint64_t)v17);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = *v9;
    v25 = *v8;
    if (v18 == v23)
    {
      if (v25 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v24);
      v28 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        v38 = *(_QWORD *)(a1 + 32);
        v39 = 138412290;
        v40 = v38;
        _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "Removing from sharedCache map: %@", (uint8_t *)&v39, 0xCu);
      }
      objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removeObjectForKey_(v31, v32, (uint64_t)v17);

      v33 = *(_QWORD *)(a1 + 32);
      v34 = *(void **)(v33 + 40);
      *(_QWORD *)(v33 + 40) = 0;

      v35 = *(_QWORD *)(a1 + 32);
      v36 = *(void **)(v35 + 48);
      *(_QWORD *)(v35 + 48) = 0;

    }
    else
    {
      if (v25 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v24);
      v26 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)(a1 + 32);
        v39 = 138412290;
        v40 = v27;
        _os_log_error_impl(&dword_1BE990000, v26, OS_LOG_TYPE_ERROR, "Not in the sharedCache map: %@", (uint8_t *)&v39, 0xCu);
      }
    }

  }
}

uint64_t sub_1BEB71010(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  id v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  const char *v37;
  id v38;
  CKDAssetHandle *v40;
  id obj;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  const __CFString *v53;
  void *v54;
  _BYTE v55[128];
  _QWORD v56[2];
  _QWORD v57[2];
  _BYTE v58[128];
  uint64_t v59;

  v3 = a1;
  v59 = *MEMORY[0x1E0C80C00];
  objc_msgSend_unmountedAssetVolumes(*(void **)(*(_QWORD *)(a1 + 32) + 48), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v40 = objc_alloc_init(CKDAssetHandle);
  objc_msgSend_setStatus_(v40, v6, (uint64_t)&unk_1E78B0250);
  objc_msgSend_MMCS(*(void **)(v3 + 32), v7, v8);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  obj = v4;
  v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v49, v58, 16);
  if (v44)
  {
    v43 = *(_QWORD *)v50;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v50 != v43)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v12);
        v56[0] = CFSTR("INDEX");
        objc_msgSend_volumeIndex(v13, v10, v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v56[1] = CFSTR("UNREGISTERING");
        v57[0] = v14;
        v57[1] = &unk_1E78B0250;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v15, (uint64_t)v57, v56, 2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        v17 = v3;
        objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v18, (uint64_t)v16, off_1E7835238, 0, &unk_1E7835250);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v45, v55, 16);
        if (v21)
        {
          v24 = v21;
          v25 = *(_QWORD *)v46;
          do
          {
            v26 = 0;
            do
            {
              if (*(_QWORD *)v46 != v25)
                objc_enumerationMutation(v19);
              objc_msgSend_itemID(*(void **)(*((_QWORD *)&v45 + 1) + 8 * v26), v22, v23);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObject_(v5, v28, (uint64_t)v27);

              ++v26;
            }
            while (v24 != v26);
            v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v45, v55, 16);
          }
          while (v24);
        }
        if (objc_msgSend_count(v5, v22, v23))
        {
          objc_msgSend_unregisterItemIDs_(v42, v29, (uint64_t)v5);
          objc_msgSend_removeAllObjects(v5, v31, v32);
        }
        v53 = CFSTR("INDEX");
        objc_msgSend_volumeIndex(v13, v29, v30);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = v33;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v34, (uint64_t)&v54, &v53, 1);
        v35 = (void *)objc_claimAutoreleasedReturnValue();

        v3 = v17;
        objc_msgSend_deleteEntriesMatching_label_error_predicate_(*(void **)(*(_QWORD *)(v17 + 32) + 40), v36, (uint64_t)v35, off_1E7835270, 0, &unk_1E7835288);
        v38 = (id)objc_msgSend_deleteObject_(*(void **)(*(_QWORD *)(v17 + 32) + 48), v37, (uint64_t)v13);

        ++v12;
      }
      while (v12 != v44);
      v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v49, v58, 16);
    }
    while (v44);
  }

  return 0;
}

void sub_1BEB7134C(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  id v6;

  v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1E78AF330);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v4, (uint64_t)CFSTR("volumeIndex=$INDEX AND status!=$UNREGISTERING"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);

}

uint64_t sub_1BEB713B0(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("volumeIndex=$INDEX"));
}

void sub_1BEB7151C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB71534(uint64_t *a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  objc_msgSend_volumeUUIDForDeviceID_(CKDVolumeManager, a2, a1[4]);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_volumeIndexForVolumeUUID_(*(void **)(a1[5] + 48), v3, (uint64_t)v7);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1[6] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1BEB7167C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB71694(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  void *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(const char **)(a1 + 48);
      v14 = v11;
      NSStringFromSelector(v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412546;
      v17 = v12;
      v18 = 2114;
      v19 = v15;
      _os_log_error_impl(&dword_1BE990000, v14, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", (uint8_t *)&v16, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache clearForced:]_block_invoke", "CKDAssetCache.m", 586, "0 && \"already dropped\"");
  }
  objc_msgSend__evictAllFilesForced_(*(void **)(a1 + 32), v4, *(unsigned __int8 *)(a1 + 56));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  return objc_msgSend_expireAssetHandlesIfNecessary(*(void **)(a1 + 32), v8, v9);
}

void sub_1BEB719B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB719DC(uint64_t a1, const char *a2, uint64_t a3)
{
  CKDAssetCacheEvictionInfo *v4;
  const char *v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  char v22;
  id v23;
  NSObject *v24;
  const char *v25;
  void *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  char v36;
  id v37;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v26 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v27 = *(void **)(a1 + 32);
      v28 = *(const char **)(a1 + 48);
      v29 = v26;
      NSStringFromSelector(v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v39 = v27;
      v40 = 2114;
      v41 = v30;
      _os_log_error_impl(&dword_1BE990000, v29, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache clearAssetCache]_block_invoke", "CKDAssetCache.m", 599, "0 && \"already dropped\"");
  }
  v4 = [CKDAssetCacheEvictionInfo alloc];
  v6 = (void *)objc_msgSend_initWithForced_(v4, v5, 1);
  objc_msgSend_setClearRegisteredItems_(v6, v7, 1);
  objc_msgSend__evictWithEvictionInfo_(*(void **)(a1 + 32), v8, (uint64_t)v6);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  objc_msgSend_unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo_(*(void **)(a1 + 32), v12, (uint64_t)v6);
  objc_msgSend_expireAssetHandlesIfNecessary(*(void **)(a1 + 32), v13, v14);
  objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0;
  v22 = objc_msgSend_removeItemAtPath_error_(v20, v21, (uint64_t)v17, &v37);
  v23 = v37;
  if ((v22 & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v24 = *MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v39 = v23;
      _os_log_error_impl(&dword_1BE990000, v24, OS_LOG_TYPE_ERROR, "Failed to remove download directory while clearning cache: %{public}@", buf, 0xCu);
    }
  }
  CKCreateDirectoryAtPath();
  v36 = 0;
  if (!objc_msgSend_fileExistsAtPath_isDirectory_(v20, v25, (uint64_t)v17, &v36) || !v36)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v31 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BE990000, v31, OS_LOG_TYPE_ERROR, "No download directory after clearing cache", buf, 2u);
    }
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v32, (uint64_t)CFSTR("No download directory after clearing cache"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UTF8String(v33, v34, v35);
    _os_crash();
    __break(1u);
  }

}

void sub_1BEB71FA0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const __CFString *v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  uint32_t v39;
  NSObject *v40;
  const char *v41;
  void *v42;
  void *v43;
  const char *v44;
  NSObject *v45;
  __CFString *v46;
  __CFString *v48;
  void *v49;
  id v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  const __CFString *v59;
  __int16 v60;
  const __CFString *v61;
  _BYTE v62[128];
  uint64_t v63;

  v3 = a1;
  v63 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v42 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v43 = *(void **)(a1 + 32);
      v44 = *(const char **)(a1 + 48);
      v45 = v42;
      NSStringFromSelector(v44);
      v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v57 = v43;
      v58 = 2114;
      v59 = v46;
      _os_log_error_impl(&dword_1BE990000, v45, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache checkAssetHandlesForRegisteredMMCSItems:]_block_invoke", "CKDAssetCache.m", 630, "0 && \"already dropped\"");
  }
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v4 = *(id *)(v3 + 40);
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v52, v62, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v53;
    v50 = v4;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v53 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v9);
        v11 = (void *)MEMORY[0x1C3B83E24]();
        objc_msgSend_error(v10, v12, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v14)
        {
          v17 = (void *)MEMORY[0x1E0CB37E8];
          v18 = objc_msgSend_itemID(v10, v15, v16);
          objc_msgSend_numberWithUnsignedLongLong_(v17, v19, v18);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = *(void **)(*(_QWORD *)(v3 + 32) + 40);
          v51 = 0;
          objc_msgSend_entryWithPrimaryKey_fetchProperties_label_error_(v21, v22, (uint64_t)v20, &unk_1E78AF348, off_1E7835320, &v51);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = (__CFString *)v51;
          v25 = v24;
          if (v23)
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v26 = (id)*MEMORY[0x1E0C952A8];
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              objc_msgSend_signature(v10, v27, v28);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              if (v31)
              {
                objc_msgSend_signature(v10, v29, v30);
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_CKLowercaseHexStringWithoutSpaces(v49, v32, v33);
                v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
                v34 = v48;
              }
              else
              {
                v34 = CFSTR("none");
              }
              *(_DWORD *)buf = 138543874;
              v57 = v20;
              v58 = 2114;
              v59 = v34;
              v60 = 2114;
              v61 = CFSTR("cachedAndRegistered");
              _os_log_impl(&dword_1BE990000, v26, OS_LOG_TYPE_INFO, "%{public}@, %{public}@, %{public}@", buf, 0x20u);
              if (v31)
              {

              }
              v3 = a1;
            }

            v4 = v50;
          }
          else
          {
            v35 = (void *)*MEMORY[0x1E0C952F8];
            if (v24)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], v35);
              v36 = *MEMORY[0x1E0C952A8];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
                goto LABEL_29;
              *(_DWORD *)buf = 138543618;
              v57 = v20;
              v58 = 2114;
              v59 = v25;
              v37 = v36;
              v38 = "%{public}@ db error: %{public}@";
              v39 = 22;
            }
            else
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], v35);
              v40 = *MEMORY[0x1E0C952A8];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
                goto LABEL_29;
              *(_DWORD *)buf = 138543362;
              v57 = v20;
              v37 = v40;
              v38 = "%{public}@ not found";
              v39 = 12;
            }
            _os_log_impl(&dword_1BE990000, v37, OS_LOG_TYPE_INFO, v38, buf, v39);
          }
LABEL_29:

        }
        objc_autoreleasePoolPop(v11);
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v41, (uint64_t)&v52, v62, 16);
    }
    while (v7);
  }

}

void sub_1BEB724E0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  id v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  int isDirectory;
  int v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  void *v59;
  id v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  NSObject *v67;
  void *v68;
  uint64_t v69;
  const char *v70;
  NSObject *v71;
  void *v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  id obj;
  void *v78;
  id v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  char v85;
  _QWORD v86[5];
  id v87;
  _BYTE *v88;
  uint8_t v89[4];
  void *v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  void *v94;
  uint8_t v95[128];
  _BYTE buf[24];
  uint64_t (*v97)(uint64_t, uint64_t);
  void (*v98)(uint64_t);
  id v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v68 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v69 = *(_QWORD *)(a1 + 32);
      v70 = *(const char **)(a1 + 48);
      v71 = v68;
      NSStringFromSelector(v70);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v69;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v72;
      _os_log_error_impl(&dword_1BE990000, v71, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache showAssetCacheInContainer:]_block_invoke", "CKDAssetCache.m", 663, "0 && \"already dropped\"");
  }
  objc_msgSend_MMCS(*(void **)(a1 + 32), v4, v5);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_showRegisteredItemsInContainer_(v76, v6, *(_QWORD *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952A8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
  {
    v10 = v7;
    objc_msgSend_path(v76, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Report for %{public}@\n----\n", buf, 0xCu);

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v97 = sub_1BE9BB0C8;
  v98 = sub_1BE9BAE18;
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v8, v9);
  v99 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_date(MEMORY[0x1E0C99D68], v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v17 = *MEMORY[0x1E0C952A8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v89 = 0;
    _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "itemID, file signature, status, fileStatus, lastAccess(hrs), lastAssetDbAccess(hrs), expectedSize, actualSize", v89, 2u);
  }
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 40);
  v86[0] = MEMORY[0x1E0C809B0];
  v86[1] = 3221225472;
  v86[2] = sub_1BEB72C48;
  v86[3] = &unk_1E7835340;
  v86[4] = v18;
  v88 = buf;
  v75 = v16;
  v87 = v75;
  v21 = (id)objc_msgSend_performTransaction_(v19, v20, (uint64_t)v86);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v22 = (id)*MEMORY[0x1E0C952A8];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    objc_msgSend_path(v76, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v89 = 138543362;
    v90 = v25;
    _os_log_impl(&dword_1BE990000, v22, OS_LOG_TYPE_INFO, "End Report for %{public}@\n----\n", v89, 0xCu);

  }
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v26, v27);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = 0;
  objc_msgSend_directoryContext(*(void **)(a1 + 32), v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileDownloadDirectory(v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_path(v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v78, v37, (uint64_t)v36, &v85);
  if (v85)
    v39 = isDirectory;
  else
    v39 = 0;

  if (v39)
  {
    objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = 0;
    objc_msgSend_contentsOfDirectoryAtPath_error_(v78, v43, (uint64_t)v42, &v84);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = v84;

    v44 = v74;
    if (v74)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      obj = v74;
      v46 = 0;
      v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v45, (uint64_t)&v80, v95, 16, v73);
      if (v49)
      {
        v50 = *(_QWORD *)v81;
        do
        {
          v51 = 0;
          do
          {
            if (*(_QWORD *)v81 != v50)
              objc_enumerationMutation(obj);
            v52 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * v51);
            objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v47, v48);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_stringByAppendingPathComponent_(v53, v54, v52);
            v55 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_assetHandleWithCachedPath_(*(void **)(a1 + 32), v56, (uint64_t)v55);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v79 = 0;
            objc_msgSend_attributesOfItemAtPath_error_(v78, v58, (uint64_t)v55, &v79);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = v79;
            if (v59)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v61 = (id)*MEMORY[0x1E0C952A8];
              if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
              {
                v64 = objc_msgSend_fileSize(v59, v62, v63);
                *(_DWORD *)v89 = 138543874;
                v90 = v55;
                v91 = 2048;
                v92 = v64;
                v93 = 2112;
                v94 = v57;
                _os_log_impl(&dword_1BE990000, v61, OS_LOG_TYPE_INFO, "%{public}@ bytes:%llu assetHandle:%@", v89, 0x20u);
              }

              v46 += objc_msgSend_fileSize(v59, v65, v66);
            }

            ++v51;
          }
          while (v49 != v51);
          v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v47, (uint64_t)&v80, v95, 16);
        }
        while (v49);
      }

      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v67 = *MEMORY[0x1E0C952A8];
      v44 = v74;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v89 = 134217984;
        v90 = v46;
        _os_log_impl(&dword_1BE990000, v67, OS_LOG_TYPE_INFO, "total bytes:%llu", v89, 0xCu);
      }
    }

  }
  _Block_object_dispose(buf, 8);

}

void sub_1BEB72BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB72C48(uint64_t a1, const char *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  int HaveAssetCacheManagedFile;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  const __CFString *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const __CFString *v38;
  void *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  void *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  void *RawEncryptedData_fileHandle_assetDownloadStagingInfo;
  const char *v83;
  void *v84;
  id v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  __CFString *v89;
  void *v90;
  void *v91;
  const char *v92;
  void *v93;
  id v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  double v98;
  double v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  double v105;
  const char *v106;
  __CFString *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  __CFString *v113;
  __CFString *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  const char *v118;
  int isEqualToString;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  const char *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v131;
  id obj;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __CFString *v136;
  void *v137;
  int v138;
  void *v139;
  void *v140;
  __CFString *v141;
  void *v142;
  uint64_t v143;
  const __CFString *v144;
  id v145;
  id v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint8_t buf[4];
  uint64_t v152;
  __int16 v153;
  __CFString *v154;
  __int16 v155;
  __CFString *v156;
  __int16 v157;
  __CFString *v158;
  __int16 v159;
  __CFString *v160;
  __int16 v161;
  __CFString *v162;
  _BYTE v163[128];
  uint64_t v164;

  v2 = a1;
  v164 = *MEMORY[0x1E0C80C00];
  objc_msgSend_entryEnumerator_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, 0);
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v135 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v147, v163, 16);
  if (v135)
  {
    v133 = *(_QWORD *)v148;
    v131 = (void *)*MEMORY[0x1E0C94B20];
    v134 = v2;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v148 != v133)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * v4);
        v6 = MEMORY[0x1C3B83E24]();
        v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 40);
        v10 = objc_msgSend_length(v7, v8, v9);
        objc_msgSend_deleteCharactersInRange_(v7, v11, 0, v10);
        HaveAssetCacheManagedFile = objc_msgSend_mayHaveAssetCacheManagedFile(v5, v12, v13);
        objc_msgSend_lastUsedTime(v5, v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          objc_msgSend_lastUsedTime(v5, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_description(v20, v21, v22);
          v141 = (__CFString *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v141 = CFSTR("none");
        }
        objc_msgSend_fileSize(v5, v18, v19);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          v26 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend_fileSize(v5, v24, v25);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringWithFormat_(v26, v28, (uint64_t)CFSTR("%@"), v27);
          v29 = (const __CFString *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v29 = CFSTR("none");
        }
        v30 = *(void **)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 40);
        objc_msgSend_itemID(v5, v24, v25);
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_fileSignature(v5, v31, v32);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v142 = (void *)v6;
        v143 = v4;
        v144 = v29;
        v138 = HaveAssetCacheManagedFile;
        v139 = v30;
        if (v35)
        {
          objc_msgSend_fileSignature(v5, v33, v34);
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_CKLowercaseHexStringWithoutSpaces(v137, v36, v37);
          v38 = (const __CFString *)objc_claimAutoreleasedReturnValue();
          v136 = (__CFString *)v38;
        }
        else
        {
          v38 = CFSTR("none");
        }
        objc_msgSend_volumeIndex(v5, v33, v34);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = *(void **)(*(_QWORD *)(v2 + 32) + 48);
        objc_msgSend_volumeIndex(v5, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_volumeUUIDWithVolumeIndex_(v40, v44, (uint64_t)v43);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = *(void **)(v2 + 32);
        objc_msgSend_volumeIndex(v5, v47, v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deviceIDForVolumeIndex_(v46, v50, (uint64_t)v49);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_status(v5, v52, v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = objc_msgSend_integerValue(v54, v55, v56);
        objc_msgSend_descriptionWithStatus_(CKDAssetHandle, v58, v57);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_appendFormat_(v139, v60, (uint64_t)CFSTR("%@, %@, %@, %@, %@, %@"), v140, v38, v39, v45, v51, v59);

        if (v35)
        {

        }
        objc_msgSend_volumeIndex(v5, v61, v62);
        v63 = objc_claimAutoreleasedReturnValue();
        if (v63)
        {
          v66 = (void *)v63;
          objc_msgSend_fileID(v5, v64, v65);
          v67 = (void *)objc_claimAutoreleasedReturnValue();

          if (v67)
          {
            v68 = objc_alloc(MEMORY[0x1E0C94E98]);
            v2 = v134;
            v69 = *(void **)(v134 + 32);
            objc_msgSend_volumeIndex(v5, v70, v71);
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_deviceIDForVolumeIndex_(v69, v73, (uint64_t)v72);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_fileID(v5, v75, v76);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_generationID(v5, v78, v79);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            RawEncryptedData_fileHandle_assetDownloadStagingInfo = (void *)objc_msgSend_initWithUUID_path_deviceID_fileID_generationID_shouldReadRawEncryptedData_fileHandle_assetDownloadStagingInfo_(v68, v81, 0, 0, v74, v77, v80, 0, 0, 0);

            v146 = 0;
            objc_msgSend_openWithOpenInfo_error_(MEMORY[0x1E0C94BB8], v83, (uint64_t)RawEncryptedData_fileHandle_assetDownloadStagingInfo, &v146);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v85 = v146;
            v88 = v85;
            v89 = (__CFString *)v144;
            if (v84)
            {
              v90 = (void *)MEMORY[0x1E0C94BB8];
              objc_msgSend_fileHandle(v84, v86, v87);
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              v145 = 0;
              objc_msgSend_getFileMetadataWithFileHandle_openInfo_error_(v90, v92, (uint64_t)v91, RawEncryptedData_fileHandle_assetDownloadStagingInfo, &v145);
              v93 = (void *)objc_claimAutoreleasedReturnValue();
              v94 = v145;

              if (v93)
              {
                v97 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend_timeIntervalSince1970(*(void **)(v134 + 40), v95, v96);
                v99 = v98;
                objc_msgSend_modTimeInSeconds(v93, v100, v101);
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_doubleValue(v102, v103, v104);
                objc_msgSend_stringWithFormat_(v97, v106, (uint64_t)CFSTR("%0.2f"), (v99 - v105) / 3600.0);
                v107 = (__CFString *)objc_claimAutoreleasedReturnValue();

                v108 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend_fileSize(v93, v109, v110);
                v111 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(v108, v112, (uint64_t)CFSTR("%@"), v111);
                v113 = (__CFString *)objc_claimAutoreleasedReturnValue();

                v89 = (__CFString *)v144;
              }
              else
              {
                v113 = CFSTR("none");
                v107 = CFSTR("n/a");
              }
              v115 = v143;

              v114 = CFSTR("exists");
LABEL_32:
              v116 = v142;
            }
            else
            {
              objc_msgSend_domain(v85, v86, v87);
              v117 = (void *)objc_claimAutoreleasedReturnValue();
              isEqualToString = objc_msgSend_isEqualToString_(v131, v118, (uint64_t)v117);

              if (!isEqualToString)
              {
                objc_msgSend_description(v88, v120, v121);
                v114 = (__CFString *)objc_claimAutoreleasedReturnValue();
                v113 = CFSTR("none");
                v107 = CFSTR("n/a");
                v115 = v143;
                goto LABEL_32;
              }
              v116 = v142;
              v115 = v143;
              if (objc_msgSend_code(v88, v120, v121) == 3002)
              {
                v113 = CFSTR("none");
                v107 = CFSTR("n/a");
                v114 = CFSTR("not found");
              }
              else if (objc_msgSend_code(v88, v122, v123) == 3003)
              {
                v113 = CFSTR("none");
                v107 = CFSTR("n/a");
                v114 = CFSTR("modified");
              }
              else
              {
                objc_msgSend_description(v88, v127, v128);
                v114 = (__CFString *)objc_claimAutoreleasedReturnValue();
                v113 = CFSTR("none");
                v107 = CFSTR("n/a");
              }
            }

            goto LABEL_34;
          }
        }
        if (v138)
          v114 = CFSTR("expected but missing");
        else
          v114 = CFSTR("none expected");
        v113 = CFSTR("none");
        v107 = CFSTR("n/a");
        v2 = v134;
        v116 = v142;
        v115 = v143;
        v89 = (__CFString *)v144;
LABEL_34:
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v124 = *MEMORY[0x1E0C952A8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
        {
          v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 40);
          *(_DWORD *)buf = 138544642;
          v152 = v125;
          v153 = 2114;
          v154 = v114;
          v155 = 2114;
          v156 = v107;
          v157 = 2114;
          v158 = v141;
          v159 = 2114;
          v160 = v89;
          v161 = 2114;
          v162 = v113;
          _os_log_impl(&dword_1BE990000, v124, OS_LOG_TYPE_INFO, "%{public}@, %{public}@, %{public}@, %{public}@, %{public}@, %{public}@", buf, 0x3Eu);
        }

        objc_autoreleasePoolPop(v116);
        v4 = v115 + 1;
      }
      while (v135 != v4);
      v129 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v126, (uint64_t)&v147, v163, 16);
      v135 = v129;
    }
    while (v129);
  }

  return 0;
}

uint64_t sub_1BEB73540(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void (**v8)(void *, _QWORD);
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD aBlock[4];
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[4];
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2020000000;
  v45[3] = 0;
  v4 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEB7382C;
  aBlock[3] = &unk_1E78353A8;
  v38 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 32);
  v43 = v45;
  v44 = v4;
  v6 = *(void **)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 48);
  v39 = v5;
  v40 = v7;
  v41 = v6;
  v42 = *(id *)(a1 + 64);
  v8 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v9 = *(id *)(a1 + 56);
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v33, v47, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v34;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v34 != v12)
          objc_enumerationMutation(v9);
        v8[2](v8, *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v13++));
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v14, (uint64_t)&v33, v47, 16);
    }
    while (v11);
  }

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v15 = *(id *)(a1 + 64);
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v29, v46, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v30;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v30 != v18)
          objc_enumerationMutation(v15);
        v8[2](v8, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v19++));
      }
      while (v17 != v19);
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v20, (uint64_t)&v29, v46, 16);
    }
    while (v17);
  }

  v21 = *(void **)(a1 + 40);
  objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v22, 0, (_QWORD)v29);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v21, v24, (uint64_t)v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    do
      ((void (**)(void *, void *))v8)[2](v8, v25);
    while (objc_msgSend_count(*(void **)(a1 + 40), v26, v27));
  }

  _Block_object_dispose(v45, 8);
  return 0;
}

void sub_1BEB737EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB7382C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const char *);
  void *v19;
  id v20;
  id v21;

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  v6 = a2;
  objc_msgSend_objectAtIndex_(v4, v7, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v3, v9, (uint64_t)v6, v8);

  if (++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) == *(_QWORD *)(a1 + 80))
  {
    v10 = *(void **)(a1 + 56);
    v11 = *(void **)(*(_QWORD *)(a1 + 48) + 40);
    v12 = *(_QWORD *)(a1 + 32);
    v16 = MEMORY[0x1E0C809B0];
    v17 = 3221225472;
    v18 = sub_1BEB7396C;
    v19 = &unk_1E7835380;
    v20 = v10;
    v21 = *(id *)(a1 + 64);
    objc_msgSend_deleteEntriesMatching_label_error_predicate_(v11, v13, v12, off_1E7835360, 0, &v16);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v14, v15, v16, v17, v18, v19);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;

  }
}

uint64_t sub_1BEB7396C(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("status = %ld AND (itemID = $K1 OR itemID = $K2 OR itemID = $K3 OR itemID = $K4 OR itemID = $K5 OR itemID = $K6 OR itemID = $K7 OR itemID = $K8)"), 7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1BEB74604(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  id v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  void *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  id v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  void *v78;
  const char *v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  const char *v85;
  id v86;
  void *v87;
  NSObject *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  const char *v93;
  int isEqualRevisionOfAssetHandle_differencesDescription;
  const char *v95;
  uint64_t v96;
  id v97;
  const char *v98;
  id v99;
  int v100;
  void *v101;
  NSObject *v102;
  const char *v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  void *v112;
  const char *v113;
  const char *v114;
  uint64_t v115;
  NSObject *v116;
  const char *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  void *v126;
  const char *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  const char *v131;
  void *v132;
  void *v133;
  const char *v134;
  const char *v135;
  id v136;
  const char *v137;
  const char *v138;
  const char *v139;
  uint64_t v140;
  void *v142;
  uint64_t v143;
  const char *v144;
  NSObject *v145;
  void *v146;
  uint64_t v147;
  uint64_t v149;
  id obj;
  uint64_t v151;
  id v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint8_t v157[128];
  uint8_t buf[4];
  uint64_t v159;
  __int16 v160;
  id v161;
  uint64_t v162;

  v3 = a1;
  v162 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v142 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v143 = *(_QWORD *)(a1 + 32);
      v144 = *(const char **)(a1 + 64);
      v145 = v142;
      NSStringFromSelector(v144);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v159 = v143;
      v160 = 2114;
      v161 = v146;
      _os_log_error_impl(&dword_1BE990000, v145, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForRegisteredMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 927, "0 && \"already dropped\"");
  }
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  obj = *(id *)(v3 + 40);
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v153, v157, 16);
  if (v5)
  {
    v6 = v5;
    v7 = &off_1E782A000;
    v151 = *(_QWORD *)v154;
    v147 = *MEMORY[0x1E0C947D8];
    do
    {
      v8 = 0;
      v149 = v6;
      do
      {
        if (*(_QWORD *)v154 != v151)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v153 + 1) + 8 * v8);
        v10 = (void *)MEMORY[0x1C3B83E24]();
        if (!objc_msgSend_itemID(v9, v11, v12))
          __assert_rtn("-[CKDAssetCache updateAssetHandlesForRegisteredMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 931, "MMCSItem.itemID != 0 && \"MMCSItem.itemID != 0\"");
        v15 = (void *)MEMORY[0x1E0CB37E8];
        v16 = objc_msgSend_itemID(v9, v13, v14);
        objc_msgSend_numberWithUnsignedLongLong_(v15, v17, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_alloc((Class)v7[317]);
        v21 = (void *)objc_msgSend_initWithItemID_UUID_path_(v19, v20, (uint64_t)v18, 0, 0);
        objc_msgSend_error(v9, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v24)
        {
          v27 = *(void **)(v3 + 32);
          objc_msgSend_deviceID(v9, v25, v26);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_volumeIndexForDeviceID_(v27, v29, (uint64_t)v28);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setVolumeIndex_(v21, v31, (uint64_t)v30);

          objc_msgSend_fileID(v9, v32, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setFileID_(v21, v35, (uint64_t)v34);

          objc_msgSend_generationID(v9, v36, v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setGenerationID_(v21, v39, (uint64_t)v38);

          objc_msgSend_signature(v9, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setFileSignature_(v21, v43, (uint64_t)v42);

          v44 = (void *)MEMORY[0x1E0CB37E8];
          v47 = objc_msgSend_chunkCount(v9, v45, v46);
          objc_msgSend_numberWithUnsignedInt_(v44, v48, v47);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setChunkCount_(v21, v50, (uint64_t)v49);

          objc_msgSend_modTimeInSeconds(v9, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = v53;
          if (v53)
          {
            v57 = (void *)MEMORY[0x1E0C99D68];
            objc_msgSend_doubleValue(v53, v54, v55);
            objc_msgSend_dateWithTimeIntervalSince1970_(v57, v58, v59);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setModTime_(v21, v61, (uint64_t)v60);

          }
          v62 = (void *)MEMORY[0x1E0CB37E8];
          v63 = objc_msgSend_fileSize(v9, v54, v55);
          objc_msgSend_numberWithUnsignedLongLong_(v62, v64, v63);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setFileSize_(v21, v66, (uint64_t)v65);

          objc_msgSend_setStatus_(v21, v67, (uint64_t)&unk_1E78B0280);
          objc_msgSend_boundaryKey(v9, v68, v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setBoundaryKeyHashUsingBoundaryKey_(v21, v71, (uint64_t)v70);

          v7 = &off_1E782A000;
        }
        if (objc_msgSend_assetHandleExistsInDatabase_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v25, (uint64_t)v18))
        {
          v72 = objc_alloc_init((Class)v7[317]);
          objc_msgSend_setItemID_(v72, v73, (uint64_t)v18);
          objc_msgSend_error(v9, v74, v75);
          v76 = (void *)objc_claimAutoreleasedReturnValue();

          if (v76)
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v78 = (void *)*MEMORY[0x1E0C952A8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
            {
              v80 = v78;
              objc_msgSend_error(v9, v81, v82);
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v159 = (uint64_t)v18;
              v160 = 2112;
              v161 = v83;
              _os_log_impl(&dword_1BE990000, v80, OS_LOG_TYPE_INFO, "Warn: itemID:%{public}@ error during register %@", buf, 0x16u);

              v7 = &off_1E782A000;
            }
            objc_msgSend_setFinished_(v9, v79, 1);
            sub_1BEB74EE4(*(void **)(v3 + 48), v18);
            objc_msgSend_setStatus_(v72, v84, (uint64_t)&unk_1E78B0250);
            v86 = (id)objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v85, (uint64_t)v72);
          }
          else
          {
            v92 = (id)objc_msgSend_fetchAllProperties_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v77, (uint64_t)v72);
            v152 = 0;
            isEqualRevisionOfAssetHandle_differencesDescription = objc_msgSend_isEqualRevisionOfAssetHandle_differencesDescription_(v72, v93, (uint64_t)v21, &v152);
            v97 = v152;
            if (isEqualRevisionOfAssetHandle_differencesDescription)
            {
              objc_msgSend_setItemID_(v21, v95, (uint64_t)v18);
              v99 = (id)objc_msgSend_updateUsingObject_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v98, (uint64_t)v21);
            }
            else
            {
              v100 = objc_msgSend_isReaderReadFrom(v9, v95, v96);
              v101 = (void *)*MEMORY[0x1E0C952F8];
              if (v100)
              {
                if (*MEMORY[0x1E0C95300] != -1)
                  dispatch_once(MEMORY[0x1E0C95300], v101);
                v102 = *MEMORY[0x1E0C952A8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138543618;
                  v159 = (uint64_t)v18;
                  v160 = 2114;
                  v161 = v97;
                  _os_log_impl(&dword_1BE990000, v102, OS_LOG_TYPE_INFO, "Warn: itemID:%{public}@ modified during register %{public}@", buf, 0x16u);
                }
                objc_msgSend_setFinished_(v9, v103, 1);
                v104 = (void *)MEMORY[0x1E0C94FF8];
                objc_msgSend_fileURL(v9, v105, v106);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_path(v107, v108, v109);
                v110 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_errorWithDomain_code_path_format_(v104, v111, v147, 17, v110, CFSTR("File appears to have changed during registration"));
                v112 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setError_(v9, v113, (uint64_t)v112);

              }
              else
              {
                if (*MEMORY[0x1E0C95300] != -1)
                  dispatch_once(MEMORY[0x1E0C95300], v101);
                v116 = *MEMORY[0x1E0C952A8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138543618;
                  v159 = (uint64_t)v18;
                  v160 = 2114;
                  v161 = v97;
                  _os_log_impl(&dword_1BE990000, v116, OS_LOG_TYPE_INFO, "Warn: stale chunk registry state for itemID:%{public}@  %{public}@", buf, 0x16u);
                }
                objc_msgSend_setFinished_(v9, v117, 1);
                v118 = (void *)MEMORY[0x1E0C94FF8];
                objc_msgSend_fileURL(v9, v119, v120);
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_path(v121, v122, v123);
                v124 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_errorWithDomain_code_path_format_(v118, v125, v147, 17, v124, CFSTR("Stale chunk state found during registration"));
                v126 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setError_(v9, v127, (uint64_t)v126);

              }
              v128 = *(void **)(a1 + 48);
              v129 = (void *)MEMORY[0x1E0CB37E8];
              v130 = objc_msgSend_itemID(v9, v114, v115);
              objc_msgSend_numberWithUnsignedLongLong_(v129, v131, v130);
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              v133 = v128;
              v3 = a1;
              sub_1BEB74EE4(v133, v132);

              objc_msgSend_setStatus_(v72, v134, (uint64_t)&unk_1E78B0250);
              v136 = (id)objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v135, (uint64_t)v72);
            }

            v7 = &off_1E782A000;
          }

          v6 = v149;
        }
        else
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v87 = (void *)*MEMORY[0x1E0C952A8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
          {
            v88 = v87;
            v91 = objc_msgSend_unsignedLongLongValue(v18, v89, v90);
            *(_DWORD *)buf = 134217984;
            v159 = v91;
            _os_log_impl(&dword_1BE990000, v88, OS_LOG_TYPE_INFO, "Warn: itemID:%llu missing asset handle", buf, 0xCu);

            v3 = a1;
          }
        }

        objc_autoreleasePoolPop(v10);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v137, (uint64_t)&v153, v157, 16);
    }
    while (v6);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(v3 + 32), v138, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
  return objc_msgSend_expireAssetHandlesIfNecessary(*(void **)(v3 + 32), v139, v140);
}

void sub_1BEB74EE4(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend_containsObject_(v3, v5, (uint64_t)v4))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = *MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_error_impl(&dword_1BE990000, v7, OS_LOG_TYPE_ERROR, "set already contained object %@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    objc_msgSend_addObject_(v3, v6, (uint64_t)v4);
  }

}

void sub_1BEB75098(uint64_t a1, const char *a2, uint64_t a3)
{
  CKDAssetHandle *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  const char *v27;
  const char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  NSObject *v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v30 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v31 = *(_QWORD *)(a1 + 32);
      v32 = *(const char **)(a1 + 48);
      v33 = v30;
      NSStringFromSelector(v32);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v41 = v31;
      v42 = 2114;
      v43 = v34;
      _os_log_error_impl(&dword_1BE990000, v33, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForChunkedMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 994, "0 && \"already dropped\"");
  }
  v4 = objc_alloc_init(CKDAssetHandle);
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v5 = *(id *)(a1 + 40);
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v35, v39, 16);
  if (v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v36 != v11)
          objc_enumerationMutation(v5);
        v13 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        if (objc_msgSend_itemID(v13, v8, v9, (_QWORD)v35))
        {
          v16 = (void *)MEMORY[0x1E0CB37E8];
          v17 = objc_msgSend_itemID(v13, v14, v15);
          objc_msgSend_numberWithUnsignedLongLong_(v16, v18, v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setItemID_(v4, v20, (uint64_t)v19);
        }
        else
        {
          v19 = 0;
          objc_msgSend_setItemID_(v4, v14, 0);
        }
        v23 = (void *)MEMORY[0x1E0CB37E8];
        v24 = objc_msgSend_chunkCount(v13, v21, v22);
        objc_msgSend_numberWithUnsignedInt_(v23, v25, v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setChunkCount_(v4, v27, (uint64_t)v26);

        v29 = (id)objc_msgSend_saveChunkCount_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v28, (uint64_t)v4);
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v35, v39, 16);
    }
    while (v10);
  }

}

void sub_1BEB754A4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  CKDAssetHandle *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  const char *v78;
  void *v79;
  const char *v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  const char *v94;
  void *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  const char *v105;
  id v106;
  const char *v107;
  uint64_t v108;
  NSObject *v109;
  void *v110;
  const char *v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  NSObject *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  const char *v127;
  void *v128;
  const char *v129;
  void *v130;
  const char *v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  const char *v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  const char *v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  const char *v147;
  NSObject *v148;
  id v149;
  NSObject *v150;
  const char *v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  void *v155;
  uint64_t v156;
  const char *v157;
  NSObject *v158;
  void *v159;
  __int128 v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  id v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  id v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _QWORD v178[2];
  _QWORD v179[2];
  uint8_t v180[128];
  uint8_t buf[4];
  uint64_t v182;
  __int16 v183;
  void *v184;
  uint64_t v185;

  v3 = a1;
  v185 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v155 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v156 = *(_QWORD *)(a1 + 32);
      v157 = *(const char **)(a1 + 64);
      v158 = v155;
      NSStringFromSelector(v157);
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v182 = v156;
      v183 = 2114;
      v184 = v159;
      _os_log_error_impl(&dword_1BE990000, v158, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForGetMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1024, "0 && \"already dropped\"");
  }
  v4 = objc_alloc_init(CKDAssetHandle);
  v174 = 0u;
  v175 = 0u;
  v176 = 0u;
  v177 = 0u;
  v5 = *(id *)(v3 + 40);
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v174, v180, 16);
  if (v7)
  {
    v11 = v7;
    v12 = 0x1E0CB3000uLL;
    v171 = *(_QWORD *)v175;
    v168 = *MEMORY[0x1E0C94B20];
    *(_QWORD *)&v10 = 138412290;
    v160 = v10;
    v166 = v5;
    do
    {
      v13 = 0;
      v170 = v11;
      do
      {
        if (*(_QWORD *)v175 != v171)
          objc_enumerationMutation(v5);
        v14 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * v13);
        if (!objc_msgSend_itemID(v14, v8, v9, v160))
          __assert_rtn("-[CKDAssetCache updateAssetHandlesForGetMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1029, "MMCSItem.itemID != 0 && \"0 itemID\"");
        v17 = *(void **)(v12 + 2024);
        v18 = objc_msgSend_itemID(v14, v15, v16);
        objc_msgSend_numberWithUnsignedLongLong_(v17, v19, v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setItemID_(v4, v21, (uint64_t)v20);
        objc_msgSend_fetchAllProperties_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v22, (uint64_t)v4);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v25)
        {
          objc_msgSend_error(v14, v23, v24);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          if (v31)
          {
            objc_msgSend_error(v14, v32, v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_domain(v34, v35, v36);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend_isEqualToString_(v37, v38, v168) & 1) != 0)
            {
              objc_msgSend_error(v14, v39, v40);
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend_code(v41, v42, v43) == 3003)
              {

                v5 = v166;
                goto LABEL_26;
              }
              objc_msgSend_error(v14, v44, v45);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              v87 = objc_msgSend_code(v84, v85, v86);

              v5 = v166;
              if (v87 == 3006)
              {
LABEL_26:
                objc_msgSend_setStatus_(v4, v46, (uint64_t)&unk_1E78B0250);
                v88 = *(void **)(v3 + 48);
                objc_msgSend_itemID(v4, v89, v90);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                sub_1BEB74EE4(v88, v91);

LABEL_27:
                v11 = v170;
LABEL_59:
                v149 = (id)objc_msgSend_updateUsingObject_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v83, (uint64_t)v4);
                goto LABEL_60;
              }
            }
            else
            {

            }
            objc_msgSend_setStatus_(v4, v46, (uint64_t)&unk_1E78B0220);
            goto LABEL_27;
          }
          objc_msgSend_deviceID(v14, v32, v33);
          v169 = objc_claimAutoreleasedReturnValue();
          if (!v169)
            goto LABEL_19;
          v49 = *(void **)(v3 + 32);
          objc_msgSend_deviceID(v14, v47, v48);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_volumeIndexForDeviceID_(v49, v51, (uint64_t)v50);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setVolumeIndex_(v4, v53, (uint64_t)v52);

          objc_msgSend_volumeIndex(v4, v54, v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v56)
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v110 = (void *)*MEMORY[0x1E0C952A8];
            v11 = v170;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
            {
              v150 = v110;
              objc_msgSend_deviceID(v14, v151, v152);
              v153 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v182 = (uint64_t)v153;
              v183 = 2112;
              v184 = v14;
              _os_log_error_impl(&dword_1BE990000, v150, OS_LOG_TYPE_ERROR, "Unable to find volumeIndex for deviceID %{public}@: Deleting asset handle for %@", buf, 0x16u);

              v11 = v170;
            }
            objc_msgSend_setStatus_(v4, v111, (uint64_t)&unk_1E78B0250);
            v112 = *(void **)(v3 + 48);
            objc_msgSend_itemID(v4, v113, v114);
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1BEB74EE4(v112, v115);

            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v116 = (void *)v169;
            v117 = *MEMORY[0x1E0C952A8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v160;
              v182 = (uint64_t)v4;
              _os_log_error_impl(&dword_1BE990000, v117, OS_LOG_TYPE_ERROR, "Unregistering %@", buf, 0xCu);
            }
          }
          else
          {
LABEL_19:
            objc_msgSend_fileID(v14, v47, v48);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setFileID_(v4, v58, (uint64_t)v57);

            objc_msgSend_generationID(v14, v59, v60);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setGenerationID_(v4, v62, (uint64_t)v61);

            objc_msgSend_modTimeInSeconds(v14, v63, v64);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = v65;
            if (v65)
            {
              v69 = (void *)MEMORY[0x1E0C99D68];
              objc_msgSend_doubleValue(v65, v66, v67);
              objc_msgSend_dateWithTimeIntervalSince1970_(v69, v70, v71);
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setModTime_(v4, v73, (uint64_t)v72);

            }
            if ((objc_msgSend_hasSize(v14, v66, v67) & 1) != 0)
            {
              v76 = (void *)MEMORY[0x1E0CB37E8];
              v77 = objc_msgSend_fileSize(v14, v74, v75);
              objc_msgSend_numberWithUnsignedLongLong_(v76, v78, v77);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setFileSize_(v4, v80, (uint64_t)v79);

              v3 = a1;
            }
            else
            {
              objc_msgSend_setFileSize_(v4, v74, 0);
            }
            v92 = (void *)MEMORY[0x1E0CB37E8];
            v93 = objc_msgSend_chunkCount(v14, v81, v82);
            objc_msgSend_numberWithUnsignedInt_(v92, v94, v93);
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setChunkCount_(v4, v96, (uint64_t)v95);

            objc_msgSend_setStatus_(v4, v97, (uint64_t)&unk_1E78B0298);
            if (*(_BYTE *)(v3 + 72))
            {
              v178[0] = CFSTR("SIG");
              objc_msgSend_fileSignature(v4, v98, v99);
              v100 = (void *)objc_claimAutoreleasedReturnValue();
              v178[1] = CFSTR("CLONED");
              v179[0] = v100;
              v179[1] = &unk_1E78B02B0;
              objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v101, (uint64_t)v179, v178, 2);
              v102 = objc_claimAutoreleasedReturnValue();

              v103 = (void *)v102;
              v104 = *(void **)(*(_QWORD *)(v3 + 32) + 40);
              v173 = 0;
              objc_msgSend_entryWithValues_label_error_setupBlock_(v104, v105, v102, off_1E7835418, &v173, &unk_1E7835430);
              v106 = (id)objc_claimAutoreleasedReturnValue();
              v167 = v173;
              if (v167)
              {
                if (*MEMORY[0x1E0C95300] != -1)
                  dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                v109 = *MEMORY[0x1E0C952A8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  v182 = (uint64_t)v167;
                  _os_log_error_impl(&dword_1BE990000, v109, OS_LOG_TYPE_ERROR, "Cloned file cache search error: %{public}@", buf, 0xCu);
                }
              }
              else
              {
                v164 = v103;
                if (v106)
                {
                  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v107, v108);
                  v118 = objc_claimAutoreleasedReturnValue();
                  objc_msgSend_path(v106, v119, v120);
                  v121 = (void *)objc_claimAutoreleasedReturnValue();
                  v162 = (void *)v118;
                  LOBYTE(v118) = objc_msgSend_fileExistsAtPath_((void *)v118, v122, (uint64_t)v121);

                  if ((v118 & 1) != 0)
                  {

                    v5 = v166;
                    v103 = v164;
                    goto LABEL_56;
                  }
                  v125 = (void *)MEMORY[0x1E0C99E40];
                  objc_msgSend_itemID(v106, v123, v124);
                  v126 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_orderedSetWithObject_(v125, v127, (uint64_t)v126);
                  v128 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(v3 + 32), v129, (uint64_t)v128, 0);
                  v5 = v166;
                }
                objc_msgSend_clonedFileCache(*(void **)(v3 + 32), v107, v108);
                v130 = (void *)objc_claimAutoreleasedReturnValue();
                v172 = 0;
                objc_msgSend_cloneMMCSItem_error_(v130, v131, (uint64_t)v14, &v172);
                v132 = (void *)objc_claimAutoreleasedReturnValue();
                v106 = v172;

                v163 = v132;
                if (v132)
                {
                  objc_msgSend_path(v132, v133, v134);
                  v135 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_getFileMetadataAtPath_error_(MEMORY[0x1E0C94BB8], v136, (uint64_t)v135, 0);
                  v138 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v138)
                  {
                    objc_msgSend_setPath_(v4, v137, (uint64_t)v135);
                    objc_msgSend_fileID(v138, v139, v140);
                    v161 = v135;
                    v141 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setFileID_(v4, v142, (uint64_t)v141);

                    objc_msgSend_generationID(v138, v143, v144);
                    v145 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setGenerationID_(v4, v146, (uint64_t)v145);

                    v135 = v161;
                    objc_msgSend_setIsCloned_(v4, v147, (uint64_t)&unk_1E78B02B0);
                  }

                  v103 = v164;
                }
                else
                {
                  if (*MEMORY[0x1E0C95300] != -1)
                    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                  v103 = v164;
                  v148 = *MEMORY[0x1E0C952A8];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    v182 = (uint64_t)v106;
                    _os_log_error_impl(&dword_1BE990000, v148, OS_LOG_TYPE_ERROR, "Failed to clone item: %{public}@", buf, 0xCu);
                  }
                }

              }
LABEL_56:

            }
            v11 = v170;
            v116 = (void *)v169;
          }

          goto LABEL_59;
        }
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v26 = (void *)*MEMORY[0x1E0C952A8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
        {
          v27 = v26;
          v30 = objc_msgSend_unsignedLongLongValue(v20, v28, v29);
          *(_DWORD *)buf = 134217984;
          v182 = v30;
          _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Warn: itemID:%llu missing asset handle", buf, 0xCu);

        }
LABEL_60:

        ++v13;
        v12 = 0x1E0CB3000;
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v174, v180, 16);
    }
    while (v11);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(v3 + 32), v154, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

void sub_1BEB75F94(uint64_t a1, void *a2)
{
  void *v2;
  const char *v3;
  void *v4;
  const char *v5;
  const char *v6;
  id v7;

  v2 = (void *)MEMORY[0x1E0CB3880];
  v7 = a2;
  objc_msgSend_predicateWithFormat_(v2, v3, (uint64_t)CFSTR("fileSignature = $SIG AND isCloned = $CLONED"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v7, v5, (uint64_t)v4);

  objc_msgSend_setFetchedProperties_(v7, v6, (uint64_t)&unk_1E78AF378);
}

void sub_1BEB7610C(uint64_t a1, const char *a2, uint64_t a3)
{
  CKDAssetHandle *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void **v63;
  void *v64;
  const char *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  const char *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  id v81;
  id v82;
  const char *v83;
  void *v84;
  uint64_t v85;
  const char *v86;
  NSObject *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id obj;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint8_t v98[128];
  uint8_t buf[4];
  uint64_t v100;
  __int16 v101;
  void *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v84 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v85 = *(_QWORD *)(a1 + 32);
      v86 = *(const char **)(a1 + 64);
      v87 = v84;
      NSStringFromSelector(v86);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v100 = v85;
      v101 = 2114;
      v102 = v88;
      _os_log_error_impl(&dword_1BE990000, v87, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForPutMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1134, "0 && \"already dropped\"");
  }
  v4 = objc_alloc_init(CKDAssetHandle);
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  obj = *(id *)(a1 + 40);
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v94, v98, 16);
  if (v6)
  {
    v9 = v6;
    v10 = *(_QWORD *)v95;
    v90 = *MEMORY[0x1E0C94B20];
    v91 = *(_QWORD *)v95;
    do
    {
      v11 = 0;
      v92 = v9;
      do
      {
        if (*(_QWORD *)v95 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * v11);
        if (!objc_msgSend_itemID(v12, v7, v8))
          __assert_rtn("-[CKDAssetCache updateAssetHandlesForPutMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1139, "MMCSItem.itemID != 0 && \"0 itemID\"");
        v15 = (void *)MEMORY[0x1E0CB37E8];
        v16 = objc_msgSend_itemID(v12, v13, v14);
        objc_msgSend_numberWithUnsignedLongLong_(v15, v17, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setItemID_(v4, v19, (uint64_t)v18);
        objc_msgSend_fetchAllProperties_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v20, (uint64_t)v4);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
        {
          if (objc_msgSend_CKIsNoMatchingRowError_(MEMORY[0x1E0CB35C8], v21, (uint64_t)v23))
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v24 = (void *)*MEMORY[0x1E0C952A8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
            {
              v25 = v24;
              v28 = objc_msgSend_unsignedLongLongValue(v18, v26, v27);
              *(_DWORD *)buf = 134217984;
              v100 = v28;
              _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "Warn: itemID:%llu missing asset handle", buf, 0xCu);

            }
          }
          goto LABEL_38;
        }
        objc_msgSend_error(v12, v21, v22);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v29)
        {
          if (!objc_msgSend_chunkCount(v12, v30, v31))
          {
            objc_msgSend_package(v12, v45, v46);
            v47 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v47)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v48 = (void *)*MEMORY[0x1E0C952A8];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
              {
                v49 = v48;
                v52 = objc_msgSend_unsignedLongLongValue(v18, v50, v51);
                *(_DWORD *)buf = 134217984;
                v100 = v52;
                _os_log_error_impl(&dword_1BE990000, v49, OS_LOG_TYPE_ERROR, "itemID:%llu, missing chunk count", buf, 0xCu);
                goto LABEL_27;
              }
            }
LABEL_28:
            objc_msgSend_setStatus_(v4, v45, (uint64_t)&unk_1E78B0298);
            goto LABEL_31;
          }
LABEL_26:
          v54 = (void *)MEMORY[0x1E0CB37E8];
          v55 = objc_msgSend_chunkCount(v12, v45, v46);
          objc_msgSend_numberWithUnsignedInt_(v54, v56, v55);
          v49 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_setChunkCount_(v4, v57, (uint64_t)v49);
LABEL_27:

          goto LABEL_28;
        }
        objc_msgSend_error(v12, v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_domain(v32, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_isEqualToString_(v35, v36, v90) & 1) == 0)
        {

LABEL_25:
          v10 = v91;
          v9 = v92;
          if (!objc_msgSend_chunkCount(v12, v44, v53))
            goto LABEL_28;
          goto LABEL_26;
        }
        objc_msgSend_error(v12, v37, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_code(v39, v40, v41) == 3003)
        {

        }
        else
        {
          objc_msgSend_error(v12, v42, v43);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          v89 = objc_msgSend_code(v60, v61, v62);

          if (v89 != 3006)
            goto LABEL_25;
        }
        objc_msgSend_setStatus_(v4, v44, (uint64_t)&unk_1E78B0250);
        sub_1BEB74EE4(*(void **)(a1 + 48), v18);
        v10 = v91;
        v9 = v92;
LABEL_31:
        v63 = *(void ***)(a1 + 32);
        if (*(_BYTE *)(a1 + 72))
        {
          objc_msgSend_clonedFileCache(v63, v58, v59);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_cloneMMCSItem_error_(v64, v65, (uint64_t)v12, 0);
          v66 = (void *)objc_claimAutoreleasedReturnValue();

          if (v66)
          {
            objc_msgSend_path(v66, v67, v68);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_getFileMetadataAtPath_error_(MEMORY[0x1E0C94BB8], v70, (uint64_t)v69, 0);
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            if (v72)
            {
              objc_msgSend_setPath_(v4, v71, (uint64_t)v69);
              objc_msgSend_fileID(v72, v73, v74);
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setFileID_(v4, v76, (uint64_t)v75);

              objc_msgSend_generationID(v72, v77, v78);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setGenerationID_(v4, v80, (uint64_t)v79);

            }
            v10 = v91;
            v9 = v92;
          }
          v81 = (id)objc_msgSend_updateUsingObject_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v67, (uint64_t)v4);

        }
        else
        {
          v82 = (id)objc_msgSend_saveStatusAndChunkCount_(v63[5], v58, (uint64_t)v4);
        }
LABEL_38:

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v94, v98, 16);
    }
    while (v9);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 32), v83, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1BEB76A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB76A28(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(const char **)(a1 + 72);
      v16 = v13;
      NSStringFromSelector(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v24 = v14;
      v25 = 2114;
      v26 = v17;
      _os_log_error_impl(&dword_1BE990000, v16, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache trackCachedButNotRegisteredMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 1215, "0 && \"already dropped\"");
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(v4 + 40);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1BEB76BFC;
  v18[3] = &unk_1E7835480;
  v18[4] = v4;
  v19 = v5;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 72);
  v20 = v7;
  v22 = v8;
  v21 = *(id *)(a1 + 56);
  objc_msgSend_performTransaction_(v6, v9, (uint64_t)v18);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

id sub_1BEB76BFC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  int v36;
  const char *v37;
  id v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  void *v50;
  id v51;
  const char *v52;
  uint64_t v53;
  const std::__fs::filesystem::path *v54;
  id v55;
  const char *v56;
  uint64_t v57;
  const std::__fs::filesystem::path *v58;
  std::error_code *v59;
  int v60;
  uint64_t v61;
  id v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  void *v72;
  void *v73;
  void *v74;
  const char *v75;
  void *v76;
  const char *v77;
  const char *v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v100;
  const char *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  id obj;
  void *v108;
  uint64_t v109;
  void *v110;
  __darwin_time_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint8_t buf[16];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  stat v120;
  _BYTE v121[128];
  uint64_t v122;

  v3 = a1;
  v122 = *MEMORY[0x1E0C80C00];
  objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), a2, a3);
  v106 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_count(*(void **)(v3 + 40), v4, v5);
  if (v6 != objc_msgSend_count(*(void **)(v3 + 48), v7, v8))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v100, v101, *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 32), CFSTR("CKDAssetCache.m"), 1222, CFSTR("handles and items count don't match"));

  }
  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  obj = *(id *)(v3 + 48);
  v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v116, v121, 16);
  if (v113)
  {
    v14 = 0;
    v114 = 0;
    v112 = *(_QWORD *)v117;
    v103 = *MEMORY[0x1E0C94B20];
    v104 = v3;
LABEL_5:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v117 != v112)
        objc_enumerationMutation(obj);
      v16 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * v15);
      objc_msgSend_fileURL(v16, v12, v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_path(v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_itemID(v16, v21, v22))
      {
        v25 = (void *)MEMORY[0x1E0CB37E8];
        v26 = objc_msgSend_itemID(v16, v23, v24);
        objc_msgSend_numberWithUnsignedLongLong_(v25, v27, v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v28 = 0;
      }
      objc_msgSend_signature(v16, v23, v24);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v16, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (v32)
      {
        objc_msgSend_error(v16, v33, v34);
        v35 = v114;
        v36 = 4;
        v114 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v109 = v14;
        v110 = v28;
        objc_msgSend_objectAtIndex_(*(void **)(v3 + 40), v33, v14);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = (id)objc_msgSend_insertObject_(*(void **)(*(_QWORD *)(v3 + 32) + 40), v37, (uint64_t)v35);
        objc_msgSend_UUID(v35, v39, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_UUIDString(v41, v42, v43);
        v44 = objc_claimAutoreleasedReturnValue();

        v45 = objc_alloc(MEMORY[0x1E0CB3940]);
        CKStringWithData();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v111 = v44;
        v48 = objc_msgSend_initWithFormat_(v45, v47, (uint64_t)CFSTR("%@.%@"), v44, v46);

        v108 = (void *)v48;
        objc_msgSend_stringByAppendingPathComponent_(v106, v49, v48);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = objc_retainAutorelease(v20);
        v54 = (const std::__fs::filesystem::path *)objc_msgSend_fileSystemRepresentation(v51, v52, v53);
        v55 = objc_retainAutorelease(v50);
        v58 = (const std::__fs::filesystem::path *)objc_msgSend_fileSystemRepresentation(v55, v56, v57);
        rename(v54, v58, v59);
        if (v60)
        {
          v105 = v55;
          v61 = *__error();
          if ((_DWORD)v61 == 2)
          {
            memset(&v120, 0, sizeof(v120));
            v62 = objc_retainAutorelease(v106);
            v65 = (const char *)objc_msgSend_fileSystemRepresentation(v62, v63, v64);
            if (stat(v65, &v120) == -1 && *__error() == 2)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v102 = *MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1BE990000, v102, OS_LOG_TYPE_ERROR, "Cache directory was unexpectedly removed. cloudd exiting to recover.", buf, 2u);
              }
              exit(1);
            }
          }
          v66 = (void *)MEMORY[0x1E0C94FF8];
          v67 = strerror(v61);
          objc_msgSend_errorWithDomain_code_format_(v66, v68, v103, 1000, CFSTR("rename failed: %d (%s)"), v61, v67);
          v69 = objc_claimAutoreleasedReturnValue();

          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v70 = (void *)*MEMORY[0x1E0C952A8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
          {
            v79 = v70;
            objc_msgSend_CKSanitizedPath(v51, v80, v81);
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_CKSanitizedPath(v105, v83, v84);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            v88 = objc_msgSend_unsignedLongLongValue(v110, v86, v87);
            v120.st_dev = 138544386;
            *(_QWORD *)&v120.st_mode = v82;
            WORD2(v120.st_ino) = 2114;
            *(__darwin_ino64_t *)((char *)&v120.st_ino + 6) = (__darwin_ino64_t)v85;
            HIWORD(v120.st_gid) = 2048;
            *(_QWORD *)&v120.st_rdev = v88;
            LOWORD(v120.st_atimespec.tv_sec) = 2114;
            *(__darwin_time_t *)((char *)&v120.st_atimespec.tv_sec + 2) = v111;
            WORD1(v120.st_atimespec.tv_nsec) = 2112;
            *(uint64_t *)((char *)&v120.st_atimespec.tv_nsec + 4) = v69;
            _os_log_error_impl(&dword_1BE990000, v79, OS_LOG_TYPE_ERROR, "Failed moving asset from %{public}@ to %{public}@ for itemID %llu and UUID %{public}@: %@", (uint8_t *)&v120, 0x34u);

          }
          objc_msgSend_setError_(v16, v71, v69);
          v36 = 4;
          v114 = (id)v69;
          v3 = v104;
          v72 = v105;
          v73 = (void *)v111;
        }
        else
        {
          v72 = v55;
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v74 = (void *)*MEMORY[0x1E0C952A8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
          {
            v89 = v74;
            objc_msgSend_CKSanitizedPath(v51, v90, v91);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_CKSanitizedPath(v72, v93, v94);
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            v98 = objc_msgSend_unsignedLongLongValue(v110, v96, v97);
            v120.st_dev = 138544130;
            *(_QWORD *)&v120.st_mode = v92;
            WORD2(v120.st_ino) = 2114;
            *(__darwin_ino64_t *)((char *)&v120.st_ino + 6) = (__darwin_ino64_t)v95;
            HIWORD(v120.st_gid) = 2048;
            *(_QWORD *)&v120.st_rdev = v98;
            LOWORD(v120.st_atimespec.tv_sec) = 2114;
            *(__darwin_time_t *)((char *)&v120.st_atimespec.tv_sec + 2) = v111;
            _os_log_debug_impl(&dword_1BE990000, v89, OS_LOG_TYPE_DEBUG, "Moved asset from %{public}@ to %{public}@ for itemID %llu and UUID %{public}@", (uint8_t *)&v120, 0x2Au);

          }
          objc_msgSend_fileURLWithPath_isDirectory_(MEMORY[0x1E0C99E98], v75, (uint64_t)v72, 0);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setFileURL_(v16, v77, (uint64_t)v76);

          v3 = v104;
          v73 = (void *)v111;
          objc_msgSend_setObject_forKey_(*(void **)(v104 + 56), v78, (uint64_t)v16, v111);
          v36 = 0;
        }
        v14 = v109 + 1;

        v28 = v110;
      }

      if (v36)
        break;
      if (v113 == ++v15)
      {
        v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v116, v121, 16);
        if (v113)
          goto LABEL_5;
        break;
      }
    }
  }
  else
  {
    v114 = 0;
  }

  return v114;
}

uint64_t sub_1BEB772B4(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_setTrackingUUID_(a3, a2, (uint64_t)a2);
}

uint64_t sub_1BEB7787C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEB77BFC(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  const char *v6;
  const char *v7;
  id v8;

  v2 = (void *)MEMORY[0x1E0CB3880];
  v3 = *(_QWORD *)(a1 + 32);
  v8 = a2;
  objc_msgSend_predicateWithFormat_(v2, v4, (uint64_t)CFSTR("chunkCount != NULL AND chunkCount > 0 AND volumeIndex = $VOL AND status = $STATUS AND fileID IN %@"), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v8, v6, (uint64_t)v5);

  objc_msgSend_setFetchedProperties_(v8, v7, (uint64_t)&unk_1E78AF390);
}

void sub_1BEB77F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB77F6C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  __int128 v15;
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(const char **)(a1 + 72);
      v11 = v8;
      NSStringFromSelector(v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v18 = v9;
      v19 = 2114;
      v20 = v12;
      _os_log_error_impl(&dword_1BE990000, v11, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache startTrackingRegisterOrPutAssetHandles:operationType:error:]_block_invoke", "CKDAssetCache.m", 1410, "0 && \"already dropped\"");
  }
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BEB78118;
  v13[3] = &unk_1E7835560;
  v13[4] = v4;
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_BYTE *)(a1 + 80);
  v14 = *(id *)(a1 + 48);
  objc_msgSend_enumerateAssetHandlesSegregatedByVolume_block_(v4, v6, v5, v13);
  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 32), v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_1BEB78118(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  char v29;

  v5 = a3;
  v6 = (void *)MEMORY[0x1E0C99E38];
  v22 = a2;
  objc_msgSend_null(v6, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9 == v22)
    v10 = 0;
  else
    v10 = v22;
  v11 = v10;

  v23[0] = MEMORY[0x1E0C809B0];
  v23[2] = sub_1BEB78234;
  v23[3] = &unk_1E7835538;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(a1 + 40);
  v14 = *(void **)(v12 + 40);
  v23[1] = 3221225472;
  v24 = v11;
  v25 = v12;
  v15 = *(_QWORD *)(a1 + 56);
  v26 = v5;
  v28 = v15;
  v29 = *(_BYTE *)(a1 + 64);
  v27 = v13;
  v16 = v5;
  v17 = v11;
  objc_msgSend_performTransaction_(v14, v18, (uint64_t)v23);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v21 = *(void **)(v20 + 40);
  *(_QWORD *)(v20 + 40) = v19;

}

id sub_1BEB78234(uint64_t a1, const char *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int isEqualRevisionOfAssetHandle_differencesDescription;
  const char *v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  const char *v37;
  const char *v38;
  id v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  const char *v59;
  __int128 v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint8_t buf[4];
  void *v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  id v81;
  _BYTE v82[128];
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend_existingEntriesForRegisterOrPutHandles_volumeIndex_(*(void **)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
    v65 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v65 = 0;
  }
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v3 = *(id *)(a1 + 48);
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v72, v83, 16);
  if (v5)
  {
    v9 = v5;
    v10 = *(_QWORD *)v73;
    *(_QWORD *)&v8 = 138412290;
    v61 = v8;
    v62 = *(_QWORD *)v73;
    v63 = v3;
LABEL_6:
    v11 = 0;
    v64 = v9;
    while (1)
    {
      if (*(_QWORD *)v73 != v10)
        objc_enumerationMutation(v3);
      v12 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * v11);
      objc_msgSend_itemID(v12, v6, v7, v61);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v14, v15);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v58, v59, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), CFSTR("CKDAssetCache.m"), 1422, CFSTR("Expected nil itemID"));

      }
      objc_msgSend_setStatus_(v12, v14, (uint64_t)&unk_1E78B02C8);
      objc_msgSend_fileID(v12, v16, v17);
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = (void *)v18;
      if (*(_QWORD *)(a1 + 32))
      {
        if (v18)
        {
          objc_msgSend_generationID(v12, v19, v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (v22)
          {
            v66 = v21;
            objc_msgSend_objectForKey_(v65, v19, (uint64_t)v21);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = 0u;
            v69 = 0u;
            v70 = 0u;
            v71 = 0u;
            v24 = v23;
            v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v68, v82, 16);
            if (v26)
            {
              v28 = v26;
              v29 = *(_QWORD *)v69;
              while (2)
              {
                v30 = 0;
                do
                {
                  if (*(_QWORD *)v69 != v29)
                    objc_enumerationMutation(v24);
                  v31 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * v30);
                  v67 = 0;
                  isEqualRevisionOfAssetHandle_differencesDescription = objc_msgSend_isEqualRevisionOfAssetHandle_differencesDescription_(v12, v27, (uint64_t)v31, &v67);
                  v35 = v67;
                  if (isEqualRevisionOfAssetHandle_differencesDescription)
                  {
                    if (*(_BYTE *)(a1 + 72))
                    {
                      objc_msgSend_itemID(v31, v33, v34);
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_setItemID_(v12, v45, (uint64_t)v44);

                      objc_msgSend_fileSignature(v31, v46, v47);
                      v48 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_setFileSignature_(v12, v49, (uint64_t)v48);

                      objc_msgSend_chunkCount(v31, v50, v51);
                      v52 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_setChunkCount_(v12, v53, (uint64_t)v52);

                      objc_msgSend_removeObject_(v24, v54, (uint64_t)v31);
                      objc_msgSend_setStatus_(v12, v55, (uint64_t)&unk_1E78B0280);
                      if (*MEMORY[0x1E0C95300] != -1)
                        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                      v56 = *MEMORY[0x1E0C952A8];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = v61;
                        v77 = v12;
                        _os_log_debug_impl(&dword_1BE990000, v56, OS_LOG_TYPE_DEBUG, "Reusing assetHandle %@", buf, 0xCu);
                      }

                      goto LABEL_34;
                    }
                    if (*MEMORY[0x1E0C95300] != -1)
                      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                    v36 = *MEMORY[0x1E0C952A8];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 138412802;
                      v77 = v31;
                      v78 = 2112;
                      v79 = v12;
                      v80 = 2114;
                      v81 = v35;
                      _os_log_debug_impl(&dword_1BE990000, v36, OS_LOG_TYPE_DEBUG, "Cleaning up old assetHandle %@ because it did not match %@: %{public}@", buf, 0x20u);
                    }
                    objc_msgSend_setStatus_(v31, v37, (uint64_t)&unk_1E78B0250);
                    v39 = (id)objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v38, (uint64_t)v31);
                    v40 = *(void **)(a1 + 56);
                    objc_msgSend_itemID(v31, v41, v42);
                    v43 = (void *)objc_claimAutoreleasedReturnValue();
                    sub_1BEB74EE4(v40, v43);

                  }
                  ++v30;
                }
                while (v28 != v30);
                v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v68, v82, 16);
                if (v28)
                  continue;
                break;
              }
            }
LABEL_34:

            v10 = v62;
            v3 = v63;
            v9 = v64;
            v21 = v66;
          }
        }
      }
      objc_msgSend_saveOrInsert_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v19, (uint64_t)v12);
      v57 = (void *)objc_claimAutoreleasedReturnValue();

      if (v57)
        break;
      if (++v11 == v9)
      {
        v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v72, v83, 16);
        if (v9)
          goto LABEL_6;
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v57 = 0;
  }

  return v57;
}

void sub_1BEB78978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB78998(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(const char **)(a1 + 56);
      v16 = v13;
      NSStringFromSelector(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v14;
      v24 = 2114;
      v25 = v17;
      _os_log_error_impl(&dword_1BE990000, v16, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache startTrackingGetAssetHandles:operationType:error:]_block_invoke", "CKDAssetCache.m", 1479, "0 && \"already dropped\"");
  }
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1BEB78B40;
  v18[3] = &unk_1E78355B0;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 32);
  v19 = v6;
  v20 = v8;
  v21 = v7;
  objc_msgSend_performTransaction_(v5, v9, (uint64_t)v18);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

id sub_1BEB78B40(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  void *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  __int128 v45;
  id obj;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  void *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v48, v54, 16);
  if (v3)
  {
    v5 = v3;
    v6 = 0;
    v7 = *(_QWORD *)v49;
    *(_QWORD *)&v4 = 138412290;
    v45 = v4;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v49 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v8);
        v10 = (void *)MEMORY[0x1C3B83E24]();
        objc_msgSend_itemID(v9, v11, v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v14, v15);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v40, v41, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), CFSTR("CKDAssetCache.m"), 1483, CFSTR("Expected nil itemID"));

        }
        objc_msgSend_setStatus_(v9, v14, (uint64_t)&unk_1E78B02E0, v45);
        objc_msgSend_fileSignature(v9, v16, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v18)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v21 = *MEMORY[0x1E0C952A8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v45;
            v53 = v9;
            _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Look at assetHandle %@", buf, 0xCu);
          }
        }
        objc_msgSend_fileSignature(v9, v19, v20);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v22)
        {
          objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v23, v24);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v42, v43, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), CFSTR("CKDAssetCache.m"), 1491, CFSTR("nil assetHandle.fileSignature"));

        }
        v25 = *(void **)(*(_QWORD *)(a1 + 40) + 40);
        objc_msgSend_fileSignature(v9, v23, v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v6;
        objc_msgSend_interruptedAssetWithSignature_error_(v25, v27, (uint64_t)v26, &v47);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v47;

        if (v29)
        {

          objc_autoreleasePoolPop(v10);
          v6 = v29;
          goto LABEL_24;
        }
        if (v28)
        {
          objc_msgSend_itemID(v28, v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setItemID_(v9, v33, (uint64_t)v32);

          objc_msgSend_chunkCount(v28, v34, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setChunkCount_(v9, v37, (uint64_t)v36);

          objc_msgSend_updateUsingObject_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v38, (uint64_t)v9);
        }
        else
        {
          objc_msgSend_insertObject_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v30, (uint64_t)v9);
        }
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        objc_autoreleasePoolPop(v10);
        ++v8;
      }
      while (v5 != v8);
      v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v39, (uint64_t)&v48, v54, 16);
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_24:

  return v6;
}

void sub_1BEB78F30(uint64_t a1, const char *a2, uint64_t a3)
{
  CKDAssetHandle *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  const __CFString *v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(const char **)(a1 + 48);
      v16 = v13;
      NSStringFromSelector(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v21 = v14;
      v22 = 2114;
      v23 = v17;
      _os_log_error_impl(&dword_1BE990000, v16, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache updateLastAccessTimeForUUID:]_block_invoke", "CKDAssetCache.m", 1523, "0 && \"already dropped\"");
  }
  v4 = objc_alloc_init(CKDAssetHandle);
  objc_msgSend_date(MEMORY[0x1E0C99D68], v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLastUsedTime_(v4, v8, (uint64_t)v7);

  v9 = *(_QWORD *)(a1 + 40);
  v18 = CFSTR("UUID");
  v19 = v9;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v10, (uint64_t)&v19, &v18, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v12, (uint64_t)&unk_1E78AF3A8, v4, v11, off_1E78355D0, 0, &unk_1E78355E8);

}

uint64_t sub_1BEB79104(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("UUID=$UUID"));
}

void sub_1BEB793D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB793FC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  CKDAssetHandle *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  void *v25;
  void *v26;
  const char *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t v35[128];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v25 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v26 = *(void **)(a1 + 32);
      v27 = *(const char **)(a1 + 56);
      v28 = v25;
      NSStringFromSelector(v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v37 = v26;
      v38 = 2114;
      v39 = v29;
      _os_log_error_impl(&dword_1BE990000, v28, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache stopTrackingAssetHandlesByItemIDs:]_block_invoke", "CKDAssetCache.m", 1543, "0 && \"already dropped\"");
  }
  v4 = (void *)objc_opt_new();
  v30 = (void *)objc_opt_new();
  v5 = objc_alloc_init(CKDAssetHandle);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v6 = *(id *)(a1 + 40);
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v31, v35, 16);
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v32;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v32 != v12)
          objc_enumerationMutation(v6);
        v14 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v13);
        if (objc_msgSend_unsignedLongLongValue(v14, v9, v10))
        {
          objc_msgSend_setItemID_(v5, v9, (uint64_t)v14);
          objc_msgSend_setStatus_(v5, v15, (uint64_t)&unk_1E78B0250);
          objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v16, (uint64_t)v5);
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          v19 = *(void **)(v18 + 40);
          *(_QWORD *)(v18 + 40) = v17;

          sub_1BEB74EE4(v4, v14);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v20 = *MEMORY[0x1E0C952A8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
            {
              v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
              *(_DWORD *)buf = 138543618;
              v37 = v14;
              v38 = 2114;
              v39 = v23;
              _os_log_error_impl(&dword_1BE990000, v20, OS_LOG_TYPE_ERROR, "Failed to stop tracking asset files with itemID %{public}@: %{public}@", buf, 0x16u);
            }
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v22 = *(void **)(v21 + 40);
            *(_QWORD *)(v21 + 40) = 0;

          }
        }
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v31, v35, 16);
    }
    while (v11);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 32), v24, (uint64_t)v4, v30);
}

void sub_1BEB798F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB7991C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  void *v25;
  id obj;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(const char **)(a1 + 56);
      v24 = v21;
      NSStringFromSelector(v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v28 = v22;
      v29 = 2114;
      v30 = v25;
      _os_log_error_impl(&dword_1BE990000, v24, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache findAssetHandleForItemID:error:]_block_invoke", "CKDAssetCache.m", 1587, "0 && \"already dropped\"");
  }
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v4, *(_QWORD *)(a1 + 64));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  obj = *(id *)(v7 + 40);
  objc_msgSend_entryWithPrimaryKey_fetchProperties_label_error_(v5, v8, (uint64_t)v6, 0, off_1E7835630, &obj);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v7 + 40), obj);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v12 = (void *)*MEMORY[0x1E0C952F8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v13 = *MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 134217984;
      v28 = v14;
      v15 = "Unable to find asset handle with itemID:%llu";
      v16 = v13;
      v17 = 12;
LABEL_12:
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, v15, buf, v17);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v18 = *MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 64);
      v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 134218242;
      v28 = v19;
      v29 = 2112;
      v30 = v20;
      v15 = "Found asset handle with itemID:%llu %@";
      v16 = v18;
      v17 = 22;
      goto LABEL_12;
    }
  }
}

void sub_1BEB7A118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB7A130(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  void *v5;
  uint64_t v6;
  int v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  void *v24;
  void *v25;
  const char *v26;
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v24 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v25 = *(void **)(a1 + 32);
      v26 = *(const char **)(a1 + 56);
      v27 = v24;
      NSStringFromSelector(v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v32 = v25;
      v33 = 2114;
      v34 = v28;
      _os_log_error_impl(&dword_1BE990000, v27, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache assetHandleWithCachedPath:]_block_invoke", "CKDAssetCache.m", 1657, "0 && \"already dropped\"");
  }
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v29 = 0;
  v30 = 0;
  v7 = objc_msgSend_parseCachedPath_assetHandleUUID_assetSignature_(v5, v4, v6, &v30, &v29);
  v8 = v30;
  v9 = v29;
  v12 = v9;
  if (v7)
  {
    if (!v8 || !v9)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v10, v11);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v22, v23, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDAssetCache.m"), 1661, CFSTR("should have thrown by now"));

    }
    objc_msgSend_assetHandleWithUUID_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v10, (uint64_t)v8);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v16 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v17 = *(void **)(a1 + 40);
      v18 = v16;
      objc_msgSend_CKSanitizedPath(v17, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v21;
      _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "Attempt to find asset by path that is not parsable %{public}@", buf, 0xCu);

    }
  }

}

void sub_1BEB7A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BEB7A7B4(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend_insertObject_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    objc_msgSend_itemID(*(void **)(a1 + 40), v4, v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = *(_QWORD *)(a1 + 56);
    v12 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v10, v11);
    v15 = objc_msgSend_unsignedLongLongValue(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v9, v12, v15);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

void sub_1BEB7A8B8(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  int isEvictionScheduled;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  id v18;
  void *v19;
  const char *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v21 = *(void **)(a1 + 32);
      v20 = *(const char **)(a1 + 40);
      v22 = v19;
      NSStringFromSelector(v20);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v32 = v21;
      v33 = 2114;
      v34 = v23;
      _os_log_error_impl(&dword_1BE990000, v22, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache _scheduleEvictionForDownloadedFiles]_block_invoke", "CKDAssetCache.m", 1720, "0 && \"already dropped\"");
  }
  isEvictionScheduled = objc_msgSend_isEvictionScheduled(*(void **)(a1 + 32), v4, v5);
  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (isEvictionScheduled)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
    {
      v9 = *(void **)(a1 + 32);
      v10 = v8;
      objc_msgSend_applicationBundleID(v9, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v13;
      _os_log_debug_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEBUG, "Not scheduling redundant downloads eviction for %{public}@", buf, 0xCu);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v14 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
    {
      v24 = *(void **)(a1 + 32);
      v25 = v14;
      objc_msgSend_applicationBundleID(v24, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v28;
      _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Scheduling downloads eviction for %{public}@", buf, 0xCu);

    }
    objc_msgSend_setIsEvictionScheduled_(*(void **)(a1 + 32), v15, 1);
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    v16 = (void *)MEMORY[0x1E0C99E88];
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_1BEB7ABE0;
    v29[3] = &unk_1E78356A0;
    objc_copyWeak(&v30, (id *)buf);
    v18 = (id)objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(v16, v17, 0, v29, 10.0);
    objc_destroyWeak(&v30);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1BEB7ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB7ABE0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  CKDAssetCacheEvictionInfo *v11;
  const char *v12;
  void *v13;
  const char *v14;
  id v15;
  const char *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  int v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained && (objc_msgSend_didDrop(WeakRetained, v5, v6) & 1) == 0)
  {
    if ((objc_msgSend_isEvictionScheduled(v7, v8, v9) & 1) != 0)
    {
      v10 = (void *)MEMORY[0x1C3B83E24]();
      v11 = [CKDAssetCacheEvictionInfo alloc];
      v13 = (void *)objc_msgSend_initWithForced_(v11, v12, 0);
      v15 = (id)objc_msgSend__evictWithEvictionInfo_(v7, v14, (uint64_t)v13);
      objc_msgSend_unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo_(v7, v16, (uint64_t)v13);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v17 = (void *)*MEMORY[0x1E0C952A8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
      {
        v19 = v17;
        objc_msgSend_applicationBundleID(v7, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543362;
        v28 = v22;
        _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Completed unregister for evicted downloads for %{public}@", (uint8_t *)&v27, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v18 = (void *)*MEMORY[0x1E0C952A8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
      {
        v23 = v18;
        objc_msgSend_applicationBundleID(v7, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543362;
        v28 = v26;
        _os_log_debug_impl(&dword_1BE990000, v23, OS_LOG_TYPE_DEBUG, "Scheduled downloads eviction cancelled for %{public}@", (uint8_t *)&v27, 0xCu);

      }
    }
  }

}

void sub_1BEB7BA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB7BACC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v8;
  id v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *MEMORY[0x1E0C952A8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
  {
    v8 = 138412546;
    v9 = v4;
    v10 = 2112;
    v11 = v5;
    _os_log_error_impl(&dword_1BE990000, v6, OS_LOG_TYPE_ERROR, "%@ %@", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

uint64_t sub_1BEB7BBD0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v8;
  id v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *MEMORY[0x1E0C952A8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
  {
    v8 = 138543618;
    v9 = v4;
    v10 = 2112;
    v11 = v5;
    _os_log_error_impl(&dword_1BE990000, v6, OS_LOG_TYPE_ERROR, "%{public}@ %@", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

uint64_t sub_1BEB7BCD4(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  double v12;
  double v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  id v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  int shouldBeUnregisteredBeforeDeleted;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  id v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  const char *v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  NSObject *v75;
  void *v76;
  char v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  BOOL v82;
  unint64_t v83;
  void *v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  NSObject *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v97;
  void *v98;
  unint64_t v99;
  void *v100;
  NSObject *v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  id obj;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *context;
  id v115;
  id v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint8_t buf[4];
  void *v122;
  __int16 v123;
  unint64_t v124;
  __int16 v125;
  void *v126;
  __int16 v127;
  unint64_t v128;
  __int16 v129;
  void *v130;
  _BYTE v131[128];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, 0, off_1E7835700, 0, &unk_1E7835718);
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v117, v131, 16);
  if (!v112)
    goto LABEL_56;
  v111 = *(_QWORD *)v118;
  v108 = (void *)*MEMORY[0x1E0CB28A8];
  while (2)
  {
    v4 = 0;
    do
    {
      if (*(_QWORD *)v118 != v111)
        objc_enumerationMutation(obj);
      v5 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * v4);
      v6 = (void *)MEMORY[0x1C3B83E24]();
      v7 = *(void **)(a1 + 40);
      objc_msgSend_lastUsedTime(v5, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_timeIntervalSinceDate_(v7, v11, (uint64_t)v10);
      v13 = v12;

      if ((objc_msgSend_forced(*(void **)(a1 + 48), v14, v15) & 1) != 0
        || v13 > (double)*(unint64_t *)(a1 + 96)
        || *(_BYTE *)(a1 + 128)
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) > 0x3E8uLL
         || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) >= 0x6400001uLL)
        && v13 > (double)*(unint64_t *)(a1 + 104))
      {
        context = v6;
        v18 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend_UUID(v5, v16, v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_UUIDString(v19, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_fileSignature(v5, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        CKStringWithData();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v18, v27, (uint64_t)CFSTR("%@.%@"), v22, v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAppendingPathComponent_(v31, v32, (uint64_t)v28);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        v34 = *(void **)(a1 + 56);
        v116 = 0;
        objc_msgSend_attributesOfItemAtPath_error_(v34, v35, (uint64_t)v33, &v116);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = v116;
        if (v36)
        {
          v40 = objc_msgSend_fileSize(v36, v37, v38);
          if (!v5)
            goto LABEL_28;
        }
        else
        {
          v40 = 0;
          if (!v5)
            goto LABEL_28;
        }
        if (!objc_msgSend_mayBeEvicted(v5, v37, v38))
        {
          v62 = v39;
          goto LABEL_47;
        }
        objc_msgSend_itemID(v5, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        if (v43)
        {
          objc_msgSend_itemID(v5, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v109 = objc_msgSend_unsignedLongLongValue(v46, v47, v48);

          objc_msgSend_setStatus_(v5, v49, (uint64_t)&unk_1E78B0250);
          v51 = (id)objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v50, (uint64_t)v5);
          shouldBeUnregisteredBeforeDeleted = objc_msgSend_shouldBeUnregisteredBeforeDeleted(v5, v52, v53);
          v57 = *(void **)(a1 + 48);
          if (shouldBeUnregisteredBeforeDeleted)
          {
            objc_msgSend_itemIDsToUnregister(v57, v54, v55);
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_itemID(v5, v59, v60);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1BEB74EE4(v58, v61);
          }
          else
          {
            objc_msgSend_assetHandleItemIDsToDelete(v57, v54, v55);
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_itemID(v5, v63, v64);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v58, v65, (uint64_t)v61);
          }

          if (v109)
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v66 = (void *)*MEMORY[0x1E0C952A8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
            {
              v68 = v66;
              objc_msgSend_UUID(v5, v69, v70);
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_UUIDString(v71, v72, v73);
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138413058;
              v122 = v28;
              v123 = 2048;
              v124 = v109;
              v125 = 2114;
              v126 = v74;
              v127 = 2048;
              v128 = v40;
              _os_log_impl(&dword_1BE990000, v68, OS_LOG_TYPE_INFO, "Removing file %@ for asset with itemID %llu and UUID %{public}@ (size:%llu)", buf, 0x2Au);

            }
            goto LABEL_32;
          }
        }
LABEL_28:
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v75 = *MEMORY[0x1E0C952A8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v122 = v28;
          v123 = 2048;
          v124 = v40;
          _os_log_impl(&dword_1BE990000, v75, OS_LOG_TYPE_INFO, "Removing file %@ (size:%llu) with no associated asset handle", buf, 0x16u);
        }
LABEL_32:
        v76 = *(void **)(a1 + 56);
        v115 = v39;
        v77 = objc_msgSend_removeItemAtPath_error_(v76, v67, (uint64_t)v33, &v115);
        v62 = v115;

        if ((v77 & 1) != 0)
          goto LABEL_33;
        objc_msgSend_domain(v62, v78, v79);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_isEqualToString_(v108, v85, (uint64_t)v84) & 1) != 0)
        {
          v88 = objc_msgSend_code(v62, v86, v87);

          if (v88 == 4)
          {
LABEL_33:
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) += v40;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) -= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                                                                 + 8)
                                                                                     + 24) != 0;
            v80 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
            v81 = *(_QWORD *)(v80 + 24);
            v82 = v81 >= v40;
            v83 = v81 - v40;
            if (!v82)
              v83 = 0;
            *(_QWORD *)(v80 + 24) = v83;
            if ((objc_msgSend_forced(*(void **)(a1 + 48), v78, v79) & 1) == 0
              && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) <= 0x63uLL
              && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) >> 21 <= 4uLL)
            {
              if (*MEMORY[0x1E0C95300] != -1)
                dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v95 = (void *)*MEMORY[0x1E0C952A8];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_DEBUG))
              {
                v97 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
                v98 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
                v99 = *(_QWORD *)(a1 + 112);
                v113 = *(_QWORD *)(a1 + 120);
                v100 = *(void **)(a1 + 32);
                v101 = v95;
                objc_msgSend_fileDownloadPath(v100, v102, v103);
                v104 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_CKSanitizedPath(v104, v105, v106);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134219010;
                v122 = v97;
                v123 = 2048;
                v124 = v99;
                v125 = 2048;
                v126 = v98;
                v127 = 2048;
                v128 = v113;
                v129 = 2114;
                v130 = v107;
                _os_log_debug_impl(&dword_1BE990000, v101, OS_LOG_TYPE_DEBUG, "Evicted %llu/%llu files (%llu/%llu bytes) at %{public}@", buf, 0x34u);

              }
              objc_autoreleasePoolPop(context);
              goto LABEL_56;
            }
            goto LABEL_47;
          }
        }
        else
        {

        }
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v89 = (void *)*MEMORY[0x1E0C952A8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
        {
          v91 = v89;
          objc_msgSend_CKSanitizedPath(v33, v92, v93);
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v122 = v94;
          v123 = 2112;
          v124 = (unint64_t)v62;
          _os_log_error_impl(&dword_1BE990000, v91, OS_LOG_TYPE_ERROR, "Failed removing cached asset file at %{public}@: %@", buf, 0x16u);

        }
LABEL_47:

        v6 = context;
      }
      objc_autoreleasePoolPop(v6);
      ++v4;
    }
    while (v112 != v4);
    v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v90, (uint64_t)&v117, v131, 16);
    if (v112)
      continue;
    break;
  }
LABEL_56:

  return 0;
}

void sub_1BEB7C4E8(uint64_t a1, void *a2)
{
  const char *v2;
  const char *v3;
  id v4;

  v4 = a2;
  objc_msgSend_setFetchedProperties_(v4, v2, (uint64_t)&unk_1E78AF3C0);
  objc_msgSend_orderAscendingByProperty_(v4, v3, (uint64_t)CFSTR("lastUsedTime"));

}

uint64_t sub_1BEB7C528(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_once_t *v8;
  os_log_t *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  id v21;
  const char *v22;
  __int128 v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend_selectProperties_inAssetHandlesWithStatus_error_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, (uint64_t)&unk_1E78AF3D8, 3, 0);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v26, v32, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v27;
    v8 = (dispatch_once_t *)MEMORY[0x1E0C95300];
    v9 = (os_log_t *)MEMORY[0x1E0C952A8];
    *(_QWORD *)&v5 = 138412290;
    v24 = v5;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v27 != v7)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v10);
        if (*v8 != -1)
          dispatch_once(v8, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v12 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v24;
          v31 = v11;
          _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "Removing registered asset handle for %@", buf, 0xCu);
        }
        objc_msgSend_itemIDsToUnregister(*(void **)(a1 + 40), v13, v14, v24);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_itemID(v11, v16, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1BEB74EE4(v15, v18);

        objc_msgSend_setStatus_(v11, v19, (uint64_t)&unk_1E78B0250);
        v21 = (id)objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v20, (uint64_t)v11);
        ++v10;
      }
      while (v6 != v10);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v26, v32, 16);
    }
    while (v6);
  }

  return 0;
}

void sub_1BEB7C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB7C890(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend__evictAllFilesForced_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1BEB7CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB7CBA0(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("status=$NOT_REGISTERED and lastUsedTime < $EXPIRYDATE"));
}

uint64_t sub_1BEB7CBB4(uint64_t a1, const char *a2)
{
  uint64_t v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  dispatch_once_t *v12;
  os_log_t *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  id v24;
  NSObject *v25;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  _BYTE v34[128];
  _QWORD v35[3];
  _QWORD v36[5];

  v36[3] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v35[0] = CFSTR("EXPIRYDATE");
  v35[1] = CFSTR("REGISTERED");
  v36[0] = v3;
  v36[1] = &unk_1E78B0298;
  v35[2] = CFSTR("INTERRUPTED");
  v36[2] = &unk_1E78B0220;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v36, v35, 3);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v4, (uint64_t)v27, off_1E78357C0, 0, &unk_1E78357D8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v28, v34, 16);
  if (v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)v29;
    v12 = (dispatch_once_t *)MEMORY[0x1E0C95300];
    v13 = (os_log_t *)MEMORY[0x1E0C952A8];
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v29 != v11)
          objc_enumerationMutation(v5);
        v15 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v14);
        if ((objc_msgSend_mayBeEvicted(v15, v8, v9) & 1) != 0)
        {
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
          objc_msgSend_itemIDsToUnregister(*(void **)(a1 + 48), v16, v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_itemID(v15, v19, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1BEB74EE4(v18, v21);

          objc_msgSend_setStatus_(v15, v22, (uint64_t)&unk_1E78B0250);
          v24 = (id)objc_msgSend_saveStatus_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v23, (uint64_t)v15);
        }
        else
        {
          if (*v12 != -1)
            dispatch_once(v12, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v25 = *v13;
          if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v33 = v15;
            _os_log_error_impl(&dword_1BE990000, v25, OS_LOG_TYPE_ERROR, "Attempting to evict asset handle in wrong state %@", buf, 0xCu);
          }
        }
        ++v14;
      }
      while (v10 != v14);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v28, v34, 16);
    }
    while (v10);
  }
  objc_msgSend_unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo_(*(void **)(a1 + 40), v8, *(_QWORD *)(a1 + 48));

  return 0;
}

void sub_1BEB7CE48(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  id v6;

  v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1E78AF3F0);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v4, (uint64_t)CFSTR("(status=$REGISTERED OR status=$INTERRUPTED) AND lastUsedTime < $EXPIRYDATE"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);

}

uint64_t sub_1BEB7D15C(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  CKDAssetHandle *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C99E20]);
  v4 = (void *)objc_msgSend_initWithCapacity_(v2, v3, 500);
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v5, (uint64_t)&unk_1E78AFB40, off_1E7835820, 0, &unk_1E7835838);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v38, v50, 16);
  if (v8)
  {
    v11 = v8;
    v12 = 0;
    v13 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v39 != v13)
          objc_enumerationMutation(v6);
        objc_msgSend_itemID(*(void **)(*((_QWORD *)&v38 + 1) + 8 * i), v9, v10);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_longLongValue(v15, v16, v17))
          objc_msgSend_addObject_(v4, v18, (uint64_t)v15);
        if ((unint64_t)objc_msgSend_count(v4, v18, v19) >= 0x1F4)
        {
          v12 += objc_msgSend_count(v4, v20, v21);
          objc_msgSend_allObjects(v4, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_unregisterItemIDs_(*(void **)(a1 + 40), v25, (uint64_t)v24);
          objc_msgSend_removeAllObjects(v4, v26, v27);

        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v38, v50, 16);
    }
    while (v11);
  }
  else
  {
    v12 = 0;
  }
  v28 = objc_msgSend_deleteEntriesMatching_label_error_predicate_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v9, (uint64_t)&unk_1E78AFB40, off_1E7835858, 0, &unk_1E7835870);
  v29 = objc_alloc_init(CKDAssetHandle);
  objc_msgSend_setStatus_(v29, v30, (uint64_t)&unk_1E78B0298);
  v32 = objc_msgSend_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v31, (uint64_t)&unk_1E78AF420, v29, &unk_1E78AFB68, off_1E7835890, 0, &unk_1E78358A8);
  objc_msgSend_setStatus_(v29, v33, (uint64_t)&unk_1E78B0220);
  v35 = objc_msgSend_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v34, (uint64_t)&unk_1E78AF438, v29, &unk_1E78AFB90, off_1E78358C8, 0, &unk_1E78358E0);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v36 = *MEMORY[0x1E0C952A8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218752;
    v43 = v28;
    v44 = 2048;
    v45 = v32;
    v46 = 2048;
    v47 = v35;
    v48 = 2048;
    v49 = v12;
    _os_log_impl(&dword_1BE990000, v36, OS_LOG_TYPE_INFO, "In-flight asset handles marked as interrupted during un/registering:%llu upload:%llu download:%llu item unregistred:%llu", buf, 0x2Au);
  }

  return 0;
}

void sub_1BEB7D474(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  id v6;

  v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1E78AF408);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v4, (uint64_t)CFSTR("status=$REGISTERING OR status=$UNREGISTERING"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);

}

uint64_t sub_1BEB7D4D8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("status=$REGISTERING OR status=$UNREGISTERING"));
}

uint64_t sub_1BEB7D4EC(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("status=$STATUS"));
}

uint64_t sub_1BEB7D500(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("status=$STATUS"));
}

uint64_t sub_1BEB7D58C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = (void *)*MEMORY[0x1E0C952A8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952A8], OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v7 = *(const char **)(a1 + 40);
      v9 = v6;
      NSStringFromSelector(v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412546;
      v14 = v8;
      v15 = 2114;
      v16 = v10;
      _os_log_error_impl(&dword_1BE990000, v9, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", (uint8_t *)&v13, 0x16u);

    }
    __assert_rtn("-[CKDAssetCache setupPersistentStateAtStartup]_block_invoke", "CKDAssetCache.m", 2092, "0 && \"already dropped\"");
  }
  objc_msgSend__deleteAssetHandlesAndUnregisterItemsForUnmountedAssetVolumes(*(void **)(a1 + 32), v4, v5);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__resetAssetInflight, v11);
}

void sub_1BEB7DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB7E010(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1C3B83E24]();
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v50, v54, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v51 != v13)
          objc_enumerationMutation(v8);
        v15 = objc_msgSend_state(*(void **)(*((_QWORD *)&v50 + 1) + 8 * i), v10, v11);
        ++*((_QWORD *)&v55 + v15);
      }
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v50, v54, 16);
    }
    while (v12);
    v16 = *((_QWORD *)&v55 + 1);
    v12 = v55;
    v17 = *((_QWORD *)&v56 + 1);
    v18 = v56;
    v19 = v57;
  }
  else
  {
    v19 = 0;
    v17 = 0;
    v18 = 0;
    v16 = 0;
  }

  v20 = *(void **)(a1 + 40);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("notStarted=%lu"), v12);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v20, v23, (uint64_t)v22);

  v24 = *(void **)(a1 + 40);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v25, (uint64_t)CFSTR("waitingForFetch=%lu"), v16);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v24, v27, (uint64_t)v26);

  v28 = *(void **)(a1 + 40);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v29, (uint64_t)CFSTR("fetchingFromServer=%lu"), v18);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v28, v31, (uint64_t)v30);

  v32 = *(void **)(a1 + 40);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v33, (uint64_t)CFSTR("needsCallback=%lu"), v17);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v32, v35, (uint64_t)v34);

  v36 = *(void **)(a1 + 40);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v37, (uint64_t)CFSTR("finished=%lu"), v19);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v36, v39, (uint64_t)v38);

  v40 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_componentsJoinedByString_(*(void **)(a1 + 40), v41, (uint64_t)CFSTR(", "));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 32), v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v40, v46, (uint64_t)CFSTR("fetchInfos (%@) = %@"), v42, v45);
  v47 = objc_claimAutoreleasedReturnValue();
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v49 = *(void **)(v48 + 40);
  *(_QWORD *)(v48 + 40) = v47;

  objc_autoreleasePoolPop(v2);
}

void sub_1BEB7E49C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  NSObject *v6;

  objc_msgSend_performCallback(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_fetchGroup(*(void **)(a1 + 40), v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEB7EBB4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  objc_class *v26;
  id v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  void *v35;
  id v36;
  _QWORD *v37;
  id v38;
  id v39;
  _QWORD v40[4];
  id v41;
  uint64_t v42;
  id v43;
  _QWORD *v44;
  id v45[2];
  id from;
  id location;
  _QWORD v48[3];
  char v49;
  uint8_t buf[4];
  id v51;
  __int16 v52;
  id v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v48[0] = 0;
  v48[1] = v48;
  v48[2] = 0x2020000000;
  v49 = 0;
  objc_msgSend_setFullRecordsToFetch_(v3, v4, *(_QWORD *)(a1 + 32));
  v7 = objc_msgSend_forceDecryptionAttempt(*(void **)(a1 + 40), v5, v6);
  objc_msgSend_setForcePCSDecrypt_(v3, v8, v7);
  v11 = objc_msgSend_useRecordCache(*(void **)(a1 + 40), v9, v10);
  objc_msgSend_setUseRecordCache_(v3, v12, v11);
  objc_initWeak(&location, *(id *)(a1 + 40));
  objc_initWeak(&from, v3);
  v13 = MEMORY[0x1E0C809B0];
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = sub_1BEB7EF58;
  v40[3] = &unk_1E7835908;
  objc_copyWeak(v45, &location);
  v14 = *(void **)(a1 + 64);
  v44 = v48;
  v45[1] = v14;
  v15 = *(id *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 40);
  v41 = v15;
  v42 = v16;
  v43 = *(id *)(a1 + 56);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v17, (uint64_t)v40);
  v32 = v13;
  v33 = 3221225472;
  v34 = sub_1BEB7F3B0;
  v35 = &unk_1E7835930;
  objc_copyWeak(&v38, &location);
  objc_copyWeak(&v39, &from);
  v37 = v48;
  v36 = *(id *)(a1 + 56);
  objc_msgSend_setCompletionBlock_(v3, v18, (uint64_t)&v32);
  objc_msgSend_setCurrentFetchOp_(*(void **)(a1 + 40), v19, (uint64_t)v3, v32, v33, v34, v35);
  objc_msgSend_fetchGroup(*(void **)(a1 + 40), v20, v21);
  v22 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v22);

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v23 = (id)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    v26 = (objc_class *)objc_opt_class();
    NSStringFromClass(v26);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    v28 = *(void **)(a1 + 40);
    objc_msgSend_ckShortDescription(v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218754;
    v51 = v3;
    v52 = 2114;
    v53 = v27;
    v54 = 2048;
    v55 = v28;
    v56 = 2114;
    v57 = v31;
    _os_log_debug_impl(&dword_1BE990000, v23, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %p for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);

  }
  objc_msgSend_hash(*(void **)(a1 + 40), v24, v25);
  kdebug_trace();

  objc_destroyWeak(&v39);
  objc_destroyWeak(&v38);

  objc_destroyWeak(v45);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
  _Block_object_dispose(v48, 8);

}

void sub_1BEB7EEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,id a28,char a29)
{
  id *v29;
  id *v30;
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1BEB7EF58(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  __CFString *v9;
  const char *v10;
  uint64_t v11;
  id WeakRetained;
  void *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  __CFString *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  int isEqualToString;
  const char *v60;
  const char *v61;
  NSObject *v62;
  objc_class *v63;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const __CFString *v70;
  const __CFString *v71;
  void *v72;
  void *v73;
  id obj;
  id v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint8_t v81[128];
  uint8_t buf[4];
  void *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  id v89;
  __int16 v90;
  const __CFString *v91;
  __int16 v92;
  const __CFString *v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 72);
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKitTools/Daemon/Operations/Database/CKDRecordFetchAggregator.m");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationID(*(void **)(a1 + 32), v17, v18);
    v19 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v19;
    if (v9)
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v20, v14, WeakRetained, v16, 383, CFSTR("Trying to invoke the record fetch completion block on completed operation %@ with record %@ and record ID %@%@%@"), v19, v7, v8, CFSTR(". Error was "), v9);
    else
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v20, v14, WeakRetained, v16, 383, CFSTR("Trying to invoke the record fetch completion block on completed operation %@ with record %@ and record ID %@%@%@"), v19, v7, v8, &stru_1E7838F48, &stru_1E7838F48);

  }
  v73 = v8;
  v75 = v7;
  v72 = WeakRetained;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v22 = (uint64_t)v8;
  v23 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v62 = v23;
    v63 = (objc_class *)objc_opt_class();
    NSStringFromClass(v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = *(void **)(a1 + 40);
    objc_msgSend_ckShortDescription(v65, v66, v67);
    v68 = objc_claimAutoreleasedReturnValue();
    v69 = (void *)v68;
    *(_DWORD *)buf = 138544642;
    v70 = CFSTR(" Error was ");
    v83 = v64;
    v71 = &stru_1E7838F48;
    v84 = 2048;
    if (!v9)
      v70 = &stru_1E7838F48;
    v85 = v65;
    if (v9)
      v71 = v9;
    v86 = 2114;
    v87 = v68;
    v88 = 2112;
    v89 = v8;
    v90 = 2114;
    v91 = v70;
    v92 = 2112;
    v93 = v71;
    v22 = (uint64_t)v8;
    _os_log_debug_impl(&dword_1BE990000, v62, OS_LOG_TYPE_DEBUG, "Record fetcher <%{public}@: %p; %{public}@> fetched a record with ID %@.%{public}@%@",
      buf,
      0x3Eu);

  }
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v24, v22);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_count(v25, v26, v27))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = *(_QWORD *)(a1 + 72);
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKitTools/Daemon/Operations/Database/CKDRecordFetchAggregator.m");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v34, v31, WeakRetained, v33, 387, CFSTR("Didn't get any fetch infos for record with ID %@"), v22);

  }
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  obj = v25;
  v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v77, v81, 16);
  v39 = v75;
  if (v36)
  {
    v40 = v36;
    v76 = *(_QWORD *)v78;
    do
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v78 != v76)
          objc_enumerationMutation(obj);
        v42 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * i);
        objc_msgSend_record(v42, v37, v38);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_etag(v43, v44, v45);
        v46 = objc_claimAutoreleasedReturnValue();
        if (!v46)
        {

LABEL_20:
          objc_msgSend_setError_(v42, v37, (uint64_t)v9);
          objc_msgSend_setRecord_(v42, v60, (uint64_t)v39);
          objc_msgSend_setState_(v42, v61, 3);
          continue;
        }
        v49 = (void *)v46;
        objc_msgSend_record(v42, v47, v48);
        v50 = v9;
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_etag(v51, v52, v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_etag(v39, v55, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v54, v58, (uint64_t)v57);

        v39 = v75;
        v9 = v50;

        if (isEqualToString)
          goto LABEL_20;
      }
      v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v37, (uint64_t)&v77, v81, 16);
    }
    while (v40);
  }

}

void sub_1BEB7F3B0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  os_log_t *v9;
  os_log_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  NSObject *v52;
  NSObject *v53;
  objc_class *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id obj;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  id v77;
  __int16 v78;
  void *v79;
  _BYTE v80[128];
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = objc_loadWeakRetained((id *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
    {
      v13 = v10;
      objc_msgSend_error(v3, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v73 = v16;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Error fetching records: %@", buf, 0xCu);

    }
    objc_msgSend_error(WeakRetained, v11, v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      objc_msgSend_error(v3, v7, v8);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v18);

    }
  }
  v59 = v3;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  objc_msgSend_allValues(*(void **)(a1 + 32), v7, v8);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v68, v81, 16);
  if (v62)
  {
    v61 = *(_QWORD *)v69;
    v21 = *MEMORY[0x1E0C94B20];
    do
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)v69 != v61)
          objc_enumerationMutation(obj);
        v63 = v22;
        v23 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * v22);
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v24 = v23;
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v64, v80, 16);
        if (v26)
        {
          v29 = v26;
          v30 = *(_QWORD *)v65;
          do
          {
            for (i = 0; i != v29; ++i)
            {
              if (*(_QWORD *)v65 != v30)
                objc_enumerationMutation(v24);
              v32 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
              if ((unint64_t)objc_msgSend_state(v32, v27, v28) <= 2)
              {
                objc_msgSend_error(WeakRetained, v27, v28);
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                if (v35)
                {
                  objc_msgSend_setError_(v32, v33, (uint64_t)v35);
                }
                else
                {
                  v36 = (void *)MEMORY[0x1E0C94FF8];
                  objc_msgSend_recordID(v32, v33, v34);
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_errorWithDomain_code_format_(v36, v38, v21, 2003, CFSTR("We didn't get a callback for record %@"), v37);
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setError_(v32, v40, (uint64_t)v39);

                }
                objc_msgSend_setState_(v32, v41, 3);
              }
            }
            v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v64, v80, 16);
          }
          while (v29);
        }

        v22 = v63 + 1;
      }
      while (v63 + 1 != v62);
      v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v42, (uint64_t)&v68, v81, 16);
    }
    while (v62);
  }

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v43 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v53 = v43;
    v54 = (objc_class *)objc_opt_class();
    NSStringFromClass(v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218754;
    v73 = v59;
    v74 = 2114;
    v75 = v55;
    v76 = 2048;
    v77 = WeakRetained;
    v78 = 2114;
    v79 = v58;
    _os_log_debug_impl(&dword_1BE990000, v53, OS_LOG_TYPE_DEBUG, "Fetch records operation %p completed for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);

  }
  objc_msgSend_hash(WeakRetained, v44, v45);
  kdebug_trace();
  objc_msgSend_setCurrentFetchOp_(WeakRetained, v46, 0);
  objc_msgSend_fetchSource(WeakRetained, v47, v48);
  v49 = objc_claimAutoreleasedReturnValue();
  dispatch_source_merge_data(v49, 1uLL);

  objc_msgSend_fetchGroup(WeakRetained, v50, v51);
  v52 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v52);

}

uint64_t sub_1BEB8049C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_cancelAllOperations(a2, (const char *)a2, a3);
}

uint64_t sub_1BEB804A4(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_invalidate(a2, (const char *)a2, a3);
}

void sub_1BEB8074C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB80764(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEB80774(uint64_t a1, void *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)MEMORY[0x1C3B83E24]();
  objc_msgSend_container(v7, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  objc_autoreleasePoolPop(v3);
}

void sub_1BEB81560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB8157C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  id v5;

  objc_msgSend_processScopedClientProxy(*(void **)(a1 + 32), a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSignificantIssueBehavior_reason_(v5, v4, 6, *(_QWORD *)(a1 + 40));

}

void sub_1BEB81678(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend_deviceContextForTestDeviceReference_(CKDLogicalDeviceContext, a2, *(_QWORD *)(a1 + 32));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deviceScopedStateManager(v6, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1BEB81770(uint64_t a1)
{
  uint64_t v2;
  CKDProcessScopedStateManagerEntitledWrapper *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = [CKDProcessScopedStateManagerEntitledWrapper alloc];
  objc_msgSend_processScopedClientProxy(*(void **)(a1 + 32), v4, v5);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clientEntitlements(v11, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend_initWithEntitlements_(v3, v9, (uint64_t)v8);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v10);

}

void sub_1BEB818C8(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  Class v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  id v9;

  v4 = NSClassFromString(CFSTR("CloudKitTestingDaemon.CKDTestServerManager"));
  if (!v4)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v2, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"-[CKDXPCConnection getDaemonTestServerManagerProxyCreatorWithCompletionHandler:]_block_invoke");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v8, (uint64_t)v7, CFSTR("CKDXPCConnection.m"), 341, CFSTR("Couldn't find CKDTestServerManager in test process"));

  }
  objc_msgSend_sharedManager(v4, v2, v3);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_1BEB81988(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1BEB81AA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1BEB81AB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEB81C60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB820F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  id *v23;
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1BEB82144(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(a1[4], v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("DropToken"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {

      v5 = 0;
    }
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v31 = v13;
    *(_DWORD *)buf = 138412546;
    v35 = v5;
    v36 = 2048;
    v37 = (int)objc_msgSend_code(v6, v32, v33);
    _os_log_debug_impl(&dword_1BE990000, v31, OS_LOG_TYPE_DEBUG, "Fetched web auth token (%@) with response code %ld", buf, 0x16u);

  }
  if (objc_msgSend_code(v6, v14, v15) != 1)
  {
    v17 = (void *)MEMORY[0x1E0C94FF8];
    v18 = *MEMORY[0x1E0C94B20];
    v19 = sub_1BEB10D5C(v6);
    v20 = objc_loadWeakRetained(a1 + 6);
    sub_1BEB10290(v20, v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v6, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorDescription(v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_format_(v17, v28, v18, v19, v21, CFSTR("Error fetching web auth token from server: %@"), v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v30, (uint64_t)v29);

  }
  objc_msgSend_setWebAuthToken_(WeakRetained, v16, (uint64_t)v5);

}

void sub_1BEB8238C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v9 = v4;
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138544130;
    v19 = v11;
    v20 = 2048;
    v21 = WeakRetained;
    v22 = 2114;
    v23 = v14;
    v24 = 2112;
    v25 = v17;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Fetch web auth token operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v18,
      0x2Au);

  }
  objc_msgSend_error(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v8, (uint64_t)v7);

}

uint64_t CKDPResponseOperationResultErrorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPResponseOperationResultErrorClient *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPResponseOperationResultErrorClient);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark()
          && (CKDPResponseOperationResultErrorClientReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_43;
        }
        goto LABEL_50;
      case 2u:
        v17 = objc_alloc_init(CKDPResponseOperationResultErrorServer);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (!PBReaderPlaceMark()
          || (CKDPResponseOperationResultErrorServerReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 56) = v21;
        goto LABEL_48;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 24;
        goto LABEL_37;
      case 5u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 40;
        goto LABEL_37;
      case 6u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 32;
LABEL_37:
        v27 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_48;
      case 7u:
        v17 = objc_alloc_init(CKDPResponseOperationResultErrorExtension);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark()
          || (CKDPResponseOperationResultErrorExtensionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 8u:
        v17 = objc_alloc_init(CKDPResponseOperationResultErrorAuxiliaryError);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark()
          && (CKDPResponseOperationResultErrorAuxiliaryErrorReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_43:
          PBReaderRecallMark();

LABEL_48:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_50:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
    }
  }
}

void sub_1BEB84804()
{
  objc_class *v0;
  const char *v1;
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  id v7;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v3 = (const char *)objc_msgSend_UTF8String(v7, v1, v2);
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create(v3, v4);
  v6 = (void *)qword_1ED702AB8;
  qword_1ED702AB8 = (uint64_t)v5;

}

void sub_1BEB848B8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_strongToStrongObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED702AC8;
  qword_1ED702AC8 = v3;

}

void sub_1BEB85448(void *a1, uint64_t a2, double a3, uint64_t a4, int a5, uint64_t a6)
{
  _QWORD v6[8];
  int v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEB86CC8;
  v6[3] = &unk_1E7835AE8;
  v6[4] = a1;
  v7 = a5;
  *(double *)&v6[5] = a3;
  v6[6] = a2;
  v6[7] = a6;
  sub_1BEB86C00(a1, v6);
}

void sub_1BEB854A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[10];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEB86CEC;
  v6[3] = &unk_1E7835B08;
  v6[4] = a1;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = a2;
  v6[8] = a5;
  v6[9] = a6;
  sub_1BEB86C00(a1, v6);
}

void sub_1BEB854FC(void *a1, uint64_t a2, double a3, uint64_t a4, int a5, uint64_t a6)
{
  _QWORD v6[8];
  int v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEB86DC0;
  v6[3] = &unk_1E7835AE8;
  v6[4] = a1;
  v7 = a5;
  *(double *)&v6[5] = a3;
  v6[6] = a2;
  v6[7] = a6;
  sub_1BEB86C00(a1, v6);
}

void sub_1BEB85558(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[8];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEB86DE4;
  v4[3] = &unk_1E7835B28;
  v4[4] = a1;
  v4[5] = a3;
  v4[6] = a2;
  v4[7] = a4;
  sub_1BEB86C00(a1, v4);
}

void sub_1BEB855AC(void *a1, uint64_t a2)
{
  _QWORD v2[6];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1BEB86E5C;
  v2[3] = &unk_1E78317F8;
  v2[4] = a1;
  v2[5] = a2;
  sub_1BEB86C00(a1, v2);
}

uint64_t sub_1BEB855FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[10];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEB86F0C;
  v7[3] = &unk_1E7835B50;
  v7[6] = a2;
  v7[7] = a3;
  v7[4] = &v8;
  v7[5] = a1;
  v7[8] = a4;
  v7[9] = a5;
  sub_1BEB86C00(a2, v7);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1BEB85694(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1BEB856AC(void *a1, double a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD v7[7];
  int v8;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEB8719C;
  v7[3] = &unk_1E7835B70;
  v7[4] = a1;
  v8 = a5;
  *(double *)&v7[5] = a2;
  v7[6] = a7;
  sub_1BEB86C00(a1, v7);
}

void sub_1BEB85708(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEB87278;
  v4[3] = &unk_1E7835B90;
  v4[4] = a1;
  v4[5] = a3;
  v4[6] = a4;
  sub_1BEB86C00(a1, v4);
}

BOOL sub_1BEB8575C(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  dispatch_semaphore_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  void *v35;
  _QWORD v36[4];
  NSObject *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;

  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  v9 = (void *)MEMORY[0x1C3B83E24]();
  v40 = 0;
  v41 = &v40;
  v42 = 0x3032000000;
  v43 = sub_1BE9BB0E8;
  v44 = sub_1BE9BAE28;
  v45 = 0;
  v10 = a2;
  objc_msgSend_currentProcess(CKDDaemonProcess, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multipeer(v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    if (v16)
    {
      v35 = v9;
      v18 = dispatch_semaphore_create(0);
      objc_msgSend_operation(v10, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_container(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerIdentifier(v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = sub_1BEB872F0;
      v36[3] = &unk_1E7835BB8;
      v38 = &v40;
      v39 = a4;
      v31 = v18;
      v37 = v31;
      objc_msgSend_discoverChunkSignature_forContainerIdentifier_chunkDataCallback_(v16, v32, a3, v30, v36);

      dispatch_semaphore_wait(v31, 0xFFFFFFFFFFFFFFFFLL);
      v9 = v35;
      goto LABEL_11;
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v17, *MEMORY[0x1E0C94B20], 1000, CFSTR("expected non-nil object, expected if feature flag is toggled without restarting cloudd"));
    v33 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v17, *MEMORY[0x1E0C94B20], 1000, CFSTR("feature flag disabled"));
    v33 = objc_claimAutoreleasedReturnValue();
  }
  v31 = v41[5];
  v41[5] = v33;
LABEL_11:

  if (a5)
    *a5 = (id)v41[5];

  _Block_object_dispose(&v40, 8);
  objc_autoreleasePoolPop(v9);
  return a4 && *a4 != 0;
}

void sub_1BEB859B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB85CE4(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;

  objc_msgSend_MMCSEngine(*(void **)(a1 + 32), a2, a3);
  MMCSEngineDestroy();
  return objc_msgSend_setMMCSEngine_(*(void **)(a1 + 32), v4, 0);
}

void sub_1BEB864D8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  MMCSEngineCancelRequests();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Did cancel for MMCS engine wrapper %@ to cancel the requests for %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1BEB86670(uint64_t a1)
{
  sub_1BEB8667C((pthread_t *)(*(_QWORD *)(a1 + 32) + 16), *(void **)(a1 + 40));
}

void sub_1BEB8667C(pthread_t *a1, void *a2)
{
  void (**v3)(_QWORD);

  v3 = a2;
  *a1 = pthread_self();
  v3[2](v3);

  *a1 = 0;
}

void sub_1BEB86790(uint64_t a1)
{
  sub_1BEB8667C((pthread_t *)(*(_QWORD *)(a1 + 32) + 16), *(void **)(a1 + 40));
}

void sub_1BEB8698C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB869AC(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (a3)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  *a4 = 1;
  return result;
}

void sub_1BEB86AF4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEB86C00(void *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  id v15;

  v15 = a2;
  objc_msgSend_MMCS(a1, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_MMCSEngineContext(v5, v6, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v12, (uint64_t)"void runSerialized(void *, void (^__strong)(void))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v11, v14, (uint64_t)v13, CFSTR("CKDMMCSEngineContext.m"), 134, CFSTR("Expected a non nil CKDMMCSEngineContext"));

  }
  objc_msgSend_MMCSRunSerialized_(v10, v8, (uint64_t)v15);

}

uint64_t sub_1BEB86CC8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_updateProgressForItemID_state_progress_error_, *(_QWORD *)(a1 + 48));
}

void sub_1BEB86CEC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  size_t v10;
  const char *v11;
  void *v12;
  id v13;

  v13 = *(id *)(a1 + 32);
  v2 = (void *)MEMORY[0x1E0C99D50];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = MEMORY[0x1C3B82F9C](v3);
  objc_msgSend_dataWithBytes_length_(v2, v5, v3, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a1 + 48))
  {
    objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = strlen(*(const char **)(a1 + 48));
    objc_msgSend_stringWithFileSystemRepresentation_length_(v9, v11, *(_QWORD *)(a1 + 48), v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = 0;
  }
  objc_msgSend_didGetItemID_signature_path_error_results_(v13, v6, *(_QWORD *)(a1 + 56), v8, v12, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));

}

uint64_t sub_1BEB86DC0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_updateProgressForItemID_state_progress_results_, *(_QWORD *)(a1 + 48));
}

void sub_1BEB86DE4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  id v8;

  v2 = (void *)MEMORY[0x1E0C99D50];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = MEMORY[0x1C3B82F9C](v3);
  objc_msgSend_dataWithBytes_length_(v2, v6, v3, v5);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_didPutItemID_signature_results_(v4, v7, *(_QWORD *)(a1 + 48), v8, *(_QWORD *)(a1 + 56));

}

void sub_1BEB86E5C(uint64_t a1)
{
  const char *v2;
  const char *v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  id v11;

  v11 = *(id *)(a1 + 32);
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v2, (uint64_t)CFSTR("metricObject"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend_didGetMetricsForRequest_(v11, v3, (uint64_t)v4);
  objc_msgSend_objectForKey_(*(void **)(a1 + 40), v3, *MEMORY[0x1E0D468C8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_itemGroup(v11, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCloneContext_(v8, v9, (uint64_t)v5);

  objc_msgSend_didCompleteRequestWithError_(v11, v10, 0);
}

void sub_1BEB86F0C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error;
  id v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(a1 + 40);
  v3 = *(id *)(a1 + 48);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    v3 = 0;
  }
  v4 = *(id *)(a1 + 48);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    v4 = 0;
  }
  v7 = *(_QWORD *)(a1 + 56);
  objc_msgSend_MMCS(v2, v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error = objc_msgSend_getMMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error_(CKDMMCSItemGroupContext, v9, v7, v8, v3, v4, &v17);
  v11 = v17;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error != 0;
  v12 = (void *)*MEMORY[0x1E0C952F8];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134218242;
      v19 = v15;
      v20 = 2112;
      v21 = v11;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Created a readerWriter for itemID:%llu error: %@", buf, 0x16u);
    }
    **(_QWORD **)(a1 + 64) = MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error;
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v12);
    v14 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134218242;
      v19 = v16;
      v20 = 2112;
      v21 = v11;
      _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Failed to get the item readerWriter for itemID:%llu error: %@", buf, 0x16u);
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && *(_QWORD *)(a1 + 72))
    **(_QWORD **)(a1 + 72) = v11;

}

void sub_1BEB8719C(uint64_t a1)
{
  const char *v2;
  id v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = *(id *)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 56);
  v5 = -1.0;
  if ((_DWORD)v4 == 4)
    v5 = *(double *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    v9 = *MEMORY[0x1E0D46910];
    v10[0] = v6;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_updateProgressForPackageSectionState_progress_results_(v3, v8, *(unsigned int *)(a1 + 56), v7, v5);
  }
  else
  {
    v7 = 0;
    objc_msgSend_updateProgressForPackageSectionState_progress_results_(v3, v2, v4, 0, v5);
  }

}

void sub_1BEB87278(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  id v8;

  v2 = (void *)MEMORY[0x1E0C99D50];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = MEMORY[0x1C3B82F9C](v3);
  objc_msgSend_dataWithBytes_length_(v2, v6, v3, v5);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_didPutSectionWithSignature_results_(v4, v7, (uint64_t)v8, *(_QWORD *)(a1 + 48));

}

void sub_1BEB872F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = a3;
  if (*(_QWORD *)(a1 + 48))
    **(_QWORD **)(a1 + 48) = MMCSItemReaderWriterCreateWithData();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;
  v7 = v4;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1BEB87744(uint64_t a1, const char *a2)
{
  void *v3;
  char v4;
  const char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD);
  id v10;

  v3 = *(void **)(a1 + 32);
  v10 = 0;
  v4 = objc_msgSend__setupMMCSItemsWithError_(v3, a2, (uint64_t)&v10);
  v7 = v10;
  v8 = *(void **)(a1 + 32);
  if ((v4 & 1) != 0)
  {
    objc_msgSend_startBlock(v8, v5, v6);
    v9 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v9[2](v9, *(_QWORD *)(a1 + 32));

  }
  else
  {
    objc_msgSend_didCompleteRequestWithError_(v8, v5, (uint64_t)v7);
  }

}

void sub_1BEB87AA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB87CD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB87D78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB8AA04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB8AA20(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD);
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  os_signpost_id_t v27;
  uint32_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  objc_msgSend_completionBlock(*(void **)(a1 + 32), v3, v4);
  v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCompletionBlock_(*(void **)(a1 + 32), v6, 0);
  objc_sync_exit(v2);

  if (v5)
  {
    objc_msgSend_itemGroup(*(void **)(a1 + 32), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v5)[2](v5, v9);

  }
  v10 = *(_QWORD *)(a1 + 40) == 0;
  objc_msgSend_signpost(*(void **)(a1 + 32), v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    if (v11)
    {
      objc_msgSend_signpost(*(void **)(a1 + 32), v12, v13);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_log(v29, v30, v31);
      v17 = objc_claimAutoreleasedReturnValue();

      objc_msgSend_signpost(*(void **)(a1 + 32), v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend_identifier(v34, v35, v36);

      if ((unint64_t)(v37 - 1) > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v17))
        goto LABEL_13;
      LOWORD(v38) = 0;
      v25 = "";
      v26 = v17;
      v27 = v37;
      v28 = 2;
      goto LABEL_12;
    }
  }
  else if (v11)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v14, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_identifier(v20, v21, v22);

    if ((unint64_t)(v23 - 1) > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v17))
      goto LABEL_13;
    v24 = *(_QWORD *)(a1 + 40);
    v38 = 138412290;
    v39 = v24;
    v25 = "Error: %@";
    v26 = v17;
    v27 = v23;
    v28 = 12;
LABEL_12:
    _os_signpost_emit_with_name_impl(&dword_1BE990000, v26, OS_SIGNPOST_INTERVAL_END, v27, "CKDMMCSItemGroupContext", v25, (uint8_t *)&v38, v28);
LABEL_13:

  }
}

void sub_1BEB8AC38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1BEB8D628(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  const char *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  id v38;

  v7 = (void *)MEMORY[0x1C3B83E24]();
  v38 = 0;
  objc_msgSend_getFileMetadataWithError_(a2, v8, (uint64_t)&v38);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v38;
  v11 = v10;
  if (a3 && v9)
  {
    v12 = objc_alloc(MEMORY[0x1E0C99E08]);
    v14 = (void *)objc_msgSend_initWithCapacity_(v12, v13, 4);
    objc_msgSend_fileSize(v9, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend_fileSize(v9, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v14, v21, (uint64_t)v20, *MEMORY[0x1E0D467B8]);

    }
    objc_msgSend_fileID(v9, v18, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      objc_msgSend_fileID(v9, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v14, v26, (uint64_t)v25, *MEMORY[0x1E0D467C0]);

    }
    objc_msgSend_generationID(v9, v23, v24);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      objc_msgSend_generationID(v9, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v14, v31, (uint64_t)v30, *MEMORY[0x1E0D467A8]);

    }
    objc_msgSend_modTimeInSeconds(v9, v28, v29);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      objc_msgSend_modTimeInSeconds(v9, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v14, v36, (uint64_t)v35, *MEMORY[0x1E0D467B0]);

    }
    *a3 = v14;
  }
  else if (a4 && !v9)
  {
    *a4 = v10;
  }

  objc_autoreleasePoolPop(v7);
  return v9 != 0;
}

uint64_t sub_1BEB8D7F4(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  const char *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  _BYTE buf[24];
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  objc_msgSend_MMCSItem(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_MMCSRequest(v4, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_MMCS(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operation(v10, v14, v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v36 = 0;
  }
  else
  {
    objc_msgSend_downloadChunkContext(v4, v16, v17);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_MMCS(v36, v19, v20);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_assetCache(v13, v16, v17);
  v21 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v22 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v36;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2112;
    v51 = v21;
    _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "CKDMMCSItemReaderOpen %@ %@ %@", buf, 0x20u);
    if (v21)
      goto LABEL_8;
LABEL_13:
    __assert_rtn("CKDMMCSItemReaderOpen", "CKDMMCSItemGroupContext.m", 902, "assetCache && \"Expected non-nil asset cache\"");
  }
  if (!v21)
    goto LABEL_13;
LABEL_8:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v51 = sub_1BE9BB0F8;
  v52 = sub_1BE9BAE30;
  v53 = 0;
  v46 = 0;
  v47 = &v46;
  v48 = 0x2020000000;
  v49 = 0;
  objc_msgSend_MMCSEngineContext(v13, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = sub_1BEB8E3D0;
  v37[3] = &unk_1E7835BE0;
  v26 = v7;
  v38 = v26;
  v44 = &v46;
  v27 = v4;
  v39 = v27;
  v45 = buf;
  v28 = v18;
  v40 = v28;
  v29 = v10;
  v41 = v29;
  v30 = v13;
  v42 = v30;
  v31 = v21;
  v43 = v31;
  objc_msgSend_MMCSRunSerialized_(v25, v32, (uint64_t)v37);

  v33 = v47;
  v34 = *((unsigned __int8 *)v47 + 24);
  if (a3 && !*((_BYTE *)v47 + 24))
  {
    *a3 = *(id *)(*(_QWORD *)&buf[8] + 40);
    v34 = *((unsigned __int8 *)v33 + 24);
  }

  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(buf, 8);

  return v34;
}

void sub_1BEB8DB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEB8DB4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  void *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v19;

  v13 = (void *)MEMORY[0x1C3B83E24]();
  v19 = 0;
  v15 = objc_msgSend_readBytesAtOffset_bytes_length_bytesRead_error_(a2, v14, a3, a4, a5, a6, &v19);
  v16 = v19;
  v17 = v16;
  if (a7 && (v15 & 1) == 0)
    *a7 = v16;
  objc_autoreleasePoolPop(v13);

  return v15;
}

uint64_t sub_1BEB8DBF4(uint64_t a1, void *a2, _QWORD *a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v11;

  v5 = (void *)MEMORY[0x1C3B83E24]();
  v11 = 0;
  v7 = objc_msgSend_closeWithError_(a2, v6, (uint64_t)&v11);
  v8 = v11;
  v9 = v8;
  if (a3 && (v7 & 1) == 0)
    *a3 = v8;
  objc_autoreleasePoolPop(v5);

  return v7;
}

void sub_1BEB8DC6C(void *a1)
{
  NSObject *v2;
  int v3;
  void *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "invalidate, reader:%p", (uint8_t *)&v3, 0xCu);
  }

}

uint64_t sub_1BEB8DD44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  void *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v19;

  v13 = (void *)MEMORY[0x1C3B83E24]();
  v19 = 0;
  v15 = objc_msgSend_writeBytesAtOffset_bytes_length_bytesWritten_error_(a2, v14, a3, a4, a5, a6, &v19);
  v16 = v19;
  v17 = v16;
  if (a7 && (v15 & 1) == 0)
    *a7 = v16;
  objc_autoreleasePoolPop(v13);

  return v15;
}

uint64_t sub_1BEB8DDEC(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    v6 = (void *)MEMORY[0x1C3B83E24]();
    v7 = a2;
    objc_msgSend_MMCSRequest(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operation(v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_container(v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_serverConfig(v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerID(v16, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0D46798]))
    {
      objc_msgSend_chunkProfileConfigurationVersion_(v19, v23, (uint64_t)v22);
      v24 = objc_claimAutoreleasedReturnValue();
    }
    else if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0D46790]))
    {
      objc_msgSend_chunkProfileConfigurationFileExtensionToProfileMap_(v19, v25, (uint64_t)v22);
      v24 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0D46788]))
      {
        objc_msgSend_MMCSItem(v7, v26, v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_assetChunkerOptions(v29, v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if (v32 && CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0D46780]))
        {
          objc_msgSend_objectForKeyedSubscript_(v32, v33, *MEMORY[0x1E0C95328]);
          v3 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v3 = 0;
        }

        goto LABEL_11;
      }
      objc_msgSend_chunkProfileConfigurationDefaultProfilePolicy_(v19, v26, (uint64_t)v22);
      v24 = objc_claimAutoreleasedReturnValue();
    }
    v3 = v24;
LABEL_11:

    objc_autoreleasePoolPop(v6);
  }
  return v3;
}

void sub_1BEB8E3D0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  os_log_t *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id obj;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend_itemID(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_trackingUUID(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_alloc(MEMORY[0x1E0CB3A28]);
  v10 = (void *)objc_msgSend_initWithUUIDString_(v8, v9, (uint64_t)v7);
  v11 = *(void **)(a1 + 40);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  obj = *(id *)(v12 + 40);
  v14 = objc_msgSend_openWithError_(v11, v13, (uint64_t)&obj);
  objc_storeStrong((id *)(v12 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v14;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    if ((objc_msgSend_shouldFetchAssetContentInMemory(*(void **)(a1 + 56), v15, v16) & 1) == 0)
      objc_msgSend_updateLastAccessTimeForUUID_(*(void **)(a1 + 72), v17, (uint64_t)v10);
  }
  else
  {
    v18 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = (os_log_t *)MEMORY[0x1E0C952B0];
    v20 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v31 = *(void **)(a1 + 40);
      v32 = v20;
      objc_msgSend_MMCSItem(v31, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(*(void **)(a1 + 48), v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      *(_DWORD *)buf = 138412802;
      v42 = (uint64_t)v35;
      v43 = 2114;
      v44 = v38;
      v45 = 2112;
      v46 = v39;
      _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Failed to open %@ for operationID:%{public}@: %@", buf, 0x20u);

    }
    if ((objc_msgSend_shouldFetchAssetContentInMemory(*(void **)(a1 + 56), v21, v22) & 1) == 0
      && (objc_msgSend_isTrackingItemID_(*(void **)(a1 + 64), v23, v4) & 1) == 0)
    {
      if (*v18 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v24 = *v19;
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218242;
        v42 = v4;
        v43 = 2114;
        v44 = v10;
        _os_log_debug_impl(&dword_1BE990000, v24, OS_LOG_TYPE_DEBUG, "Deleting the asset handle with itemID:%llu, UUID:%{public}@", buf, 0x16u);
      }
      v26 = (void *)MEMORY[0x1E0C99E40];
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v25, v4);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_orderedSetWithObject_(v26, v28, (uint64_t)v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 72), v30, (uint64_t)v29, 0);
    }
  }

}

uint64_t sub_1BEB8E8B4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v25 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_43:
        *(_BYTE *)(a1 + 12) = v25 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB8F5C4()
{
  return 1;
}

void sub_1BEB8F5CC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1BEB8F728;
  v10[3] = &unk_1E7835C28;
  objc_copyWeak(&v11, &location);
  objc_msgSend_setSaveCompletionBlock_(v3, v5, (uint64_t)v10);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEB8F77C;
  v7[3] = &unk_1E782E468;
  objc_copyWeak(&v8, &location);
  objc_copyWeak(&v9, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEB8F6EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEB8F728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  const char *v6;
  id WeakRetained;
  id v8;

  v8 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v8)
    objc_msgSend_setError_(WeakRetained, v6, (uint64_t)v8);

}

void sub_1BEB8F77C(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_error(v2, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v8);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v10);

}

void sub_1BEB8F8BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  CKDProtocolTranslator *v14;
  const char *v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v29 = 138412290;
      v30 = v9;
      _os_log_error_impl(&dword_1BE990000, v10, OS_LOG_TYPE_ERROR, "Error while trying to determine userID: %@", (uint8_t *)&v29, 0xCu);
    }
    objc_msgSend_setError_(*(void **)(a1 + 32), v11, (uint64_t)v9);
  }
  else
  {
    v14 = [CKDProtocolTranslator alloc];
    v17 = (void *)objc_msgSend_initWithContainer_databaseScope_(v14, v15, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    if (v17)
    {
      objc_msgSend_setTranslator_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v18 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v29) = 0;
        _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator", (uint8_t *)&v29, 2u);
      }
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v19, *MEMORY[0x1E0C947D8], 1000, CFSTR("CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 32), v21, (uint64_t)v20);

    }
  }
  objc_msgSend_error(*(void **)(a1 + 32), v12, v13);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v24)
  {
    objc_msgSend_translator(*(void **)(a1 + 32), v22, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v25)
      __assert_rtn("-[CKDSerializeRecordModificationsOperation _setupTranslator]_block_invoke", "CKDSerializeRecordModificationsOperation.m", 214, "self.error != nil || self.translator != nil");

  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v26, v27);
  v28 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v28);

}

void sub_1BEB90290(void **a1, void *a2, void *a3, _BYTE *a4)
{
  id v6;
  id v7;
  CKDPRealTimeMessageAssociatedMergeableDeltas *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  void *v45;
  const char *v46;
  void *v47;
  id v48;
  const char *v49;
  const char *v50;
  const char *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  const char *v55;
  _BYTE *v56;
  id v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint8_t buf[4];
  id v65;
  _BYTE v66[128];
  uint64_t v67;

  v56 = a4;
  v67 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = objc_alloc_init(CKDPRealTimeMessageAssociatedMergeableDeltas);
  objc_msgSend_translator(a1[4], v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(a1[5], v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pRecordIdentifierFromRecordID_(v11, v15, (uint64_t)v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRecordIdentifier_(v8, v17, (uint64_t)v16);

  v18 = (void *)objc_opt_new();
  objc_msgSend_setFieldIdentifier_(v8, v19, (uint64_t)v18);

  objc_msgSend_fieldIdentifier(v8, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = v6;
  objc_msgSend_setName_(v22, v23, (uint64_t)v6);

  objc_msgSend_translator(a1[4], v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueID(v7, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pMergeableValueIdentifierFromMergeableValueID_(v26, v30, (uint64_t)v29);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setIdentifier_(v8, v32, (uint64_t)v31);

  v33 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v57 = v7;
  objc_msgSend_deltasToSave(v7, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v60, v66, 16);
  if (v38)
  {
    v41 = v38;
    v42 = *(_QWORD *)v61;
    while (2)
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v61 != v42)
          objc_enumerationMutation(v36);
        v44 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * i);
        objc_msgSend_translator(a1[4], v39, v40, v56);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = 0;
        objc_msgSend_pMergeableDeltaFromDelta_error_(v45, v46, v44, &v59);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = v59;

        if (v48)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v53 = v57;
          v52 = v58;
          v54 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v65 = v48;
            _os_log_error_impl(&dword_1BE990000, v54, OS_LOG_TYPE_ERROR, "Error translating CKMergerableDeltas during serialization: %@", buf, 0xCu);
          }
          objc_msgSend_setError_(a1[4], v55, (uint64_t)v48);
          *v56 = 1;

          goto LABEL_15;
        }
        objc_msgSend_addObject_(v33, v49, (uint64_t)v47);

      }
      v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v39, (uint64_t)&v60, v66, 16);
      if (v41)
        continue;
      break;
    }
  }

  objc_msgSend_setMergeableDeltas_(v8, v50, (uint64_t)v33);
  objc_msgSend_addObject_(a1[6], v51, (uint64_t)v8);
  v53 = v57;
  v52 = v58;
LABEL_15:

}

void sub_1BEB90DC0()
{
  void *v0;

  v0 = (void *)qword_1ED702AD8;
  qword_1ED702AD8 = (uint64_t)&unk_1E78AFBB8;

}

uint64_t sub_1BEB91238(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPShare *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(CKDPShare);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (CKDPShareReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_37;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_39:
          *(_DWORD *)(a1 + 8) = v21;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v18 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v18, a2))
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPShareReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPShareIdentifier *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  void *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v17 = v10 >> 3;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 104), v18);
        if (PBReaderPlaceMark() && CKDPShareIdentifierReadFrom((uint64_t)v18, a2))
          goto LABEL_89;
        goto LABEL_121;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 24;
        goto LABEL_92;
      case 3u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 132) |= 2u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_96:
        v61 = 80;
        goto LABEL_113;
      case 4u:
        v18 = objc_alloc_init(CKDPProtectionInfo);
        v28 = 40;
        goto LABEL_37;
      case 5u:
        v18 = objc_alloc_init(CKDPProtectionInfo);
        v28 = 96;
LABEL_37:
        objc_storeStrong((id *)(a1 + v28), v18);
        if (!PBReaderPlaceMark() || !sub_1BEA1BDA4((uint64_t)v18, a2))
          goto LABEL_121;
        goto LABEL_89;
      case 6u:
        v18 = objc_alloc_init(CKDPParticipant);
        objc_msgSend_addParticipant_((void *)a1, v29, (uint64_t)v18);
        goto LABEL_43;
      case 7u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 120;
        goto LABEL_92;
      case 8u:
        v18 = objc_alloc_init(CKDPParticipant);
        objc_msgSend_addPotentialMatch_((void *)a1, v30, (uint64_t)v18);
LABEL_43:
        if (!PBReaderPlaceMark() || (CKDPParticipantReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_121;
        goto LABEL_89;
      case 9u:
        PBReaderReadData();
        v18 = (CKDPShareIdentifier *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend_addInvitedKeyToRemove_((void *)a1, v31, (uint64_t)v18);
        goto LABEL_90;
      case 0xAu:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 132) |= 0x20u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_100:
        v62 = v34 != 0;
        v63 = 130;
        goto LABEL_118;
      case 0xBu:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 132) |= 8u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v40 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v40 = 0;
LABEL_104:
        v62 = v40 != 0;
        v63 = 128;
        goto LABEL_118;
      case 0xCu:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
        goto LABEL_92;
      case 0xDu:
        v44 = 0;
        v45 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 132) |= 4u;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v47 + 1;
            v24 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_108:
        v61 = 84;
        goto LABEL_113;
      case 0xEu:
        v49 = 0;
        v50 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 132) |= 1u;
        while (2)
        {
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 1;
            v24 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              v14 = v50++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_112:
        v61 = 56;
LABEL_113:
        *(_DWORD *)(a1 + v61) = v24;
        goto LABEL_119;
      case 0xFu:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_BYTE *)(a1 + 132) |= 0x10u;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v14 = v55++ >= 9;
              if (v14)
              {
                v56 = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v56 = 0;
LABEL_117:
        v62 = v56 != 0;
        v63 = 129;
LABEL_118:
        *(_BYTE *)(a1 + v63) = v62;
        goto LABEL_119;
      case 0x10u:
      case 0x11u:
        goto LABEL_25;
      case 0x12u:
        v18 = objc_alloc_init(CKDPShareAccessRequesters);
        objc_storeStrong((id *)(a1 + 88), v18);
        if (!PBReaderPlaceMark() || (sub_1BEBB58CC(v18, a2) & 1) == 0)
          goto LABEL_121;
        goto LABEL_89;
      case 0x13u:
        v18 = objc_alloc_init(CKDPShareAccessBlockedRequesters);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (PBReaderPlaceMark() && (sub_1BEB3A704(v18, a2) & 1) != 0)
        {
LABEL_89:
          PBReaderRecallMark();
LABEL_90:

LABEL_119:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_121:

        return 0;
      default:
        if ((_DWORD)v17 == 101)
        {
          PBReaderReadData();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 112;
        }
        else
        {
          if ((_DWORD)v17 != 102)
          {
LABEL_25:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            goto LABEL_119;
          }
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 48;
        }
LABEL_92:
        v60 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_119;
    }
  }
}

void sub_1BEB94E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB94EAC(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    objc_msgSend_containerPrivacySettings(v2, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setContainerPrivacySettings_(WeakRetained, v9, (uint64_t)v8);

  }
  objc_msgSend_error(v2, v6, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v11, (uint64_t)v10);

}

BOOL sub_1BEB96488(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEB969CC(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = a2;
  objc_msgSend_protocol(v3, v5, v6);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKInvokeAndNilOutReplyBlockWithError_forProtocol_(v2, v7, (uint64_t)v4, v8);

}

void sub_1BEB96B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEB96BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEB96C88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEB97CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  id *v33;

  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB97CF4(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  _QWORD v13[5];
  id v14;
  _QWORD v15[4];
  id v16;
  id location;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v8);

  v9 = v3;
  objc_initWeak(&location, v9);
  v10 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1BEB97E4C;
  v15[3] = &unk_1E7835C28;
  objc_copyWeak(&v16, v4);
  objc_msgSend_setSaveCompletionBlock_(v9, v11, (uint64_t)v15);
  v13[0] = v10;
  v13[1] = 3221225472;
  v13[2] = sub_1BEB97E9C;
  v13[3] = &unk_1E782E4E0;
  objc_copyWeak(&v14, &location);
  v13[4] = WeakRetained;
  objc_msgSend_setCompletionBlock_(v9, v12, (uint64_t)v13);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);

}

void sub_1BEB97E20(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEB97E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id *v5;
  id v6;
  const char *v7;
  id WeakRetained;

  if (a5)
  {
    v5 = (id *)(a1 + 32);
    v6 = a5;
    WeakRetained = objc_loadWeakRetained(v5);
    objc_msgSend_setError_(WeakRetained, v7, (uint64_t)v6);

  }
}

void sub_1BEB97E9C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_error(WeakRetained, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v8, (uint64_t)v7);

  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v5, v6);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v9);

}

void sub_1BEB98160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB98184(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  id v23;
  id location;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v7);

  v8 = v3;
  objc_initWeak(&location, v8);
  v25[0] = 0;
  v25[1] = 0;
  objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getUUIDBytes_(v11, v12, (uint64_t)v25);

  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v13, (uint64_t)v25, 16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAttestationEntropy_(v8, v15, (uint64_t)v14);

  objc_msgSend_setReplaceLocalSerializationsBlobs_(v8, v16, (uint64_t)&unk_1E7835D78);
  v17 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1BEB983DC;
  v22[3] = &unk_1E7835DA0;
  objc_copyWeak(&v23, &location);
  v22[4] = WeakRetained;
  objc_msgSend_setInitialResponseReceivedCallback_(v8, v18, (uint64_t)v22);
  v20[0] = v17;
  v20[1] = 3221225472;
  v20[2] = sub_1BEB9878C;
  v20[3] = &unk_1E782E4E0;
  objc_copyWeak(&v21, &location);
  v20[4] = WeakRetained;
  objc_msgSend_setCompletionBlock_(v8, v19, (uint64_t)v20);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

}

void sub_1BEB98334(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_1BEB98378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD, _QWORD))
{
  void (**v6)(_QWORD, _QWORD, _QWORD);
  id v7;

  v6 = a5;
  v7 = (id)objc_opt_new();
  ((void (**)(_QWORD, id, _QWORD))a5)[2](v6, v7, 0);

}

void sub_1BEB983DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, _QWORD, void *);
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  CKDPCodeFunctionInvokeResponseAttestationResponse *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  PCCAttestation *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  PCCWrappedKey *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  void *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  void (**v74)(id, _QWORD, void *);
  id v75;
  id obj;
  void *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[128];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend_error(WeakRetained, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v14, (uint64_t)v13);

  }
  else
  {
    v15 = [CKDPCodeFunctionInvokeResponseAttestationResponse alloc];
    v17 = (void *)objc_msgSend_initWithData_(v15, v16, (uint64_t)v5);
    objc_msgSend_attestations(v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_count(v20, v21, v22);

    if (!v23)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v24, *MEMORY[0x1E0C94B20], 9000, CFSTR("Did not receive attestation from server"));
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v6[2](v6, 0, v70);

      goto LABEL_4;
    }
    v73 = WeakRetained;
    v74 = v6;
    v75 = v5;
    v25 = objc_alloc(MEMORY[0x1E0C99DE8]);
    objc_msgSend_attestations(v17, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_count(v28, v29, v30);
    v77 = (void *)objc_msgSend_initWithCapacity_(v25, v32, v31);

    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v72 = v17;
    objc_msgSend_attestations(v17, v33, v34);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v78, v82, 16);
    if (v36)
    {
      v37 = v36;
      v38 = *(_QWORD *)v79;
      do
      {
        for (i = 0; i != v37; ++i)
        {
          if (*(_QWORD *)v79 != v38)
            objc_enumerationMutation(obj);
          v40 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
          v41 = [PCCAttestation alloc];
          objc_msgSend_pckCertificate(v40, v42, v43);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appQuote(v40, v45, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_aqeQuote(v40, v48, v49);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_routingToken(v40, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = (void *)objc_msgSend_initWithCertificate_applicationEnclaveQuote_quotingEnclaveQuote_routingToken_(v41, v54, (uint64_t)v44, v47, v50, v53);

          v56 = [PCCWrappedKey alloc];
          objc_msgSend_pccKey(*(void **)(a1 + 32), v57, v58);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_permittedRemoteMeasurement(*(void **)(a1 + 32), v60, v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = (void *)objc_msgSend_initWithKey_permittedRemoteMeasurement_attestation_(v56, v63, (uint64_t)v59, v62, v55);

          if (v64)
            objc_msgSend_addObject_(v77, v65, (uint64_t)v64);

        }
        v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v66, (uint64_t)&v78, v82, 16);
      }
      while (v37);
    }

    WeakRetained = v73;
    if (!objc_msgSend_count(v77, v67, v68))
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v69, *MEMORY[0x1E0C94B20], 9001, CFSTR("Could not verify attestation using the permittedRemoteMeasurement provided"));
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v74;
      v74[2](v74, 0, v71);

      v5 = v75;
      goto LABEL_4;
    }
    objc_msgSend_setPccWrappedKeys_(*(void **)(a1 + 32), v69, (uint64_t)v77);

    v6 = v74;
    v5 = v75;
  }
  v6[2](v6, MEMORY[0x1E0C9AA60], 0);
LABEL_4:

}

void sub_1BEB9878C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_error(WeakRetained, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v8, (uint64_t)v7);

  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v5, v6);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v9);

}

void sub_1BEB98990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB989B4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEB98A98;
  v5[3] = &unk_1E7831E10;
  objc_copyWeak(&v6, &location);
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v5[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);

}

void sub_1BEB98A74(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEB98A98(void **a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  id v18;
  const char *v19;
  CKDTrustedTargetWrappedKey *v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_transcodeServerPublicKey(WeakRetained, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 || !v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v24 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v27 = v24;
      objc_msgSend_error(WeakRetained, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v36 = v30;
      _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Failed to fetch public key from trusted target: %@", buf, 0xCu);

    }
  }
  else
  {
    objc_msgSend_trustedTargetKey(a1[4], v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_key(v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = 0;
    v34 = 0;
    v16 = CKEncryptWithPublicKey(v6, v15, 0, &v34, &v33);
    v17 = v34;
    v18 = v33;

    if (v16 && v17)
    {
      v20 = [CKDTrustedTargetWrappedKey alloc];
      v22 = (void *)objc_msgSend_initWithWrappedKey_publicKey_(v20, v21, (uint64_t)v17, v6);
      objc_msgSend_setTrustedTargetWrappedKey_(a1[4], v23, (uint64_t)v22);
    }
    else
    {
      objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v19, *MEMORY[0x1E0C94B20], 1000, v18, CFSTR("Failed to wrap invocation key"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(v3, v31, (uint64_t)v22);
    }

  }
  objc_msgSend_stateTransitionGroup(v3, v25, v26);
  v32 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v32);

}

void sub_1BEB98E7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  os_log_t *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  int isAppleInternalInstall;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  os_log_t v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  int v38;
  int v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  v9 = (_QWORD *)MEMORY[0x1E0C95300];
  v10 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      v39 = 138412290;
      v40 = v8;
      _os_log_error_impl(&dword_1BE990000, v11, OS_LOG_TYPE_ERROR, "Error fetching configuration to check if we should send record keys: %@", (uint8_t *)&v39, 0xCu);
    }
    v14 = 0;
  }
  else
  {
    objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v6, v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isAppleInternalInstall = objc_msgSend_isAppleInternalInstall(v15, v16, v17);

    if (isAppleInternalInstall)
    {
      if (*v9 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v21 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v39) = 0;
        _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Always sending record keys for internal installs", (uint8_t *)&v39, 2u);
      }
      v14 = 1;
    }
    else
    {
      objc_msgSend_containerID(*(void **)(a1 + 32), v19, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend_allowCloudMediaProcessingOffloadForGM_(v5, v23, (uint64_t)v22);

    }
  }
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v12, v13);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v24, v25, (uint64_t)CFSTR("AllowSendingRecordKeysForCMP"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      if (*v9 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v27 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        v35 = v27;
        v38 = objc_msgSend_BOOLValue(v26, v36, v37);
        v39 = 67109120;
        LODWORD(v40) = v38;
        _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, "Overriding allowSendingRecordPCSKeys = %d", (uint8_t *)&v39, 8u);

      }
      v14 = objc_msgSend_BOOLValue(v26, v28, v29);
    }

  }
  if (*v9 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v30 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    v39 = 67109120;
    LODWORD(v40) = v14;
    _os_log_debug_impl(&dword_1BE990000, v30, OS_LOG_TYPE_DEBUG, "Setting shouldSendRecordPCSKeys = %d", (uint8_t *)&v39, 8u);
  }
  objc_msgSend_setShouldSendRecordPCSKeys_(*(void **)(a1 + 32), v31, v14);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v32, v33);
  v34 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v34);

}

uint64_t sub_1BEB995D0(uint64_t a1, const char *a2)
{
  return objc_msgSend_encryptData_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

void sub_1BEB995DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22[2];
  id location;

  v5 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  objc_initWeak(&location, *(id *)(a1 + 40));
  objc_msgSend_container(*(void **)(a1 + 40), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pcsCache(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v5, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = *(_QWORD *)(a1 + 40);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1BEB99744;
  v18[3] = &unk_1E7835E18;
  objc_copyWeak(v22, &location);
  v16 = v5;
  v19 = v16;
  v20 = *(id *)(a1 + 48);
  v22[1] = a3;
  v21 = *(id *)(a1 + 32);
  objc_msgSend_fetchPCSForRecordWithID_forOperation_options_withCompletionHandler_(v11, v17, (uint64_t)v14, v15, 0, v18);

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);

}

void sub_1BEB99720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB99744(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  const char *v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  NSObject *v53;
  __int16 v54;
  id v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = objc_msgSend_pcs(v6, v8, v9);

  if (WeakRetained)
  {
    if (v5)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v11 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v12 = *(void **)(a1 + 32);
        v13 = v11;
        objc_msgSend_recordID(v12, v14, v15);
        v16 = objc_claimAutoreleasedReturnValue();
        v52 = 138412546;
        v53 = v16;
        v54 = 2112;
        v55 = v5;
        _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, "Error fetching PCS data in secure compute operation for %@: %@", (uint8_t *)&v52, 0x16u);
        goto LABEL_25;
      }
    }
    else
    {
      if (v10)
      {
        PCSFPGetCurrentMasterKey();
        v13 = objc_claimAutoreleasedReturnValue();
        if (*MEMORY[0x1E0C95280])
        {
          objc_msgSend_unitTestOverrides(WeakRetained, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v20, v21, (uint64_t)CFSTR("SendFakeEncryptedMasterKeysInRecordTransports"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend_BOOLValue(v22, v23, v24);

          if (v25)
          {
            objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v26, v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_UUIDString(v28, v29, v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_dataUsingEncoding_(v31, v32, 4);
            v33 = objc_claimAutoreleasedReturnValue();

            v13 = v33;
          }
        }
        v34 = (void *)*MEMORY[0x1E0C952F8];
        if (v13)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], v34);
          v35 = (void *)*MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            v43 = *(void **)(a1 + 32);
            v44 = v35;
            objc_msgSend_recordID(v43, v45, v46);
            v47 = objc_claimAutoreleasedReturnValue();
            v52 = 138412290;
            v53 = v47;
            _os_log_debug_impl(&dword_1BE990000, v44, OS_LOG_TYPE_DEBUG, "Setting master key on secure compute operation for %@", (uint8_t *)&v52, 0xCu);

          }
          objc_msgSend_encryptData_(WeakRetained, v36, (uint64_t)v13);
          v16 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 40), v37, (uint64_t)v16, *(_QWORD *)(a1 + 64));
        }
        else
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], v34);
          v42 = (void *)*MEMORY[0x1E0C952B0];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
            goto LABEL_29;
          v48 = *(void **)(a1 + 32);
          v16 = v42;
          objc_msgSend_recordID(v48, v49, v50);
          v51 = objc_claimAutoreleasedReturnValue();
          v52 = 138412290;
          v53 = v51;
          _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Couldn't get master key in secure compute operation for %@", (uint8_t *)&v52, 0xCu);

        }
LABEL_25:

LABEL_29:
        goto LABEL_30;
      }
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v38 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v39 = *(void **)(a1 + 32);
        v13 = v38;
        objc_msgSend_recordID(v39, v40, v41);
        v16 = objc_claimAutoreleasedReturnValue();
        v52 = 138412290;
        v53 = v16;
        _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "No error, but also no PCS data during secure compute operation for record %@", (uint8_t *)&v52, 0xCu);
        goto LABEL_25;
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v52) = 0;
      _os_log_error_impl(&dword_1BE990000, v17, OS_LOG_TYPE_ERROR, "We lost ourself trying to fetch PCS to get record keys for secure compute", (uint8_t *)&v52, 2u);
    }
  }
LABEL_30:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1BEB99BBC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  objc_msgSend_pccKey(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clear(v4, v5, v6);

  objc_msgSend_setPccKey_(*(void **)(a1 + 32), v7, 0);
  objc_msgSend_replaceLocalSerializationsBlobs(*(void **)(a1 + 32), v8, v9);
  v10 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BEB99C5C;
  v14[3] = &unk_1E7835E68;
  v13 = *(_QWORD *)(a1 + 40);
  v14[4] = *(_QWORD *)(a1 + 32);
  ((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD *))v10)[2](v10, v13, v11, v12, v14);

}

void sub_1BEB99C5C(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;

  v9 = a3;
  objc_msgSend_setSerializedArguments_(*(void **)(a1 + 32), v5, a2);
  if (v9)
    objc_msgSend_setError_(*(void **)(a1 + 32), v6, (uint64_t)v9);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEB99F60(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEB99FA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  NSObject *v41;
  const char *v42;
  id v43;
  void *v44;
  uint8_t buf[4];
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_translator(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTranslator_(WeakRetained, v12, (uint64_t)v11);

  v15 = objc_msgSend_code(v6, v13, v14);
  v16 = (void *)*MEMORY[0x1E0C952F8];
  v17 = *MEMORY[0x1E0C95300];
  if (v15 == 1)
  {
    if (v17 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v16);
    v18 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Function invocation completed", buf, 2u);
    }
    objc_msgSend_setSerializedResponse_(WeakRetained, v19, (uint64_t)v5);
  }
  else
  {
    if (v17 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v16);
    v43 = v5;
    v20 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v6;
      _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Error %@ when invoking function", buf, 0xCu);
    }
    v44 = (void *)MEMORY[0x1E0C94FF8];
    v21 = *MEMORY[0x1E0C94B20];
    v22 = sub_1BEB10D5C(v6);
    objc_msgSend_request(WeakRetained, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEB10290(v25, v6);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_functionName(WeakRetained, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_serviceName(WeakRetained, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v6, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorDescription(v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_format_(v44, v39, v21, v22, v26, CFSTR("Error %@ when invoking function %@ on service %@: %@"), v6, v29, v32, v38);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = v43;
    v41 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v40;
      _os_log_debug_impl(&dword_1BE990000, v41, OS_LOG_TYPE_DEBUG, "Error %@", buf, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v42, (uint64_t)v40);

  }
}

void sub_1BEB9A2D4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  __CFString *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  const __CFString *v17;
  __int16 v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR(" with error ");
    v11 = &stru_1E7838F48;
    if (v6)
      v11 = v6;
    else
      v10 = &stru_1E7838F48;
    v16 = 138543618;
    v17 = v10;
    v18 = 2112;
    v19 = v11;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "CKCode Function invocation finished%{public}@%@", (uint8_t *)&v16, 0x16u);
  }
  objc_msgSend_error(WeakRetained, v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v6);
  objc_msgSend_stateTransitionGroup(WeakRetained, v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v15);

}

void sub_1BEB9A6A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEB9A6F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  int hasCode;
  void *v16;
  os_log_t *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  id v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  int hasValue;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  NSObject *v93;
  const char *v94;
  void *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  int v99;
  const char *v100;
  void *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  uint64_t v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  void *v114;
  NSObject *v115;
  const char *v116;
  void *v117;
  id v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint8_t v124[128];
  uint8_t buf[4];
  id v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_translator(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTranslator_(WeakRetained, v12, (uint64_t)v11);

  hasCode = objc_msgSend_hasCode(v6, v13, v14);
  v16 = (void *)*MEMORY[0x1E0C952F8];
  v17 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (hasCode)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v16);
    v18 = *v17;
    if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v126 = v6;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Error %@ when invoking function", buf, 0xCu);
    }
    v21 = objc_msgSend_code(v6, v19, v20);
    v22 = 1000;
    if (v21 == 2)
      v22 = 6000;
    if (v21 == 1)
      v22 = 1013;
    v119 = v22;
    v23 = (void *)objc_opt_new();
    if (objc_msgSend_hasMessage(v6, v24, v25))
    {
      objc_msgSend_message(v6, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v23, v29, (uint64_t)v28, CFSTR("ServerMessage"));

    }
    if (objc_msgSend_hasAuxiliaryDomain(v6, v26, v27))
    {
      objc_msgSend_auxiliaryDomain(v6, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_length(v32, v33, v34) || !objc_msgSend_hasAuxiliaryCode(v6, v35, v36))
        goto LABEL_49;
      v39 = objc_msgSend_auxiliaryCode(v6, v37, v38);

      if (v39)
      {
        if (!objc_msgSend_auxiliaryUserInfosCount(v6, v30, v31))
        {
          v32 = 0;
          goto LABEL_48;
        }
        v117 = v23;
        v118 = v5;
        v42 = objc_alloc(MEMORY[0x1E0C99E08]);
        v45 = objc_msgSend_auxiliaryUserInfosCount(v6, v43, v44);
        v32 = (void *)objc_msgSend_initWithCapacity_(v42, v46, v45);
        v120 = 0u;
        v121 = 0u;
        v122 = 0u;
        v123 = 0u;
        objc_msgSend_auxiliaryUserInfos(v6, v47, v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v120, v124, 16);
        if (!v51)
          goto LABEL_39;
        v54 = v51;
        v55 = *(_QWORD *)v121;
        while (1)
        {
          for (i = 0; i != v54; ++i)
          {
            if (*(_QWORD *)v121 != v55)
              objc_enumerationMutation(v49);
            v57 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * i);
            if (objc_msgSend_hasKey(v57, v52, v53))
            {
              objc_msgSend_key(v57, v52, v53);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend_length(v58, v59, v60))
              {
                hasValue = objc_msgSend_hasValue(v57, v61, v62);

                if (!hasValue)
                  continue;
                objc_msgSend_value(v57, v52, v53);
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend_hasDoubleValue(v58, v64, v65))
                {
                  v68 = (void *)MEMORY[0x1E0CB37E8];
                  objc_msgSend_doubleValue(v58, v66, v67);
                  objc_msgSend_numberWithDouble_(v68, v69, v70);
                  v71 = objc_claimAutoreleasedReturnValue();
                  goto LABEL_35;
                }
                if (objc_msgSend_hasInt64Value(v58, v66, v67))
                {
                  v76 = (void *)MEMORY[0x1E0CB37E8];
                  v77 = objc_msgSend_int64Value(v58, v74, v75);
                  objc_msgSend_numberWithInteger_(v76, v78, v77);
                  v71 = objc_claimAutoreleasedReturnValue();
                  goto LABEL_35;
                }
                if (objc_msgSend_hasBoolValue(v58, v74, v75))
                {
                  v81 = (void *)MEMORY[0x1E0CB37E8];
                  v82 = objc_msgSend_BOOLValue(v58, v79, v80);
                  objc_msgSend_numberWithBool_(v81, v83, v82);
                  v71 = objc_claimAutoreleasedReturnValue();
                  goto LABEL_35;
                }
                if (objc_msgSend_hasStringValue(v58, v79, v80))
                {
                  objc_msgSend_stringValue(v58, v84, v85);
                  v71 = objc_claimAutoreleasedReturnValue();
                  goto LABEL_35;
                }
                if (objc_msgSend_hasBytesValue(v58, v84, v85))
                {
                  objc_msgSend_bytesValue(v58, v86, v87);
                  v71 = objc_claimAutoreleasedReturnValue();
LABEL_35:
                  v88 = (void *)v71;
                  objc_msgSend_key(v57, v72, v73);
                  v89 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setObject_forKeyedSubscript_(v32, v90, (uint64_t)v88, v89);

                }
              }

              continue;
            }
          }
          v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v52, (uint64_t)&v120, v124, 16);
          if (!v54)
          {
LABEL_39:

            if (!objc_msgSend_count(v32, v91, v92))
            {

              v32 = 0;
            }
            v23 = v117;
            v5 = v118;
            v17 = (os_log_t *)MEMORY[0x1E0C952B0];
LABEL_48:
            v95 = (void *)MEMORY[0x1E0CB35C8];
            objc_msgSend_auxiliaryDomain(v6, v40, v41);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = objc_msgSend_auxiliaryCode(v6, v97, v98);
            objc_msgSend_errorWithDomain_code_userInfo_(v95, v100, (uint64_t)v96, v99, v32);
            v101 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_setObject_forKeyedSubscript_(v23, v102, (uint64_t)v101, *MEMORY[0x1E0CB3388]);
            objc_msgSend_setObject_forKeyedSubscript_(v23, v103, (uint64_t)v101, *MEMORY[0x1E0C94B30]);

LABEL_49:
            break;
          }
        }
      }
    }
    if (!objc_msgSend_count(v23, v30, v31))
    {

      v23 = 0;
    }
    v106 = (_QWORD *)MEMORY[0x1E0C95300];
    v107 = (void *)MEMORY[0x1E0C94FF8];
    v108 = *MEMORY[0x1E0C94B20];
    objc_msgSend_functionName(WeakRetained, v104, v105);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_serviceName(WeakRetained, v110, v111);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_format_(v107, v113, v108, v119, v23, CFSTR("Error when locally invoking function %@ on service %@"), v109, v112);
    v114 = (void *)objc_claimAutoreleasedReturnValue();

    if (*v106 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v115 = *v17;
    if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v126 = v114;
      _os_log_debug_impl(&dword_1BE990000, v115, OS_LOG_TYPE_DEBUG, "Error %@", buf, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v116, (uint64_t)v114);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v16);
    v93 = *v17;
    if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v93, OS_LOG_TYPE_DEBUG, "Function invocation completed", buf, 2u);
    }
    objc_msgSend_setSerializedResponse_(WeakRetained, v94, (uint64_t)v5);
  }

}

void sub_1BEB9AD00(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  __CFString *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  const __CFString *v17;
  __int16 v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR(" with error ");
    v11 = &stru_1E7838F48;
    if (v6)
      v11 = v6;
    else
      v10 = &stru_1E7838F48;
    v16 = 138543618;
    v17 = v10;
    v18 = 2112;
    v19 = v11;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "CKCode Local Function invocation finished%{public}@%@", (uint8_t *)&v16, 0x16u);
  }
  objc_msgSend_error(WeakRetained, v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v6);
  objc_msgSend_stateTransitionGroup(WeakRetained, v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v15);

}

void sub_1BEB9AF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEB9AFA0(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  CKDPRecord *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  id v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  id obj;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v6)
  {
    objc_msgSend_setError_(a1[4], v7, (uint64_t)v6);
  }
  else if (objc_msgSend_count(v5, v7, v8))
  {
    v31 = v5;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    obj = v5;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v34, v38, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v35;
      while (2)
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v35 != v14)
            objc_enumerationMutation(obj);
          v16 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i);
          v17 = [CKDPRecord alloc];
          v19 = (void *)objc_msgSend_initWithData_(v17, v18, v16);
          objc_msgSend_translator(WeakRetained, v20, v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = 0;
          objc_msgSend_recordFromPRecord_error_(v22, v23, (uint64_t)v19, &v33);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = v33;

          if (!v24)
          {
            if (!v25)
            {
              objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v26, *MEMORY[0x1E0C94B20], 1017, CFSTR("Invalid pRecord: %@"), v19);
              v25 = (id)objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend_setError_(a1[4], v26, (uint64_t)v25);

            goto LABEL_16;
          }
          objc_msgSend_addObject_(a1[5], v26, (uint64_t)v24);

        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v34, v38, 16);
        if (v13)
          continue;
        break;
      }
    }
LABEL_16:

    v5 = v31;
  }
  objc_msgSend_setResponseRecords_(a1[4], v10, (uint64_t)a1[5]);
  objc_msgSend_stateTransitionGroup(a1[4], v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

void sub_1BEB9B2CC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_responseRecords(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFullRecordsToFetch_(v3, v7, (uint64_t)v6);

  objc_msgSend_setUseRecordCache_(v3, v8, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v9 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BEB9B520;
  v21[3] = &unk_1E782F998;
  objc_copyWeak(&v23, &location);
  v22 = *(id *)(a1 + 40);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v10, (uint64_t)v21);
  v19[0] = v9;
  v19[1] = 3221225472;
  v19[2] = sub_1BEB9B654;
  v19[3] = &unk_1E782F948;
  objc_copyWeak(&v20, &location);
  objc_msgSend_setRecordFetchProgressBlock_(v3, v11, (uint64_t)v19);
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = sub_1BEB9B6D8;
  v17[3] = &unk_1E782FD70;
  objc_copyWeak(&v18, &location);
  objc_msgSend_setRecordFetchCommandBlock_(v3, v12, (uint64_t)v17);
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = sub_1BEB9B768;
  v14[3] = &unk_1E782E468;
  objc_copyWeak(&v15, &location);
  objc_copyWeak(&v16, &from);
  objc_msgSend_setCompletionBlock_(v3, v13, (uint64_t)v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);

  objc_destroyWeak(&v23);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEB9B4C4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 96));
  objc_destroyWeak((id *)(v6 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEB9B520(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  char v18;
  const char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void (**v25)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v26;

  v26 = a2;
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_container(WeakRetained, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_returnPCSMetadata(v15, v16, v17))
  {

    goto LABEL_5;
  }
  v18 = CKIsPCSError();

  v21 = v26;
  if ((v18 & 1) == 0)
  {
    objc_msgSend_fillOutPCSMetadataInfo(v26, v19, v20);
LABEL_5:
    v21 = v26;
  }
  if (v21 && v7)
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v19, (uint64_t)v26, v7);
  if (v8)
    objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v8);
  objc_msgSend_recordFetchCompletionBlock(WeakRetained, v19, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    objc_msgSend_recordFetchCompletionBlock(WeakRetained, v23, v24);
    v25 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id, id))v25)[2](v25, v26, v7, v8);

  }
}

void sub_1BEB9B654(uint64_t a1, void *a2, double a3)
{
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD, double);
  id v12;

  v12 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_recordFetchProgressBlock(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend_recordFetchProgressBlock(WeakRetained, v9, v10);
    v11 = (void (**)(_QWORD, _QWORD, double))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, double))v11)[2](v11, v12, a3);

  }
}

void sub_1BEB9B6D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  id v13;

  v13 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_recordFetchCommandBlock(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_recordFetchCommandBlock(WeakRetained, v10, v11);
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id))v12)[2](v12, v13, v5);

  }
}

void sub_1BEB9B768(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD);
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_error(v2, v6, v7);
    v8 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v8);
  }
  else
  {
    objc_msgSend_replaceWireSerializations(WeakRetained, v6, v7);
    v8 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend_responseRecords(WeakRetained, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v8)[2](v8, v12);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v15);

}

void sub_1BEB9C40C()
{
  void *v0;

  v0 = (void *)qword_1ED702AE8;
  qword_1ED702AE8 = (uint64_t)&unk_1E78AFBE0;

}

BOOL CKDPMergeableDeltaSaveRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPMergeableValueIdentifier *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !sub_1BEAE7D18((uint64_t)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPMergeableDelta);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEB9D738(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  CKDPSubscriptionNotification *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  const char *v37;
  const char *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = (CKDPSubscriptionNotification *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 48), v18);
        if (PBReaderPlaceMark() && (CKDPIdentifierReadFrom() & 1) != 0)
          goto LABEL_69;
        goto LABEL_96;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 92) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_73:
        v45 = 32;
        goto LABEL_78;
      case 3u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 92) |= 2u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_77:
        v45 = 64;
LABEL_78:
        *(_DWORD *)(a1 + v45) = v21;
        goto LABEL_93;
      case 4u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            while (1)
            {
              v34 = *v3;
              v35 = *(_QWORD *)(a2 + v34);
              if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
                break;
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_48;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (1)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
              break;
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_92;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_92:
          PBRepeatedInt32Add();
        }
        goto LABEL_93;
      case 5u:
        v18 = objc_alloc_init(CKDPSubscriptionNotification);
        objc_storeStrong((id *)(a1 + 56), v18);
        if (!PBReaderPlaceMark() || (sub_1BEC86548((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_96;
        goto LABEL_69;
      case 6u:
        v18 = objc_alloc_init(CKDPQueryFilter);
        objc_msgSend_addFilters_((void *)a1, v37, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (sub_1BEB0E11C((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_96;
        goto LABEL_69;
      case 7u:
        v18 = objc_alloc_init(CKDPRecordType);
        objc_msgSend_addRecordTypes_((void *)a1, v38, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_96;
        goto LABEL_69;
      case 8u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_BYTE *)(a1 + 92) |= 4u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_82:
        *(_BYTE *)(a1 + 88) = v41 != 0;
        goto LABEL_93;
      case 0xAu:
        v18 = (CKDPSubscriptionNotification *)objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 80), v18);
        if (PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom() & 1) != 0)
        {
LABEL_69:
          PBReaderRecallMark();

LABEL_93:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_96:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_93;
    }
  }
}

uint64_t sub_1BEB9F0EC(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_setCloneContext_(a3, a2, *(_QWORD *)(a1 + 32));
}

BOOL sub_1BEB9F2CC(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPFieldActionReplaceListRange *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(CKDPFieldActionReplaceListRange);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || !sub_1BEAA1248((id *)&v18->super.super.isa, a2))
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPFieldActionInsertIntoList);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark() || (sub_1BEAB6878((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_34;
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_31:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPFieldActionDeleteListRange);
    objc_storeStrong(a1 + 1, v18);
    if (!PBReaderPlaceMark() || (sub_1BEB668AC((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_34;
    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

SecCertificateRef sub_1BEBA0318(uint64_t a1, const __CFData *a2)
{
  return SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
}

BOOL sub_1BEBA0B9C(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPZoneRetrieveResponseZoneSummary *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v21 = objc_claimAutoreleasedReturnValue();
        v18 = (CKDPZoneRetrieveResponseZoneSummary *)a1[2];
        a1[2] = v21;
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPZoneRetrieveResponseZoneSummary);
        objc_msgSend_addZoneSummary_(a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (sub_1BEAC1F8C((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_33;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPAnonymousZoneInfo);
    objc_msgSend_addAnonymousZoneInfo_(a1, v20, (uint64_t)v18);
    if (!PBReaderPlaceMark() || !sub_1BEB5A474((uint64_t)v18, a2))
    {
LABEL_33:

      return 0;
    }
LABEL_26:
    PBReaderRecallMark();
LABEL_28:

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBA318C()
{
  void *v0;

  v0 = (void *)qword_1ED700A58;
  qword_1ED700A58 = (uint64_t)&unk_1E78AFC08;

}

BOOL sub_1BEBA32F4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPMergeableValueIdentifier *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !sub_1BEAE7D18((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(CKDPMergeableValueIdentifier **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBA3E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 256), 8);
  _Block_object_dispose((const void *)(v45 - 224), 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1BEBA3EE4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *Message;
  dispatch_once_t *v15;
  void *v16;
  const char *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  unint64_t v65;
  id v66;
  const char *v67;
  void *v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  NSObject *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *log;
  uint8_t buf[4];
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  void *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signature(*(void **)(a1 + 40), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSignature_(*(void **)(a1 + 32), v5, (uint64_t)v4);

  objc_msgSend_verificationKey(*(void **)(a1 + 40), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setVerificationKey_(*(void **)(a1 + 32), v9, (uint64_t)v8);

  v10 = objc_opt_class();
  objc_msgSend_setClassOfNextMessage_(*(void **)(a1 + 48), v11, v10);
  Message = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
  v15 = (dispatch_once_t *)MEMORY[0x1E0C95300];
  do
  {
    v16 = Message;
    Message = (void *)objc_msgSend_nextMessage(*(void **)(a1 + 48), v12, v13);

    if (!Message)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      {
        objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E0C94FF8], v17, *MEMORY[0x1E0C947D8], 1000, *(_QWORD *)(a1 + 56), CFSTR("Failed reading section object from manifest"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (*v15 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v93 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v97 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          v103 = v97;
          _os_log_debug_impl(&dword_1BE990000, v93, OS_LOG_TYPE_DEBUG, "Found empty package %@", buf, 0xCu);
        }
        v46 = 0;
      }
      goto LABEL_41;
    }
    v18 = objc_alloc(MEMORY[0x1E0C94FD8]);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    objc_msgSend_signature(Message, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_size(Message, v23, v24);
    objc_msgSend_verificationKey(Message, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)objc_msgSend_initWithIndex_signature_size_paddedSize_verificationKey_(v18, v29, v19, v22, v25, 0, v28);

    objc_msgSend_addSection_(*(void **)(a1 + 32), v31, (uint64_t)v30);
    objc_msgSend_addObject_(*(void **)(a1 + 64), v32, (uint64_t)v30);
    if (*v15 != -1)
      dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v33 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v39 = v33;
      v42 = objc_msgSend_size(Message, v40, v41);
      objc_msgSend_signature(Message, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v103 = v38;
      v104 = 2048;
      v105 = v42;
      v106 = 2112;
      v107 = v45;
      _os_log_debug_impl(&dword_1BE990000, v39, OS_LOG_TYPE_DEBUG, "Read section with index %ld, size %lld, signature %@", buf, 0x20u);

    }
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) += objc_msgSend_size(v30, v34, v35);

  }
  while (!objc_msgSend_lastSection(Message, v36, v37));
  if (*v15 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v47 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    v96 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    v103 = v95;
    v104 = 2112;
    v105 = v96;
    _os_log_debug_impl(&dword_1BE990000, v47, OS_LOG_TYPE_DEBUG, "Read %ld sections from manifest for package %@", buf, 0x16u);
  }
  v48 = objc_opt_class();
  objc_msgSend_setClassOfNextMessage_(*(void **)(a1 + 48), v49, v48);
  v52 = 0;
  v53 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
  v54 = 0x1E0C94000uLL;
  while (1)
  {
    v55 = v52;
    v52 = (void *)objc_msgSend_nextMessage(*(void **)(a1 + 48), v50, v51);

    if (!v52)
    {
      objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E0C94FF8], v56, *MEMORY[0x1E0C947D8], 1000, *(_QWORD *)(a1 + 56), CFSTR("Failed reading item object from manifest"));
      goto LABEL_38;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) && objc_msgSend_size(v52, v56, v57))
      break;
    if (!v53)
      goto LABEL_21;
LABEL_23:
    v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
    v65 = objc_msgSend_size(v52, v56, v57) + v63;
    if (v65 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24)
      || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) < v65)
    {
      objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E0C94FF8], v64, *MEMORY[0x1E0C947D8], 1000, *(_QWORD *)(a1 + 56), CFSTR("Package manifest is corrupt - item boundary is not aligned with section boundary"));
LABEL_38:
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_40;
    }
    v66 = objc_alloc(*(Class *)(v54 + 4048));
    v68 = (void *)objc_msgSend_initWithFileURL_(v66, v67, 0);
    objc_msgSend_setPackageIndex_(v68, v69, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24));
    v72 = objc_msgSend_size(v52, v70, v71);
    objc_msgSend_setSize_(v68, v73, v72);
    objc_msgSend_signature(v52, v74, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSignature_(v68, v77, (uint64_t)v76);

    objc_msgSend_setSectionIndex_(v68, v78, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24));
    objc_msgSend_setOffset_(v68, v79, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24));
    objc_msgSend_addItem_(*(void **)(a1 + 32), v80, (uint64_t)v68);
    if (*v15 != -1)
      dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v81 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v99 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
      v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v98 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
      log = v81;
      v88 = v54;
      v89 = objc_msgSend_size(v52, v86, v87);
      objc_msgSend_signature(v52, v90, v91);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134219010;
      v103 = v100;
      v104 = 2048;
      v105 = v99;
      v106 = 2048;
      v107 = v98;
      v108 = 2048;
      v109 = v89;
      v54 = v88;
      v110 = 2112;
      v111 = v92;
      _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Read item with index %ld, section index %ld, section offset %llu, size %lld, signature %@", buf, 0x34u);

    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) += objc_msgSend_size(v68, v82, v83);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = v65;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8)
                                                                           + 24) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8)
                                                                                                + 24);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);

    if (objc_msgSend_lastItem(v52, v84, v85))
    {

      v46 = 0;
      goto LABEL_40;
    }
  }
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 0;
LABEL_21:
  v58 = objc_msgSend_count(*(void **)(a1 + 64), v56, v57);
  v60 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
  if (v58 > v60)
  {
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 64), v59, v60);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = objc_msgSend_size(v53, v61, v62);
    goto LABEL_23;
  }
  objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E0C94FF8], v59, *MEMORY[0x1E0C947D8], 1000, *(_QWORD *)(a1 + 56), CFSTR("Package manifest is corrupt - section index %ld is out of bounds"), v60);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_40:

LABEL_41:
  return v46;
}

BOOL sub_1BEBA50E4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKCDPErrorUserInfoValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKCDPErrorUserInfoValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKCDPErrorUserInfoValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (sub_1BEBD4AB4((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBA5A5C()
{
  id v0;
  void *v1;
  const char *v2;
  const char *v3;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED700A68;
  qword_1ED700A68 = (uint64_t)v0;

  objc_msgSend_setTimeStyle_((void *)qword_1ED700A68, v2, 3);
  return objc_msgSend_setDateStyle_((void *)qword_1ED700A68, v3, 1);
}

void sub_1BEBA634C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBA6490()
{
  void *v0;

  v0 = (void *)qword_1ED700A78;
  qword_1ED700A78 = (uint64_t)&unk_1E78AFC30;

}

uint64_t sub_1BEBA6DC4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecordType *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_33;
        goto LABEL_62;
      case 2u:
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_62;
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(CKDPAsset);
        objc_msgSend_addAssets_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_62;
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequestRecordAssetUpload);
        objc_msgSend_addUploads_((void *)a1, v19, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEADBFC8((id *)&v17->super.super.isa, a2))
          goto LABEL_62;
        goto LABEL_33;
      case 5u:
        v17 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequestHeaderInfo);
        objc_msgSend_addContentRequestHeaders_((void *)a1, v20, (uint64_t)v17);
        if (PBReaderPlaceMark() && sub_1BEAA39BC((uint64_t)v17, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_62:

        return 0;
      case 6u:
        PBReaderReadData();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v21;

        goto LABEL_34;
      case 8u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_56:
        *(_DWORD *)(a1 + 32) = v26;
        goto LABEL_34;
      case 9u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_60:
        *(_QWORD *)(a1 + 8) = v32;
        goto LABEL_34;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_34;
    }
  }
}

void sub_1BEBA837C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBA8398(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_wipeAllConfigurations(WeakRetained, v1, v2);

}

void sub_1BEBA8414()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED702AF8;
  qword_1ED702AF8 = v0;

}

void sub_1BEBA8840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBA8864(uint64_t a1, void *a2)
{
  id v4;
  dispatch_group_t v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(id *);
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  id from;
  id location;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v5 = dispatch_group_create();
  objc_msgSend_setConfigurationFetchedGroup_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6, (uint64_t)v5);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = sub_1BEBA8A04;
  v16 = &unk_1E7830CB0;
  objc_copyWeak(&v19, &location);
  objc_copyWeak(&v20, &from);
  v17 = *(id *)(a1 + 40);
  v7 = v5;
  v18 = v7;
  objc_msgSend_setCompletionBlock_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v8, (uint64_t)&v13);
  objc_msgSend_globalConfigurationOps(*(void **)(a1 + 32), v9, v10, v13, v14, v15, v16);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v11, v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

  dispatch_group_enter(v7);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBA89D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBA8A04(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v3 = objc_loadWeakRetained(a1 + 7);
  v4 = (void *)objc_opt_new();
  objc_msgSend_propertyQueue(WeakRetained, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBA8B08;
  block[3] = &unk_1E782E490;
  v11 = v3;
  v12 = WeakRetained;
  v13 = v4;
  v14 = a1[4];
  v15 = a1[5];
  v8 = v4;
  v9 = v3;
  dispatch_async(v7, block);

}

void sub_1BEBA8B08(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  void *v41;
  const char *v42;
  void *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD block[4];
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  uint64_t v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  objc_msgSend_configuration(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_deviceContext(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadataCache(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_configuration(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setGlobalConfiguration_(v10, v14, (uint64_t)v13);

    objc_msgSend_configuration(*(void **)(a1 + 32), v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setGlobalConfiguration_(*(void **)(a1 + 40), v18, (uint64_t)v17);

    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    objc_msgSend_globalConfigurationOps(*(void **)(a1 + 40), v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend_copy(v21, v22, v23);

    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v50, v56, 16);
    if (v26)
    {
      v28 = v26;
      v29 = *(_QWORD *)v51;
      do
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v51 != v29)
            objc_enumerationMutation(v24);
          v31 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * i);
          if (v31 != *(_QWORD *)(a1 + 32))
            objc_msgSend_addObject_(*(void **)(a1 + 48), v27, v31);
        }
        v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v50, v56, 16);
      }
      while (v28);
    }

    objc_msgSend_globalConfigurationOps(*(void **)(a1 + 40), v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllObjects(v34, v35, v36);

    if (objc_msgSend_count(*(void **)(a1 + 48), v37, v38))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v39 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v43 = *(void **)(a1 + 48);
        v44 = v39;
        v47 = objc_msgSend_count(v43, v45, v46);
        *(_DWORD *)buf = 134217984;
        v55 = v47;
        _os_log_debug_impl(&dword_1BE990000, v44, OS_LOG_TYPE_DEBUG, "Tearing down %lu superfluous global configuration operations", buf, 0xCu);

      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1BEBA8DC8;
      block[3] = &unk_1E782EA40;
      v40 = *(NSObject **)(a1 + 56);
      v49 = *(id *)(a1 + 48);
      dispatch_async(v40, block);

    }
  }
  else
  {
    objc_msgSend_globalConfigurationOps(*(void **)(a1 + 40), v5, v6);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObject_(v41, v42, *(_QWORD *)(a1 + 32));

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1BEBA8DC8(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = *(id *)(a1 + 32);
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v9, v13, 16);
  if (v3)
  {
    v6 = v3;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v1);
        objc_msgSend_cancel(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v8++), v4, v5, (_QWORD)v9);
      }
      while (v6 != v8);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v9, v13, 16);
    }
    while (v6);
  }

}

void sub_1BEBA8EB0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  NSObject *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD block[4];
  id v17;
  id v18;
  char v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v15 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218240;
    v21 = v14;
    v22 = 2048;
    v23 = v15;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Waited on outstanding global configuration operation %p for operation %p", buf, 0x16u);
  }
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_globalConfiguration(*(void **)(a1 + 40), v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v5;
    if (v5 && !objc_msgSend_isExpired(v5, v6, v7))
    {
      v9 = 0;
      v10 = 1;
    }
    else
    {
      objc_msgSend_error(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v6, v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 0;
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEBA9068;
    block[3] = &unk_1E78349C8;
    v11 = *(NSObject **)(a1 + 48);
    v12 = *(id *)(a1 + 56);
    v19 = v10;
    v17 = v9;
    v18 = v12;
    v13 = v9;
    dispatch_async(v11, block);

  }
}

uint64_t sub_1BEBA9068(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_1BEBA9464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBA9488(uint64_t a1, const char *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C94B20], 1000, CFSTR("Operation's container was invalid when requesting container specific info: %@"), *(_QWORD *)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v2 + 16))(v2, 0, v3);

}

void sub_1BEBA94F8(uint64_t a1, void *a2)
{
  id v4;
  const char *v5;
  id v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31[2];
  id from;
  id location;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a2);
  objc_msgSend_setRequireUserIDs_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v5, *(unsigned __int8 *)(a1 + 80));
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_1BEBA9718;
  v25[3] = &unk_1E7836148;
  objc_copyWeak(&v30, &location);
  objc_copyWeak(v31, &from);
  v6 = *(id *)(a1 + 40);
  v31[1] = *(id *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 32);
  v26 = v6;
  v27 = v7;
  v28 = *(id *)(a1 + 48);
  v29 = *(id *)(a1 + 56);
  objc_msgSend_setCompletionBlock_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v8, (uint64_t)v25);
  objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v11, v12, *(_QWORD *)(a1 + 48));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    v16 = (void *)objc_opt_new();
    objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v19, v20, (uint64_t)v16, *(_QWORD *)(a1 + 48));

  }
  objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v14, v15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v21, v22, *(_QWORD *)(a1 + 48));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v23, v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));

  objc_destroyWeak(v31);
  objc_destroyWeak(&v30);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBA96E8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBA9718(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id WeakRetained;
  _QWORD block[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v2 = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend_propertyQueue(WeakRetained, v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBA9810;
  block[3] = &unk_1E7836120;
  v13 = v2;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(void **)(a1 + 48);
  v14 = v6;
  v15 = v8;
  v19 = v7;
  v16 = WeakRetained;
  v17 = v9;
  v18 = *(id *)(a1 + 56);
  v10 = v2;
  dispatch_sync(v5, block);

}

void sub_1BEBA9810(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  os_log_t *v8;
  os_log_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  const char *v74;
  void *v75;
  const char *v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  void *v87;
  const char *v88;
  os_log_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t i;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  os_log_t v112;
  NSObject *v113;
  void *v114;
  const char *v115;
  void *v116;
  const char *v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  const char *v128;
  void *v129;
  NSObject *v130;
  const char *v131;
  uint64_t v132;
  void *v133;
  NSObject *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  _QWORD block[4];
  id v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint8_t v146[128];
  uint8_t buf[4];
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (v4)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 32);
      v11 = v9;
      objc_msgSend_error(v10, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v148 = (uint64_t)v14;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Got an error from CKDContainerSpecificInfoOperation: %@", buf, 0xCu);

    }
  }
  objc_msgSend_containerServerInfo(*(void **)(a1 + 32), v5, v6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend_account(*(void **)(a1 + 40), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_accountType(v18, v19, v20);

    if (v21 <= 1)
    {
      objc_msgSend_containerID(*(void **)(a1 + 40), v22, v23);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v26)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v24, v25);
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v138, v139, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), CFSTR("CKDServerConfigurationManager.m"), 294, CFSTR("Unexpectedly-nil containerID for container %@"), *(_QWORD *)(a1 + 40));

      }
      objc_msgSend_deviceContext(*(void **)(a1 + 32), v24, v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_metadataCache(v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerServerInfo(*(void **)(a1 + 32), v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(*(void **)(a1 + 40), v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_account(*(void **)(a1 + 40), v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_accountID(v39, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setContainerServerInfo_forContainerID_accountID_(v30, v43, (uint64_t)v33, v36, v42);

    }
    objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v22, v23);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v44, v45, *(_QWORD *)(a1 + 64));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerScopedUserID(v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v52, v53, *(_QWORD *)(a1 + 64));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_orgAdminUserID(v54, v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_containerServerInfo(*(void **)(a1 + 32), v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v63, v64, (uint64_t)v60, *(_QWORD *)(a1 + 64));

    if (v49)
    {
      objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v67, v68, *(_QWORD *)(a1 + 64));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerScopedUserID(v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v72)
      {
        objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v65, v66);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v73, v74, *(_QWORD *)(a1 + 64));
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setContainerScopedUserID_(v75, v76, (uint64_t)v49);

      }
    }
    if (v57)
    {
      objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v65, v66);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v77, v78, *(_QWORD *)(a1 + 64));
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_orgAdminUserID(v79, v80, v81);
      v82 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v82)
      {
        objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v83, v84);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v85, v86, *(_QWORD *)(a1 + 64));
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setOrgAdminUserID_(v87, v88, (uint64_t)v57);

      }
    }
    if (*v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v89 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
    {
      v129 = *(void **)(a1 + 32);
      v130 = v89;
      objc_msgSend_containerServerInfo(v129, v131, v132);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v148 = (uint64_t)v133;
      _os_log_debug_impl(&dword_1BE990000, v130, OS_LOG_TYPE_DEBUG, "Set in-memory container specific info from op result: %@", buf, 0xCu);

    }
    v90 = (void *)objc_opt_new();
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v145 = 0u;
    objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v91, v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v93, v94, *(_QWORD *)(a1 + 64));
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v98 = (void *)objc_msgSend_copy(v95, v96, v97);

    v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v99, (uint64_t)&v142, v146, 16);
    if (v100)
    {
      v102 = v100;
      v103 = *(_QWORD *)v143;
      do
      {
        for (i = 0; i != v102; ++i)
        {
          if (*(_QWORD *)v143 != v103)
            objc_enumerationMutation(v98);
          v105 = *(_QWORD *)(*((_QWORD *)&v142 + 1) + 8 * i);
          if (v105 != *(_QWORD *)(a1 + 32))
            objc_msgSend_addObject_(v90, v101, v105);
        }
        v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v101, (uint64_t)&v142, v146, 16);
      }
      while (v102);
    }

    objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v106, v107);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v108, v109, *(_QWORD *)(a1 + 64));

    if (objc_msgSend_count(v90, v110, v111))
    {
      if (*v7 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v112 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
      {
        v134 = v112;
        v137 = objc_msgSend_count(v90, v135, v136);
        *(_DWORD *)buf = 134217984;
        v148 = v137;
        _os_log_debug_impl(&dword_1BE990000, v134, OS_LOG_TYPE_DEBUG, "Tearing down %lu superfluous container specific info operations", buf, 0xCu);

      }
      v113 = *(NSObject **)(a1 + 72);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1BEBA9ED4;
      block[3] = &unk_1E782EA40;
      v141 = v90;
      dispatch_async(v113, block);

    }
    goto LABEL_37;
  }
  objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v16, v17);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v114, v115, *(_QWORD *)(a1 + 64));
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v116, v117, *(_QWORD *)(a1 + 32));

  objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v118, v119);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v120, v121, *(_QWORD *)(a1 + 64));
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v125 = objc_msgSend_count(v122, v123, v124);

  if (!v125)
  {
    objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v126, v127);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v49, v128, *(_QWORD *)(a1 + 64));
LABEL_37:

  }
}

void sub_1BEBA9ED4(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = *(id *)(a1 + 32);
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v9, v13, 16);
  if (v3)
  {
    v6 = v3;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v1);
        objc_msgSend_cancel(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v8++), v4, v5, (_QWORD)v9);
      }
      while (v6 != v8);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v9, v13, 16);
    }
    while (v6);
  }

}

void sub_1BEBA9FBC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  BOOL v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  _QWORD block[4];
  id v32;
  uint64_t v33;
  BOOL v34;

  objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_publicCloudDBURL(v6, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    objc_msgSend_publicShareServiceURL(v6, v9, v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      objc_msgSend_publicCodeServiceURL(v6, v12, v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        objc_msgSend_publicMetricsServiceURL(v6, v15, v16);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (v20)
        {
          objc_msgSend_publicDeviceServiceURL(v6, v18, v19);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (v23)
            v24 = objc_msgSend_environment(v6, v21, v22) != -1;
          else
            v24 = 0;

        }
        else
        {
          v24 = 0;
        }

      }
      else
      {
        v24 = 0;
      }

    }
    else
    {
      v24 = 0;
    }

  }
  else
  {
    v24 = 0;
  }

  if (*(_BYTE *)(a1 + 72))
  {
    objc_msgSend_containerScopedUserID(v6, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v27)
      v24 = 0;

  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBAA144;
  block[3] = &unk_1E7836198;
  v28 = *(NSObject **)(a1 + 48);
  v29 = *(id *)(a1 + 56);
  v34 = v24;
  v30 = *(_QWORD *)(a1 + 64);
  v32 = v29;
  v33 = v30;
  dispatch_async(v28, block);

}

void sub_1BEBAA144(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend_error(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, v3, v5);

}

void sub_1BEBAA198(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v15 = v8;
    _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "Finished fetching global config on behalf of operation %p", buf, 0xCu);
    if (a2)
      goto LABEL_5;
  }
  else if (a2)
  {
LABEL_5:
    objc_msgSend_configurationForOperation_completionHandler_(*(void **)(a1 + 40), v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
    goto LABEL_9;
  }
  v9 = *(void **)(a1 + 56);
  if (v9)
  {
    v10 = *(NSObject **)(a1 + 48);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1BEBAA300;
    v11[3] = &unk_1E782EC68;
    v13 = v9;
    v12 = v5;
    dispatch_async(v10, v11);

  }
LABEL_9:

}

uint64_t sub_1BEBAA300(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1BEBAA314(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    v15 = v8;
    v16 = 1024;
    v17 = a2;
    v18 = 2112;
    v19 = v5;
    _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "Fetching container info for container %@ gave success %d error %@", buf, 0x1Cu);
    if (a2)
      goto LABEL_5;
  }
  else if (a2)
  {
LABEL_5:
    objc_msgSend_containerServerInfoForOperation_requireUserIDs_completionHandler_(*(void **)(a1 + 40), v7, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 64));
    goto LABEL_9;
  }
  v9 = *(void **)(a1 + 64);
  if (v9)
  {
    v10 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1BEBAA498;
    v11[3] = &unk_1E782EC68;
    v13 = v9;
    v12 = v5;
    dispatch_async(v10, v11);

  }
LABEL_9:

}

uint64_t sub_1BEBAA498(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1BEBAA4AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_1BEBAA5A4(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;

  objc_msgSend_setGlobalConfiguration_(*(void **)(a1 + 32), a2, 0);
  objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v5, v6, v7);

  objc_msgSend_defaultContext(CKDLogicalDeviceContext, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_metadataCache(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expungeAllData(v13, v14, v15);

  return objc_msgSend_setShouldDropAllConfigurations_(*(void **)(a1 + 32), v16, 0);
}

void sub_1BEBAAA18(uint64_t a1, int a2, void *a3)
{
  __CFString *v4;
  NSObject *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  int v9;
  const __CFString *v10;
  __int16 v11;
  const __CFString *v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v6 = CFSTR("NO");
    if (a2)
      v6 = CFSTR("YES");
    v9 = 138412802;
    v10 = v6;
    if (v4)
      v7 = CFSTR(" error: ");
    else
      v7 = &stru_1E7838F48;
    v11 = 2112;
    v12 = v7;
    if (v4)
      v8 = v4;
    else
      v8 = &stru_1E7838F48;
    v13 = 2112;
    v14 = v8;
    _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Registration for app site association data completed with success: %@%@%@", (uint8_t *)&v9, 0x20u);
  }

}

uint64_t sub_1BEBAAC3C(uint64_t a1, const char *a2)
{
  return objc_msgSend_setGlobalConfiguration_(*(void **)(a1 + 32), a2, 0);
}

void sub_1BEBAACE0(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  _QWORD *v8;
  os_log_t *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  void *v30;
  int v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend__uniqueStringForContainer_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v6, v7, (uint64_t)v3);

  v8 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (os_log_t *)MEMORY[0x1E0C952B0];
  v10 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v31 = 138412290;
    v32 = v3;
    _os_log_debug_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEBUG, "Expiring configuration for %@", (uint8_t *)&v31, 0xCu);
  }
  objc_msgSend_containerID(*(void **)(a1 + 40), v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    objc_msgSend_account(*(void **)(a1 + 40), v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend_accountType(v16, v17, v18) <= 1)
    {
      objc_msgSend_deviceContext(*(void **)(a1 + 40), v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_metadataCache(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_accountID(v16, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setContainerServerInfo_forContainerID_accountID_(v24, v28, 0, v15, v27);

    }
  }
  else
  {
    if (*v8 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v29 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_FAULT))
    {
      v30 = *(void **)(a1 + 40);
      v31 = 138412290;
      v32 = v30;
      _os_log_fault_impl(&dword_1BE990000, v29, OS_LOG_TYPE_FAULT, "Failed to expire configuration for container, unable to determine containerID: %@ ", (uint8_t *)&v31, 0xCu);
    }
  }

}

void sub_1BEBAAFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBAAFD8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  objc_msgSend_globalConfiguration(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1BEBAB0C4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  id v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  const char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  _BYTE v87[128];
  _BYTE v88[128];
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  objc_msgSend_globalConfigurationOps(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_count(v4, v5, v6);

  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v82, v89, 16);
  if (v15)
  {
    v18 = v15;
    v19 = *(_QWORD *)v83;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v83 != v19)
          objc_enumerationMutation(v13);
        v7 += objc_msgSend_count(*(void **)(*((_QWORD *)&v82 + 1) + 8 * v20++), v16, v17);
      }
      while (v18 != v20);
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v82, v89, 16);
    }
    while (v18);
  }

  v21 = *(void **)(a1 + 40);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("\tGlobal Configuration Manager (%lu running ops)"), v7);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v21, v24, (uint64_t)v23);

  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  objc_msgSend_globalConfigurationOps(*(void **)(a1 + 32), v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v78, v88, 16);
  if (v29)
  {
    v31 = v29;
    v32 = *(_QWORD *)v79;
    do
    {
      v33 = 0;
      do
      {
        if (*(_QWORD *)v79 != v32)
          objc_enumerationMutation(v27);
        v34 = *(void **)(a1 + 40);
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v30, (uint64_t)CFSTR("\t\tGlobal configuration operation: %@"), *(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * v33));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v34, v36, (uint64_t)v35);

        ++v33;
      }
      while (v31 != v33);
      v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v78, v88, 16);
    }
    while (v31);
  }

  objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend_count(v39, v40, v41);

  if (v42)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v43, (uint64_t)CFSTR("\t\tContainer specific operations:"));
    v44 = (void *)objc_opt_new();
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allValues(v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v74, v87, 16);
    if (v52)
    {
      v55 = v52;
      v56 = *(_QWORD *)v75;
      do
      {
        v57 = 0;
        do
        {
          if (*(_QWORD *)v75 != v56)
            objc_enumerationMutation(v50);
          objc_msgSend_allObjects(*(void **)(*((_QWORD *)&v74 + 1) + 8 * v57), v53, v54);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObjectsFromArray_(v44, v59, (uint64_t)v58);

          ++v57;
        }
        while (v55 != v57);
        v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v53, (uint64_t)&v74, v87, 16);
      }
      while (v55);
    }

    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v60 = v44;
    v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v61, (uint64_t)&v70, v86, 16);
    if (v62)
    {
      v64 = v62;
      v65 = *(_QWORD *)v71;
      do
      {
        v66 = 0;
        do
        {
          if (*(_QWORD *)v71 != v65)
            objc_enumerationMutation(v60);
          v67 = *(void **)(a1 + 40);
          objc_msgSend_statusReportWithIndent_(*(void **)(*((_QWORD *)&v70 + 1) + 8 * v66), v63, 3);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v67, v69, (uint64_t)v68);

          ++v66;
        }
        while (v64 != v66);
        v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v63, (uint64_t)&v70, v86, 16);
      }
      while (v64);
    }

  }
}

BOOL CKDPContactInformationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_24;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_24:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBACD28(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 84) |= 1u;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)(a2 + v21);
                if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                  break;
                v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0)
                  goto LABEL_69;
                v18 += 7;
                v14 = v19++ >= 9;
                if (v14)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_71;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_69:
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_71:
              *(_DWORD *)(a1 + 80) = v20;
              goto LABEL_95;
            case 2u:
              if (v16 != 2)
              {
                v42 = 0;
                v43 = 0;
                v44 = 0;
                while (1)
                {
                  v45 = *v3;
                  v46 = *(_QWORD *)(a2 + v45);
                  if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_93;
                  v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
                  *(_QWORD *)(a2 + v45) = v46 + 1;
                  v44 |= (unint64_t)(v47 & 0x7F) << v42;
                  if (v47 < 0)
                  {
                    v42 += 7;
                    v14 = v43++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_94;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v24 = 0;
                v25 = 0;
                v26 = 0;
                while (1)
                {
                  v27 = *v3;
                  v28 = *(_QWORD *)(a2 + v27);
                  if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
                  *(_QWORD *)(a2 + v27) = v28 + 1;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if (v29 < 0)
                  {
                    v24 += 7;
                    v14 = v25++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_40;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
                PBRepeatedInt32Add();
              }
              goto LABEL_67;
            case 3u:
              if (v16 != 2)
              {
                v48 = 0;
                v49 = 0;
                v50 = 0;
                while (1)
                {
                  v51 = *v3;
                  v52 = *(_QWORD *)(a2 + v51);
                  if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_93;
                  v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
                  *(_QWORD *)(a2 + v51) = v52 + 1;
                  v50 |= (unint64_t)(v53 & 0x7F) << v48;
                  if (v53 < 0)
                  {
                    v48 += 7;
                    v14 = v49++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_94;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v30 = 0;
                v31 = 0;
                v32 = 0;
                while (1)
                {
                  v33 = *v3;
                  v34 = *(_QWORD *)(a2 + v33);
                  if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
                  *(_QWORD *)(a2 + v33) = v34 + 1;
                  v32 |= (unint64_t)(v35 & 0x7F) << v30;
                  if (v35 < 0)
                  {
                    v30 += 7;
                    v14 = v31++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_53;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
                PBRepeatedInt32Add();
              }
              goto LABEL_67;
            case 4u:
              if (v16 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v36 = 0;
                  v37 = 0;
                  v38 = 0;
                  while (1)
                  {
                    v39 = *v3;
                    v40 = *(_QWORD *)(a2 + v39);
                    if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
                    *(_QWORD *)(a2 + v39) = v40 + 1;
                    v38 |= (unint64_t)(v41 & 0x7F) << v36;
                    if (v41 < 0)
                    {
                      v36 += 7;
                      v14 = v37++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_66;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_66:
                  PBRepeatedInt32Add();
                }
LABEL_67:
                PBReaderRecallMark();
              }
              else
              {
                v54 = 0;
                v55 = 0;
                v56 = 0;
                while (1)
                {
                  v57 = *v3;
                  v58 = *(_QWORD *)(a2 + v57);
                  if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
                  *(_QWORD *)(a2 + v57) = v58 + 1;
                  v56 |= (unint64_t)(v59 & 0x7F) << v54;
                  if (v59 < 0)
                  {
                    v54 += 7;
                    v14 = v55++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_94;
                }
LABEL_93:
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_94:
                PBRepeatedInt32Add();
              }
LABEL_95:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_95;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBAD92C()
{
  void *v0;

  v0 = (void *)qword_1ED702B08;
  qword_1ED702B08 = (uint64_t)&unk_1E78AFC58;

}

void sub_1BEBADABC()
{
  void *v0;

  v0 = (void *)qword_1ED700A88;
  qword_1ED700A88 = (uint64_t)&unk_1E78AFC80;

}

uint64_t sub_1BEBADFC8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  const char *v27;
  const char *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  void *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(MEMORY[0x1E0C94C88]);
          objc_storeStrong((id *)(a1 + 16), v17);
          if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          {
            PBReaderRecallMark();
            goto LABEL_36;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 24;
          goto LABEL_45;
        case 3u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 60) |= 1u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_56:
          *(_DWORD *)(a1 + 40) = v23;
          continue;
        case 4u:
          PBReaderReadData();
          v17 = (id)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend_addFileSignature_((void *)a1, v27, (uint64_t)v17);
          goto LABEL_36;
        case 5u:
          PBReaderReadData();
          v17 = (id)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend_addReferenceSignature_((void *)a1, v28, (uint64_t)v17);
LABEL_36:

          continue;
        case 6u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_BYTE *)(a1 + 60) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v31 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_60:
          v42 = v31 != 0;
          v43 = 56;
          goto LABEL_65;
        case 7u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 8;
LABEL_45:
          v35 = *(void **)(a1 + v20);
          *(_QWORD *)(a1 + v20) = v19;

          continue;
        case 8u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 60) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v39 = *v3;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
        *(_QWORD *)(a2 + v39) = v40 + 1;
        v38 |= (unint64_t)(v41 & 0x7F) << v36;
        if ((v41 & 0x80) == 0)
          goto LABEL_62;
        v36 += 7;
        v14 = v37++ >= 9;
        if (v14)
        {
          v38 = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        v38 = 0;
LABEL_64:
      v42 = v38 != 0;
      v43 = 57;
LABEL_65:
      *(_BYTE *)(a1 + v43) = v42;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBB0D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBB0D54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  const char *v46;
  NSObject *v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (*MEMORY[0x1E0C95280]
    && (objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v7, v8),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("FailZonePCSDecryptionOnZoneAggregation")),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v12,
        v10,
        v12))
  {

    objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v13, *MEMORY[0x1E0C94B20], 5004, 0, CFSTR("Unit test Zone PCS decryption failure"));
    v14 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v14;
  }
  else if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v15 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v18 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v49 = v18;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_INFO, "Fetched pcs info for zone %@", buf, 0xCu);
    }
    objc_msgSend_zonePCSDataByZoneID(WeakRetained, v16, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v19, v20, (uint64_t)v5, *(_QWORD *)(a1 + 40));
    goto LABEL_24;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v21 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
  {
    v24 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v49 = v24;
    v50 = 2112;
    v51 = v6;
    _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS data for zone %@: %@", buf, 0x16u);
  }
  if (v6)
  {
    objc_msgSend_error(WeakRetained, v22, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v25)
    {
      if (objc_msgSend_CKIsNotFoundError(v6, v22, v23))
      {
        objc_msgSend_userInfo(v6, v26, v27);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          objc_msgSend_userInfo(v6, v28, v29);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (void *)objc_msgSend_mutableCopy(v31, v32, v33);

        }
        else
        {
          v19 = (void *)objc_opt_new();
        }

        objc_msgSend_setObject_forKeyedSubscript_(v19, v35, *(_QWORD *)(a1 + 40), *MEMORY[0x1E0C947F0]);
        v36 = (void *)MEMORY[0x1E0C94FF8];
        v37 = *MEMORY[0x1E0C94B20];
        v40 = objc_msgSend_code(v6, v38, v39);
        objc_msgSend_localizedDescription(v6, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_userInfo_format_(v36, v44, v37, v40, v19, CFSTR("%@"), v43);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_setError_(WeakRetained, v46, (uint64_t)v45);
      }
      else
      {
        objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v26, *MEMORY[0x1E0C94B20], 5001, 0, CFSTR("Error fetching PCS data for zone %@"), *(_QWORD *)(a1 + 40));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setError_(WeakRetained, v34, (uint64_t)v19);
      }
      v5 = 0;
LABEL_24:

      goto LABEL_25;
    }
  }
  v5 = 0;
LABEL_25:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v22, v23);
  v47 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v47);

}

void sub_1BEBB1944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  id *v21;
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1BEBB198C(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleZoneSavedWithID_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);

}

void sub_1BEBB19F0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  int v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  int v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
LABEL_19:
      objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
      v29 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v29);

      goto LABEL_20;
    }
    objc_msgSend_error(v3, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_needsSynchronizeSigningIdentities(WeakRetained, v10, v11) & 1) == 0)
    {
      objc_msgSend_domain(v9, v12, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16 == (void *)*MEMORY[0x1E0C94B20] && objc_msgSend_code(v9, v14, v15) == 5000)
      {
        objc_msgSend_description(v9, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_lowercaseString(v19, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend_containsString_(v22, v23, (uint64_t)CFSTR("failed to create cryptographic signature"));

        if (v24)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v25 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
          {
            v30 = 138412290;
            v31 = v9;
            _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "Signing identity missing when modifying record zone: %@", (uint8_t *)&v30, 0xCu);
          }
          objc_msgSend_setNeedsSynchronizeSigningIdentities_(WeakRetained, v26, 1);
LABEL_18:

          goto LABEL_19;
        }
      }
      else
      {

      }
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v27 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v30 = 138412290;
      v31 = v9;
      _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Error modifying record zone: %@", (uint8_t *)&v30, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v28, (uint64_t)v9);
    goto LABEL_18;
  }
LABEL_20:

}

void sub_1BEBB1E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBB1E5C(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = (void *)*MEMORY[0x1E0C952F8];
    v8 = *MEMORY[0x1E0C95300];
    if (v5 || (a2 & 1) == 0)
    {
      if (v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v7);
      v12 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = 138543618;
        v19 = v17;
        v20 = 2112;
        v21 = v5;
        _os_log_error_impl(&dword_1BE990000, v12, OS_LOG_TYPE_ERROR, "User key sync to update signing identities failed for operation %{public}@: %@", (uint8_t *)&v18, 0x16u);
      }
      objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v5);
    }
    else
    {
      if (v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v7);
      v9 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v18 = 138543362;
        v19 = v11;
        _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "User key sync to update signing identities succeeded for operation %{public}@", (uint8_t *)&v18, 0xCu);
      }
    }
    objc_msgSend_setDidSynchronizeSigningIdentities_(WeakRetained, v10, 1);
    objc_msgSend_stateTransitionGroup(WeakRetained, v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v16);

  }
}

void sub_1BEBB21FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBB2228(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v10 = (void *)*MEMORY[0x1E0C952F8];
    v11 = *MEMORY[0x1E0C95300];
    if (v7 || (a2 & 1) == 0)
    {
      if (v11 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v10);
      v16 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v18 = *(_QWORD *)(a1 + 32);
        v24 = 138543618;
        v25 = v18;
        v26 = 2112;
        v27 = v7;
        _os_log_impl(&dword_1BE990000, v16, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@", (uint8_t *)&v24, 0x16u);
      }
      objc_msgSend_setCurrentError_(WeakRetained, v17, (uint64_t)v7);
      objc_msgSend_setError_(v8, v19, (uint64_t)v7);
      objc_msgSend_setOverallResult_(v8, v20, (uint64_t)CFSTR("failure"));
    }
    else
    {
      if (v11 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v10);
      v12 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v24 = 138543362;
        v25 = v14;
        _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@", (uint8_t *)&v24, 0xCu);
      }
      objc_msgSend_setZoneWaitingOnKeyRegistrySync_(WeakRetained, v13, 0);
    }
    objc_msgSend_setKeySyncAnalytics_(WeakRetained, v15, (uint64_t)v8);
    objc_msgSend_stateTransitionGroup(WeakRetained, v21, v22);
    v23 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v23);

  }
}

void sub_1BEBB2D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBB2D2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = WeakRetained;
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v26 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v29 = 138412546;
      v30 = v27;
      v31 = 2112;
      v32 = v5;
      _os_log_impl(&dword_1BE990000, v26, OS_LOG_TYPE_INFO, "Warn: Couldn't decrypt pcs data for zone %@: %@", (uint8_t *)&v29, 0x16u);
    }
  }
  else
  {
    objc_msgSend_targetZone(WeakRetained, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_protectionData(v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_etagFromPCSData_(CKDPCSManager, v14, (uint64_t)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_targetZone(v9, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithZone_(CKDZonePCSData, v19, (uint64_t)v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setPcs_(v20, v21, a2);
    objc_msgSend_setEtag_(v20, v22, (uint64_t)v15);
    objc_msgSend_setPCSData_forFetchedZoneID_(v9, v23, (uint64_t)v20, *(_QWORD *)(a1 + 32));

  }
  objc_msgSend_stateTransitionGroup(v9, v24, v25);
  v28 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v28);

}

uint64_t sub_1BEBB31B8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

id sub_1BEBB37D0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend_translator(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pAliasWithIdentityLookupInfo_(v7, v8, (uint64_t)v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = *(void **)(a1 + 32);
  v13 = objc_msgSend_operationType(v10, v11, v12);
  objc_msgSend_operationRequestWithType_(v10, v14, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_opt_new();
  objc_msgSend_setUserQueryRequest_(v15, v17, (uint64_t)v16);

  objc_msgSend_userQueryRequest(v15, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAlias_(v20, v21, (uint64_t)v9);

  v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 384);
  objc_msgSend_userQueryRequest(v15, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setPublicKeyRequested_(v25, v26, v22);

  v27 = *(void **)(*(_QWORD *)(a1 + 32) + 408);
  objc_msgSend_request(v15, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationUUID(v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v27, v34, (uint64_t)v4, v33);

  return v15;
}

uint64_t sub_1BEBB58CC(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPUserInformationRequestAccess *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPUserInformationRequestAccess);
        objc_msgSend_addRequestingAccessUsers_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !CKDPUserInformationRequestAccessReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPAssetReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  CKDPProtectionInfo *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void *v47;
  uint64_t v48;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 112;
        goto LABEL_75;
      case 2u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 152;
        goto LABEL_75;
      case 4u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 168) |= 0x10u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_79:
        v48 = 40;
        goto LABEL_96;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 104;
        goto LABEL_75;
      case 6u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 96;
        goto LABEL_75;
      case 8u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
        goto LABEL_75;
      case 9u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 144;
        goto LABEL_75;
      case 0xAu:
        v26 = (CKDPProtectionInfo *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 128), v26);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
          goto LABEL_99;
        goto LABEL_48;
      case 0xBu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 160;
        goto LABEL_75;
      case 0xDu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_75;
      case 0xEu:
        v27 = 0;
        v28 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 168) |= 8u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v22 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_83:
        v48 = 32;
        goto LABEL_96;
      case 0xFu:
        v26 = objc_alloc_init(CKDPProtectionInfo);
        objc_storeStrong((id *)(a1 + 120), v26);
        if (PBReaderPlaceMark() && sub_1BEA1BDA4((uint64_t)v26, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_97:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_99:

        return 0;
      case 0x11u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 136;
        goto LABEL_75;
      case 0x12u:
        v32 = 0;
        v33 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 168) |= 4u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v22 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_87:
        v48 = 24;
        goto LABEL_96;
      case 0x14u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_75;
      case 0x15u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_75;
      case 0x16u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
        goto LABEL_75;
      case 0x17u:
        v37 = 0;
        v38 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 168) |= 2u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v22 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_91:
        v48 = 16;
        goto LABEL_96;
      case 0x18u:
        v42 = 0;
        v43 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 168) |= 1u;
        while (2)
        {
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 1;
            v22 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_95:
        v48 = 8;
LABEL_96:
        *(_QWORD *)(a1 + v48) = v22;
        goto LABEL_97;
      case 0x19u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 64;
LABEL_75:
        v47 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_97;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_97;
    }
  }
}

uint64_t CKDPParticipantReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPContactInformation *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t result;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  void *v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        v18 = 72;
        goto LABEL_46;
      case 2u:
        v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        v18 = 120;
        goto LABEL_46;
      case 3u:
        v17 = objc_alloc_init(CKDPContactInformation);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || !CKDPContactInformationReadFrom((uint64_t)v17, a2))
          goto LABEL_191;
        goto LABEL_116;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 136) |= 0x40u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_138:
        v98 = 116;
        goto LABEL_179;
      case 5u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 136) |= 8u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_142:
        v98 = 80;
        goto LABEL_179;
      case 6u:
        v30 = 0;
        v31 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 136) |= 0x10u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v21 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_146:
        v98 = 84;
        goto LABEL_179;
      case 7u:
        v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E0C94C70]);
        v18 = 48;
LABEL_46:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
          goto LABEL_191;
        goto LABEL_116;
      case 8u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_WORD *)(a1 + 136) |= 0x100u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 1;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                v37 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v37 = 0;
LABEL_150:
        v99 = v37 != 0;
        v100 = 129;
        goto LABEL_188;
      case 9u:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v41 = 104;
        goto LABEL_65;
      case 0xAu:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 136) |= 1u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_154:
        *(_QWORD *)(a1 + 8) = v44;
        goto LABEL_189;
      case 0xBu:
        v17 = objc_alloc_init(CKDPProtectionInfo);
        v41 = 88;
LABEL_65:
        objc_storeStrong((id *)(a1 + v41), v17);
        if (!PBReaderPlaceMark() || !sub_1BEA1BDA4((uint64_t)v17, a2))
          goto LABEL_191;
        goto LABEL_116;
      case 0xCu:
        PBReaderReadData();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = 64;
        goto LABEL_134;
      case 0xDu:
        v50 = 0;
        v51 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 136) |= 4u;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 1;
            v21 |= (unint64_t)(v54 & 0x7F) << v50;
            if (v54 < 0)
            {
              v50 += 7;
              v14 = v51++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_158:
        v98 = 60;
        goto LABEL_179;
      case 0xEu:
        v55 = 0;
        v56 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 136) |= 0x20u;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v21 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              v14 = v56++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_162:
        v98 = 112;
        goto LABEL_179;
      case 0xFu:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        *(_WORD *)(a1 + 136) |= 0x80u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                v62 = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v62 = 0;
LABEL_166:
        v99 = v62 != 0;
        v100 = 128;
        goto LABEL_188;
      case 0x10u:
        v66 = 0;
        v67 = 0;
        v68 = 0;
        *(_WORD *)(a1 + 136) |= 0x800u;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v68 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              v14 = v67++ >= 9;
              if (v14)
              {
                v68 = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v68 = 0;
LABEL_170:
        v99 = v68 != 0;
        v100 = 132;
        goto LABEL_188;
      case 0x11u:
        v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        v72 = 16;
        goto LABEL_114;
      case 0x12u:
        v73 = 0;
        v74 = 0;
        v75 = 0;
        *(_WORD *)(a1 + 136) |= 0x1000u;
        while (2)
        {
          v76 = *v3;
          v77 = *(_QWORD *)(a2 + v76);
          if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
            *(_QWORD *)(a2 + v76) = v77 + 1;
            v75 |= (unint64_t)(v78 & 0x7F) << v73;
            if (v78 < 0)
            {
              v73 += 7;
              v14 = v74++ >= 9;
              if (v14)
              {
                v75 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v75 = 0;
LABEL_174:
        v99 = v75 != 0;
        v100 = 133;
        goto LABEL_188;
      case 0x13u:
        PBReaderReadData();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = 96;
        goto LABEL_134;
      case 0x14u:
        v79 = 0;
        v80 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 136) |= 2u;
        while (2)
        {
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v82 + 1;
            v21 |= (unint64_t)(v83 & 0x7F) << v79;
            if (v83 < 0)
            {
              v79 += 7;
              v14 = v80++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_178:
        v98 = 56;
LABEL_179:
        *(_DWORD *)(a1 + v98) = v21;
        goto LABEL_189;
      case 0x15u:
        v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E0C94C60]);
        v72 = 40;
LABEL_114:
        objc_storeStrong((id *)(a1 + v72), v17);
        if (PBReaderPlaceMark() && (CKDPDateReadFrom() & 1) != 0)
        {
LABEL_116:
          PBReaderRecallMark();

LABEL_189:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_191:

        return 0;
      case 0x17u:
        v85 = 0;
        v86 = 0;
        v87 = 0;
        *(_WORD *)(a1 + 136) |= 0x200u;
        while (2)
        {
          v88 = *v3;
          v89 = *(_QWORD *)(a2 + v88);
          if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
            *(_QWORD *)(a2 + v88) = v89 + 1;
            v87 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              v14 = v86++ >= 9;
              if (v14)
              {
                v87 = 0;
                goto LABEL_183;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v87 = 0;
LABEL_183:
        v99 = v87 != 0;
        v100 = 130;
        goto LABEL_188;
      case 0x18u:
        v91 = 0;
        v92 = 0;
        v93 = 0;
        *(_WORD *)(a1 + 136) |= 0x400u;
        while (2)
        {
          v94 = *v3;
          v95 = *(_QWORD *)(a2 + v94);
          if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v95);
            *(_QWORD *)(a2 + v94) = v95 + 1;
            v93 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              v14 = v92++ >= 9;
              if (v14)
              {
                v93 = 0;
                goto LABEL_187;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v93 = 0;
LABEL_187:
        v99 = v93 != 0;
        v100 = 131;
LABEL_188:
        *(_BYTE *)(a1 + v100) = v99;
        goto LABEL_189;
      case 0x19u:
        PBReaderReadData();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = 32;
LABEL_134:
        v97 = *(void **)(a1 + v49);
        *(_QWORD *)(a1 + v49) = v48;

        goto LABEL_189;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_189;
    }
  }
}

void sub_1BEBBBD8C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  _BOOL4 v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_personaID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = CKAdoptPersonaID(v4);

  if (v5)
  {
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend_delegate(*(void **)(a1 + 32), v6, v7);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);

  }
}

void sub_1BEBBC0B8(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;
  uint64_t v11;

  objc_msgSend_cacheDelegateQueue(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEBBC158;
  v8[3] = &unk_1E7836470;
  v5 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v6 = *(id *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v10 = v6;
  v11 = v7;
  dispatch_sync(v4, v8);

}

void sub_1BEBBC158(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  const char *v10;
  CKDOperationInfoDelegateWrapper *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  _QWORD block[5];
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_1BEBBC2CC;
  v25[3] = &unk_1E7836420;
  v26 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v27 = v8;
  v28 = v9;
  v29 = *(_QWORD *)(a1 + 56);
  objc_msgSend_performWithDelegate_(v6, v10, (uint64_t)v25);
  v11 = [CKDOperationInfoDelegateWrapper alloc];
  v13 = (void *)objc_msgSend_initWithDelegate_(v11, v12, *(_QWORD *)(a1 + 48));
  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v13, *(_QWORD *)(a1 + 40));

  objc_msgSend_cacheQueue(*(void **)(a1 + 32), v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = v7;
  block[1] = 3221225472;
  block[2] = sub_1BEBBC448;
  block[3] = &unk_1E782E418;
  v21 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v23 = v21;
  v24 = *(id *)(a1 + 48);
  dispatch_async(v20, block);

}

void sub_1BEBBC2CC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v6 = v3;
  if (v3)
  {
    if (objc_msgSend_isInvalidated(v3, v4, v5))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v9 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        v20 = v17;
        v21 = 2112;
        v22 = v6;
        v23 = 2112;
        v24 = v18;
        _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "An existing invalidated proxy operation was found for operation %{public}@: %@. Unregistering that operation and setting %@ as the new delegate", buf, 0x20u);
      }
      objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 48), v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v12, v13, 0, *(_QWORD *)(a1 + 32));

      objc_msgSend_wasUnexpectedlyUnregisteredForOperationID_(v6, v14, *(_QWORD *)(a1 + 32));
    }
    else
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v15, v16, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), CFSTR("CKDOperationInfoCache.m"), 157, CFSTR("A valid delegate is already registered (%@) for operation ID %@"), v6, *(_QWORD *)(a1 + 32));

    }
  }

}

void sub_1BEBBC448(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEBBC4DC;
  v5[3] = &unk_1E7836448;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 40);
  objc_msgSend__locked_enumerateCallbacksForOperationWithID_usingBlock_(v2, v4, v3, v5);

}

uint64_t sub_1BEBBC4DC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_operationWithID_receivedCallback_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBBC5A8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  id v14;

  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v14 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_delegate(v14, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(void **)(a1 + 48);

  if (v8 == v9)
  {
    objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v12, v13, 0, *(_QWORD *)(a1 + 40));

  }
}

void sub_1BEBBC72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBBC744(_QWORD *a1, const char *a2)
{
  void *v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  CKDOperationInfoMetadata *v30;
  const char *v31;
  uint64_t AttemptDate_retryNumber;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  uint8_t buf[4];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v40[3] = *MEMORY[0x1E0C80C00];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%@ = ?"), CFSTR("operationID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)a1[4];
  v40[0] = CFSTR("operationInfo");
  v40[1] = CFSTR("retryNumber");
  v40[2] = CFSTR("lastAttemptDate");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v5, (uint64_t)v40, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = a1[5];
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v7, (uint64_t)&v39, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_select_from_where_bindings_(v4, v9, (uint64_t)v6, CFSTR("OperationInfo"), v3, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v10, v11, v12))
  {
    objc_msgSend_firstObject(v10, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v17 = v15;
      objc_msgSend_objectForKeyedSubscript_(v15, v16, (uint64_t)CFSTR("operationInfo"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v17, v19, (uint64_t)CFSTR("retryNumber"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v17, v21, (uint64_t)CFSTR("lastAttemptDate"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v22, v23, v24);
      v26 = v25;

      objc_msgSend_dateWithTimeIntervalSince1970_(MEMORY[0x1E0C99D68], v27, v28, v26);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18 && v20)
      {
        v30 = [CKDOperationInfoMetadata alloc];
        AttemptDate_retryNumber = objc_msgSend_initWithOperationInfo_lastAttemptDate_retryNumber_(v30, v31, (uint64_t)v18, v29, v20);
        v33 = *(_QWORD *)(a1[6] + 8);
        v34 = *(void **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = AttemptDate_retryNumber;

      }
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v35 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v36 = a1[5];
      *(_DWORD *)buf = 138543362;
      v38 = v36;
      _os_log_impl(&dword_1BE990000, v35, OS_LOG_TYPE_INFO, "Couldn't find metadata for operation %{public}@", buf, 0xCu);
    }
  }

}

void sub_1BEBBCAC0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  const char *v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v11[0] = *(_QWORD *)(a1 + 40);
  v4 = (void *)MEMORY[0x1E0C99D20];
  v5 = a2;
  objc_msgSend_arrayWithObjects_count_(v4, v6, (uint64_t)v11, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEBBCBB4;
  v9[3] = &unk_1E7836498;
  v10 = *(id *)(a1 + 48);
  objc_msgSend_selectFrom_where_bindings_orderBy_limit_block_(v5, v8, (uint64_t)CFSTR("Callback"), v3, v7, 0, 0, v9);

}

void sub_1BEBBCBB4(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  char v11;

  if (a2)
  {
    objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, (uint64_t)CFSTR("callback"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0CB3710];
    v7 = objc_opt_class();
    objc_msgSend_unarchivedObjectOfClass_fromData_error_(v6, v8, v7, v5, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v11 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      if (v10)
      {
        (*(void (**)(uint64_t, void *, char *))(v10 + 16))(v10, v9, &v11);
        if (v11)
          *a3 = 1;
      }
    }

  }
}

uint64_t sub_1BEBBCD24(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_enumerateCallbacksForOperationWithID_usingBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1BEBBCDF0(uint64_t a1, const char *a2)
{
  void *v2;
  void *v3;
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  CKDApplicationID *v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  void *v16;
  id v17;
  const char *v18;
  void *v19;
  const char *v20;
  const char *v21;
  void *v22;
  const char *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  double v28;
  double v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  NSObject *v51;
  CKDAppContainerTuple *v52;
  const char *v53;
  CKDAppContainerAccountTuple *v54;
  const char *v55;
  void *v56;
  CKDOperationInfoMetadata *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *AttemptDate_retryNumber;
  const char *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  void *v71;
  void *v72;
  id v73;
  const char *v74;
  id v75;
  id obj;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  _QWORD v83[4];
  id v84;
  _QWORD block[5];
  id v86;
  __int128 *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint8_t buf[4];
  void *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  void (*v97)(uint64_t);
  id v98;
  _BYTE v99[128];
  _QWORD v100[10];

  v100[7] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v100[0] = CFSTR("applicationID");
  v100[1] = CFSTR("personaID");
  v100[2] = CFSTR("containerID");
  v100[3] = CFSTR("accountID");
  v100[4] = CFSTR("operationInfo");
  v100[5] = CFSTR("lastAttemptDate");
  v100[6] = CFSTR("retryNumber");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v100, 7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v4, (uint64_t)CFSTR("%@ = 0"), CFSTR("operationIsComplete"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_select_from_where_bindings_(v2, v6, (uint64_t)v3, CFSTR("OperationInfo"), v5, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  obj = v7;
  v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v88, v99, 16);
  if (v79)
  {
    v78 = *(_QWORD *)v89;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v89 != v78)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * v9);
        v11 = [CKDApplicationID alloc];
        objc_msgSend_objectForKeyedSubscript_(v10, v12, (uint64_t)CFSTR("applicationID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = (void *)objc_msgSend_initWithSqliteRepresentation_(v11, v14, (uint64_t)v13);

        objc_msgSend_objectForKeyedSubscript_(v10, v15, (uint64_t)CFSTR("personaID"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_alloc(MEMORY[0x1E0C94C40]);
        objc_msgSend_objectForKeyedSubscript_(v10, v18, (uint64_t)CFSTR("containerID"));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v81 = (void *)objc_msgSend_initWithSqliteRepresentation_(v17, v20, (uint64_t)v19);

        objc_msgSend_objectForKeyedSubscript_(v10, v21, (uint64_t)CFSTR("accountID"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v10, v23, (uint64_t)CFSTR("retryNumber"));
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v10, v24, (uint64_t)CFSTR("lastAttemptDate"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_doubleValue(v25, v26, v27);
        v29 = v28;

        objc_msgSend_objectForKeyedSubscript_(v10, v30, (uint64_t)CFSTR("operationInfo"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        if (v33)
        {
          v34 = (void *)MEMORY[0x1E0CB3710];
          v35 = objc_opt_class();
          objc_msgSend_unarchivedObjectOfClass_fromData_error_(v34, v36, v35, v33, 0);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v37 = 0;
        }
        objc_msgSend_CKNilIfLengthZero(v16, v31, v32);
        v38 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_CKNilIfLengthZero(v22, v39, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        if (v82 && v81 && v37)
        {
          *(_QWORD *)&v94 = 0;
          *((_QWORD *)&v94 + 1) = &v94;
          v95 = 0x3032000000;
          v96 = sub_1BE9BB118;
          v97 = sub_1BE9BAE40;
          v98 = 0;
          objc_msgSend_cacheDelegateQueue(*(void **)(a1 + 32), v42, v43);
          v44 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = sub_1BEBBD4E0;
          block[3] = &unk_1E7831BB8;
          v45 = *(_QWORD *)(a1 + 32);
          v87 = &v94;
          block[4] = v45;
          v46 = v37;
          v86 = v46;
          dispatch_sync(v44, block);

          if (*(_QWORD *)(*((_QWORD *)&v94 + 1) + 40))
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v47 = (id)*MEMORY[0x1E0C952B0];
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              objc_msgSend_operationID(v46, v48, v49);
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v93 = v50;
              _os_log_impl(&dword_1BE990000, v47, OS_LOG_TYPE_INFO, "Not returning operation %{public}@ as resumable since it has a delegate", buf, 0xCu);

            }
          }
          else
          {
            v52 = [CKDAppContainerTuple alloc];
            v47 = objc_msgSend_initWithApplicationID_containerID_personaID_(v52, v53, (uint64_t)v82, v81, v38);
            v54 = [CKDAppContainerAccountTuple alloc];
            v56 = (void *)objc_msgSend_initWithAppContainerTuple_accountID_(v54, v55, (uint64_t)v47, v41);
            v57 = [CKDOperationInfoMetadata alloc];
            objc_msgSend_dateWithTimeIntervalSince1970_(MEMORY[0x1E0C99D68], v58, v59, v29);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            AttemptDate_retryNumber = (void *)objc_msgSend_initWithOperationInfo_lastAttemptDate_retryNumber_(v57, v61, (uint64_t)v46, v60, v80);

            objc_msgSend_setObject_forKey_(*(void **)(a1 + 40), v63, (uint64_t)AttemptDate_retryNumber, v56);
          }

          _Block_object_dispose(&v94, 8);
        }
        else
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v51 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
          {
            LODWORD(v94) = 138412290;
            *(_QWORD *)((char *)&v94 + 4) = v10;
            _os_log_error_impl(&dword_1BE990000, v51, OS_LOG_TYPE_ERROR, "Operation info entry is corrupted: %@", (uint8_t *)&v94, 0xCu);
          }
        }

        ++v9;
      }
      while (v79 != v9);
      v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v64, (uint64_t)&v88, v99, 16);
    }
    while (v79);
  }

  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_allValues(*(void **)(a1 + 40), v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForKey_(v67, v68, (uint64_t)CFSTR("operationInfo"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForKey_(v69, v70, (uint64_t)CFSTR("operationID"));
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = *(void **)(a1 + 32);
    v83[0] = MEMORY[0x1E0C809B0];
    v83[1] = 3221225472;
    v83[2] = sub_1BEBBD550;
    v83[3] = &unk_1E78364E8;
    v84 = v71;
    v73 = v71;
    v75 = (id)objc_msgSend_performDatabaseOperation_(v72, v74, (uint64_t)v83);

  }
}

void sub_1BEBBD4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBBD4E0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationID(*(void **)(a1 + 40), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v11, v7, (uint64_t)v6);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_1BEBBD550(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = *(id *)(a1 + 32);
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v18, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v4);
        v17 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10);
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v7, (uint64_t)&v17, 1, (_QWORD)v13);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deleteFrom_where_bindings_(v3, v12, (uint64_t)CFSTR("Callback"), CFSTR("operationID = ?"), v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v13, v18, 16);
    }
    while (v8);
  }

}

void sub_1BEBBD76C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  NSObject *v31;
  id obj;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  void *v46;
  _BYTE v47[128];
  uint64_t v48;
  const __CFString *v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3))
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    obj = *(id *)(a1 + 32);
    v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v41, v50, 16);
    if (v34)
    {
      v33 = *(_QWORD *)v42;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v42 != v33)
            objc_enumerationMutation(obj);
          v36 = v6;
          v7 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * v6);
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v5, (uint64_t)CFSTR("%@ = ?"), CFSTR("operationID"));
          v8 = objc_claimAutoreleasedReturnValue();
          v9 = *(void **)(a1 + 40);
          v49 = CFSTR("operationInfo");
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v10, (uint64_t)&v49, 1);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = v7;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v12, (uint64_t)&v48, 1);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = (void *)v8;
          objc_msgSend_select_from_where_bindings_(v9, v14, (uint64_t)v11, CFSTR("OperationInfo"), v8, v13);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v16 = v15;
          v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v37, v47, 16);
          if (v18)
          {
            v20 = v18;
            v21 = *(_QWORD *)v38;
            do
            {
              v22 = 0;
              do
              {
                if (*(_QWORD *)v38 != v21)
                  objc_enumerationMutation(v16);
                v23 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v22);
                objc_msgSend_objectForKeyedSubscript_(v23, v19, (uint64_t)CFSTR("operationInfo"));
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                if (v24
                  && (v25 = (void *)MEMORY[0x1E0CB3710],
                      v26 = objc_opt_class(),
                      objc_msgSend_unarchivedObjectOfClass_fromData_error_(v25, v27, v26, v24, 0),
                      (v28 = objc_claimAutoreleasedReturnValue()) != 0))
                {
                  v30 = (void *)v28;
                  objc_msgSend_addObject_(*(void **)(a1 + 48), v29, v28);

                }
                else
                {
                  if (*MEMORY[0x1E0C95300] != -1)
                    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                  v31 = *MEMORY[0x1E0C952B0];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    v46 = v23;
                    _os_log_error_impl(&dword_1BE990000, v31, OS_LOG_TYPE_ERROR, "Operation info entry is corrupted: %@", buf, 0xCu);
                  }
                }

                ++v22;
              }
              while (v20 != v22);
              v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v37, v47, 16);
            }
            while (v20);
          }

          v6 = v36 + 1;
        }
        while (v36 + 1 != v34);
        v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v41, v50, 16);
      }
      while (v34);
    }

  }
}

void sub_1BEBBDB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBBDBB4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  const __CFString *v27;
  void *v28;
  const char *v29;
  void *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const __CFString *v46;
  _QWORD v47[4];
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v47[0] = CFSTR("applicationID");
  objc_msgSend_appContainerTuple(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_applicationID(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v48[0] = v7;
  v47[1] = CFSTR("personaID");
  objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_personaID(v10, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v13;
  if (v13)
    v17 = (const __CFString *)v13;
  else
    v17 = &stru_1E7838F48;
  v48[1] = v17;
  v47[2] = CFSTR("containerID");
  objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v14, v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v48[2] = v21;
  v47[3] = CFSTR("accountID");
  objc_msgSend_accountID(*(void **)(a1 + 32), v22, v23);
  v24 = objc_claimAutoreleasedReturnValue();
  v26 = (void *)v24;
  if (v24)
    v27 = (const __CFString *)v24;
  else
    v27 = &stru_1E7838F48;
  v48[3] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v25, (uint64_t)v48, v47, 4);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E0C950E0], v29, (uint64_t)v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = *(void **)(a1 + 40);
  v46 = CFSTR("operationID");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v32, (uint64_t)&v46, 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v1(v30, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v2(v30, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_select_from_where_bindings_(v31, v40, (uint64_t)v33, CFSTR("OperationInfo"), v36, v39);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_CKCompactMap_(v41, v42, (uint64_t)&unk_1E7836528);
  v43 = objc_claimAutoreleasedReturnValue();
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v45 = *(void **)(v44 + 40);
  *(_QWORD *)(v44 + 40) = v43;

}

id sub_1BEBBDDE4(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  void *v4;
  NSObject *v5;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  objc_msgSend_objectForKeyedSubscript_(v2, v3, (uint64_t)CFSTR("operationID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v2;
      _os_log_error_impl(&dword_1BE990000, v5, OS_LOG_TYPE_ERROR, "Unexpected operation info result: %@", (uint8_t *)&v7, 0xCu);
    }
  }

  return v4;
}

void sub_1BEBBDF7C(uint64_t a1)
{
  void *v1;
  const char *v2;
  id v3;
  _QWORD v4[4];
  id v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEBBDFF0;
  v4[3] = &unk_1E78364E8;
  v1 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v3 = (id)objc_msgSend_performDatabaseOperation_(v1, v2, (uint64_t)v4);

}

void sub_1BEBBDFF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  id v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = a3;
  if (*(_QWORD *)(a1 + 32))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v23 = v10;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "Removing all cached long-lived operation info for account ID %@", buf, 0xCu);
    }
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("%@ = ?"), CFSTR("accountID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *(_QWORD *)(a1 + 32);
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v12, (uint64_t)&v21, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deleteFrom_where_bindings_(v5, v14, (uint64_t)CFSTR("OperationInfo"), v11, v13);
  }
  else
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v6, (uint64_t)CFSTR("%@ < ?"), CFSTR("expirationDate"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_date(MEMORY[0x1E0C99D68], v15, v16);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v13;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v17, (uint64_t)&v20, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deleteFrom_where_bindings_(v5, v19, (uint64_t)CFSTR("OperationInfo"), v11, v18);

  }
}

void sub_1BEBBE2E0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  const char *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  const __CFString *v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  _QWORD v41[6];
  _QWORD v42[7];

  v42[6] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = (void *)MEMORY[0x1E0CB36F8];
    v5 = a2;
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v4, v6, v3, 1, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(void **)(a1 + 48);
    v42[0] = *(_QWORD *)(a1 + 40);
    v41[0] = CFSTR("operationID");
    v41[1] = CFSTR("applicationID");
    objc_msgSend_appContainerTuple(v8, v9, v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_applicationID(v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v42[1] = v14;
    v41[2] = CFSTR("personaID");
    objc_msgSend_appContainerTuple(*(void **)(a1 + 48), v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_personaID(v17, v18, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v20;
    if (v20)
      v24 = (const __CFString *)v20;
    else
      v24 = &stru_1E7838F48;
    v42[2] = v24;
    v41[3] = CFSTR("containerID");
    objc_msgSend_appContainerTuple(*(void **)(a1 + 48), v21, v22);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerID(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v42[3] = v28;
    v41[4] = CFSTR("accountID");
    objc_msgSend_accountID(*(void **)(a1 + 48), v29, v30);
    v31 = objc_claimAutoreleasedReturnValue();
    v33 = (void *)v31;
    if (v31)
      v34 = (const __CFString *)v31;
    else
      v34 = &stru_1E7838F48;
    v41[5] = CFSTR("operationInfo");
    v42[4] = v34;
    v42[5] = v7;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v32, (uint64_t)v42, v41, 6);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_insertOrReplaceInto_values_(v5, v36, (uint64_t)CFSTR("OperationInfo"), v35);

  }
  else
  {
    v40 = *(_QWORD *)(a1 + 40);
    v37 = (void *)MEMORY[0x1E0C99D20];
    v11 = a2;
    objc_msgSend_arrayWithObjects_count_(v37, v38, (uint64_t)&v40, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deleteFrom_where_bindings_(v11, v39, (uint64_t)CFSTR("OperationInfo"), CFSTR("operationID = ?"), v7, v40);
  }

}

uint64_t sub_1BEBBE5E8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__lockedSetOperationInfo_forOperationID_appContainerAccountTuple_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBBE884(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEBBE938;
  v8[3] = &unk_1E7836578;
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  objc_msgSend_performWithDelegate_(v6, v7, (uint64_t)v8);

}

uint64_t sub_1BEBBE938(uint64_t result, uint64_t a2)
{
  if (a2)
    return MEMORY[0x1E0DE7D20](a2, sel_operationWithID_receivedCallback_, *(_QWORD *)(result + 32));
  return result;
}

void sub_1BEBBE94C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  const char *v6;
  void *v7;
  const char *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t isCompletionCallback;
  const char *v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  const char *v32;
  _QWORD v33[8];
  _QWORD v34[8];
  _QWORD v35[2];
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v35[0] = CFSTR("operationID");
  v35[1] = CFSTR("callback");
  v3 = *(_QWORD *)(a1 + 40);
  v36[0] = *(_QWORD *)(a1 + 32);
  v36[1] = v3;
  v4 = (void *)MEMORY[0x1E0C99D80];
  v5 = a2;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(v4, v6, (uint64_t)v36, v35, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_insertOrReplaceInto_values_(v5, v8, (uint64_t)CFSTR("Callback"), v7);

  v34[0] = *(_QWORD *)(a1 + 32);
  v33[0] = CFSTR("operationID");
  v33[1] = CFSTR("applicationID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v9, (uint64_t)CFSTR("applicationID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v10;
  v33[2] = CFSTR("personaID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v11, (uint64_t)CFSTR("personaID"));
  v12 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v12;
  if (v12)
    v15 = (const __CFString *)v12;
  else
    v15 = &stru_1E7838F48;
  v34[2] = v15;
  v33[3] = CFSTR("containerID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v13, (uint64_t)CFSTR("containerID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v34[3] = v16;
  v33[4] = CFSTR("accountID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v17, (uint64_t)CFSTR("accountID"));
  v18 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v18;
  if (v18)
    v21 = (const __CFString *)v18;
  else
    v21 = &stru_1E7838F48;
  v34[4] = v21;
  v33[5] = CFSTR("operationInfo");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v19, (uint64_t)CFSTR("operationInfo"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v34[5] = v22;
  v33[6] = CFSTR("operationIsComplete");
  v23 = (void *)MEMORY[0x1E0CB37E8];
  isCompletionCallback = objc_msgSend_isCompletionCallback(*(void **)(a1 + 56), v24, v25);
  objc_msgSend_numberWithBool_(v23, v27, isCompletionCallback);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v33[7] = CFSTR("expirationDate");
  v29 = *(_QWORD *)(a1 + 64);
  v34[6] = v28;
  v34[7] = v29;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v30, (uint64_t)v34, v33, 8);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_insertOrReplaceInto_values_(v5, v32, (uint64_t)CFSTR("OperationInfo"), v31);

}

uint64_t sub_1BEBBEC2C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__lockedArchiveCallback_forOperationID_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBBECD4(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD block[5];
  id v11;
  id v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend__locked_operationInfoForID_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend_cacheDelegateQueue(*(void **)(a1 + 32), v3, v4);
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEBBEE48;
    block[3] = &unk_1E782E418;
    v7 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v11 = v7;
    v12 = v5;
    dispatch_sync(v6, block);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v14 = v9;
      _os_log_error_impl(&dword_1BE990000, v8, OS_LOG_TYPE_ERROR, "Couldn't find an operation with ID %{public}@ to register a retry", buf, 0xCu);
    }
  }

}

void sub_1BEBBEE48(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint8_t buf[4];
  _BYTE v40[14];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = &v35;
  v37 = 0x2020000000;
  v38 = 1;
  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = sub_1BEBBF140;
  v34[3] = &unk_1E78365C8;
  v34[4] = &v35;
  objc_msgSend_performWithDelegate_(v6, v8, (uint64_t)v34);
  if (*((_BYTE *)v36 + 24))
  {
    objc_msgSend_date(MEMORY[0x1E0C99D68], v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSince1970(v11, v12, v13);
    v15 = v14;

    objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v16, (uint64_t)CFSTR("retryNumber"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend_integerValue(v17, v18, v19);

    v21 = v20 + 1;
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v22 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v23 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v40 = v21;
      *(_WORD *)&v40[4] = 2114;
      *(_QWORD *)&v40[6] = v23;
      _os_log_impl(&dword_1BE990000, v22, OS_LOG_TYPE_INFO, "Registering retry number %d for operation %{public}@", buf, 0x12u);
    }
    v29[0] = v7;
    v29[1] = 3221225472;
    v29[2] = sub_1BEBBF154;
    v29[3] = &unk_1E78365F0;
    v24 = *(void **)(a1 + 32);
    v30 = *(id *)(a1 + 40);
    v31 = *(id *)(a1 + 48);
    v32 = v15;
    v33 = v21;
    v26 = (id)objc_msgSend_performDatabaseOperation_(v24, v25, (uint64_t)v29);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v27 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v28 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v40 = v28;
      _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Not registering a retry for operation %{public}@ since we have an interested delegate", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v35, 8);
}

void sub_1BEBBF118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBBF140(uint64_t result, uint64_t a2)
{
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

void sub_1BEBBF154(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  _QWORD v27[8];
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 40);
  v28[0] = *(_QWORD *)(a1 + 32);
  v27[0] = CFSTR("operationID");
  v27[1] = CFSTR("applicationID");
  v4 = a2;
  objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)CFSTR("applicationID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v28[1] = v6;
  v27[2] = CFSTR("personaID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v7, (uint64_t)CFSTR("personaID"));
  v8 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v8;
  if (v8)
    v11 = (const __CFString *)v8;
  else
    v11 = &stru_1E7838F48;
  v28[2] = v11;
  v27[3] = CFSTR("containerID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v9, (uint64_t)CFSTR("containerID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v28[3] = v12;
  v27[4] = CFSTR("accountID");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v13, (uint64_t)CFSTR("accountID"));
  v14 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v14;
  if (v14)
    v17 = (const __CFString *)v14;
  else
    v17 = &stru_1E7838F48;
  v28[4] = v17;
  v27[5] = CFSTR("operationInfo");
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v15, (uint64_t)CFSTR("operationInfo"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v28[5] = v18;
  v27[6] = CFSTR("lastAttemptDate");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v19, v20, *(double *)(a1 + 48));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v28[6] = v21;
  v27[7] = CFSTR("retryNumber");
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v22, *(_QWORD *)(a1 + 56));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v28[7] = v23;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v24, (uint64_t)v28, v27, 8);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_insertOrReplaceInto_values_(v4, v26, (uint64_t)CFSTR("OperationInfo"), v25);

}

void sub_1BEBBF518(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  id v7;

  objc_msgSend_defaultContext(CKDLogicalDeviceContext, a2, a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfoCache(v7, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expungeOperationInfoForDeletedAccountID_(v5, v6, 0);

}

void sub_1BEBBF820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBBF850(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v24 = v9;
      objc_msgSend_error(v3, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138412290;
      v29 = v27;
      _os_log_error_impl(&dword_1BE990000, v24, OS_LOG_TYPE_ERROR, "Error fetching configuration from the server: %@", (uint8_t *)&v28, 0xCu);

    }
    objc_msgSend_error(v3, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(WeakRetained, v13, (uint64_t)v12);

  }
  else
  {
    objc_msgSend_configuration(v3, v7, v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend_configuration(v3, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setConfiguration_(WeakRetained, v18, (uint64_t)v17);

      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v19 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v20 = v19;
        objc_msgSend_configuration(WeakRetained, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138412290;
        v29 = v23;
        _os_log_impl(&dword_1BE990000, v20, OS_LOG_TYPE_INFO, "Fetched configuration from the server: %@", (uint8_t *)&v28, 0xCu);

      }
    }
    objc_msgSend_finishWithError_(WeakRetained, v15, 0);
  }

}

void sub_1BEBBFB50()
{
  void *v0;

  v0 = (void *)qword_1ED702B18;
  qword_1ED702B18 = (uint64_t)&unk_1E78AFCA8;

}

uint64_t sub_1BEBBFC78(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPTokenRegistrationBody *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPTokenRegistrationBody);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1BEAFFBE8((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEBC0194(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPListPosition *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(CKDPListPosition);
        v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(CKDPListPosition);
        v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (sub_1BEB8E8B4((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_1BEBC0C04(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  uint64_t v69;
  void *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  uint64_t AssetContent;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v109;
  void *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[128];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_configurationsByRecordZoneID(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = *(void **)(a1 + 32);
  v12 = objc_msgSend_operationType(v9, v10, v11);
  objc_msgSend_operationRequestWithType_(v9, v13, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_opt_new();
  objc_msgSend_setFetchArchivedRecordsRequest_(v14, v16, (uint64_t)v15);

  objc_msgSend_previousServerChangeToken(v8, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_data(v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchArchivedRecordsRequest(v14, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setArchiveContinuationToken_(v25, v26, (uint64_t)v22);

  objc_msgSend_translator(*(void **)(a1 + 32), v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pRecordZoneIdentifierFromRecordZoneID_(v29, v30, (uint64_t)v3);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchArchivedRecordsRequest(v14, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setZoneIdentifier_(v34, v35, (uint64_t)v31);

  objc_msgSend_fetchArchivedRecordsRequest(v14, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setNewestFirst_(v38, v39, 1);

  objc_msgSend_desiredAssetKeys(*(void **)(a1 + 32), v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend_count(v42, v43, v44);

  if (v45)
  {
    v110 = v8;
    v48 = (void *)objc_opt_new();
    objc_msgSend_fetchArchivedRecordsRequest(v14, v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAssetsToDownload_(v51, v52, (uint64_t)v48);

    v53 = (void *)objc_opt_new();
    objc_msgSend_fetchArchivedRecordsRequest(v14, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_assetsToDownload(v56, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAssetFields_(v59, v60, (uint64_t)v53);

    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = a1;
    objc_msgSend_desiredAssetKeys(*(void **)(a1 + 32), v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v64, (uint64_t)&v111, v115, 16);
    if (v65)
    {
      v66 = v65;
      v67 = *(_QWORD *)v112;
      do
      {
        for (i = 0; i != v66; ++i)
        {
          if (*(_QWORD *)v112 != v67)
            objc_enumerationMutation(v63);
          v69 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * i);
          v70 = (void *)objc_opt_new();
          objc_msgSend_setName_(v70, v71, v69);
          objc_msgSend_fetchArchivedRecordsRequest(v14, v72, v73);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_assetsToDownload(v74, v75, v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_assetFields(v77, v78, v79);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addFields_(v80, v81, (uint64_t)v70);

        }
        v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v82, (uint64_t)&v111, v115, 16);
      }
      while (v66);
    }

    v8 = v110;
    a1 = v109;
  }
  else if (objc_msgSend_shouldFetchAssetContent(*(void **)(a1 + 32), v46, v47))
  {
    v85 = (void *)objc_opt_new();
    objc_msgSend_fetchArchivedRecordsRequest(v14, v86, v87);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAssetsToDownload_(v88, v89, (uint64_t)v85);

    AssetContent = objc_msgSend_shouldFetchAssetContent(*(void **)(a1 + 32), v90, v91);
    objc_msgSend_fetchArchivedRecordsRequest(v14, v93, v94);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_assetsToDownload(v95, v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAllAssets_(v98, v99, AssetContent);

  }
  objc_msgSend_zoneIDsByRequestOperationUUID(*(void **)(a1 + 32), v83, v84);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_request(v14, v101, v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationUUID(v103, v104, v105);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v100, v107, (uint64_t)v3, v106);

  return v14;
}

void sub_1BEBC1C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBC1DDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v18 = *(void **)(a1 + 32);
      v19 = v9;
      objc_msgSend_recordID(v18, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v25 = v22;
      v26 = 2112;
      v27 = v8;
      _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the database for %@: %@", buf, 0x16u);

    }
    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v12);

  }
  else
  {
    objc_msgSend_recordID(*(void **)(a1 + 32), v6, v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v14, v15);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_1BEBC1F90;
    v23[3] = &unk_1E7836658;
    v23[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_fetchPCSDataForRecordWithID_databaseScope_withCompletionHandler_(v5, v17, (uint64_t)v13, v16, v23);

  }
}

void sub_1BEBC1F90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  _BYTE v42[24];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v5)
  {
    if ((objc_msgSend_fetchOptions(*(void **)(a1 + 32), v7, v8) & 4) == 0
      || (objc_msgSend_chainPCSData(v5, v10, v11),
          v12 = (void *)objc_claimAutoreleasedReturnValue(),
          v12,
          v12))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v13 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v37 = *(void **)(a1 + 32);
        v38 = v13;
        objc_msgSend_recordID(v37, v39, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v42 = 138412290;
        *(_QWORD *)&v42[4] = v41;
        _os_log_debug_impl(&dword_1BE990000, v38, OS_LOG_TYPE_DEBUG, "PCS data was fetched from the database for record %@", v42, 0xCu);

      }
      objc_msgSend_setWasFetchedFromCache_(*(void **)(a1 + 32), v14, 1);
      objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v15, (uint64_t)v5, 0);
      goto LABEL_24;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v32 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v33 = *(void **)(a1 + 32);
      v21 = v32;
      objc_msgSend_recordID(v33, v34, v35);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v42 = 138412290;
      *(_QWORD *)&v42[4] = v24;
      v25 = "PCS data was found in the database, but it didn't have the requested chain PCS. Fetching PCS data from the s"
            "erver for record %@.";
      goto LABEL_22;
    }
  }
  else
  {
    v18 = (void *)*MEMORY[0x1E0C952F8];
    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v18);
      v19 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v20 = *(void **)(a1 + 32);
        v21 = v19;
        objc_msgSend_recordID(v20, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v42 = 138412546;
        *(_QWORD *)&v42[4] = v24;
        *(_WORD *)&v42[12] = 2112;
        *(_QWORD *)&v42[14] = v9;
        v25 = "Error fetching PCS data from the database for %@: %@";
        v26 = v21;
        v27 = 22;
LABEL_23:
        _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, v25, v42, v27);

      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v18);
      v28 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v29 = *(void **)(a1 + 32);
        v21 = v28;
        objc_msgSend_recordID(v29, v30, v31);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v42 = 138412290;
        *(_QWORD *)&v42[4] = v24;
        v25 = "No PCS data was found in the database for record %@";
LABEL_22:
        v26 = v21;
        v27 = 12;
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v16, v17, *(_OWORD *)v42, *(_QWORD *)&v42[16], v43);
  v36 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v36);

}

void sub_1BEBC23B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  int v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v12 = v9;
  if (v7 && !v9)
  {
    objc_msgSend_recordType(v7, v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setServerRecordType_(*(void **)(a1 + 32), v14, (uint64_t)v13);

  }
  objc_msgSend_protectionData(v7, v10, v11);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {

LABEL_7:
    objc_msgSend_dataWithRecord_(CKDRecordPCSData, v18, (uint64_t)v7);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v22, (uint64_t)v21, v12);
    goto LABEL_8;
  }
  objc_msgSend_zoneishKeyID(v7, v16, v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
    goto LABEL_7;
  if (v12)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v26 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v28 = 138412290;
      v29 = v12;
      _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the server: %@", (uint8_t *)&v28, 0xCu);
    }
  }
  else if ((objc_msgSend_fetchOptions(*(void **)(a1 + 32), v18, v20) & 4) == 0)
  {
    objc_msgSend_setServerRecordHasNoProtectionData_(*(void **)(a1 + 32), v27, 1);
  }
  v21 = 0;
  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v27, 0, v12);
LABEL_8:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v23, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v25);

}

void sub_1BEBC27E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEBC2918;
  v9[3] = &unk_1E7831DE8;
  objc_copyWeak(&v11, &location);
  v10 = *(id *)(a1 + 40);
  objc_msgSend_setSaveCompletionBlock_(v3, v5, (uint64_t)v9);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEBC2B1C;
  v7[3] = &unk_1E782EF38;
  objc_copyWeak(&v8, &location);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v7);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

}

void sub_1BEBC28EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBC2918(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v7;
  id v8;
  id WeakRetained;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  int v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = (void *)*MEMORY[0x1E0C952F8];
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v10);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v26 = 138412290;
      v27 = v8;
      _os_log_error_impl(&dword_1BE990000, v11, OS_LOG_TYPE_ERROR, "Got an error trying to save parent chain PCS data: %@", (uint8_t *)&v26, 0xCu);
    }
    objc_msgSend_fetchError(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
      objc_msgSend_setFetchError_(WeakRetained, v15, (uint64_t)v8);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v10);
    v16 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v25 = *(void **)(a1 + 32);
      v26 = 138412290;
      v27 = v25;
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Successfully saved chain PCS data on record %@", (uint8_t *)&v26, 0xCu);
    }
    objc_msgSend_protectionData(v7, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend_setRecordPCSData_(WeakRetained, v20, 0);
      objc_msgSend_setDidFetchData_(WeakRetained, v21, 0);
      objc_msgSend_dataWithRecord_(CKDRecordPCSData, v22, (uint64_t)v7);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__handlePCSDataFetched_withError_(WeakRetained, v24, (uint64_t)v23, 0);

    }
  }

}

void sub_1BEBC2B1C(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBC2E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBC2E70(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  NSObject *v46;
  id v47;

  v47 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!objc_msgSend_pcs(v47, v7, v8))
  {
    objc_msgSend_domain(v5, v9, v10);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = *MEMORY[0x1E0C94B20];
    if (objc_msgSend_isEqualToString_(v32, v34, *MEMORY[0x1E0C94B20]))
    {
      v37 = objc_msgSend_code(v5, v35, v36);

      if (v37 == 5007)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v38, v33, 5010, v5, CFSTR("PCS fetch requested local cache only."));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setFetchError_(WeakRetained, v41, (uint64_t)v40);
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {

    }
    v42 = (void *)MEMORY[0x1E0C94FF8];
    objc_msgSend_recordID(WeakRetained, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_error_format_(v42, v43, v33, 2003, v5, CFSTR("Couldn't fetch zone PCS for record %@ from the server: %@"), v40, v5);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFetchError_(WeakRetained, v45, (uint64_t)v44);

    goto LABEL_11;
  }
  objc_msgSend_recordPCSData(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setZonePCSData_(v11, v12, (uint64_t)v47);

  objc_msgSend_recordPCSData(WeakRetained, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_zoneishPublicKeyID(v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v21 = (void *)v18;
    v22 = objc_msgSend_zoneishPCS(v47, v19, v20);

    if (!v22)
    {
      v25 = (void *)MEMORY[0x1E0C94FF8];
      v26 = *MEMORY[0x1E0C94B20];
      objc_msgSend_recordID(WeakRetained, v23, v24);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_error_format_(v25, v28, v26, 2003, v5, CFSTR("Couldn't fetch record PCS from zone for record %@ from the server: %@"), v27, v5);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFetchError_(WeakRetained, v30, (uint64_t)v29);

LABEL_12:
      objc_msgSend_setShouldRetry_(WeakRetained, v31, 0);
    }
  }
  else
  {

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v23, v24);
  v46 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v46);

}

void sub_1BEBC3920(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  objc_destroyWeak((id *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1BEBC39A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *WeakRetained;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v21 = a2;
  v5 = a3;
  if (objc_msgSend_pcs(v21, v6, v7))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_recordPCSData(WeakRetained, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setParentPCSData_(v13, v14, (uint64_t)v21);

  }
  else
  {
    objc_msgSend_domain(v5, v8, v9);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(WeakRetained, v15, *MEMORY[0x1E0C94B20]))
    {
      if (objc_msgSend_code(v5, v16, v17) == 5007)
      {

      }
      else
      {
        v20 = objc_msgSend_code(v5, v18, v19);

        if (v20 != 5010)
          goto LABEL_7;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      goto LABEL_7;
    }
  }

LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEBC3AA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *WeakRetained;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v21 = a2;
  v5 = a3;
  if (objc_msgSend_pcs(v21, v6, v7))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_recordPCSData(WeakRetained, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSharePCSData_(v13, v14, (uint64_t)v21);

  }
  else
  {
    objc_msgSend_domain(v5, v8, v9);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(WeakRetained, v15, *MEMORY[0x1E0C94B20]))
    {
      if (objc_msgSend_code(v5, v16, v17) == 5007)
      {

      }
      else
      {
        v20 = objc_msgSend_code(v5, v18, v19);

        if (v20 != 5010)
          goto LABEL_7;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      goto LABEL_7;
    }
  }

LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEBC3B98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  void *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend_shareID(v5, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v43 = *(void **)(a1 + 32);
      v44 = v13;
      objc_msgSend_recordID(v43, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v50 = v47;
      v51 = 2112;
      v52 = v48;
      _os_log_debug_impl(&dword_1BE990000, v44, OS_LOG_TYPE_DEBUG, "Record %@ is in shared zone %@. Using zone PCS data to decrypt it.", buf, 0x16u);

    }
  }
  if (!objc_msgSend_pcs(v5, v11, v12))
  {
    objc_msgSend_domain(v6, v14, v15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v20, v37, *MEMORY[0x1E0C94B20]))
    {
      if (objc_msgSend_code(v6, v38, v39) == 5007)
      {

      }
      else
      {
        v42 = objc_msgSend_code(v6, v40, v41);

        if (v42 != 5010)
          goto LABEL_16;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  objc_msgSend_recordPCSData(WeakRetained, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setZonePCSData_(v16, v17, (uint64_t)v5);

  objc_msgSend_recordPCSData(WeakRetained, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_zoneishPublicKeyID(v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  if (!v23)
  {
LABEL_13:

    goto LABEL_16;
  }
  v26 = (void *)v23;
  v27 = objc_msgSend_zoneishPCS(v5, v24, v25);

  if (!v27)
  {
    v30 = (void *)MEMORY[0x1E0C94FF8];
    v31 = *MEMORY[0x1E0C94B20];
    objc_msgSend_recordID(WeakRetained, v28, v29);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_error_format_(v30, v33, v31, 2003, v6, CFSTR("Couldn't fetch zoneish PCS from zone for record %@ from the server: %@"), v32, v6);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFetchError_(WeakRetained, v35, (uint64_t)v34);

    objc_msgSend_setShouldRetry_(WeakRetained, v36, 0);
  }
LABEL_16:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1BEBC3E48(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  NSObject *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  void *v83;
  const char *v84;
  const char *v85;
  uint8_t buf[4];
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v70 = v3;
    objc_msgSend_recordID(WeakRetained, v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v87 = v73;
    _os_log_debug_impl(&dword_1BE990000, v70, OS_LOG_TYPE_DEBUG, "All PCS fetches for shared record %@ have finished.", buf, 0xCu);

  }
  objc_msgSend_recordPCSData(WeakRetained, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_parentPCSData(v6, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    goto LABEL_8;
  objc_msgSend_recordPCSData(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sharePCSData(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {

LABEL_8:
    goto LABEL_9;
  }
  objc_msgSend_recordPCSData(WeakRetained, v15, v16);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_zonePCSData(v60, v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v63)
  {
    v64 = (void *)MEMORY[0x1E0C94FF8];
    v65 = *MEMORY[0x1E0C94B20];
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v17, *MEMORY[0x1E0C94B20], 5010, CFSTR("PCS fetch requested local cache only"));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFetchError_(WeakRetained, v67, (uint64_t)v66);
    }
    else
    {
      objc_msgSend_recordPCSData(WeakRetained, v17, v18);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_parentID(v66, v74, v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      v77 = *(_QWORD *)(a1 + 32);
      v78 = *(_QWORD *)(a1 + 40);
      objc_msgSend_recordID(WeakRetained, v79, v80);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v64, v82, v65, 2003, CFSTR("Couldn't fetch parent PCS (%@) or share PCS (%@) or any shared zone PCS (%@) for record %@ from the server"), v76, v77, v78, v81);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFetchError_(WeakRetained, v84, (uint64_t)v83);

    }
    objc_msgSend_setShouldRetry_(WeakRetained, v85, 0);
    goto LABEL_16;
  }
LABEL_9:
  if ((objc_msgSend_fetchOptions(WeakRetained, v17, v18) & 0x10) != 0)
  {
    objc_msgSend_recordPCSData(WeakRetained, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sharePCSData(v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_recordPCSData(WeakRetained, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v27;
    if (v24)
    {
      objc_msgSend_sharePCSData(v27, v28, v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend_myParticipantPCS(v31, v32, v33);
    }
    else
    {
      objc_msgSend_zonePCSData(v27, v28, v29);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_shareID(v40, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_recordPCSData(WeakRetained, v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = v46;
      if (v43)
      {
        objc_msgSend_zonePCSData(v46, v47, v48);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_sharePCSData(v31, v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = objc_msgSend_myParticipantPCS(v51, v52, v53);
        objc_msgSend_recordPCSData(WeakRetained, v55, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setSigningPCS_(v57, v58, v54);

        goto LABEL_15;
      }
      objc_msgSend_parentPCSData(v46, v47, v48);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend_signingPCS(v31, v68, v69);
    }
    v37 = v34;
    objc_msgSend_recordPCSData(WeakRetained, v35, v36);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSigningPCS_(v38, v39, v37);

LABEL_15:
  }
LABEL_16:
  objc_msgSend_stateTransitionGroup(WeakRetained, v19, v20);
  v59 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v59);

}

void sub_1BEBC5848(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 144));
  _Unwind_Resume(a1);
}

void sub_1BEBC58C8(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBC590C(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBC5950(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBC5994(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBC5BA0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBC5BC8(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBC5C0C(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

uint64_t sub_1BEBC5F7C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  id v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBC6814(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKCDPCodeServiceResponseAttestationResponseAttestation *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKCDPCodeServiceResponseAttestationResponseAttestation);
        objc_msgSend_addAttestations_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEC03724((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBC712C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBC7BCC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_performRequest(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1BEBC8110(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBC98F8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  CKDPConfigurationField *v46;
  const char *v47;
  const char *v48;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 64) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_55;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_57;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_57:
        *(_DWORD *)(a1 + 56) = v20;
        goto LABEL_68;
      case 2u:
        PBReaderReadData();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = 24;
        goto LABEL_47;
      case 3u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 64) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                v30 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_61:
        *(_BYTE *)(a1 + 60) = v30 != 0;
        goto LABEL_68;
      case 4u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              v15 = v36++ >= 9;
              if (v15)
              {
                v37 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v37 = 0;
LABEL_65:
        *(_QWORD *)(a1 + 16) = v37;
        goto LABEL_68;
      case 5u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v44 = 0;
        }
        *(_QWORD *)(a1 + 8) = v44;
        goto LABEL_68;
      case 6u:
        PBReaderReadString();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = 48;
LABEL_47:
        v45 = *(void **)(a1 + v27);
        *(_QWORD *)(a1 + v27) = v26;

        goto LABEL_68;
      case 7u:
        v46 = objc_alloc_init(CKDPConfigurationField);
        objc_msgSend_addFieldValues_((void *)a1, v47, (uint64_t)v46);
        if (!PBReaderPlaceMark() || (sub_1BEA8AB98(v46, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_53;
      case 8u:
        v46 = objc_alloc_init(CKDPConfigurationFieldValue);
        objc_msgSend_addListValues_((void *)a1, v48, (uint64_t)v46);
        if (PBReaderPlaceMark() && (sub_1BEBC98F8(v46, a2) & 1) != 0)
        {
LABEL_53:
          PBReaderRecallMark();

LABEL_68:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_70:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
    }
  }
}

void sub_1BEBCAB60()
{
  CKDAccountStore *v0;
  void *v1;

  v0 = objc_alloc_init(CKDAccountStore);
  v1 = (void *)qword_1ED702B28;
  qword_1ED702B28 = (uint64_t)v0;

}

void sub_1BEBCAD5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBCADD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEBCAE4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBCAE60(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t isEqualToString;

  v5 = a2;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend_accountStore(*(void **)(a1 + 32), v3, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_aa_primaryAppleAccount(v6, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  objc_msgSend_identifier(v5, v3, v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v12, v16, (uint64_t)v15);

  return isEqualToString;
}

uint64_t sub_1BEBCB054(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t isEqualToString;

  v3 = a2;
  if (objc_msgSend_isProvisionedForDataclass_(v3, v4, *MEMORY[0x1E0C8F370]))
  {
    objc_msgSend_personaIdentifier(v3, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32));

  }
  else
  {
    isEqualToString = 0;
  }

  return isEqualToString;
}

id sub_1BEBCB0C4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_aa_appleAccounts(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEBCB16C;
  v11[3] = &unk_1E7836850;
  v12 = *(id *)(a1 + 40);
  objc_msgSend_CKFirstObjectPassingTest_(v7, v8, (uint64_t)v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

uint64_t sub_1BEBCB16C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t isEqualToString;

  v3 = a2;
  if (objc_msgSend_isProvisionedForDataclass_(v3, v4, *MEMORY[0x1E0C8F370]))
  {
    objc_msgSend_personaIdentifier(v3, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32));

  }
  else
  {
    isEqualToString = 0;
  }

  return isEqualToString;
}

uint64_t sub_1BEBCB31C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t isEqualToString;

  objc_msgSend_identifier(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v4, v5, *(_QWORD *)(a1 + 32));

  return isEqualToString;
}

id sub_1BEBCB35C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;

  objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_accountWithIdentifier_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t sub_1BEBCB4E0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t isEqualToString;

  objc_msgSend_aa_altDSID(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v4, v5, *(_QWORD *)(a1 + 32));

  return isEqualToString;
}

id sub_1BEBCB520(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;

  objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_aa_appleAccountWithAltDSID_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t sub_1BEBCB564(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEBCB640(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBCB818()
{
  void *v0;

  v0 = (void *)qword_1ED702B38;
  qword_1ED702B38 = (uint64_t)&unk_1E78AFCD0;

}

void sub_1BEBCB968()
{
  void *v0;

  v0 = (void *)qword_1ED700A98;
  qword_1ED700A98 = (uint64_t)&unk_1E78AFCF8;

}

uint64_t sub_1BEBCBC2C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPQuery *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPQuery);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (sub_1BEB0F0CC((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_40;
        goto LABEL_47;
      case 2u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

        goto LABEL_45;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_44:
        *(_DWORD *)(a1 + 24) = v23;
        goto LABEL_45;
      case 4u:
        v17 = (CKDPQuery *)objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
          goto LABEL_47;
        goto LABEL_40;
      case 5u:
        v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v17, a2))
          goto LABEL_47;
        goto LABEL_40;
      case 6u:
        v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (sub_1BEC1BD10((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

void sub_1BEBCD8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBCD8D8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BEBCD8E8(uint64_t a1)
{

}

void sub_1BEBCD8F0(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  int v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 32), v4, 0);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    objc_msgSend_error(v3, v5, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  if (v10)
  {
    (*(void (**)(void))(v10 + 16))();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = 0;

  }
  if (objc_msgSend_count(*(void **)(a1 + 32), v5, v6))
  {
    objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v13, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_completionBlock(v14, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    objc_msgSend_setCompletionBlock_(v14, v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v30 = 138412290;
      v31 = v14;
      _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Executing chained batched requests, triggering %@", (uint8_t *)&v30, 0xCu);
    }
    objc_msgSend_performRequest_(*(void **)(a1 + 40), v22, (uint64_t)v14);

  }
  else
  {
    v23 = (void *)*MEMORY[0x1E0C952F8];
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v23);
      v24 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v25 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v30 = 138412290;
        v31 = v25;
        _os_log_error_impl(&dword_1BE990000, v24, OS_LOG_TYPE_ERROR, "Fetching public identities failed: %@", (uint8_t *)&v30, 0xCu);
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v23);
      v26 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v30) = 0;
        _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Fetching public identities completed", (uint8_t *)&v30, 2u);
      }
    }
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = 0;

    objc_msgSend_finishWithError_(*(void **)(a1 + 48), v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  }

}

void sub_1BEBCDE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBCDE8C(void **a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  os_log_t *v14;
  dispatch_block_t *v15;
  void *v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  void *v21;
  dispatch_block_t v22;
  os_log_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  id WeakRetained;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  id v50;
  const char *v51;
  NSObject *v52;
  const char *v53;
  void *v54;
  const char *v55;
  NSObject *v56;
  const char *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  uint8_t buf[4];
  id v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v12 = v9;
  v13 = (_QWORD *)MEMORY[0x1E0C95300];
  v14 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (v8)
  {
    v15 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_unitTestOverrides(a1[4], v10, v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v16, v17, (uint64_t)CFSTR("GenerateOONPrivateKey"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (v18)
      {
        if (*v13 != -1)
          dispatch_once(MEMORY[0x1E0C95300], *v15);
        v19 = *v14;
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Forcing OON private key generation due to unit test", buf, 2u);
        }
        objc_msgSend_setPublicSharingKey_(v8, v20, 0);
      }
    }
    objc_msgSend_publicSharingKey(v8, v10, v11);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = *v15;
    if (v21)
    {
      if (*v13 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v22);
      v23 = *v14;
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        v58 = v23;
        objc_msgSend_publicSharingKey(v8, v59, v60);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v65 = v8;
        v66 = 2114;
        v67 = v61;
        _os_log_debug_impl(&dword_1BE990000, v58, OS_LOG_TYPE_DEBUG, "Saving user identity %@ with publicSharingKey %{public}@", buf, 0x16u);

      }
      objc_msgSend__saveUserIdentity_forLookupInfo_(a1[5], v24, (uint64_t)v8, v7);
    }
    else
    {
      if (*v13 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v22);
      v40 = *v14;
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v65 = v8;
        _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Got OON user identity %@", buf, 0xCu);
      }
      WeakRetained = objc_loadWeakRetained((id *)a1[5] + 1);
      objc_msgSend_container(WeakRetained, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v44, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = 0;
      objc_msgSend_generateOONPrivateKeyWithError_(v47, v48, (uint64_t)&v63);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = v63;

      if (v50)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], *v15);
        v52 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v65 = v50;
          _os_log_error_impl(&dword_1BE990000, v52, OS_LOG_TYPE_ERROR, "Error while generating private key for OON user identity: %@", buf, 0xCu);
        }
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v53, *MEMORY[0x1E0C94B20], 5005, v50, CFSTR("Error while generating private key for OON user identity: %@"), v8);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__receivedUserIdentity_forLookupInfo_error_(a1[5], v55, 0, v7, v54);

      }
      else
      {
        objc_msgSend_setOutOfNetworkPrivateKey_(v8, v51, (uint64_t)v49);
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], *v15);
        v56 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v65 = v8;
          _os_log_debug_impl(&dword_1BE990000, v56, OS_LOG_TYPE_DEBUG, "Generated private key for OON user identity: %@", buf, 0xCu);
        }
        objc_msgSend__saveUserIdentity_forLookupInfo_(a1[5], v57, (uint64_t)v8, v7);
      }

    }
  }
  else
  {
    if (v9 && objc_msgSend_hasError(v9, v10, v11))
    {
      v62 = (void *)MEMORY[0x1E0C94FF8];
      v25 = *MEMORY[0x1E0C94B20];
      v26 = sub_1BEB10D5C(v12);
      v27 = objc_loadWeakRetained(a1 + 6);
      sub_1BEB10290(v27, v12);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v12, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorDescription(v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v26;
      v14 = (os_log_t *)MEMORY[0x1E0C952B0];
      objc_msgSend_errorWithDomain_code_userInfo_format_(v62, v36, v25, v35, v28, CFSTR("Error fetching user identity for %@ from server: %@"), v7, v34);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = (_QWORD *)MEMORY[0x1E0C95300];
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v10, *MEMORY[0x1E0C94B20], 5000, CFSTR("Failed to fetch user identity for %@"), v7);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v38 = *v14;
    if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      v65 = v7;
      v66 = 2112;
      v67 = v37;
      _os_log_debug_impl(&dword_1BE990000, v38, OS_LOG_TYPE_DEBUG, "Failed to perform a user identity lookup for lookup info %@: %@", buf, 0x16u);
    }
    objc_msgSend__receivedUserIdentity_forLookupInfo_error_(a1[5], v39, 0, v7, v37);

  }
}

void sub_1BEBCEE4C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v4 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BEBCEFE0;
  v14[3] = &unk_1E7836958;
  objc_copyWeak(&v15, &from);
  objc_copyWeak(&v16, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v14);
  v8 = v4;
  v9 = 3221225472;
  v10 = sub_1BEBCF184;
  v11 = &unk_1E782E468;
  objc_copyWeak(&v12, &location);
  objc_copyWeak(&v13, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)&v8);
  objc_msgSend_setFetchOperation_(*(void **)(a1 + 32), v7, (uint64_t)v3, v8, v9, v10, v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBCEF98(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEBCEFE0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  const char *v10;
  void *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  objc_class *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = v9;
  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v14 = v12;
      v15 = (objc_class *)objc_opt_class();
      NSStringFromClass(v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(WeakRetained, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138544130;
      v21 = v16;
      v22 = 2048;
      v23 = WeakRetained;
      v24 = 2114;
      v25 = v19;
      v26 = 2112;
      v27 = v7;
      _os_log_error_impl(&dword_1BE990000, v14, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not fetch record with error %@",
        (uint8_t *)&v20,
        0x2Au);

    }
    objc_msgSend_setError_(v11, v13, (uint64_t)v7);
  }
  else
  {
    objc_msgSend_setRecord_(v9, v10, (uint64_t)v6);
  }

}

void sub_1BEBCF184(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v18 = v8;
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = 138544130;
      v33 = v20;
      v34 = 2048;
      v35 = v3;
      v36 = 2114;
      v37 = v23;
      v38 = 2112;
      v39 = v26;
      _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed fetch record with error %@",
        (uint8_t *)&v32,
        0x2Au);

    }
    objc_msgSend_error(v3, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v7);
  v14 = (void *)*MEMORY[0x1E0C952B8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
  {
    v11 = v14;
    v27 = (objc_class *)objc_opt_class();
    NSStringFromClass(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543874;
    v33 = v28;
    v34 = 2048;
    v35 = v3;
    v36 = 2114;
    v37 = v31;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed fetch record",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setFetchOperation_(WeakRetained, v13, 0);
  objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v17);

}

void sub_1BEBCF5BC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  objc_msgSend_setUseEncryption_(v3, v4, 0);
  v5 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1BEBCF764;
  v15[3] = &unk_1E7836980;
  objc_copyWeak(&v16, &location);
  objc_copyWeak(&v17, &from);
  objc_msgSend_setRecordZoneFetchedProgressBlock_(v3, v6, (uint64_t)v15);
  v9 = v5;
  v10 = 3221225472;
  v11 = sub_1BEBCF918;
  v12 = &unk_1E782E468;
  objc_copyWeak(&v13, &location);
  objc_copyWeak(&v14, &from);
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)&v9);
  objc_msgSend_setZoneFetchOperation_(*(void **)(a1 + 32), v8, (uint64_t)v3, v9, v10, v11, v12);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBCF714(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEBCF764(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  objc_class *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7 && objc_msgSend_code(v7, v9, v10) != 2036)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v14 = v12;
      v15 = (objc_class *)objc_opt_class();
      NSStringFromClass(v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v11, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138544130;
      v21 = v16;
      v22 = 2048;
      v23 = v11;
      v24 = 2114;
      v25 = v19;
      v26 = 2112;
      v27 = v7;
      _os_log_error_impl(&dword_1BE990000, v14, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not fetch repair zone with error %@",
        (uint8_t *)&v20,
        0x2Au);

    }
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v7);
  }
  else
  {
    objc_msgSend_setRepairZone_(WeakRetained, v9, (uint64_t)v6);
  }

}

void sub_1BEBCF918(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v18 = v8;
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = 138544130;
      v33 = v20;
      v34 = 2048;
      v35 = v3;
      v36 = 2114;
      v37 = v23;
      v38 = 2112;
      v39 = v26;
      _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone fetch with error %@",
        (uint8_t *)&v32,
        0x2Au);

    }
    objc_msgSend_error(v3, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v7);
  v14 = (void *)*MEMORY[0x1E0C952B8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
  {
    v11 = v14;
    v27 = (objc_class *)objc_opt_class();
    NSStringFromClass(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543874;
    v33 = v28;
    v34 = 2048;
    v35 = v3;
    v36 = 2114;
    v37 = v31;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone fetch",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setZoneFetchOperation_(WeakRetained, v13, 0);
  objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v17);

}

void sub_1BEBCFD74(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v6 = objc_msgSend_bypassPCSEncryptionForTouchRepairZone(*(void **)(a1 + 32), v4, v5);
  objc_msgSend_setUseEncryption_(v3, v7, v6 ^ 1u);
  v8 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1BEBCFF24;
  v18[3] = &unk_1E78369A8;
  objc_copyWeak(&v19, &location);
  objc_copyWeak(&v20, &from);
  objc_msgSend_setSaveCompletionBlock_(v3, v9, (uint64_t)v18);
  v12 = v8;
  v13 = 3221225472;
  v14 = sub_1BEBD00A0;
  v15 = &unk_1E782E468;
  objc_copyWeak(&v16, &location);
  objc_copyWeak(&v17, &from);
  objc_msgSend_setCompletionBlock_(v3, v10, (uint64_t)&v12);
  objc_msgSend_setZoneCreateOperation_(*(void **)(a1 + 32), v11, (uint64_t)v3, v12, v13, v14, v15);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBCFED4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEBCFF24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  id WeakRetained;
  id v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  objc_class *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v10 = v8;
      v11 = (objc_class *)objc_opt_class();
      NSStringFromClass(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v7, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138544130;
      v17 = v12;
      v18 = 2048;
      v19 = v7;
      v20 = 2114;
      v21 = v15;
      v22 = 2112;
      v23 = v5;
      _os_log_error_impl(&dword_1BE990000, v10, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not save repair zone with error %@",
        (uint8_t *)&v16,
        0x2Au);

    }
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v5);
  }

}

void sub_1BEBD00A0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v18 = v8;
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = 138544130;
      v33 = v20;
      v34 = 2048;
      v35 = v3;
      v36 = 2114;
      v37 = v23;
      v38 = 2112;
      v39 = v26;
      _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone touch with error %@",
        (uint8_t *)&v32,
        0x2Au);

    }
    objc_msgSend_error(v3, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v7);
  v14 = (void *)*MEMORY[0x1E0C952B8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
  {
    v11 = v14;
    v27 = (objc_class *)objc_opt_class();
    NSStringFromClass(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543874;
    v33 = v28;
    v34 = 2048;
    v35 = v3;
    v36 = 2114;
    v37 = v31;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone touch",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setZoneCreateOperation_(WeakRetained, v13, 0);
  objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v17);

}

id sub_1BEBD07A4(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v2 = (objc_class *)MEMORY[0x1E0C94BE8];
  v3 = a2;
  v4 = [v2 alloc];
  objc_msgSend_signature(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_referenceSignature(v3, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)objc_msgSend_initWithFileSignature_referenceSignature_assetKey_(v4, v11, (uint64_t)v7, v10, 0);
  return v12;
}

void sub_1BEBD0828(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v4 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BEBD09BC;
  v14[3] = &unk_1E7836A10;
  objc_copyWeak(&v15, &location);
  objc_copyWeak(&v16, &from);
  objc_msgSend_setSaveCompletionBlock_(v3, v5, (uint64_t)v14);
  v8 = v4;
  v9 = 3221225472;
  v10 = sub_1BEBD0B38;
  v11 = &unk_1E782E468;
  objc_copyWeak(&v12, &location);
  objc_copyWeak(&v13, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)&v8);
  objc_msgSend_setCorruptOperation_(*(void **)(a1 + 32), v7, (uint64_t)v3, v8, v9, v10, v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBD0974(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEBD09BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  id WeakRetained;
  id v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  objc_class *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v11 = v9;
      v12 = (objc_class *)objc_opt_class();
      NSStringFromClass(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v8, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138544130;
      v18 = v13;
      v19 = 2048;
      v20 = v8;
      v21 = 2114;
      v22 = v16;
      v23 = 2112;
      v24 = v6;
      _os_log_error_impl(&dword_1BE990000, v11, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not upload corrupted asset with error %@",
        (uint8_t *)&v17,
        0x2Au);

    }
    objc_msgSend_setError_(WeakRetained, v10, (uint64_t)v6);
  }

}

void sub_1BEBD0B38(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_ERROR))
    {
      v18 = v8;
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = 138544130;
      v33 = v20;
      v34 = 2048;
      v35 = v3;
      v36 = 2114;
      v37 = v23;
      v38 = 2112;
      v39 = v26;
      _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed uploading corrupted asset with error %@",
        (uint8_t *)&v32,
        0x2Au);

    }
    objc_msgSend_error(v3, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v7);
  v14 = (void *)*MEMORY[0x1E0C952B8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
  {
    v11 = v14;
    v27 = (objc_class *)objc_opt_class();
    NSStringFromClass(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543874;
    v33 = v28;
    v34 = 2048;
    v35 = v3;
    v36 = 2114;
    v37 = v31;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed corrupted asset upload",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setCorruptOperation_(WeakRetained, v13, 0);
  objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v17);

}

void sub_1BEBD14F0(uint64_t a1, void *a2)
{
  id v3;
  CKDMarkAssetBrokenURLRequest *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id from;
  id v24;
  id location;

  v3 = a2;
  v4 = [CKDMarkAssetBrokenURLRequest alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v8 = objc_msgSend_writeRepairRecord(*(void **)(a1 + 40), v6, v7);
  v10 = (void *)objc_msgSend_initWithOperation_assetOrPackageMetadata_writeRepairRecord_(v4, v9, (uint64_t)v3, v5, v8);
  objc_initWeak(&location, *(id *)(a1 + 40));
  objc_initWeak(&v24, v3);
  objc_initWeak(&from, v10);
  objc_msgSend_setUseEncryption_(v3, v11, 0);
  objc_msgSend_setUrlRequest_(v3, v12, (uint64_t)v10);
  v13 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BEBD16FC;
  v20[3] = &unk_1E7836A38;
  objc_copyWeak(&v21, &location);
  objc_copyWeak(&v22, &from);
  objc_msgSend_setAssetBrokenBlock_(v10, v14, (uint64_t)v20);
  v17[0] = v13;
  v17[1] = 3221225472;
  v17[2] = sub_1BEBD1A78;
  v17[3] = &unk_1E782E468;
  objc_copyWeak(&v18, &location);
  objc_copyWeak(&v19, &v24);
  objc_msgSend_setCompletionBlock_(v3, v15, (uint64_t)v17);
  objc_msgSend_setWrapperOperation_(*(void **)(a1 + 40), v16, (uint64_t)v3);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&v22);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&from);
  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);

}

void sub_1BEBD16A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;
  id *v24;
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v26 - 96));
  objc_destroyWeak((id *)(v26 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEBD16FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  _QWORD block[5];
  id v41;
  _QWORD v42[5];
  id v43;
  id v44;
  uint8_t buf[4];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (void *)*MEMORY[0x1E0C952B8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
  {
    v37 = v9;
    *(_DWORD *)buf = 134217984;
    v46 = (int)objc_msgSend_code(v6, v38, v39);
    _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Marked asset broken with response code %ld", buf, 0xCu);

  }
  if (objc_msgSend_code(v6, v10, v11) == 1)
  {
    objc_msgSend_assetOrPackageMarkedBrokenBlock(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend_callbackQueue(WeakRetained, v15, v16);
      v17 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1BEBD1A30;
      block[3] = &unk_1E782EE20;
      block[4] = WeakRetained;
      v41 = v5;
      dispatch_async(v17, block);

    }
  }
  else
  {
    v18 = (void *)MEMORY[0x1E0C94FF8];
    v19 = *MEMORY[0x1E0C94B20];
    v20 = sub_1BEB10D5C(v6);
    sub_1BEB10290(v8, v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v6, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorDescription(v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_format_(v18, v28, v19, v20, v21, CFSTR("Error marking asset as broken: %@"), v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setError_(WeakRetained, v30, (uint64_t)v29);
    objc_msgSend_assetOrPackageMarkedBrokenBlock(WeakRetained, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      objc_msgSend_callbackQueue(WeakRetained, v34, v35);
      v36 = objc_claimAutoreleasedReturnValue();
      v42[0] = MEMORY[0x1E0C809B0];
      v42[1] = 3221225472;
      v42[2] = sub_1BEBD19EC;
      v42[3] = &unk_1E782E418;
      v42[4] = WeakRetained;
      v43 = v5;
      v44 = v29;
      dispatch_async(v36, v42);

    }
  }

}

void sub_1BEBD19EC(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_assetOrPackageMarkedBrokenBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1BEBD1A30(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_assetOrPackageMarkedBrokenBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), 0);

}

void sub_1BEBD1A78(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = (void *)*MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_INFO))
    {
      v11 = v8;
      objc_msgSend_error(v3, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412290;
      v23 = v14;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Error breaking asset: %@", (uint8_t *)&v22, 0xCu);

    }
    objc_msgSend_error(v3, v9, v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setMarkAssetBrokenError_(WeakRetained, v16, (uint64_t)v15);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v18 = *MEMORY[0x1E0C952B8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B8], OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v22) = 0;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Completed marking asset broken", (uint8_t *)&v22, 2u);
    }
  }
  objc_msgSend_setWrapperOperation_(WeakRetained, v17, 0);
  objc_msgSend_stateTransitionGroup(WeakRetained, v19, v20);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

void sub_1BEBD2644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBD266C(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_urlRequest(WeakRetained, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_urlRequest(WeakRetained, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(WeakRetained, v13, (uint64_t)v12);

  }
  else
  {
    objc_msgSend_finishWithError_(WeakRetained, v7, 0);
  }

}

uint64_t sub_1BEBD2A8C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKCDPCodeServiceRequestAssetAuthorizeGetRequestOptionsHeaderInfo *v17;
  const char *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKCDPCodeServiceRequestAssetAuthorizeGetRequestOptionsHeaderInfo);
        objc_msgSend_addContentRequestHeaders_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEABA0F0((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBD3410(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBD3D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;
  id *v27;
  id *v28;
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v30 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEBD3D70(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  id WeakRetained;

  v8 = (id *)(a1 + 32);
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  WeakRetained = objc_loadWeakRetained(v8);
  objc_msgSend__handleSupportedDeviceCapabilitiesCheckedForZoneID_capabilitySet_result_responseCode_(WeakRetained, v13, (uint64_t)v12, v11, v10, v9);

}

void sub_1BEBD3E04(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  objc_class *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)MEMORY[0x1E0C94FF8];
  v6 = *MEMORY[0x1E0C94B20];
  v7 = sub_1BEB10D5C(v3);
  objc_msgSend_request(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEB10290(v10, v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v3, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_errorDescription(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_format_(v5, v18, v6, v7, v11, CFSTR("Error checking supported device capabilities with server: %@"), v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v20 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = v20;
    v26 = (objc_class *)objc_opt_class();
    NSStringFromClass(v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v27;
    v33 = 2048;
    v34 = WeakRetained;
    v35 = 2114;
    v36 = v30;
    v37 = 2112;
    v38 = v19;
    _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Check supported device capabilities operation <%{public}@: %p; %{public}@> hit top-level error %@",
      buf,
      0x2Au);

  }
  objc_msgSend_error(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
    objc_msgSend_setError_(WeakRetained, v24, (uint64_t)v19);

}

void sub_1BEBD4030(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  objc_class *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = v4;
    v14 = (objc_class *)objc_opt_class();
    NSStringFromClass(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138544130;
    v23 = v15;
    v24 = 2048;
    v25 = WeakRetained;
    v26 = 2114;
    v27 = v18;
    v28 = 2112;
    v29 = v21;
    _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Check supported device capabilities operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v22,
      0x2Au);

  }
  objc_msgSend_error(WeakRetained, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend_error(v3, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v11, (uint64_t)v10);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v8, v9);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v12);

}

uint64_t sub_1BEBD4AB4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v17 = v10 & 7;
      if (v16 || (_DWORD)v17 == 4)
        break;
      v19 = (const char *)(v10 >> 3);
      switch((v10 >> 3))
      {
        case 0u:
          v20 = 0;
          do
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
              goto LABEL_59;
            }
            v24 = *(char *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0)
              break;
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 1;
          *(_BYTE *)(a1 + 48) |= 1u;
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v29 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v29 = 0;
          }
          *(_QWORD *)(a1 + 8) = v29;
          continue;
        case 2u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 2;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                v15 = v31++ >= 9;
                if (v15)
                {
                  v32 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 16) = v32;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 3;
          *(_BYTE *)(a1 + 48) |= 8u;
          break;
        case 4u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 4;
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 32;
          goto LABEL_47;
        case 5u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(_BYTE *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 5;
          PBReaderReadData();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = 24;
LABEL_47:
          v46 = *(void **)(a1 + v45);
          *(_QWORD *)(a1 + v45) = v44;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        v42 = v41 + 1;
        if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          break;
        v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
        *(_QWORD *)(a2 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0)
          goto LABEL_54;
        v37 += 7;
        v15 = v38++ >= 9;
        if (v15)
        {
          v39 = 0;
          goto LABEL_56;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        v39 = 0;
LABEL_56:
      *(_BYTE *)(a1 + 44) = v39 != 0;
LABEL_59:
      ;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEBD5934(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_shareRecordID(a2, (const char *)a2, a3);
}

uint64_t sub_1BEBD59CC(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_shareRecordID(a2, (const char *)a2, a3);
}

uint64_t sub_1BEBD7050(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  BOOL v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          v54 = v19 != 0;
          v55 = 12;
          goto LABEL_87;
        case 2u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 20) |= 8u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v14 = v24++ >= 9;
                if (v14)
                {
                  v25 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
LABEL_70:
          v54 = v25 != 0;
          v55 = 14;
          goto LABEL_87;
        case 4u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_74:
          v54 = v32 != 0;
          v55 = 13;
          goto LABEL_87;
        case 5u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_78:
          *(_DWORD *)(a1 + 8) = v38;
          continue;
        case 6u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_BYTE *)(a1 + 20) |= 0x20u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_82:
          v54 = v44 != 0;
          v55 = 16;
          goto LABEL_87;
        case 7u:
          v48 = 0;
          v49 = 0;
          v50 = 0;
          *(_BYTE *)(a1 + 20) |= 0x10u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v51 = *v3;
        v52 = *(_QWORD *)(a2 + v51);
        if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
          break;
        v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
        *(_QWORD *)(a2 + v51) = v52 + 1;
        v50 |= (unint64_t)(v53 & 0x7F) << v48;
        if ((v53 & 0x80) == 0)
          goto LABEL_84;
        v48 += 7;
        v14 = v49++ >= 9;
        if (v14)
        {
          v50 = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        v50 = 0;
LABEL_86:
      v54 = v50 != 0;
      v55 = 15;
LABEL_87:
      *(_BYTE *)(a1 + v55) = v54;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBD7CF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject **v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  dispatch_block_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  _QWORD block[4];
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)*MEMORY[0x1E0C952F8];
  v11 = (NSObject **)MEMORY[0x1E0C952B0];
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v10);
    v12 = *v11;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = v12;
      objc_msgSend_ckShortDescription(v7, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v49 = v16;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Fetched record %{public}@", buf, 0xCu);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v10);
    v17 = *v11;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v33 = v17;
      objc_msgSend_ckShortDescription(v7, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v49 = v36;
      v50 = 2112;
      v51 = v9;
      _os_log_debug_impl(&dword_1BE990000, v33, OS_LOG_TYPE_DEBUG, "Failed to fetch record %{public}@ with error: %@", buf, 0x16u);

    }
  }
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBD8098;
  block[3] = &unk_1E7836B58;
  objc_copyWeak(&v46, (id *)buf);
  objc_copyWeak(&v47, (id *)(a1 + 56));
  v18 = v9;
  v41 = v18;
  v19 = v7;
  v42 = v19;
  v43 = *(id *)(a1 + 40);
  v20 = v8;
  v21 = *(_QWORD *)(a1 + 48);
  v44 = v20;
  v45 = v21;
  v22 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v23, (uint64_t)v22);
  objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v27, v28);
  v29 = objc_claimAutoreleasedReturnValue();
  dispatch_group_async(v26, v29, v22);

  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v30, v31);
  v32 = objc_claimAutoreleasedReturnValue();
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = sub_1BEBD8430;
  v37[3] = &unk_1E782E4E0;
  objc_copyWeak(&v39, (id *)(a1 + 56));
  v38 = *(id *)(a1 + 32);
  dispatch_async(v32, v37);

  objc_destroyWeak(&v39);
  objc_destroyWeak(&v47);
  objc_destroyWeak(&v46);
  objc_destroyWeak((id *)buf);

}

void sub_1BEBD806C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(location);
  objc_destroyWeak(&a27);
  _Unwind_Resume(a1);
}

void sub_1BEBD8098(id *a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  int isEqualToString;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  _QWORD v41[4];
  id v42;
  uint8_t buf[4];
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 9);
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    v6 = objc_loadWeakRetained(a1 + 10);
    v9 = a1[4];
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_unitTestOverrides(v6, v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("RecordNameForDecryptionFailureOnSync"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordName(a1[5], v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v12, v16, (uint64_t)v15);

      if (isEqualToString)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v7, *MEMORY[0x1E0C94B20], 5004, 0, CFSTR("TEST PCS decrypt failure"));
        v18 = objc_claimAutoreleasedReturnValue();

        v9 = (id)v18;
      }
    }
    if (v9)
    {
      objc_msgSend_objectForKeyedSubscript_(a1[6], v7, (uint64_t)a1[5]);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isMergeableValueDeltaRecord(v19, v20, v21)
        && objc_msgSend_CKIsNotFoundError(v9, v22, v23))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v24 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
        {
          v25 = v24;
          objc_msgSend_recordID(v19, v26, v27);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v44 = v28;
          _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "Dropping mergeable value delta record on the floor because we got a not-found error fetching changes: %@", buf, 0xCu);

        }
        v9 = 0;
LABEL_15:
        v31 = objc_msgSend_errorReportingStyle(v6, v29, v30);
        if (v31 == 1)
        {
          v34 = CKIsPCSError();
          if (!v9)
            goto LABEL_23;
        }
        else
        {
          if (v31 != 2)
            goto LABEL_23;
          v34 = 0;
          if (!v9)
            goto LABEL_23;
        }
        if (!v34)
        {
          objc_msgSend_error(v6, v32, v33);
          v35 = (void *)objc_claimAutoreleasedReturnValue();

          if (v35)
          {
LABEL_27:

            return;
          }
          objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(a1[8], v36, (uint64_t)v9, a1[5], 1000, CFSTR("Encountered an error fetching records"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setError_(v6, v38, (uint64_t)v37);
LABEL_26:

          goto LABEL_27;
        }
LABEL_23:
        if (v9)
          goto LABEL_27;
        objc_msgSend_error(v6, v32, v33);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        if (v39)
          goto LABEL_27;
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 3221225472;
        v41[2] = sub_1BEBD83B0;
        v41[3] = &unk_1E78305B0;
        v42 = a1[7];
        objc_msgSend_updateCloudKitMetrics_(v6, v40, (uint64_t)v41);
        v37 = v42;
        goto LABEL_26;
      }

    }
    objc_msgSend__noteChangedRecordWithID_record_error_(v6, v7, (uint64_t)a1[5], a1[7], v9);
    goto LABEL_15;
  }
}

void sub_1BEBD83B0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  id v21;

  v21 = a2;
  v5 = objc_msgSend_recordsDownloaded(v21, v3, v4);
  objc_msgSend_setRecordsDownloaded_(v21, v6, v5 + 1);
  v9 = objc_msgSend_assetCount(*(void **)(a1 + 32), v7, v8);
  v12 = objc_msgSend_assetsDownloaded(v21, v10, v11);
  objc_msgSend_setAssetsDownloaded_(v21, v13, v12 + v9);
  v16 = objc_msgSend_assetDiskSize(*(void **)(a1 + 32), v14, v15);
  v19 = objc_msgSend_assetsDownloadedFileSize(v21, v17, v18);
  objc_msgSend_setAssetsDownloadedFileSize_(v21, v20, v19 + v16);

}

void sub_1BEBD8430(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v2, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v4);

  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_fetchRecordsGroup(WeakRetained, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v8);

    v7 = WeakRetained;
  }

}

void sub_1BEBD865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBD8678(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
    MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__noteDeletedRecordWithID_recordType_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBD87F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBD8814(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
    MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__noteAttributesChangedForZone_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBD8938(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v6 = *(void **)(a1 + 32);
    v7 = v4;
    objc_msgSend_zoneID(v6, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v14 = v10;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Spawning operation to apply PCS changes for zone %@", buf, 0xCu);

  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEBD8A90;
  v11[3] = &unk_1E782EA40;
  v12 = *(id *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v11);

}

void sub_1BEBD8A90(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    objc_msgSend_zoneID(v3, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138412290;
    v9 = v7;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Operation to apply PCS changes completed for zone %@", (uint8_t *)&v8, 0xCu);

  }
}

void sub_1BEBD8B88(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;

  objc_msgSend__handleFetchChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 40), v6, v7);
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 40), v6, v7);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 40), v3, v4);
  objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v10);

}

void sub_1BEBD8C08(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v3;

  objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBD8D88(uint64_t a1, void *a2)
{
  const char *v3;
  _QWORD v4[4];
  id v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEBD8DF4;
  v4[3] = &unk_1E7830948;
  v5 = *(id *)(a1 + 32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a2, v3, (uint64_t)v4);

}

void sub_1BEBD8DF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  objc_msgSend_shouldFetchAssetContent(v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v11 = (void *)v8;
    objc_msgSend_shouldFetchAssetContent(v5, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_BOOLValue(v12, v13, v14);

    if (v15)
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v17);
  }

}

void sub_1BEBD8E84(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint8_t v8[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Waiting for all record fetches to finish...", v8, 2u);
  }
  objc_msgSend_recordFetcher(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishIfAppropriate(v5, v6, v7);

}

void sub_1BEBD977C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_fetchRecordsGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEBD988C(void **a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void (**v29)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t hasPendingArchivedRecords;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  id obj;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[5];
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_fetchAllChanges(a1[4], a2, a3) & 1) != 0)
    v6 = 1;
  else
    v6 = objc_msgSend_clientIsUsingLegacyCKFetchRecordChangesOperationAPI(a1[4], v4, v5) ^ 1;
  objc_msgSend_serverChangeTokenUpdatedBlock(a1[4], v4, v5);
  v7 = objc_claimAutoreleasedReturnValue();
  if (!v7)
    goto LABEL_18;
  v10 = (void *)v7;
  objc_msgSend_error(a1[4], v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    v6 = 0;

  if (v6 == 1)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    obj = a1[5];
    v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v62, v67, 16);
    if (v53)
    {
      v52 = *(_QWORD *)v63;
      do
      {
        for (i = 0; i != v53; ++i)
        {
          if (*(_QWORD *)v63 != v52)
            objc_enumerationMutation(obj);
          v15 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i);
          objc_msgSend_objectForKeyedSubscript_(a1[6], v13, v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(a1[7], v17, v15);
          v18 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_resultServerChangeTokenData(v16, v19, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          v55 = (void *)v18;
          if (v21)
          {
            v24 = objc_alloc(MEMORY[0x1E0C95100]);
            objc_msgSend_resultServerChangeTokenData(v16, v25, v26);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = (void *)objc_msgSend_initWithData_(v24, v28, (uint64_t)v27);

          }
          objc_msgSend_serverChangeTokenUpdatedBlock(a1[4], v22, v23);
          v29 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          objc_msgSend_resultClientChangeTokenData(v16, v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = objc_msgSend_status(v16, v33, v34);
          hasPendingArchivedRecords = objc_msgSend_hasPendingArchivedRecords(v16, v36, v37);
          objc_msgSend_syncObligationZoneIDs(v16, v39, v40);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v60[0] = MEMORY[0x1E0C809B0];
          v60[1] = 3221225472;
          v60[2] = sub_1BE9C17EC;
          v60[3] = &unk_1E782EB38;
          v60[4] = a1[4];
          v61 = a1[8];
          ((void (**)(_QWORD, uint64_t, void *, void *, uint64_t, uint64_t, void *, void *, _QWORD *))v29)[2](v29, v15, v21, v32, v35, hasPendingArchivedRecords, v41, v55, v60);

        }
        v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v62, v67, 16);
      }
      while (v53);
    }
  }
  else
  {
LABEL_18:
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    obj = a1[5];
    v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v42, (uint64_t)&v56, v66, 16);
    if (v43)
    {
      v46 = v43;
      v47 = *(_QWORD *)v57;
      while (1)
      {
        if (*(_QWORD *)v57 != v47)
          objc_enumerationMutation(obj);
        objc_msgSend_perRequestGroup(a1[8], v44, v45);
        v48 = objc_claimAutoreleasedReturnValue();
        dispatch_group_leave(v48);

        if (!--v46)
        {
          v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v44, (uint64_t)&v56, v66, 16);
          if (!v46)
            break;
        }
      }
    }
  }

  objc_msgSend_fetchRecordsGroup(a1[4], v49, v50);
  v51 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v51);

}

void sub_1BEBD9D74(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  id v8;
  const char *v9;
  id WeakRetained;

  v5 = (id *)(a1 + 32);
  v6 = a3;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleRecordDelete_recordType_perRequestSchedulerInfo_(WeakRetained, v9, (uint64_t)v7, v6, v8);

}

uint64_t sub_1BEBD9DF4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BEBD9EF4(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;

  objc_msgSend__handleFetchDatabaseChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 40), v6, v7);
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 40), v6, v7);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 40), v3, v4);
  objc_msgSend_fetchZonesGroup(*(void **)(a1 + 32), v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v10);

}

void sub_1BEBD9F74(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v3;

  objc_msgSend_fetchZonesGroup(*(void **)(a1 + 32), a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBD9FA4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  dispatch_block_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  id location;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3221225472;
    v16 = sub_1BEBDA0F4;
    v17 = &unk_1E782E530;
    objc_copyWeak(&v20, &location);
    v18 = WeakRetained;
    v19 = v3;
    v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }

}

void sub_1BEBDA0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBDA0F4(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void (**v11)(id, _QWORD);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    objc_msgSend_recordZoneWithIDChangedBlock(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend_recordZoneWithIDChangedBlock(*(void **)(a1 + 32), v9, v10);
      v11 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
      v11[2](v11, *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_1BEBDA188(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  dispatch_block_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  id location;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3221225472;
    v16 = sub_1BEBDA2D8;
    v17 = &unk_1E782E530;
    objc_copyWeak(&v20, &location);
    v18 = WeakRetained;
    v19 = v3;
    v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }

}

void sub_1BEBDA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBDA2D8(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void (**v18)(id, _QWORD);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordCache(v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clearAllRecordsForZoneWithID_(v11, v12, *(_QWORD *)(a1 + 40));

    objc_msgSend_recordZoneWithIDWasDeletedBlock(*(void **)(a1 + 32), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend_recordZoneWithIDWasDeletedBlock(*(void **)(a1 + 32), v16, v17);
      v18 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
      v18[2](v18, *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_1BEBDA398(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  dispatch_block_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  id location;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3221225472;
    v16 = sub_1BEBDA4E8;
    v17 = &unk_1E782E530;
    objc_copyWeak(&v20, &location);
    v18 = WeakRetained;
    v19 = v3;
    v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }

}

void sub_1BEBDA4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBDA4E8(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void (**v18)(id, _QWORD);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordCache(v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clearAllRecordsForZoneWithID_(v11, v12, *(_QWORD *)(a1 + 40));

    objc_msgSend_recordZoneWithIDWasPurgedBlock(*(void **)(a1 + 32), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend_recordZoneWithIDWasPurgedBlock(*(void **)(a1 + 32), v16, v17);
      v18 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
      v18[2](v18, *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_1BEBDA5A8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  dispatch_block_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  id location;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3221225472;
    v16 = sub_1BEBDA6F8;
    v17 = &unk_1E782E530;
    objc_copyWeak(&v20, &location);
    v18 = WeakRetained;
    v19 = v3;
    v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }

}

void sub_1BEBDA6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBDA6F8(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void (**v18)(id, _QWORD);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordCache(v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clearAllRecordsForZoneWithID_(v11, v12, *(_QWORD *)(a1 + 40));

    objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(*(void **)(a1 + 32), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(*(void **)(a1 + 32), v16, v17);
      v18 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
      v18[2](v18, *(_QWORD *)(a1 + 40));

    }
  }
}

void sub_1BEBDA7B8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  dispatch_block_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD block[5];
  id v16;
  id v17;
  id v18;
  id location;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEBDA91C;
    block[3] = &unk_1E7836BA8;
    objc_copyWeak(&v18, &location);
    block[4] = WeakRetained;
    v16 = v3;
    v6 = v5;
    v17 = v6;
    v7 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    objc_msgSend_addPerRequestCallbackBlock_(v6, v8, (uint64_t)v7);
    objc_msgSend_perRequestCallbackGroup(v6, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_perRequestCallbackQueue(v6, v12, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    dispatch_group_async(v11, v14, v7);

    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }

}

void sub_1BEBDA900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBDA91C(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
    MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleAnonymousZoneDataObjects_schedulerInfo_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBDAC14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEBDAC40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  dispatch_block_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD block[5];
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id location;

  v5 = a2;
  v6 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v7 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBDAE28;
  block[3] = &unk_1E7836D38;
  objc_copyWeak(&v27, &location);
  block[4] = *(_QWORD *)(a1 + 40);
  objc_copyWeak(&v28, (id *)(a1 + 56));
  v8 = v5;
  v9 = *(_QWORD *)(a1 + 48);
  v25 = v8;
  v26 = v9;
  v10 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v11, (uint64_t)v10);
  objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_async(v14, v17, v10);

  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  v21[0] = v7;
  v21[1] = 3221225472;
  v21[2] = sub_1BEBDB26C;
  v21[3] = &unk_1E782E4E0;
  objc_copyWeak(&v23, (id *)(a1 + 56));
  v22 = *(id *)(a1 + 32);
  dispatch_async(v20, v21);

  objc_destroyWeak(&v23);
  objc_destroyWeak(&v28);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

}

void sub_1BEBDAE04(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEBDAE28(void **a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  os_log_t *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  os_log_t v15;
  const char *v16;
  const char *v17;
  id v18;
  os_log_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void (**v30)(_QWORD, _QWORD);
  void *v31;
  os_log_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  int v64;
  void *v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0C95300];
    v9 = (os_log_t *)MEMORY[0x1E0C952B0];
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_unitTestOverrides(a1[4], v6, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("FailAnonymousShareDecryption"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v13, *MEMORY[0x1E0C947D8], 1000, CFSTR("Unable to decrypt encrypted anonymous share."));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (*v8 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v15 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          v54 = a1[4];
          v55 = v15;
          objc_msgSend_operationID(v54, v56, v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = 138543618;
          v65 = v58;
          v66 = 2112;
          v67 = v14;
          _os_log_error_impl(&dword_1BE990000, v55, OS_LOG_TYPE_ERROR, "Override FailAnonymousShareDecryption: Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v64, 0x16u);

        }
        objc_msgSend_finishWithError_(a1[4], v16, (uint64_t)v14);

      }
    }
    v18 = objc_loadWeakRetained(a1 + 8);
    if (a1[5])
    {
      if (*v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v19 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
      {
        v49 = a1[5];
        v50 = v19;
        objc_msgSend_zoneID(v49, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v64 = 138412290;
        v65 = v53;
        _os_log_debug_impl(&dword_1BE990000, v50, OS_LOG_TYPE_DEBUG, "Handling encrypted anonymous share processing for: %@", (uint8_t *)&v64, 0xCu);

      }
      if (objc_msgSend_changeType(a1[6], v20, v21) == 1)
      {
        objc_msgSend_recordZoneWithIDChangedBlock(v18, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v24)
        {
LABEL_24:

          return;
        }
        objc_msgSend_recordZoneWithIDChangedBlock(v18, v25, v26);
        v27 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (objc_msgSend_changeType(a1[6], v22, v23) != 2)
          goto LABEL_24;
        if (objc_msgSend_deleteType(a1[6], v34, v35) == 2)
        {
          objc_msgSend_recordZoneWithIDWasPurgedBlock(v18, v36, v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v38)
            goto LABEL_24;
          objc_msgSend_recordZoneWithIDWasPurgedBlock(v18, v39, v40);
          v27 = objc_claimAutoreleasedReturnValue();
        }
        else if (objc_msgSend_deleteType(a1[6], v36, v37) == 3)
        {
          objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(v18, v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v43)
            goto LABEL_24;
          objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(v18, v44, v45);
          v27 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_msgSend_recordZoneWithIDWasDeletedBlock(v18, v41, v42);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v46)
            goto LABEL_24;
          objc_msgSend_recordZoneWithIDWasDeletedBlock(v18, v47, v48);
          v27 = objc_claimAutoreleasedReturnValue();
        }
      }
      v30 = (void (**)(_QWORD, _QWORD))v27;
      objc_msgSend_zoneID(a1[5], v28, v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v30)[2](v30, v31);

    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v17, *MEMORY[0x1E0C947D8], 1000, CFSTR("Unable to decrypt encrypted anonymous share."));
      v30 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      if (*v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v32 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        v59 = a1[4];
        v60 = v32;
        objc_msgSend_operationID(v59, v61, v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        v64 = 138543618;
        v65 = v63;
        v66 = 2112;
        v67 = v30;
        _os_log_error_impl(&dword_1BE990000, v60, OS_LOG_TYPE_ERROR, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v64, 0x16u);

      }
      objc_msgSend_finishWithError_(a1[4], v33, (uint64_t)v30);
    }

    goto LABEL_24;
  }
}

void sub_1BEBDB26C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v2, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v4);

  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_fetchZonesGroup(WeakRetained, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v8);

    v7 = WeakRetained;
  }

}

void sub_1BEBDB76C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBDB838(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBDBAF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBDC5A4(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

void sub_1BEBDC650(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEBDC674(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend_setError_(WeakRetained, v4, (uint64_t)v3);

  objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v7);

}

void sub_1BEBDC804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBDC828(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD v10[5];
  _QWORD v11[5];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = v3;
  objc_msgSend_setDidAttemptDugongKeyRoll_(v5, v6, 1);
  v7 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEBDC8F4;
  v11[3] = &unk_1E7836DA8;
  v11[4] = WeakRetained;
  objc_msgSend_setSaveCompletionBlock_(v5, v8, (uint64_t)v11);
  v10[0] = v7;
  v10[1] = 3221225472;
  v10[2] = sub_1BEBDCA84;
  v10[3] = &unk_1E782EA40;
  v10[4] = WeakRetained;
  objc_msgSend_setCompletionBlock_(v5, v9, (uint64_t)v10);

}

void sub_1BEBDC8F4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  int v24;
  id v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v15 = v12;
  if (v9 && v12)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v16 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v24 = 138412546;
      v25 = v9;
      v26 = 2112;
      v27 = v15;
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Ignoring key-rolling error for record %@: %@", (uint8_t *)&v24, 0x16u);
    }
    objc_msgSend_shareRecordsToUpdateByRecordID(*(void **)(a1 + 32), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v19, v20, (uint64_t)v9);
    v21 = objc_claimAutoreleasedReturnValue();

    v11 = (id)v21;
  }
  objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), v13, v14);
  v22 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v22);

  objc_msgSend__continueHandleFetchedRecord_recordID_(*(void **)(a1 + 32), v23, (uint64_t)v11, v9);
}

void sub_1BEBDCA84(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v3;

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBDD55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id location,id a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  id *v55;
  id *v56;
  id *v57;
  id *v58;

  objc_destroyWeak(v55);
  objc_destroyWeak(v56);
  objc_destroyWeak(v58);
  objc_destroyWeak(v57);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a49);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBDD5C4(uint64_t a1, void *a2)
{
  const char *v3;
  _QWORD v4[4];
  id v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEBDD630;
  v4[3] = &unk_1E7830948;
  v5 = *(id *)(a1 + 32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a2, v3, (uint64_t)v4);

}

void sub_1BEBDD630(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  objc_msgSend_shouldFetchAssetContent(v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v11 = (void *)v8;
    objc_msgSend_shouldFetchAssetContent(v5, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_BOOLValue(v12, v13, v14);

    if (v15)
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v17);
  }

}

void sub_1BEBDD6C0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  id v23;

  v23 = a2;
  v9 = a3;
  v10 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v14 = objc_loadWeakRetained((id *)(a1 + 48));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 56);
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKitTools/Daemon/Operations/Database/Records/CKDFetchRecordsOperation.m");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_requestUUID(v14, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v15, v22, v16, WeakRetained, v18, 516, CFSTR("Request with UUID %@ invoked progress callout after completion callout.  Progress recordID %@"), v21, v9);

  }
  objc_msgSend__handleRecordFetch_recordID_etagMatched_responseCode_(WeakRetained, v12, (uint64_t)v23, v9, a4, v10);

}

void sub_1BEBDD7F0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  objc_class *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  id v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD block[4];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_loadWeakRetained((id *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v7 = v4;
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = v9;
    v35 = 2048;
    v36 = v3;
    v37 = 2114;
    v38 = v12;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Fetch records url request completed. Waiting for all record callbacks to finish before completing request <%{public}@: %p; %{public}@>",
      buf,
      0x20u);

  }
  objc_msgSend_requestUUID(v3, v5, v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v3, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRequest_(WeakRetained, v17, 0);
  objc_msgSend_fetchRecordsGroup(WeakRetained, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_callbackQueue(WeakRetained, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBDDA28;
  block[3] = &unk_1E782E418;
  v30 = v13;
  v31 = v16;
  v32 = WeakRetained;
  v24 = v16;
  v25 = v13;
  dispatch_group_notify(v20, v23, block);

  objc_msgSend_fetchRecordsGroup(WeakRetained, v26, v27);
  v28 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v28);

}

void sub_1BEBDDA28(uint64_t a1)
{
  _QWORD *v2;
  os_log_t *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  os_log_t v7;
  const char *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  os_log_t v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (os_log_t *)MEMORY[0x1E0C952B0];
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v29 = 138543362;
    v30 = v5;
    _os_log_impl(&dword_1BE990000, v4, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing request %{public}@", (uint8_t *)&v29, 0xCu);
    v6 = (void *)*MEMORY[0x1E0C952F8];
    if (*(_QWORD *)(a1 + 40))
    {
      if (*v2 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v6);
      goto LABEL_8;
    }
    if (*v2 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
LABEL_8:
    v7 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      v9 = v7;
      v10 = (objc_class *)objc_opt_class();
      NSStringFromClass(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 48);
      objc_msgSend_ckShortDescription(v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      v29 = 138544130;
      v30 = v11;
      v31 = 2048;
      v32 = v12;
      v33 = 2114;
      v34 = v15;
      v35 = 2112;
      v36 = v16;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Failed to fetch records for <%{public}@: %p; %{public}@>: %@",
        (uint8_t *)&v29,
        0x2Au);

    }
    objc_msgSend_setError_(*(void **)(a1 + 48), v8, *(_QWORD *)(a1 + 40));
    goto LABEL_15;
  }
  v19 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    v22 = v19;
    v23 = (objc_class *)objc_opt_class();
    NSStringFromClass(v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(void **)(a1 + 48);
    objc_msgSend_ckShortDescription(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 138543874;
    v30 = v24;
    v31 = 2048;
    v32 = v25;
    v33 = 2114;
    v34 = v28;
    _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Fetched records for <%{public}@: %p; %{public}@>",
      (uint8_t *)&v29,
      0x20u);

  }
LABEL_15:
  v20 = *(void **)(a1 + 48);
  if (v20)
  {
    objc_msgSend_stateTransitionGroup(v20, v17, v18);
    v21 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v21);

  }
}

void sub_1BEBDDCD4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing fetch operation", v6, 2u);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v5);

}

uint64_t sub_1BEBDDD84(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint8_t v6[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing decrypt operation if any.", v6, 2u);
  }
  return objc_msgSend_finishDecryption(*(void **)(a1 + 32), v3, v4);
}

void sub_1BEBDDEA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBDDF6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBDE9A4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_1BEBDE9C8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD, double);
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v20 = WeakRetained;
  if (a2 || !WeakRetained)
  {
    objc_msgSend_removePackages(*(void **)(a1 + 32), v5, v6, WeakRetained);
  }
  else
  {
    objc_msgSend_errorForRecordID_(WeakRetained, v5, *(_QWORD *)(a1 + 40));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      objc_msgSend_recordFetchProgressBlock(v20, v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        objc_msgSend_recordFetchProgressBlock(v20, v7, v8);
        v11 = (void (**)(_QWORD, _QWORD, double))objc_claimAutoreleasedReturnValue();
        v11[2](v11, *(_QWORD *)(a1 + 40), 1.0);

      }
    }
    objc_msgSend_recordFetchCompletionBlock(v20, v7, v8, v20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend_recordFetchCompletionBlock(v21, v13, v14);
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = (void *)v15;
      if (*(_BYTE *)(a1 + 56))
        v17 = 0;
      else
        v17 = *(_QWORD *)(a1 + 32);
      (*(void (**)(uint64_t, uint64_t, _QWORD, void *))(v15 + 16))(v15, v17, *(_QWORD *)(a1 + 40), v9);

    }
    objc_msgSend_error(v21, v13, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v18)
    {
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_1BEBDEB28;
      v22[3] = &unk_1E78305B0;
      v23 = *(id *)(a1 + 32);
      objc_msgSend_updateCloudKitMetrics_(v21, v19, (uint64_t)v22);

    }
  }

}

void sub_1BEBDEB28(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  id v21;

  v21 = a2;
  v5 = objc_msgSend_recordsDownloaded(v21, v3, v4);
  objc_msgSend_setRecordsDownloaded_(v21, v6, v5 + 1);
  v9 = objc_msgSend_assetCount(*(void **)(a1 + 32), v7, v8);
  v12 = objc_msgSend_assetsDownloaded(v21, v10, v11);
  objc_msgSend_setAssetsDownloaded_(v21, v13, v12 + v9);
  v16 = objc_msgSend_assetDiskSize(*(void **)(a1 + 32), v14, v15);
  v19 = objc_msgSend_assetsDownloadedFileSize(v21, v17, v18);
  objc_msgSend_setAssetsDownloadedFileSize_(v21, v20, v19 + v16);

}

void sub_1BEBDEBA8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (**v11)(id, _QWORD, uint64_t, void *);

  objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v11 = (void (**)(id, _QWORD, uint64_t, void *))objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 56))
      v8 = 0;
    else
      v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    objc_msgSend_errorForRecordID_(*(void **)(a1 + 32), v7, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11[2](v11, v8, v9, v10);

  }
}

void sub_1BEBDED4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBDED64(uint64_t a1, void *a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD v18[4];
  id v19;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 456), a2);
  v4 = a2;
  v7 = objc_msgSend_forcePCSDecrypt(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_setForcePCSDecrypt_(*(void **)(*(_QWORD *)(a1 + 32) + 456), v8, v7);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1BEBDEE48;
  v18[3] = &unk_1E782EA40;
  v19 = v11;
  v12 = *(void **)(*(_QWORD *)(a1 + 32) + 456);
  v13 = v11;
  objc_msgSend_setCompletionBlock_(v12, v14, (uint64_t)v18);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v17);

}

void sub_1BEBDEE48(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEBDEEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEBDF028(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEBDF04C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  _QWORD *v10;
  os_log_t *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  os_log_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v6)
  {
    v10 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (os_log_t *)MEMORY[0x1E0C952B0];
    v12 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v15 = *(void **)(a1 + 32);
      v16 = v12;
      objc_msgSend_recordID(v15, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v44 = v19;
      v45 = 2112;
      v46 = v6;
      _os_log_impl(&dword_1BE990000, v16, OS_LOG_TYPE_INFO, "Couldn't decrypt record %@: %@", buf, 0x16u);

    }
    if (objc_msgSend_wasCached(v5, v13, v14)
      && CKIsPCSError()
      && (objc_msgSend_useCachedEtags(WeakRetained, v7, v8) & 1) != 0)
    {
      if (*v10 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v20 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
      {
        v23 = *(void **)(a1 + 32);
        v24 = v20;
        objc_msgSend_recordID(v23, v25, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v44 = v27;
        _os_log_impl(&dword_1BE990000, v24, OS_LOG_TYPE_INFO, "Failed to decrypt a record from our cache. Refetching record %@ from the server and trying again", buf, 0xCu);

      }
      objc_msgSend_recordIDsToRefetch(WeakRetained, v21, v22);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v5, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v28, v32, (uint64_t)v31);

      objc_msgSend_fetchRecordsGroup(WeakRetained, v33, v34);
      v35 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v35);

      goto LABEL_19;
    }
    if (*(_QWORD *)(a1 + 40))
      objc_msgSend_setError_forRecordID_(WeakRetained, v7, (uint64_t)v6);
  }
  if (objc_msgSend_shouldUpdateTimestampsForFetchedMergeableValues(WeakRetained, v7, v8))
  {
    objc_msgSend_encryptedValueStore(*(void **)(a1 + 32), v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_opt_class();
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v39, (uint64_t)&v42, 1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_enumerateKeysAndValuesOfClasses_usingBlock_(v38, v41, (uint64_t)v40, &unk_1E7836E38);

  }
  objc_msgSend__continueHandleFetchedRecord_recordID_(WeakRetained, v36, (uint64_t)v5, *(_QWORD *)(a1 + 40));
LABEL_19:

}

void sub_1BEBDF324(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  id v10;

  v3 = a3;
  objc_msgSend_unmergedDeltas(v3, v4, v5);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allObjects(v10, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mergeLastKnownServerTimestampVectorFromDeltas_(v3, v9, (uint64_t)v8);

}

void sub_1BEBDF48C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBDF4B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  id v42;
  const char *v43;
  const char *v44;
  void *v45;
  const char *v46;
  void *v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  id v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD v57[5];
  uint8_t buf[4];
  uint64_t v59;
  __int16 v60;
  id v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      objc_msgSend_container(WeakRetained, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsKeysToRemove(v5, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend_pcs(v5, v18, v19);
      objc_msgSend_protectionEtag(*(void **)(a1 + 40), v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend_removePCSKeys_fromPCS_withProtectionEtag_forOperation_(v14, v24, (uint64_t)v17, v20, v23, *(_QWORD *)(a1 + 48));

      if (v25)
      {
        v28 = *(void **)(a1 + 48);
        v57[0] = MEMORY[0x1E0C809B0];
        v57[1] = 3221225472;
        v57[2] = sub_1BEBDF800;
        v57[3] = &unk_1E7831868;
        v57[4] = v25;
        objc_msgSend_updateCloudKitMetrics_(v28, v26, (uint64_t)v57);
      }
      v29 = objc_msgSend_pcs(v5, v26, v27);
      objc_msgSend_setRecordPCS_(*(void **)(a1 + 40), v30, v29);
      objc_msgSend_container(v10, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend_pcs(v5, v37, v38);
      v56 = 0;
      objc_msgSend_dataFromRecordPCS_error_(v36, v40, v39, &v56);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = v56;

      if (v41)
      {
        objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v43, (uint64_t)v41);
        objc_msgSend_etagFromPCSData_(CKDPCSManager, v44, (uint64_t)v41);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setProtectionEtag_(*(void **)(a1 + 40), v46, (uint64_t)v45);

        v47 = 0;
      }
      else
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v43, *MEMORY[0x1E0C94B20], 5001, v42, CFSTR("Failed to create PCS data from fetched PCS while decrypting mergeable values"));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
      }

      if (v47)
      {
LABEL_15:
        v54 = *(_QWORD *)(a1 + 32);
        if (v54)
        {
          objc_msgSend_setError_forRecordID_(v10, v53, (uint64_t)v47);
          v54 = *(_QWORD *)(a1 + 32);
        }
        objc_msgSend__continueHandleFetchedRecord_recordID_(v10, v53, *(_QWORD *)(a1 + 40), v54);
        goto LABEL_21;
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v48 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v55 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v59 = v55;
        v60 = 2112;
        v61 = v6;
        _os_log_error_impl(&dword_1BE990000, v48, OS_LOG_TYPE_ERROR, "Failed to fetch PCS to decrypt mergeable value delta record %@: %@", buf, 0x16u);
      }
      if (objc_msgSend_CKIsNotFoundError(v6, v49, v50))
      {
        v52 = v6;
      }
      else
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v51, *MEMORY[0x1E0C94B20], 5001, v6, CFSTR("Failed to fetch PCS to decrypt mergeable values"));
        v52 = (id)objc_claimAutoreleasedReturnValue();
      }
      v47 = v52;
      if (v52)
        goto LABEL_15;
    }
    objc_msgSend__reallyDecryptPropertiesOnRecord_recordID_(v10, v53, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
LABEL_21:

  }
}

void sub_1BEBDF800(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(_QWORD *)(a1 + 32) + v5);

}

void sub_1BEBE02A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1BEBE02D4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_fetchRecordsGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEBE03E4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 64))
      v8 = 0;
    else
      v8 = *(_QWORD *)(a1 + 40);
    v9 = (id)v7;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v7 + 16))(v7, v8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEBE06D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBE0708(uint64_t a1, uint64_t a2, void *a3)
{
  __CFString *v4;
  _QWORD *v5;
  os_log_t *v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  id v21;
  os_log_t *v22;
  id v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  void *v27;
  os_log_t v28;
  NSObject *v29;
  const char *v30;
  void *v31;
  os_log_t v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  const __CFString *v50;
  const __CFString *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  id v60;
  __int16 v61;
  const __CFString *v62;
  __int16 v63;
  const __CFString *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = (os_log_t *)MEMORY[0x1E0C952D8];
  v7 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v44 = *(void **)(a1 + 32);
    v45 = v7;
    objc_msgSend_recordID(v44, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = *(void **)(a1 + 40);
    v50 = CFSTR(" and error: ");
    *(_DWORD *)buf = 138413058;
    v51 = &stru_1E7838F48;
    v58 = v48;
    if (!v4)
      v50 = &stru_1E7838F48;
    v59 = 2112;
    if (v4)
      v51 = v4;
    v60 = v49;
    v61 = 2114;
    v62 = v50;
    v63 = 2112;
    v64 = v51;
    _os_log_debug_impl(&dword_1BE990000, v45, OS_LOG_TYPE_DEBUG, "Prepped PCS data for share %@ with container %@%{public}@%@", buf, 0x2Au);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v11 = WeakRetained;
  if (v4)
    objc_msgSend_setError_forRecordID_(WeakRetained, v9, (uint64_t)v4, *(_QWORD *)(a1 + 48));
  objc_msgSend_mutableEncryptedPSK(*(void **)(a1 + 32), v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend_pcsManager(*(void **)(a1 + 40), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_publicPCS(*(void **)(a1 + 32), v16, v17);
    v56 = 0;
    objc_msgSend_sharingIdentityDataFromPCS_error_(v15, v19, v18, &v56);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v56;

    v22 = (os_log_t *)MEMORY[0x1E0C952B0];
    if (v20)
    {
      v23 = objc_alloc(MEMORY[0x1E0C94D18]);
      v25 = objc_msgSend_initWithData_(v23, v24, (uint64_t)v20);
      objc_msgSend_setMutableEncryptedPSK_(*(void **)(a1 + 32), v26, (uint64_t)v25);
    }
    else
    {
      if (*v5 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v28 = *v22;
      if (!os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        if (v21)
        {
LABEL_16:
          v29 = *v22;
          if (os_log_type_enabled(*v22, OS_LOG_TYPE_INFO))
          {
            v31 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            v58 = v31;
            v59 = 2112;
            v60 = v21;
            _os_log_impl(&dword_1BE990000, v29, OS_LOG_TYPE_INFO, "Warn: Couldn't get a public sharing identity for share %@: %@", buf, 0x16u);
          }
          if (!v4)
            objc_msgSend_setError_forRecordID_(v11, v30, (uint64_t)v21, *(_QWORD *)(a1 + 48));
LABEL_24:

          goto LABEL_25;
        }
LABEL_22:
        v32 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
        {
          v33 = *(void **)(a1 + 32);
          v34 = v32;
          objc_msgSend_recordID(v33, v35, v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_mutableEncryptedPSK(*(void **)(a1 + 32), v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_data(v40, v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v58 = v37;
          v59 = 2112;
          v60 = v43;
          _os_log_impl(&dword_1BE990000, v34, OS_LOG_TYPE_INFO, "Public sharing identity for share %@ is %@", buf, 0x16u);

        }
        goto LABEL_24;
      }
      v52 = *(void **)(a1 + 32);
      v25 = v28;
      objc_msgSend_recordID(v52, v53, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v58 = v55;
      _os_log_error_impl(&dword_1BE990000, v25, OS_LOG_TYPE_ERROR, "Didn't get a sharing identity from the public PCS for share %@", buf, 0xCu);

    }
    v27 = (void *)*MEMORY[0x1E0C952F8];
    if (v21)
    {
      if (*v5 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v27);
      goto LABEL_16;
    }
    if (*v5 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v27);
    goto LABEL_22;
  }
LABEL_25:
  objc_msgSend__decryptPropertiesIfNeededForRecord_record_(v11, v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

}

void sub_1BEBE1330(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEBE134C(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  const char *v4;
  _QWORD v5[4];
  id v6;
  _QWORD *v7;
  _QWORD v8[5];
  id v9;

  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3032000000;
  v8[3] = sub_1BE9BB160;
  v8[4] = sub_1BE9BAE58;
  v9 = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEBE1434;
  v5[3] = &unk_1E7836ED8;
  v7 = v8;
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend__addAssetDownloadTaskForRecord_completionBlock_(WeakRetained, v4, v3, v5);

  _Block_object_dispose(v8, 8);
}

void sub_1BEBE141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBE1434(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = (void *)MEMORY[0x1C3B83E24]();
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  objc_autoreleasePoolPop(v4);

}

void sub_1BEBE23B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBE23D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEBE23EC(uint64_t a1, int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  id v43;

  v5 = a3;
  if (a2)
  {
    v43 = v5;
    if (a2 == 2)
    {
      v35 = (void *)objc_opt_new();
      v38 = objc_msgSend_recordPCS(*(void **)(a1 + 56), v36, v37);
      objc_msgSend_setRecordPCS_(v35, v39, v38);
      objc_msgSend_setAsset_(v35, v40, (uint64_t)v43);
      objc_msgSend_addObject_(*(void **)(a1 + 64), v41, (uint64_t)v35);
    }
    else
    {
      if (a2 == 1)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v9 = v43;
          objc_msgSend_constructedAssetDownloadURLTemplate(v9, v10, v11);
          v12 = objc_claimAutoreleasedReturnValue();
          if (v12)
          {
            v15 = (void *)v12;
            v16 = (void *)MEMORY[0x1E0C94BB8];
            objc_msgSend_constructedAssetDownloadURLTemplate(v9, v13, v14);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v16) = objc_msgSend__templateURLRequiresAssetKey_(v16, v18, (uint64_t)v17);

            if ((_DWORD)v16)
            {
              v21 = (void *)MEMORY[0x1E0C94BB8];
              objc_msgSend_constructedAssetDownloadURLTemplate(v9, v19, v20);
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend__canonicalizeTemplateURL_(v21, v23, (uint64_t)v22);
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_host(v24, v25, v26);
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              if (v29)
              {
                objc_msgSend_null(MEMORY[0x1E0C99E38], v27, v28);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_keyOrErrorForHostname(*(void **)(a1 + 32), v31, v32);
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setObject_forKeyedSubscript_(v33, v34, (uint64_t)v30, v29);

              }
            }
          }

        }
        if (*(_BYTE *)(a1 + 80) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          objc_msgSend_addObject_(*(void **)(a1 + 40), v8, (uint64_t)v43);
        else
          objc_msgSend_addObject_(*(void **)(a1 + 48), v8, (uint64_t)v43);
        goto LABEL_18;
      }
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v35, v42, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1116, CFSTR("Invalid parameters to takeActionOnValue"));
    }

LABEL_18:
    v5 = v43;
  }

}

uint64_t sub_1BEBE25E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEBE2600(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = (void *)MEMORY[0x1C3B83E24]();
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    objc_msgSend_error(*(void **)(a1 + 32), v2, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  objc_autoreleasePoolPop(v4);
}

void sub_1BEBE2B54(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEBE2B5C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(void))(v3 + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BEBE3088(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEBE30C0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEBE31A4;
  v5[3] = &unk_1E7831E10;
  objc_copyWeak(&v6, &location);
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v5[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);

}

void sub_1BEBE3180(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEBE31A4(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {

    v10 = WeakRetained;
  }
  else
  {
    objc_msgSend_transcodeServerPublicKey(WeakRetained, v6, v7);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = WeakRetained;
    if (v17)
    {
      objc_msgSend_transcodeServerPublicKey(WeakRetained, v8, v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_keyOrErrorForHostname(v2, v18, v19);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v14, v20, (uint64_t)v13, *(_QWORD *)(a1 + 32));
LABEL_9:

      goto LABEL_10;
    }
  }
  objc_msgSend_error(v10, v8, v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (!v13)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v11, *MEMORY[0x1E0C94B20], 1000, CFSTR("No public cert key and no error"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_keyOrErrorForHostname(v2, v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v15, v16, (uint64_t)v14, *(_QWORD *)(a1 + 32));

  if (!v13)
    goto LABEL_9;
LABEL_10:

  objc_msgSend_stateTransitionGroup(v2, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v23);

}

void sub_1BEBE369C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD v27[5];
  id v28;
  _QWORD v29[4];
  __int128 v30;
  _QWORD v31[4];
  __int128 v32;
  _QWORD v33[4];
  __int128 v34;
  _QWORD v35[4];
  __int128 v36;
  _QWORD v37[4];
  __int128 v38;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  objc_msgSend_keyOrErrorForHostname(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setKeyOrErrorForHostname_(v3, v7, (uint64_t)v6);

  objc_msgSend_recordFetchProgressBlock(*(void **)(a1 + 32), v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  if (v11)
  {
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = sub_1BEBE3920;
    v37[3] = &unk_1E7836F28;
    v38 = *(_OWORD *)(a1 + 32);
    objc_msgSend_setDownloadPreparationBlock_(v3, v10, (uint64_t)v37);
  }
  else
  {
    objc_msgSend_setDownloadPreparationBlock_(v3, v10, 0);
  }

  objc_msgSend_recordFetchProgressBlock(*(void **)(a1 + 32), v13, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v35[0] = v12;
    v35[1] = 3221225472;
    v35[2] = sub_1BEBE3AA0;
    v35[3] = &unk_1E7836F50;
    v36 = *(_OWORD *)(a1 + 32);
    objc_msgSend_setDownloadProgressBlock_(v3, v15, (uint64_t)v35);
  }
  else
  {
    objc_msgSend_setDownloadProgressBlock_(v3, v15, 0);
  }

  objc_msgSend_recordFetchCommandBlock(*(void **)(a1 + 32), v17, v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v33[0] = v12;
    v33[1] = 3221225472;
    v33[2] = sub_1BEBE3CA8;
    v33[3] = &unk_1E7836F78;
    v34 = *(_OWORD *)(a1 + 32);
    objc_msgSend_setDownloadCommandBlock_(v3, v19, (uint64_t)v33);
  }
  else
  {
    objc_msgSend_setDownloadCommandBlock_(v3, v19, 0);
  }

  v31[0] = v12;
  v31[1] = 3221225472;
  v31[2] = sub_1BEBE3EAC;
  v31[3] = &unk_1E7836FA0;
  v32 = *(_OWORD *)(a1 + 32);
  objc_msgSend_setDownloadCompletionBlock_(v3, v21, (uint64_t)v31);
  v29[0] = v12;
  v29[1] = 3221225472;
  v29[2] = sub_1BEBE41C8;
  v29[3] = &unk_1E7836FC8;
  v30 = *(_OWORD *)(a1 + 32);
  objc_msgSend_setUrlFilledOutBlock_(v3, v22, (uint64_t)v29);
  v27[0] = v12;
  v27[1] = 3221225472;
  v27[2] = sub_1BEBE44F4;
  v27[3] = &unk_1E782E4E0;
  objc_copyWeak(&v28, &location);
  v27[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v23, (uint64_t)v27);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v26);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

}

void sub_1BEBE38F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEBE3920(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_record(v3, v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v21, v22, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1328, CFSTR("Expected non-nil record for asset %@"), v3);

  }
  objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v8, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v9, v13, (uint64_t)v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v15, v16);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v23, v24, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1330, CFSTR("Expected non-nil download task for record %@"), v8);

  }
  objc_msgSend_progressTracker(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v3;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v18, (uint64_t)v25, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startTrackingItems_(v17, v20, (uint64_t)v19);

}

void sub_1BEBE3AA0(uint64_t a1, void *a2, double a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  _QWORD block[5];
  id v32;
  uint64_t v33;

  v5 = a2;
  objc_msgSend_record(v5, v6, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v8, v9);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1336, CFSTR("Expected non-nil record for asset %@"), v5);

  }
  objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v10, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v11, v15, (uint64_t)v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v16)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v17, v18);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v29, v30, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1338, CFSTR("Expected non-nil download task for record %@"), v10);

  }
  objc_msgSend_progressTracker(v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_updateProgressWithItem_progress_(v19, v20, (uint64_t)v5, a3);
  v22 = v21;

  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v23, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBE3C48;
  block[3] = &unk_1E7830158;
  block[4] = *(_QWORD *)(a1 + 32);
  v32 = v10;
  v33 = v22;
  v26 = v10;
  dispatch_async(v25, block);

}

void sub_1BEBE3C48(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  void (**v7)(id, void *, double);

  objc_msgSend_recordFetchProgressBlock(*(void **)(a1 + 32), a2, a3);
  v7 = (void (**)(id, void *, double))objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(*(void **)(a1 + 40), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2](v7, v6, *(double *)(a1 + 48));

}

void sub_1BEBE3CA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  id v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  _QWORD block[5];
  id v28;
  id v29;

  v5 = a2;
  v6 = a3;
  objc_msgSend_record(v5, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v23, v24, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1348, CFSTR("Expected non-nil record for asset %@"), v5);

  }
  objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v11, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v12, v16, (uint64_t)v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v18, v19);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v26, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1350, CFSTR("Expected non-nil download task for record %@"), v11);

  }
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBE3E4C;
  block[3] = &unk_1E782E418;
  block[4] = *(_QWORD *)(a1 + 32);
  v28 = v11;
  v29 = v6;
  v21 = v6;
  v22 = v11;
  dispatch_async(v20, block);

}

void sub_1BEBE3E4C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  void (**v7)(id, void *, _QWORD);

  objc_msgSend_recordFetchCommandBlock(*(void **)(a1 + 32), a2, a3);
  v7 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(*(void **)(a1 + 40), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2](v7, v6, *(_QWORD *)(a1 + 48));

}

void sub_1BEBE3EAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  const char *v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint8_t buf[4];
  id v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_record(v5, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v42, v43, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1358, CFSTR("Expected non-nil record for asset %@"), v5);

  }
  objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v11, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v12, v16, (uint64_t)v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v18, v19);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v44, v45, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1360, CFSTR("Expected non-nil download task for record %@"), v11);

  }
  v20 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v20);
    v21 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v35 = v21;
      objc_msgSend_recordID(v11, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(*(void **)(a1 + 32), v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      v47 = v5;
      v48 = 2112;
      v49 = v38;
      v50 = 2114;
      v51 = v41;
      v52 = 2112;
      v53 = v6;
      _os_log_error_impl(&dword_1BE990000, v35, OS_LOG_TYPE_ERROR, "Failed to download asset %@ for record %@ and operation %{public}@: %@", buf, 0x2Au);

    }
    v24 = *(void **)(a1 + 32);
    objc_msgSend_recordID(v11, v22, v23);
    v25 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_forRecordID_(v24, v26, (uint64_t)v6, v25);
    goto LABEL_15;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v20);
  v27 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v25 = v27;
    objc_msgSend_recordID(v11, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationID(*(void **)(a1 + 32), v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v47 = v5;
    v48 = 2112;
    v49 = v31;
    v50 = 2114;
    v51 = v34;
    _os_log_impl(&dword_1BE990000, v25, OS_LOG_TYPE_INFO, "Downloaded asset %@ for record %@ and operation %{public}@", buf, 0x20u);

LABEL_15:
  }
  objc_msgSend_didDownloadAsset_error_(v17, v28, (uint64_t)v5, v6);

}

void sub_1BEBE41C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  const char *v46;
  void *v47;
  const char *v48;
  uint8_t buf[4];
  id v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_asset(v5, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_record(v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v13, v14);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v45, v46, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1372, CFSTR("Expected non-nil record for urlInfo %@"), v5);

  }
  objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v12, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v15, v19, (uint64_t)v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v20)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v21, v22);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v47, v48, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDFetchRecordsOperation.m"), 1374, CFSTR("Expected non-nil download task for record %@"), v12);

  }
  v23 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v23);
    v24 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v38 = v24;
      objc_msgSend_recordID(v12, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(*(void **)(a1 + 32), v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      v50 = v5;
      v51 = 2112;
      v52 = v41;
      v53 = 2114;
      v54 = v44;
      v55 = 2112;
      v56 = v6;
      _os_log_error_impl(&dword_1BE990000, v38, OS_LOG_TYPE_ERROR, "Failed to fill out download URL info %@ for record %@ and operation %{public}@: %@", buf, 0x2Au);

    }
    v27 = *(void **)(a1 + 32);
    objc_msgSend_recordID(v12, v25, v26);
    v28 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_forRecordID_(v27, v29, (uint64_t)v6, v28);
    goto LABEL_15;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v23);
  v30 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v28 = v30;
    objc_msgSend_recordID(v12, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationID(*(void **)(a1 + 32), v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v50 = v5;
    v51 = 2112;
    v52 = v34;
    v53 = 2114;
    v54 = v37;
    _os_log_impl(&dword_1BE990000, v28, OS_LOG_TYPE_INFO, "Filled out URL info %@ for record %@ and operation %{public}@", buf, 0x20u);

LABEL_15:
  }
  objc_msgSend_didFillOutURLInfo_error_(v20, v31, (uint64_t)v5, v6);

}

void sub_1BEBE44F4(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v3, v4);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setError_(*(void **)(a1 + 32), v5, (uint64_t)v10);
  objc_msgSend__didDownloadAssetsWithError_(*(void **)(a1 + 32), v6, (uint64_t)v10);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v9);

}

void sub_1BEBE47E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBE4814(id *a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEBE491C;
  v9[3] = &unk_1E7830018;
  a1 += 4;
  objc_copyWeak(&v10, a1);
  objc_msgSend_setDeltasFetchedBlock_(v3, v5, (uint64_t)v9);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEBE4C0C;
  v7[3] = &unk_1E782EF38;
  objc_copyWeak(&v8, a1);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v7);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);

}

void sub_1BEBE48F8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBE491C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  NSObject *v33;
  int v34;
  id v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v13 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_mergeableValueDownloadTasks(WeakRetained, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v14, v15, (uint64_t)v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8 || v9)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v29 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v34 = 138412546;
        v35 = v7;
        v36 = 2112;
        v37 = v9;
        _os_log_error_impl(&dword_1BE990000, v29, OS_LOG_TYPE_ERROR, "Error fetching mergeable delta %@: %@", (uint8_t *)&v34, 0x16u);
      }
      objc_msgSend_recordID(v7, v30, v31);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_forRecordID_(v13, v32, (uint64_t)v9, v24);
    }
    else
    {
      v17 = (void *)*MEMORY[0x1E0C952F8];
      if (!v16)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], v17);
        v33 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_FAULT))
        {
          v34 = 138412546;
          v35 = v7;
          v36 = 2112;
          v37 = v8;
          _os_log_fault_impl(&dword_1BE990000, v33, OS_LOG_TYPE_FAULT, "No mergeable value task for fetched deltas for %@: %@", (uint8_t *)&v34, 0x16u);
        }
        goto LABEL_16;
      }
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v17);
      v18 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v34 = 138412546;
        v35 = v7;
        v36 = 2112;
        v37 = v8;
        _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Fetched deltas for mergeable %@: %@", (uint8_t *)&v34, 0x16u);
      }
      objc_msgSend_recordValue(v16, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addUnmergedDeltas_(v21, v22, (uint64_t)v8);

      objc_msgSend_CKMap_(v8, v23, (uint64_t)&unk_1E7837010);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordValue(v16, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addServerDeltaMetadatas_(v27, v28, (uint64_t)v24);

    }
LABEL_16:

  }
}

uint64_t sub_1BEBE4C04(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_metadata(a2, (const char *)a2, a3);
}

void sub_1BEBE4C0C(uint64_t a1)
{
  id WeakRetained;
  dispatch_once_t *v2;
  os_log_t *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  os_log_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void (**v35)(void);
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  dispatch_once_t *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  void *v52;
  _QWORD block[5];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (dispatch_once_t *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v3 = (os_log_t *)MEMORY[0x1E0C952B0];
    v4 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v47 = v4;
      objc_msgSend_operationID(WeakRetained, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v59 = v50;
      _os_log_debug_impl(&dword_1BE990000, v47, OS_LOG_TYPE_DEBUG, "Finished mergeable delta fetch operation for %{public}@", buf, 0xCu);

    }
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = WeakRetained;
    objc_msgSend_mergeableValueDownloadTasks(WeakRetained, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allValues(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v54, v62, 16);
    if (v12)
    {
      v16 = v12;
      v17 = *(_QWORD *)v55;
      *(_QWORD *)&v15 = 138412546;
      v51 = v15;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v55 != v17)
            objc_enumerationMutation(v10);
          v19 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v18);
          objc_msgSend_recordValue(v19, v13, v14, v51);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v20;
          if (v20)
          {
            objc_msgSend_unmergedDeltas(v20, v21, v22);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_allObjects(v24, v25, v26);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_mergeLastKnownServerTimestampVectorFromDeltas_(v23, v28, (uint64_t)v27);

          }
          else
          {
            if (*v2 != -1)
              dispatch_once(v2, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v31 = *v3;
            if (os_log_type_enabled(*v3, OS_LOG_TYPE_FAULT))
            {
              v36 = v31;
              objc_msgSend_mergeableValueID(v19, v37, v38);
              v39 = v2;
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_operationID(v52, v41, v42);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v51;
              v59 = v40;
              v60 = 2114;
              v61 = v43;
              _os_log_fault_impl(&dword_1BE990000, v36, OS_LOG_TYPE_FAULT, "No mergeable value delta on download task for %@ in operation %{public}@", buf, 0x16u);

              v2 = v39;
              v3 = (os_log_t *)MEMORY[0x1E0C952B0];

            }
          }
          objc_msgSend_completionBlock(v19, v29, v30);
          v32 = (void *)objc_claimAutoreleasedReturnValue();

          if (v32)
          {
            objc_msgSend_completionBlock(v19, v33, v34);
            v35 = (void (**)(void))objc_claimAutoreleasedReturnValue();
            v35[2]();

          }
          ++v18;
        }
        while (v16 != v18);
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v54, v62, 16);
      }
      while (v16);
    }

    WeakRetained = v52;
    objc_msgSend_callbackQueue(v52, v44, v45);
    v46 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEBE4F70;
    block[3] = &unk_1E782EA40;
    block[4] = v52;
    dispatch_async(v46, block);

  }
}

void sub_1BEBE4F70(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v3;

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

uint64_t sub_1BEBE51E4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BEBE5D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;
  id *v23;
  uint64_t v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v24 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEBE5D7C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  const char *v11;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleRecordFetch_recordID_etagMatched_responseCode_(WeakRetained, v10, (uint64_t)v9, v8, 0, v7);

  objc_msgSend_setUserRecord_(WeakRetained, v11, (uint64_t)v9);
}

void sub_1BEBE5E04(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  objc_class *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  id v27;
  _QWORD block[4];
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v7 = v4;
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v3, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v33 = v9;
    v34 = 2048;
    v35 = v3;
    v36 = 2114;
    v37 = v12;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Fetch user record url request completed. Waiting for all record callbacks to finish before completing request <%{public}@: %p; %{public}@>",
      buf,
      0x20u);

  }
  objc_msgSend_requestUUID(v3, v5, v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v3, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRequest_(WeakRetained, v17, 0);
  objc_msgSend_finishDecryption(WeakRetained, v18, v19);
  objc_msgSend_fetchRecordsGroup(WeakRetained, v20, v21);
  v22 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_callbackQueue(WeakRetained, v23, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBE601C;
  block[3] = &unk_1E782E418;
  v29 = v13;
  v30 = v16;
  v31 = WeakRetained;
  v26 = v16;
  v27 = v13;
  dispatch_group_notify(v22, v25, block);

}

void sub_1BEBE601C(uint64_t a1)
{
  _QWORD *v2;
  os_log_t *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  os_log_t v7;
  const char *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  os_log_t v19;
  NSObject *v20;
  NSObject *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (os_log_t *)MEMORY[0x1E0C952B0];
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v28 = 138543362;
    v29 = v5;
    _os_log_impl(&dword_1BE990000, v4, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing request %{public}@", (uint8_t *)&v28, 0xCu);
    v6 = (void *)*MEMORY[0x1E0C952F8];
    if (*(_QWORD *)(a1 + 40))
    {
      if (*v2 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v6);
      goto LABEL_8;
    }
    if (*v2 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
LABEL_8:
    v7 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      v9 = v7;
      v10 = (objc_class *)objc_opt_class();
      NSStringFromClass(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 48);
      objc_msgSend_ckShortDescription(v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      v28 = 138544130;
      v29 = v11;
      v30 = 2048;
      v31 = v12;
      v32 = 2114;
      v33 = v15;
      v34 = 2112;
      v35 = v16;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Failed to fetch records for <%{public}@: %p; %{public}@>: %@",
        (uint8_t *)&v28,
        0x2Au);

    }
    objc_msgSend_setError_(*(void **)(a1 + 48), v8, *(_QWORD *)(a1 + 40));
    goto LABEL_15;
  }
  v19 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    v21 = v19;
    v22 = (objc_class *)objc_opt_class();
    NSStringFromClass(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *(void **)(a1 + 48);
    objc_msgSend_ckShortDescription(v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 138543874;
    v29 = v23;
    v30 = 2048;
    v31 = v24;
    v32 = 2114;
    v33 = v27;
    _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Fetched records for <%{public}@: %p; %{public}@>",
      (uint8_t *)&v28,
      0x20u);

  }
LABEL_15:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v17, v18);
  v20 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v20);

}

void sub_1BEBE7A4C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_recordArchivedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordArchivedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEBE7DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;
  id *v27;
  id *v28;
  uint64_t v29;

  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v29 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEBE7E24(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleRecordArchived_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);

}

void sub_1BEBE7E88(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_error(WeakRetained, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_setError_(v8, v9, (uint64_t)v7);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEBE7F0C(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = *(void **)(a1 + 32);
    v9 = v2;
    objc_msgSend_operationID(v8, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v12;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Archive records request %{public}@ is complete", (uint8_t *)&v13, 0xCu);

  }
  v5 = *(void **)(a1 + 32);
  objc_msgSend_error(v5, v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v5, v7, (uint64_t)v6);

}

void sub_1BEBE8790(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_shareParticipantKeyFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_shareParticipantKeyFetchedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEBE8E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  id *v31;
  uint64_t v32;

  objc_destroyWeak(v31);
  objc_destroyWeak((id *)(v32 - 112));
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BEBE8E64(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  const void *v21;
  void (*v22)(void);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t *v50;
  os_log_t *v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  const char *v57;
  const void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  const char *v66;
  const void *v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  NSObject *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  NSObject *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void *v87;
  id v88;
  id v89;
  id obj;
  uint8_t buf[4];
  const void *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  v9 = WeakRetained;
  if (a2 && !v5)
  {
    objc_msgSend_pcsManager(WeakRetained, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    obj = *(id *)(v11 + 40);
    objc_msgSend_sharingIdentityDataFromPCS_error_(v10, v12, a2, &obj);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(v11 + 40), obj);

    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (v15)
      v16 = 1;
    else
      v16 = v5 == 0;
    if (v16)
    {
      if (!v15)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v13, *MEMORY[0x1E0C94B20], 5005, CFSTR("Couldn't get sharing identity data for per-participant PCS"));
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v19 = *(void **)(v18 + 40);
        *(_QWORD *)(v18 + 40) = v17;

      }
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v20 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v21 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138543362;
        v92 = v21;
        _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Couldn't get sharing identity data for per-participant PCS. Error: %{public}@", buf, 0xCu);
      }
      goto LABEL_52;
    }
    v23 = (void *)MEMORY[0x1E0CB3940];
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    objc_msgSend_CKBase64URLSafeString(v5, v13, v14);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerScopedUserID(v9, v27, v28);
    v29 = objc_claimAutoreleasedReturnValue();
    v32 = (void *)v29;
    if (v24)
    {
      objc_msgSend_recordName(*(void **)(a1 + 32), v30, v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKBase64EncodedURLSafeString(v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v23, v37, (uint64_t)CFSTR("v4:%@:%@:%@:%@"), v25, v26, v32, v36);
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v40 = *(void **)(v39 + 40);
      *(_QWORD *)(v39 + 40) = v38;

    }
    else
    {
      objc_msgSend_stringWithFormat_(v23, v30, (uint64_t)CFSTR("v2:%@:%@:%@"), v25, v26, v29);
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v33 = *(void **)(v42 + 40);
      *(_QWORD *)(v42 + 40) = v41;
    }

    objc_msgSend_deviceContext(v9, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_testDeviceReference(v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v48)
    {
LABEL_34:
      objc_msgSend_dataUsingEncoding_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), v49, 4);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKBase64URLSafeString(v71, v72, v73);
      v74 = objc_claimAutoreleasedReturnValue();
      v75 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v76 = *(void **)(v75 + 40);
      *(_QWORD *)(v75 + 40) = v74;

      v22 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
      goto LABEL_53;
    }
    v50 = (uint64_t *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v51 = (os_log_t *)MEMORY[0x1E0C952B0];
    v52 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v52, OS_LOG_TYPE_DEBUG, "Verifying decryption of the invited PCS using the exported per-participant PCS key", buf, 2u);
    }
    objc_msgSend_pcsManager(v9, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v89 = *(id *)(v56 + 40);
    v58 = (const void *)objc_msgSend_createSharingIdentityFromData_error_(v55, v57, (uint64_t)v5, &v89);
    objc_storeStrong((id *)(v56 + 40), v89);

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) || !v58)
    {
      if (*v50 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v77 = *v51;
      if (os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BE990000, v77, OS_LOG_TYPE_ERROR, "Couldn't create a participant identity from the exported per participant key", buf, 2u);
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v78, *MEMORY[0x1E0C94B20], 5005, CFSTR("Couldn't create a participant identity from the exported per participant key"));
        v79 = objc_claimAutoreleasedReturnValue();
        v80 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v81 = *(void **)(v80 + 40);
        *(_QWORD *)(v80 + 40) = v79;

      }
      if (!v58)
        goto LABEL_52;
    }
    else
    {
      objc_msgSend_pcsManager(v9, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_invitedProtectionData(*(void **)(a1 + 48), v62, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v88 = *(id *)(v65 + 40);
      v67 = (const void *)objc_msgSend_createSharePCSFromData_sharingIdentity_error_(v61, v66, (uint64_t)v64, v58, &v88);
      objc_storeStrong((id *)(v65 + 40), v88);

      v68 = (void *)*MEMORY[0x1E0C952F8];
      v69 = *v50;
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) && v67)
      {
        if (v69 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v68);
        v70 = *v51;
        if (os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v92 = v67;
          _os_log_debug_impl(&dword_1BE990000, v70, OS_LOG_TYPE_DEBUG, "Successfully decrypted the share invited PCS: %@", buf, 0xCu);
        }
        CFRelease(v58);
        CFRelease(v67);
        goto LABEL_34;
      }
      if (v69 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v68);
      v82 = *v51;
      if (os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
      {
        v87 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138543362;
        v92 = v87;
        _os_log_error_impl(&dword_1BE990000, v82, OS_LOG_TYPE_ERROR, "Couldn't create a participant identity from the exported per participant key: %{public}@", buf, 0xCu);
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v83, *MEMORY[0x1E0C94B20], 5005, CFSTR("Couldn't decrypt the share invitedPCS using per-participant PCS"));
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v86 = *(void **)(v85 + 40);
        *(_QWORD *)(v85 + 40) = v84;

      }
      if (v67)
        CFRelease(v67);
    }
    CFRelease(v58);
LABEL_52:
    v22 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
    goto LABEL_53;
  }
  if (!v5)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v7, *MEMORY[0x1E0C94B20], 5004, CFSTR("Couldn't decrypt our per-participant PCS"));
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v22 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
LABEL_53:
  v22();

}

void sub_1BEBE98DC(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  NSObject *v6;

  objc_msgSend__performCallbackForShareID_withParticipantKey_error_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a2, a3);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEBE9B9C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1BEBE9CF8;
  v10[3] = &unk_1E7830270;
  objc_copyWeak(&v11, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v10);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEBE9D70;
  v7[3] = &unk_1E782E468;
  objc_copyWeak(&v8, &location);
  objc_copyWeak(&v9, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBE9CBC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBE9CF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleFetchedShare_withID_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);

}

void sub_1BEBE9D70(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const __CFString *v21;
  uint64_t v22;
  void *v23;
  const __CFString *v24;
  _BYTE v25[12];
  __int16 v26;
  const __CFString *v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v12 = v4;
    objc_msgSend_operationID(WeakRetained, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v16, v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
      v21 = CFSTR(" with error ");
    else
      v21 = &stru_1E7838F48;
    objc_msgSend_error(v3, v18, v19);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)v22;
    *(_DWORD *)v25 = 138543874;
    if (v22)
      v24 = (const __CFString *)v22;
    else
      v24 = &stru_1E7838F48;
    *(_QWORD *)&v25[4] = v15;
    v26 = 2114;
    v27 = v21;
    v28 = 2112;
    v29 = v24;
    _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "Fetch share participant key operation %{public}@ finished%{public}@%@", v25, 0x20u);

  }
  objc_msgSend_error(v3, v5, v6, *(_QWORD *)v25);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setError_(WeakRetained, v8, (uint64_t)v7);

  objc_msgSend_stateTransitionGroup(WeakRetained, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v11);

}

void sub_1BEBEA0AC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1BEBEA208;
  v10[3] = &unk_1E7835C28;
  objc_copyWeak(&v11, &location);
  objc_msgSend_setSaveCompletionBlock_(v3, v5, (uint64_t)v10);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEBEA35C;
  v7[3] = &unk_1E782E468;
  objc_copyWeak(&v8, &location);
  objc_copyWeak(&v9, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBEA1CC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBEA208(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  int v20;
  id v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12 = WeakRetained;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v20 = 138412546;
      v21 = v7;
      v22 = 2112;
      v23 = v8;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Error updating share %@ on the server: %@", (uint8_t *)&v20, 0x16u);
    }
  }
  else
  {
    objc_msgSend_shareIDs(WeakRetained, v10, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v14, v15, (uint64_t)v7);

    objc_msgSend_sharesNeedingUpdateByID(v12, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v18, v19, 0, v7);

  }
}

void sub_1BEBEA35C(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint8_t v15[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v15 = 0;
    _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "All shares have been updated on the server", v15, 2u);
  }
  objc_msgSend_error(WeakRetained, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    v9 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v12);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v14);

}

void sub_1BEBEA64C()
{
  CKDDeviceIDManager *v0;
  const char *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;

  v0 = [CKDDeviceIDManager alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2);
  v4 = (void *)qword_1ED702B48;
  qword_1ED702B48 = inited;

}

void sub_1BEBEB0EC()
{
  uint64_t v0;
  void *v1;

  CKCreateGUID();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ED702B58;
  qword_1ED702B58 = v0;

}

void sub_1BEBEB264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBEB284(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  __int16 v22;
  uint8_t buf[16];
  uint8_t v24[2];
  char v25;

  if (!*(_BYTE *)(a1 + 64))
  {
    objc_msgSend_globalDeviceID(*(void **)(a1 + 32), a2, a3);
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

      return;
    }
  }
  v25 = 1;
  objc_msgSend__savedDeviceIdentifierForService_lookupKey_success_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v25);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (!v25)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v18 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_WORD *)v24 = 0;
    v19 = "Unexpected error fetching global deviceID from keychain, returning nil";
    v20 = v24;
    goto LABEL_27;
  }
  if (v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (!*(_BYTE *)(a1 + 64))
        objc_msgSend_setGlobalDeviceID_(*(void **)(a1 + 32), v6, (uint64_t)v5);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v7 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Fetched global deviceID from keychain", buf, 2u);
      }
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = v5;
      v10 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v9;
      goto LABEL_24;
    }
  }
  if (!*(_BYTE *)(a1 + 65))
    goto LABEL_25;
  CKCreateGUID();
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  objc_msgSend__saveDeviceIdentifier_forService_lookupKey_sysBound_success_(*(void **)(a1 + 32), v17, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 1, &v25);
  if (v25)
    goto LABEL_25;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v18 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    v22 = 0;
    v19 = "Unexpected error saving global deviceID to keychain, returning nil";
    v20 = (uint8_t *)&v22;
LABEL_27:
    _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, v19, v20, 2u);
  }
LABEL_23:
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v21 + 40);
  *(_QWORD *)(v21 + 40) = 0;
LABEL_24:

LABEL_25:
}

void sub_1BEBEC480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  _Block_object_dispose(&a60, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBEC500(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  id v14;

  v4 = a3;
  objc_msgSend_deltasToSave(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend_count(v7, v8, v9);

  objc_msgSend_pendingReplacementRequests(v4, v10, v11);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend_count(v14, v12, v13);
}

void sub_1BEBEC710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBEC734(uint64_t a1, int a2, int a3, id obj)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
  return 1;
}

void sub_1BEBEC768(uint64_t a1, char a2, void *a3)
{
  id v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v6 = v4;
  if ((a2 & 1) == 0)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v17, 16);
    if (v7)
    {
      v10 = v7;
      v11 = *(_QWORD *)v14;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v14 != v11)
            objc_enumerationMutation(v6);
          objc_msgSend_removeDB(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v12++), v8, v9);
        }
        while (v10 != v12);
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v8, (uint64_t)&v13, v17, 16);
      }
      while (v10);
    }
  }

}

void sub_1BEBECE0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBECE24(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 456), a2);
}

void sub_1BEBECE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBED460(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_deleteCallbackWithMetadata_error_, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1BEBED470(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_saveCallbackWithMetadata_error_, *(_QWORD *)(a1 + 40));
}

void sub_1BEBED8C4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  id v27;

  v27 = a2;
  if ((objc_msgSend_shouldOnlySaveAssetContent(*(void **)(a1 + 32), v3, v4) & 1) == 0)
  {
    v7 = objc_msgSend_recordsUploaded(v27, v5, v6);
    objc_msgSend_setRecordsUploaded_(v27, v8, v7 + 1);
  }
  objc_msgSend_record(*(void **)(a1 + 40), v5, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_assetCount(v9, v10, v11);
  v15 = objc_msgSend_assetsUploaded(v27, v13, v14);
  objc_msgSend_setAssetsUploaded_(v27, v16, v15 + v12);

  objc_msgSend_record(*(void **)(a1 + 40), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_assetDiskSize(v19, v20, v21);
  v25 = objc_msgSend_assetsUploadedFileSize(v27, v23, v24);
  objc_msgSend_setAssetsUploadedFileSize_(v27, v26, v25 + v22);

}

void sub_1BEBEDA88(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_recordsDeleted(v6, v2, v3);
  objc_msgSend_setRecordsDeleted_(v6, v5, v4 + 1);

}

void sub_1BEBEDDB0(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_retries(v6, v2, v3);
  objc_msgSend_setRetries_(v6, v5, v4 + 1);

}

void sub_1BEBEE51C(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_retries(v6, v2, v3);
  objc_msgSend_setRetries_(v6, v5, v4 + 1);

}

void sub_1BEBEE818(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEBEE83C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_container(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCachedEnvironment_(v5, v6, a2);

  objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v9);

}

void sub_1BEBEEC38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEBEEC5C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend_setError_(WeakRetained, v4, (uint64_t)v3);

  objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v7);

}

void sub_1BEBEED10(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_sideEffectRecordIDs(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v25, v29, 16);
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v26 != v12)
          objc_enumerationMutation(v6);
        v14 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend_handlersByRecordID(*(void **)(a1 + 32), v9, v10);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v15, v16, v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          if (objc_msgSend_isDelete(v17, v18, v19))
          {
            objc_msgSend_noteSideEffectRecordPendingDelete_(v3, v20, v14);
          }
          else
          {
            objc_msgSend_record(v17, v20, v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_noteSideEffectRecordPendingModify_(v3, v23, (uint64_t)v22);

          }
        }
        else
        {
          objc_msgSend_noteSideEffectRecordAbsent_(v3, v18, v14);
        }

      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v25, v29, 16);
    }
    while (v11);
  }
  if (objc_msgSend_isShare(v3, v9, v10))
    objc_msgSend_setState_(v3, v24, 1);
  else
    objc_msgSend_setState_(v3, v24, 2);

}

void sub_1BEBEF7B4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  id v10;

  v10 = a2;
  if (objc_msgSend_isDelete(v10, v3, v4))
  {
    objc_msgSend_setState_(v10, v5, 1);
  }
  else
  {
    v7 = *(void **)(a1 + 32);
    objc_msgSend_shareID(v10, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v9, (uint64_t)v10, v8);

  }
}

void sub_1BEBEF824(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  uint64_t v7;
  const char *v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v4 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BEBEF94C;
  v13[3] = &unk_1E78325F0;
  v14 = *(id *)(a1 + 32);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v13);
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_1BEBEFA7C;
  v9[3] = &unk_1E782E530;
  objc_copyWeak(&v12, &location);
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10 = v6;
  v11 = v7;
  objc_msgSend_setCompletionBlock_(v3, v8, (uint64_t)v9);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);

}

void sub_1BEBEF928(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBEF94C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  id v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v10 = a4;
  if (v8)
  {
    objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v9, (uint64_t)v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_updateParticipantsForFetchedShare_error_(v11, v12, (uint64_t)v7, v10);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v14 = 138412290;
      v15 = v10;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Warn: Got a fetched share callback without a recordID: %@", (uint8_t *)&v14, 0xCu);
    }
  }

}

void sub_1BEBEFA7C(void **a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    objc_msgSend_allValues(a1[4], v6, v7, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v21, v25, 16);
    if (v10)
    {
      v13 = v10;
      v14 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v22 != v14)
            objc_enumerationMutation(v8);
          v16 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
          if (objc_msgSend_state(v16, v11, v12) == 10)
          {
            if (objc_msgSend_CKIsObjectNotFoundError(v5, v11, v12))
            {
              objc_msgSend_setState_(v16, v17, 1);
              objc_msgSend_setError_(v16, v18, 0);
            }
            else
            {
              objc_msgSend_setState_(v16, v17, 12);
              objc_msgSend_setError_(v16, v19, (uint64_t)v5);
            }
          }
        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v21, v25, 16);
      }
      while (v13);
    }

  }
  objc_msgSend_stateTransitionGroup(a1[5], v6, v7);
  v20 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v20);

}

void sub_1BEBEFE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBEFEA4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  id v35;

  v35 = a2;
  if ((objc_msgSend_isDelete(v35, v3, v4) & 1) != 0)
    goto LABEL_8;
  objc_msgSend_record(v35, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasUpdatedParent(v7, v8, v9))
  {
    objc_msgSend_record(v35, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_parent(v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = v35;
    if (!v15)
      goto LABEL_6;
    v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    objc_msgSend_record(v35, v16, v17);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_parent(v7, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v19, v26, (uint64_t)v25);

  }
  v18 = v35;
LABEL_6:
  objc_msgSend_record(v18, v16, v17);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_share(v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    objc_msgSend_record(v35, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWantsChainPCS_(v33, v34, 1);

  }
LABEL_8:

}

void sub_1BEBF0104(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend_isDelete(v3, v4, v5))
  {
    objc_msgSend_setState_(v3, v6, 5);
  }
  else if ((objc_msgSend_useEncryption(*(void **)(a1 + 32), v6, v7) & 1) != 0)
  {
    objc_msgSend_pcsGroup(v3, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    dispatch_group_enter(v10);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v11, (uint64_t)v3);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v14 = v12;
      objc_msgSend_recordID(v3, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v17;
      _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Skipping fetch of share PCS data for %@ because encryption is disabled", (uint8_t *)&v18, 0xCu);

    }
    objc_msgSend_setState_(v3, v13, 3);
  }

}

void sub_1BEBF0410(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend_isDelete(v3, v4, v5)
    && (objc_msgSend__needsSigningPCS(*(void **)(a1 + 32), v6, v7) & 1) == 0)
  {
    objc_msgSend_setState_(v3, v6, 5);
  }
  else if ((objc_msgSend_useEncryption(*(void **)(a1 + 32), v6, v7) & 1) != 0)
  {
    objc_msgSend_pcsGroup(v3, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    dispatch_group_enter(v10);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v11, (uint64_t)v3);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v14 = v12;
      objc_msgSend_recordID(v3, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v17;
      _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Skipping fetch of record PCS data for %@ because encryption is disabled", (uint8_t *)&v18, 0xCu);

    }
    objc_msgSend_setState_(v3, v13, 3);
  }

}

void sub_1BEBF18B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  if (objc_msgSend_count(v5, v6, v7))
  {
    objc_msgSend_CKMap_(v5, v8, (uint64_t)&unk_1E7837360);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11);

  }
}

id sub_1BEBF1930(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  void *v5;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v7 = CFSTR("assetReference");
  objc_msgSend_assetReference(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v8, &v7, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1BEBF2040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBF2094(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = a3;
  if (v7)
  {
    objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v6, (uint64_t)v7, v5);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v9 = v8;
      objc_msgSend_CKLowercaseHexStringWithoutSpaces(v5, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138412290;
      v15 = v12;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "cache clone context for asset with signature %@", (uint8_t *)&v14, 0xCu);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, "received a nil clone context", (uint8_t *)&v14, 2u);
    }
  }

}

void sub_1BEBF2240(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id from;
  id location;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  objc_msgSend_setDatabaseScope_(v3, v4, *(_QWORD *)(a1 + 48));
  if (objc_msgSend_databaseScope(v3, v5, v6) != 2 && objc_msgSend_databaseScope(v3, v7, v8) != 3)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v9);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v26, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1516, CFSTR("Expected valid source for CKAssetReference"));

  }
  objc_msgSend_setUseEncryption_(v3, v7, 1);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v12);

  v13 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1BEBF25C0;
  v31[3] = &unk_1E782F998;
  objc_copyWeak(&v33, &location);
  v32 = *(id *)(a1 + 40);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v14, (uint64_t)v31);
  v27[0] = v13;
  v27[1] = 3221225472;
  v27[2] = sub_1BEBF2664;
  v27[3] = &unk_1E7831E10;
  objc_copyWeak(&v29, &location);
  objc_copyWeak(&v30, &from);
  v28 = *(id *)(a1 + 40);
  objc_msgSend_setCompletionBlock_(v3, v15, (uint64_t)v27);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v16 = (id)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v19 = (objc_class *)objc_opt_class();
    NSStringFromClass(v19);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(a1 + 32);
    objc_msgSend_ckShortDescription(v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218754;
    v37 = v3;
    v38 = 2114;
    v39 = v20;
    v40 = 2048;
    v41 = v21;
    v42 = 2114;
    v43 = v24;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %p for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);

  }
  objc_msgSend_hash(*(void **)(a1 + 32), v17, v18);
  kdebug_trace();

  objc_destroyWeak(&v30);
  objc_destroyWeak(&v29);

  objc_destroyWeak(&v33);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEBF2564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_1BEBF25C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  void *v11;
  const char *v12;
  id v13;

  v13 = a2;
  v7 = a4;
  v8 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
    objc_msgSend_assetArray_didFetchRecord_error_(WeakRetained, v12, (uint64_t)v11, v13, v7);

}

void sub_1BEBF2664(uint64_t a1)
{
  id v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__didCompleteRecordFetchOperation_assetArrayByRecordID_(WeakRetained, v3, (uint64_t)v2, *(_QWORD *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEBF2D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1BEBF2D84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = a3;
  if (v7)
  {
    objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v6, (uint64_t)v7, v5);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v9 = v8;
      objc_msgSend_CKLowercaseHexStringWithoutSpaces(v5, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138412290;
      v15 = v12;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "cache clone context for pacakge item with signature %@", (uint8_t *)&v14, 0xCu);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, "received a nil clone context", (uint8_t *)&v14, 2u);
    }
  }

}

void sub_1BEBF2F30(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id location;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend_setDatabaseScope_(v3, v4, *(_QWORD *)(a1 + 48));
  if (objc_msgSend_databaseScope(v3, v5, v6) != 2 && objc_msgSend_databaseScope(v3, v7, v8) != 3)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v9);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v26, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1607, CFSTR("Expected valid source for CKAssetReference"));

  }
  objc_msgSend_setUseEncryption_(v3, v7, 1);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v12);

  v13 = MEMORY[0x1E0C809B0];
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = sub_1BEBF325C;
  v32[3] = &unk_1E782F998;
  objc_copyWeak(&v34, &location);
  v33 = *(id *)(a1 + 40);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v14, (uint64_t)v32);
  v27 = v13;
  v28 = 3221225472;
  v29 = sub_1BEBF3314;
  v30 = &unk_1E782EF38;
  objc_copyWeak(&v31, &location);
  objc_msgSend_setCompletionBlock_(v3, v15, (uint64_t)&v27);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v16 = (id)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v19 = (objc_class *)objc_opt_class();
    NSStringFromClass(v19);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(a1 + 32);
    objc_msgSend_ckShortDescription(v21, v22, v23, v27, v28, v29, v30);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218754;
    v37 = v3;
    v38 = 2114;
    v39 = v20;
    v40 = 2048;
    v41 = v21;
    v42 = 2114;
    v43 = v24;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %p for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);

  }
  objc_msgSend_hash(*(void **)(a1 + 32), v17, v18);
  kdebug_trace();
  objc_destroyWeak(&v31);

  objc_destroyWeak(&v34);
  objc_destroyWeak(&location);

}

void sub_1BEBF3210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBF325C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  id v15;

  v15 = a2;
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_packageArray_didFetchRecord_error_(WeakRetained, v14, (uint64_t)v13, v15, v8);

  }
}

void sub_1BEBF3314(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBF3404(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_assetsWhichNeedRecordFetch(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v23, v27, 16);
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v24;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v24 != v12)
          objc_enumerationMutation(v6);
        v14 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v13);
        if (objc_msgSend_databaseScope(*(void **)(a1 + 32), v9, v10) != 2
          && objc_msgSend_databaseScope(*(void **)(a1 + 32), v15, v16) != 3)
        {
          objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v15, v16);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v21, v22, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1642, CFSTR("Expected valid destination for CKAssetReference"));

        }
        if ((objc_msgSend_useEncryption(*(void **)(a1 + 32), v15, v16) & 1) == 0)
        {
          objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v17, v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v20, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1643, CFSTR("Expected valid destination for CKAssetReference"));

        }
        objc_msgSend_setObject_forKey_(*(void **)(a1 + 40), v17, (uint64_t)v3, v14);
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v23, v27, 16);
    }
    while (v11);
  }
  objc_msgSend_setState_(v3, v9, 4);

}

void sub_1BEBF390C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19;
  uint8_t v20[128];
  uint8_t buf[4];
  id v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v19 = 0;
  objc_msgSend_prepareAssetsForUploadWithError_(v3, v4, (uint64_t)&v19);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v19;
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v22 = v3;
      v23 = 2112;
      v24 = v6;
      _os_log_error_impl(&dword_1BE990000, v7, OS_LOG_TYPE_ERROR, "Error preparing assets for handler %@: %@", buf, 0x16u);
    }
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v8 = v5;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v15, v20, 16);
    if (v10)
    {
      v12 = v10;
      v13 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v16 != v13)
            objc_enumerationMutation(v8);
          objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), v11, (uint64_t)v3, *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i), (_QWORD)v15);
        }
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v15, v20, 16);
      }
      while (v12);
    }

  }
}

void sub_1BEBF3C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBF3CB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v8, v9);
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)CFSTR("FailBoundaryKeyFetch"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, *MEMORY[0x1E0C94B20], 5005, CFSTR("Couldn't fetch boundary key because the unit test asked for it"));
      v16 = objc_claimAutoreleasedReturnValue();

      v5 = 0;
      v6 = (id)v16;
    }
  }
  v17 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v17);
    v18 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v25 = v18;
      objc_msgSend_operationID(WeakRetained, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v28;
      v41 = 2112;
      v42 = v6;
      _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Error fetching user boundary key for operation %{public}@: %@", buf, 0x16u);

    }
    objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v6);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v17);
    v22 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v29 = v22;
      objc_msgSend_operationID(WeakRetained, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (void *)MEMORY[0x1E0CB3940];
      v36 = objc_msgSend_length(v5, v34, v35);
      objc_msgSend_stringWithFormat_(v33, v37, (uint64_t)CFSTR("<%lu bytes>"), v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v32;
      v41 = 2112;
      v42 = v38;
      _os_log_debug_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEBUG, "Fetched user boundary key for operation %{public}@: %@", buf, 0x16u);

    }
    objc_msgSend_setCachedGlobalPerUserBoundaryKeyData_(WeakRetained, v23, (uint64_t)v5);
  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v20, v21);
  v24 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v24);

}

void sub_1BEBF4360(void **a1, void *a2)
{
  id *v2;
  id *v3;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  char v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void **);
  void *v36;
  void *v37;
  id v38;
  id v39;
  _QWORD v40[5];
  id v41;
  id v42[2];
  _QWORD v43[5];
  id v44;
  id v45[2];
  _QWORD v46[5];
  id v47;
  id v48[2];
  id location;

  v5 = a2;
  objc_msgSend_container(a1[4], v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clientSDKVersion(v8, v9, v10);
  v11 = CKLinkCheck48d9728e8c354416a38f82379cbb35e3();

  if ((v11 & 1) == 0)
  {
    v14 = objc_msgSend_atomic(a1[4], v12, v13);
    objc_msgSend_setAtomic_(v5, v15, v14);
  }
  objc_initWeak(&location, v5);
  v16 = MEMORY[0x1E0C809B0];
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = sub_1BEBF4648;
  v46[3] = &unk_1E7837450;
  v17 = a1[4];
  v48[1] = a1[6];
  v46[4] = v17;
  objc_copyWeak(v48, &location);
  v47 = a1[5];
  objc_msgSend_setUploadPreparationBlock_(v5, v18, (uint64_t)v46);
  objc_msgSend_saveProgressBlock(a1[4], v19, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v22)
  {
    v43[0] = v16;
    v43[1] = 3221225472;
    v43[2] = sub_1BEBF47B4;
    v43[3] = &unk_1E7837478;
    v23 = v43;
    v24 = a1[4];
    v45[1] = a1[6];
    v43[4] = v24;
    v2 = v45;
    objc_copyWeak(v45, &location);
    v3 = &v44;
    v44 = a1[5];
  }
  else
  {
    v23 = 0;
  }
  objc_msgSend_setUploadProgressBlock_(v5, v21, (uint64_t)v23);

  v40[0] = v16;
  v40[1] = 3221225472;
  v40[2] = sub_1BEBF4A20;
  v40[3] = &unk_1E78374A0;
  objc_copyWeak(v42, &location);
  v25 = a1[5];
  v26 = a1[4];
  v42[1] = a1[6];
  v40[4] = v26;
  v41 = v25;
  objc_msgSend_setUploadCompletionBlock_(v5, v27, (uint64_t)v40);
  v33 = v16;
  v34 = 3221225472;
  v35 = sub_1BEBF530C;
  v36 = &unk_1E782E530;
  objc_copyWeak(&v39, &location);
  v28 = a1[5];
  v37 = a1[4];
  v38 = v28;
  objc_msgSend_setCompletionBlock_(v5, v29, (uint64_t)&v33);
  objc_msgSend_stateTransitionGroup(a1[4], v30, v31, v33, v34, v35, v36, v37);
  v32 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v32);

  objc_destroyWeak(&v39);
  objc_destroyWeak(v42);
  if (v22)
  {

    objc_destroyWeak(v2);
  }

  objc_destroyWeak(v48);
  objc_destroyWeak(&location);

}

void sub_1BEBF45EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  if (v2)
    objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEBF4648(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id WeakRetained;
  const char *v17;
  void *v18;
  const char *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (!v5)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v3, v4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v17, v14, v15, CFSTR("CKDModifyRecordsOperation.m"), 1776, CFSTR("Expected non-nil asset for %@"), WeakRetained);

  }
  objc_msgSend_objectForKey_(*(void **)(a1 + 40), v3, (uint64_t)v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v19, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1778, CFSTR("Expected non-nil handler for %@"), v5);

  }
  objc_msgSend_progressTracker(v8, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v5;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v10, (uint64_t)v20, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startTrackingItems_(v9, v12, (uint64_t)v11);

}

void sub_1BEBF47B4(uint64_t a1, void *a2, double a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id WeakRetained;
  const char *v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  _QWORD block[5];
  id v35;
  uint64_t v36;

  v7 = a2;
  if (!v7)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v5, v6);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v29, v26, v27, CFSTR("CKDModifyRecordsOperation.m"), 1783, CFSTR("Expected non-nil asset for %@"), WeakRetained);

  }
  objc_msgSend_record(v7, v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v12, v13);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1785, CFSTR("Expected non-nil recordID for %@"), v7);

  }
  objc_msgSend_objectForKey_(*(void **)(a1 + 40), v12, (uint64_t)v7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v14, v15);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v32, v33, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1787, CFSTR("Expected non-nil handler for %@"), v7);

  }
  objc_msgSend_progressTracker(v16, v14, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_updateProgressWithItem_progress_(v17, v18, (uint64_t)v7, a3);
  v20 = v19;

  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEBF49B0;
  block[3] = &unk_1E7830158;
  block[4] = *(_QWORD *)(a1 + 32);
  v35 = v11;
  v36 = v20;
  v24 = v11;
  dispatch_async(v23, block);

}

void sub_1BEBF49B0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(id, _QWORD, double);

  objc_msgSend_saveProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_saveProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(id, _QWORD, double))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));

  }
}

void sub_1BEBF4A20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  id WeakRetained;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  CKDWrappingContext *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  void *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  void *v91;
  void *v92;
  const char *v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  NSObject *v97;
  void *v98;
  const char *v99;
  void *v100;
  const char *v101;
  void *v102;
  const char *v103;
  void *v104;
  id v105;
  id v106;
  id obj;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  _QWORD block[5];
  id v113;
  id v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  id v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint8_t buf[4];
  id v125;
  __int16 v126;
  void *v127;
  __int16 v128;
  void *v129;
  __int16 v130;
  id v131;
  _BYTE v132[128];
  _BYTE v133[128];
  _QWORD v134[4];

  v134[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v111 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!v5)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v98, v99, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1796, CFSTR("Expected non-nil asset for %@"), WeakRetained);

  }
  objc_msgSend_record(v5, v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v14, v15);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v100, v101, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1798, CFSTR("Expected non-nil recordID for %@"), v5);

  }
  objc_msgSend_objectForKey_(*(void **)(a1 + 40), v14, (uint64_t)v5);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v16, v17);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v102, v103, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1800, CFSTR("Expected non-nil handler for %@"), v5);

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_assets(v5, v19, v20);
    v21 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v134[0] = v5;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v19, (uint64_t)v134, 1);
    v21 = objc_claimAutoreleasedReturnValue();
  }
  v108 = (void *)v21;
  if (v6)
  {
LABEL_11:
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v24 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v26 = *(void **)(v111 + 32);
      v27 = v24;
      objc_msgSend_operationID(v26, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      v125 = v5;
      v126 = 2112;
      v127 = v13;
      v128 = 2114;
      v129 = v30;
      v130 = 2112;
      v131 = v6;
      _os_log_impl(&dword_1BE990000, v27, OS_LOG_TYPE_INFO, "Failed to upload asset %@ for record %@ and operation %{public}@: %@", buf, 0x2Au);

    }
    objc_msgSend_setState_(v18, v25, 12);
    objc_msgSend_setError_(v18, v31, (uint64_t)v6);
  }
  else
  {
    if (objc_msgSend_useEncryption(WeakRetained, v22, v23))
    {
      v110 = v18;
      v104 = v13;
      v105 = WeakRetained;
      v106 = v5;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      obj = v108;
      v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v34, (uint64_t)&v120, v133, 16);
      if (v35)
      {
        v36 = v35;
        v109 = *(_QWORD *)v121;
        while (2)
        {
          for (i = 0; i != v36; ++i)
          {
            if (*(_QWORD *)v121 != v109)
              objc_enumerationMutation(obj);
            v38 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * i);
            v39 = [CKDWrappingContext alloc];
            objc_msgSend_record(v38, v40, v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_recordID(v42, v43, v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_recordKey(v38, v46, v47);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_mergeableDeltaID(v38, v49, v50);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_signature(v38, v52, v53);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_referenceSignature(v38, v55, v56);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v59 = (void *)objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v39, v58, (uint64_t)v45, v48, v51, v54, v57);

            objc_msgSend_container(*(void **)(v111 + 32), v60, v61);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_pcsManager(v62, v63, v64);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_assetKey(v38, v66, v67);
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_record(v110, v69, v70);
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v74 = objc_msgSend_recordPCS(v71, v72, v73);
            v119 = 0;
            objc_msgSend_wrapAssetKey_withRecordPCS_inContext_withError_(v65, v75, (uint64_t)v68, v74, v59, &v119);
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            v6 = v119;
            objc_msgSend_setWrappedAssetKey_(v38, v77, (uint64_t)v76);

            if (v6)
            {

              WeakRetained = v105;
              v5 = v106;
              v13 = v104;
              v18 = v110;
              goto LABEL_11;
            }
          }
          v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v78, (uint64_t)&v120, v133, 16);
          if (v36)
            continue;
          break;
        }
      }

      WeakRetained = v105;
      v5 = v106;
      v13 = v104;
      v18 = v110;
    }
    if (objc_msgSend_useClearAssetEncryption(WeakRetained, v32, v33))
    {
      v81 = v18;
      v82 = v13;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v83 = v108;
      v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v115, v132, 16);
      if (v85)
      {
        v88 = v85;
        v89 = *(_QWORD *)v116;
        do
        {
          for (j = 0; j != v88; ++j)
          {
            if (*(_QWORD *)v116 != v89)
              objc_enumerationMutation(v83);
            v91 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * j);
            objc_msgSend_assetKey(v91, v86, v87);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setClearAssetKey_(v91, v93, (uint64_t)v92);

          }
          v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v86, (uint64_t)&v115, v132, 16);
        }
        while (v88);
      }

      v13 = v82;
      v18 = v81;
    }
    objc_msgSend_error(v18, v79, v80);
    v94 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v94)
      objc_msgSend_setState_(v18, v95, 5);
    objc_msgSend_callbackQueue(*(void **)(v111 + 32), v95, v96);
    v97 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEBF5094;
    block[3] = &unk_1E782E418;
    block[4] = *(_QWORD *)(v111 + 32);
    v113 = v108;
    v114 = v13;
    dispatch_async(v97, block);

    v6 = 0;
  }

}

void sub_1BEBF5094(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  int shouldOnlySaveAssetContent;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  id obj;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  uint64_t v60;

  v3 = a1;
  v60 = *MEMORY[0x1E0C80C00];
  objc_msgSend_uploadCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    obj = *(id *)(v3 + 40);
    v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v55, v59, 16);
    if (v50)
    {
      v48 = v3;
      v49 = *(_QWORD *)v56;
      do
      {
        for (i = 0; i != v50; ++i)
        {
          if (*(_QWORD *)v56 != v49)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
          objc_msgSend_uploadCompletionBlock(*(void **)(v3 + 32), v6, v7);
          v10 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v11 = *(_QWORD *)(v3 + 48);
          objc_msgSend_recordKey(v9, v12, v13);
          v14 = objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend_arrayIndex(v9, v15, v16);
          objc_msgSend_signature(v9, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = objc_msgSend_size(v9, v21, v22);
          v51 = objc_msgSend_paddedFileSize(v9, v23, v24);
          v53 = v17;
          v54 = v11;
          if (objc_msgSend_shouldOnlySaveAssetContent(*(void **)(v3 + 32), v25, v26))
            v29 = objc_msgSend_uploaded(v9, v27, v28);
          else
            v29 = 0;
          v30 = (void *)v14;
          shouldOnlySaveAssetContent = objc_msgSend_shouldOnlySaveAssetContent(*(void **)(v3 + 32), v27, v28);
          if (shouldOnlySaveAssetContent)
          {
            objc_msgSend_uploadReceipt(v9, v31, v32);
            v34 = objc_claimAutoreleasedReturnValue();
            v47 = (void *)v34;
          }
          else
          {
            v34 = 0;
          }
          v37 = 0.0;
          if (objc_msgSend_shouldOnlySaveAssetContent(*(void **)(v3 + 32), v31, v32))
          {
            objc_msgSend_uploadReceiptExpiration(v9, v35, v36);
            v37 = v38;
          }
          objc_msgSend_wrappedAssetKey(v9, v35, v36);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_clearAssetKey(v9, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_referenceSignature(v9, v43, v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, double, uint64_t, void *, void *, void *, _QWORD))v10)[2](v10, v54, v30, v53, v20, v52, v51, v29, v37, v34, v39, v42, v45, 0);

          if (shouldOnlySaveAssetContent)
          v3 = v48;
        }
        v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v55, v59, 16);
      }
      while (v50);
    }

  }
}

void sub_1BEBF530C(void **a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v11 = a1[4];
      v12 = v8;
      objc_msgSend_operationID(v11, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(WeakRetained, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v15;
      v42 = 2112;
      v43 = v18;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Failed to upload assets for operation %{public}@: %@", buf, 0x16u);

    }
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    objc_msgSend_objectEnumerator(a1[5], v9, v10, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allObjects(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v35, v39, 16);
    if (v24)
    {
      v26 = v24;
      v27 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v36 != v27)
            objc_enumerationMutation(v22);
          v29 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
          objc_msgSend_setState_(v29, v25, 12);
          objc_msgSend_error(WeakRetained, v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setError_(v29, v33, (uint64_t)v32);

        }
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v25, (uint64_t)&v35, v39, 16);
      }
      while (v26);
    }

  }
  objc_msgSend_stateTransitionGroup(a1[4], v6, v7);
  v34 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v34);

}

void sub_1BEBF5BF8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  id v13;

  v13 = a2;
  if ((objc_msgSend_isDelete(v13, v3, v4) & 1) == 0)
  {
    objc_msgSend_record(v13, v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v11, v12, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDModifyRecordsOperation.m"), 1973, CFSTR("Expected a non-nil record for handler %@"), v13);

    }
    if (objc_msgSend_includeMergeableDeltasInModifyRecordsRequest(*(void **)(a1 + 32), v7, v8))
      objc_msgSend_setState_(v13, v10, 8);
    else
      objc_msgSend_setState_(v13, v10, 7);

  }
}

void sub_1BEBF6114(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEBF611C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  const char *v24;
  void *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  const void *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  void *v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  id obj;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint8_t v112[128];
  uint8_t buf[4];
  uint64_t v114;
  _BYTE v115[128];
  uint64_t v116;

  v3 = a1;
  v116 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_haveOutstandingHandlers(*(void **)(a1 + 32), a2, a3))
  {
    v6 = (void *)objc_opt_new();
    v103 = (void *)objc_opt_new();
    v102 = (void *)objc_opt_new();
    v99 = (void *)objc_opt_new();
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v111 = 0u;
    objc_msgSend_modifyHandlersByZoneID(*(void **)(v3 + 32), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allKeys(v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v12;
    v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v108, v115, 16);
    if (v14)
    {
      v16 = v14;
      v17 = *(_QWORD *)v109;
      v100 = v6;
      v101 = v3;
      v95 = *(_QWORD *)v109;
      do
      {
        v18 = 0;
        v96 = v16;
        do
        {
          if (*(_QWORD *)v109 != v17)
            objc_enumerationMutation(obj);
          v19 = *(_QWORD *)(*((_QWORD *)&v108 + 1) + 8 * v18);
          if (objc_msgSend_containsObject_(*(void **)(v3 + 40), v15, v19))
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v22 = *MEMORY[0x1E0C952B0];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v114 = v19;
              _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Skipping zone %@ because some items in that zone aren't ready to be uploaded yet", buf, 0xCu);
            }
          }
          else
          {
            v98 = v18;
            objc_msgSend_modifyHandlersByZoneID(*(void **)(v3 + 32), v20, v21);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v23, v24, v19);
            v25 = (void *)objc_claimAutoreleasedReturnValue();

            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v26 = v25;
            v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v104, v112, 16);
            if (v28)
            {
              v31 = v28;
              v32 = *(_QWORD *)v105;
              do
              {
                v33 = 0;
                do
                {
                  if (*(_QWORD *)v105 != v32)
                    objc_enumerationMutation(v26);
                  v34 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * v33);
                  if (objc_msgSend_state(v34, v29, v30) == 6)
                  {
                    objc_msgSend_record(v34, v29, v30);
                    v35 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend_isDelete(v34, v36, v37))
                    {
                      objc_msgSend_recordID(v34, v38, v39);
                      v40 = (void *)objc_claimAutoreleasedReturnValue();

                      if (!v40)
                      {
                        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v41, v42);
                        v87 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v87, v88, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 32), CFSTR("CKDModifyRecordsOperation.m"), 2040, CFSTR("Lost a recordID"));

                      }
                      objc_msgSend_recordID(v34, v41, v42);
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_addObject_(v103, v44, (uint64_t)v43);

                      objc_msgSend_etag(v34, v45, v46);
                      v47 = (void *)objc_claimAutoreleasedReturnValue();

                      if (v47)
                      {
                        objc_msgSend_etag(v34, v48, v49);
                        v50 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_recordID(v34, v51, v52);
                        v53 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_setObject_forKeyedSubscript_(v102, v54, (uint64_t)v50, v53);

                      }
                      if (objc_msgSend__needsSigningPCS(*(void **)(v3 + 32), v48, v49))
                      {
                        objc_msgSend_recordPCSData(v34, v55, v56);
                        v57 = (void *)objc_claimAutoreleasedReturnValue();
                        v60 = objc_msgSend_signingPCS(v57, v58, v59);

                        if (v60)
                        {
                          objc_msgSend_recordPCSData(v34, v61, v62);
                          v63 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend_signingPCS(v63, v64, v65);
                          v66 = (const void *)PCSFPCopyCurrentPrivateKey();

                          if (v66)
                          {
                            objc_msgSend_container(*(void **)(v3 + 32), v67, v68);
                            v69 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend_pcsManager(v69, v70, v71);
                            v72 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend_dataFromSharingIdentity_error_(v72, v73, (uint64_t)v66, 0);
                            v74 = (void *)objc_claimAutoreleasedReturnValue();

                            if (v74)
                            {
                              objc_msgSend_recordID(v34, v75, v76);
                              v77 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend_setObject_forKeyedSubscript_(v99, v78, (uint64_t)v74, v77);

                            }
                            CFRelease(v66);

                            v6 = v100;
                            v3 = v101;
                          }
                          else
                          {
                            if (*MEMORY[0x1E0C95300] != -1)
                              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                            v79 = (void *)*MEMORY[0x1E0C952B0];
                            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
                            {
                              v80 = v79;
                              objc_msgSend_recordPCSData(v34, v81, v82);
                              v83 = (void *)objc_claimAutoreleasedReturnValue();
                              v86 = objc_msgSend_signingPCS(v83, v84, v85);
                              *(_DWORD *)buf = 138412290;
                              v114 = v86;
                              _os_log_debug_impl(&dword_1BE990000, v80, OS_LOG_TYPE_DEBUG, "Record does have signing PCS %@ but failed to get private key", buf, 0xCu);

                              v3 = v101;
                              v6 = v100;
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      objc_msgSend_addObject_(v6, v38, (uint64_t)v35);
                    }

                  }
                  ++v33;
                }
                while (v31 != v33);
                v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v104, v112, 16);
                v31 = v89;
              }
              while (v89);
            }

            v17 = v95;
            v16 = v96;
            v18 = v98;
          }
          ++v18;
        }
        while (v18 != v16);
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v108, v115, 16);
      }
      while (v16);
    }

    objc_msgSend_setRecordsToSave_(*(void **)(v3 + 32), v90, (uint64_t)v6);
    objc_msgSend_setRecordIDsToDelete_(*(void **)(v3 + 32), v91, (uint64_t)v103);
    objc_msgSend_setRecordIDsToDeleteToEtags_(*(void **)(v3 + 32), v92, (uint64_t)v102);
    objc_msgSend_setRecordIDsToDeleteToSigningPCSIdentity_(*(void **)(v3 + 32), v93, (uint64_t)v99);

  }
  objc_msgSend_stateTransitionGroup(*(void **)(v3 + 32), v4, v5);
  v94 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v94);

}

void sub_1BEBF702C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    v9 = *(void **)(a1 + 32);
    objc_msgSend_recordID(v5, v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__handleDecryptionFailure_forRecordID_(v9, v11, (uint64_t)v8, v10);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v16 = v14;
      objc_msgSend_recordID(v5, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138412290;
      v21 = v19;
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Successfully decrypted record %@. Continuing with save of that record", (uint8_t *)&v20, 0xCu);

    }
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v15);

}

void sub_1BEBF74B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = (void *)*MEMORY[0x1E0C952F8];
  v9 = *MEMORY[0x1E0C95300];
  if (!v5 || v6)
  {
    if (v9 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v14 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v30 = *(void **)(a1 + 32);
      v31 = v14;
      objc_msgSend_recordID(v30, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v36 = v34;
      _os_log_debug_impl(&dword_1BE990000, v31, OS_LOG_TYPE_DEBUG, "Failed to decrypt server record %@. Returning as is.", buf, 0xCu);

    }
    objc_msgSend_setState_(*(void **)(a1 + 40), v15, 12);
    v16 = (void *)MEMORY[0x1E0C94FF8];
    v17 = *MEMORY[0x1E0C94B20];
    objc_msgSend_recordID(*(void **)(a1 + 32), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v16, v21, v17, 5004, CFSTR("Couldn't decrypt record returned from the server in response to our save of record %@"), v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 40), v23, (uint64_t)v22);

  }
  else
  {
    if (v9 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v25 = *(void **)(a1 + 32);
      v26 = v10;
      objc_msgSend_recordID(v25, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v36 = v29;
      _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Successfully decrypted server record from save %@", buf, 0xCu);

    }
    objc_msgSend__reallyHandleRecordSaved_handler_etag_dateStatistics_expirationDate_responseCode_keysAssociatedWithETag_recordForOplockFailure_decryptedServerRecord_(*(void **)(a1 + 48), v11, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v5);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v12, v13);
  v24 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v24);

}

void sub_1BEBF8DA8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1BEBF8DD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

uint64_t sub_1BEBF8EE4(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  objc_msgSend_setError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_code(v5, v6, v7);

  if (v8 == 2024)
    v10 = 11;
  else
    v10 = 12;
  return objc_msgSend_setState_(*(void **)(a1 + 32), v9, v10);
}

void sub_1BEBF8F40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  uint8_t buf[4];
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = (void *)*MEMORY[0x1E0C952F8];
  v9 = *MEMORY[0x1E0C95300];
  if (!v5 || v6)
  {
    if (v9 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v25 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v39 = *(void **)(a1 + 32);
      v40 = v25;
      objc_msgSend_recordID(v39, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v45 = v43;
      _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Failed to decrypt the server record %@. Returning as is.", buf, 0xCu);

      if (!v7)
        goto LABEL_13;
    }
    else if (!v7)
    {
LABEL_13:
      v28 = (void *)MEMORY[0x1E0C94FF8];
      v29 = *MEMORY[0x1E0C94B20];
      v30 = *(_QWORD *)(a1 + 40);
      objc_msgSend_recordID(*(void **)(a1 + 32), v26, v27);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_userInfo_format_(v28, v31, v29, 5004, v30, CFSTR("Failed to decrypt the server record %@ returned from oplock failure."), v19);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v26, (uint64_t)v7, *MEMORY[0x1E0CB3388]);
    goto LABEL_13;
  }
  if (v9 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v8);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v35 = v10;
    objc_msgSend_recordID(v5, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v45 = v38;
    _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, "Successfully decrypted record %@", buf, 0xCu);

  }
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v11, (uint64_t)v5, *MEMORY[0x1E0C949B8]);
  v12 = (void *)MEMORY[0x1E0C94FF8];
  v13 = *MEMORY[0x1E0C94B20];
  v14 = sub_1BEB10D5C(*(void **)(a1 + 48));
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 40);
  objc_msgSend_error(*(void **)(a1 + 48), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorDescription(v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_format_(v12, v23, v13, v14, v16, CFSTR("Error saving record %@ to server: %@"), v15, v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_14:
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 64), v32, v33);
  v34 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v34);

}

void sub_1BEBF96C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBF96F0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEBFA4B0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v1);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_1BEBFA4FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id *v21;
  id v22;
  id v23;
  id WeakRetained;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  id v34;

  v34 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = (id *)(a1 + 32);
  v22 = a6;
  v23 = a2;
  WeakRetained = objc_loadWeakRetained(v21);
  objc_msgSend_handlersByRecordID(WeakRetained, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v27, v28, (uint64_t)v23);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_record(v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (v32)
    objc_msgSend__handleRecordSaved_handler_etag_dateStatistics_expirationDate_responseCode_keysAssociatedWithETag_recordForOplockFailure_serverRecord_(WeakRetained, v33, (uint64_t)v23, v29, v34, v16, v17, v22, v18, v19, v20);
  else
    objc_msgSend__handleRecordDeleted_handler_responseCode_(WeakRetained, v33, (uint64_t)v23, v29, v22);

}

void sub_1BEBFA64C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleMergeableDeltaSavedForRecordID_key_result_(WeakRetained, v10, (uint64_t)v9, v8, v7);

}

void sub_1BEBFA6C4(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleReplaceDeltasRequest_result_(WeakRetained, v7, (uint64_t)v6, v5);

}

BOOL sub_1BEBFA8D0(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  char isKindOfClass;
  _BOOL8 v7;

  objc_msgSend_objectForKey_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v7 = 1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (objc_msgSend_firstObject(v2, v3, v4),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v5,
          (isKindOfClass & 1) == 0))
    {
      v7 = 0;
    }
  }

  return v7;
}

void sub_1BEBFAAA8(uint64_t a1, const char *a2, uint64_t a3)
{
  void (**v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD v6[5];

  objc_msgSend_recordsInFlightBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEBFAB20;
  v6[3] = &unk_1E782EDA8;
  v5 = *(_QWORD *)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  ((void (**)(_QWORD, uint64_t, _QWORD *))v4)[2](v4, v5, v6);

}

void sub_1BEBFAB20(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v6;
      objc_msgSend_operationID(v8, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v14, 0x16u);

    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v3, v4);
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v13);

}

void sub_1BEBFB64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEBFB674(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;

  objc_msgSend_setRequest_(*(void **)(a1 + 32), a2, 0);
  objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend_setError_(*(void **)(a1 + 32), v5, (uint64_t)v6);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(WeakRetained, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v11, (uint64_t)v10);

  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v14);

}

void sub_1BEBFBAC0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  char v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  const char *v21;
  id v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t j;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  const char *v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_record(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  objc_msgSend_allKeys(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v64, v69, 16);
  if (!v59)
  {

LABEL_26:
    objc_msgSend_setState_(v3, v54, 8);
    goto LABEL_27;
  }
  v12 = 0;
  v58 = *(_QWORD *)v65;
  v55 = v6;
  v56 = v9;
  do
  {
    for (i = 0; i != v59; ++i)
    {
      if (*(_QWORD *)v65 != v58)
        objc_enumerationMutation(v9);
      v14 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * i);
      objc_msgSend_objectForKeyedSubscript_(v6, v11, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v15;
      if (v15)
      {
        v19 = v15;
      }
      else
      {
        objc_msgSend_encryptedValues(v6, v16, v17);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v20, v21, v14);
        v19 = (id)objc_claimAutoreleasedReturnValue();

      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v22 = v19;
        objc_msgSend_deltasToSave(v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend_count(v25, v26, v27);

        if (v28)
        {
          v31 = *(void **)(a1 + 32);
          objc_msgSend_deltasToSave(v22, v29, v30);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_allObjects(v32, v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObjectsFromArray_(v31, v36, (uint64_t)v35);

          v37 = *(void **)(a1 + 40);
          objc_msgSend_valueID(v22, v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v37, v41, (uint64_t)v3, v40);

          v12 = 1;
        }
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        objc_msgSend_pendingReplacementRequests(v22, v29, v30);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v60, v68, 16);
        if (v44)
        {
          v46 = v44;
          v57 = v19;
          v47 = *(_QWORD *)v61;
          do
          {
            for (j = 0; j != v46; ++j)
            {
              if (*(_QWORD *)v61 != v47)
                objc_enumerationMutation(v42);
              objc_msgSend_addObject_(*(void **)(a1 + 48), v45, *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * j));
              v49 = *(void **)(a1 + 40);
              objc_msgSend_valueID(v22, v50, v51);
              v52 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKeyedSubscript_(v49, v53, (uint64_t)v3, v52);

            }
            v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v45, (uint64_t)&v60, v68, 16);
          }
          while (v46);
          v12 = 1;
          v6 = v55;
          v19 = v57;
        }

        v9 = v56;
      }

    }
    v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v11, (uint64_t)&v64, v69, 16);
  }
  while (v59);

  if ((v12 & 1) == 0)
    goto LABEL_26;
LABEL_27:

}

id sub_1BEBFBDC4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;

  objc_msgSend_metadata(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1BEBFBE00(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  const char *v7;
  id v8;
  uint64_t v9;
  const char *v10;
  id v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  int8x16_t v16;
  _QWORD v17[4];
  int8x16_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v4 = MEMORY[0x1E0C809B0];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_1BEBFBF94;
  v23[3] = &unk_1E7837628;
  v5 = *(id *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v24 = v5;
  v25 = v6;
  objc_msgSend_setUploadDeltaCompletionBlock_(v3, v7, (uint64_t)v23);
  v20[0] = v4;
  v20[1] = 3221225472;
  v20[2] = sub_1BEBFC284;
  v20[3] = &unk_1E7837650;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v21 = v8;
  v22 = v9;
  objc_msgSend_setReplaceDeltasRequestCompletionBlock_(v3, v10, (uint64_t)v20);
  v17[0] = v4;
  v17[1] = 3221225472;
  v17[2] = sub_1BEBFC500;
  v17[3] = &unk_1E782E530;
  objc_copyWeak(&v19, &location);
  v16 = *(int8x16_t *)(a1 + 32);
  v11 = (id)v16.i64[0];
  v18 = vextq_s8(v16, v16, 8uLL);
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v17);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v15);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

void sub_1BEBFBF6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBFBF94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  int v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  objc_msgSend_valueID(v5, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v11, (uint64_t)v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = (void *)*MEMORY[0x1E0C952F8];
    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v14 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v30 = v14;
        objc_msgSend_metadata(v5, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_identifier(v33, v34, v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_operationID(*(void **)(a1 + 40), v37, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138412802;
        v41 = v36;
        v42 = 2114;
        v43 = v39;
        v44 = 2112;
        v45 = v6;
        _os_log_error_impl(&dword_1BE990000, v30, OS_LOG_TYPE_ERROR, "Failed to upload delta, %@, for operation %{public}@: %@", (uint8_t *)&v40, 0x20u);

      }
      objc_msgSend_setError_(v12, v15, (uint64_t)v6);
      objc_msgSend_setState_(v12, v16, 12);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v22 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v23 = v22;
        objc_msgSend_metadata(v5, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_identifier(v26, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138412290;
        v41 = v29;
        _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "Successfully uploaded delta: %@", (uint8_t *)&v40, 0xCu);

      }
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v18 = v17;
      objc_msgSend_valueID(v5, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = 138412290;
      v41 = v21;
      _os_log_impl(&dword_1BE990000, v18, OS_LOG_TYPE_INFO, "No modify handler for delta: %@", (uint8_t *)&v40, 0xCu);

    }
  }

}

void sub_1BEBFC284(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  id v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  objc_msgSend_valueID(v5, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v11, (uint64_t)v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = (void *)*MEMORY[0x1E0C952F8];
    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v14 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v19 = *(void **)(a1 + 40);
        v20 = v14;
        objc_msgSend_operationID(v19, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138412802;
        v25 = v5;
        v26 = 2114;
        v27 = v23;
        v28 = 2112;
        v29 = v6;
        _os_log_error_impl(&dword_1BE990000, v20, OS_LOG_TYPE_ERROR, "Failed to replace deltas %@ for operation %{public}@: %@", (uint8_t *)&v24, 0x20u);

      }
      objc_msgSend_setError_(v12, v15, (uint64_t)v6);
      objc_msgSend_setState_(v12, v16, 12);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v18 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v24 = 138412290;
        v25 = v5;
        _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Successfully replaced deltas: %@", (uint8_t *)&v24, 0xCu);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v24 = 138412290;
      v25 = v5;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "No modify handler for replacement request: %@", (uint8_t *)&v24, 0xCu);
    }
  }

}

void sub_1BEBFC500(void **a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v30 = a1[4];
      v31 = v8;
      objc_msgSend_operationID(v30, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(WeakRetained, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v44 = v34;
      v45 = 2112;
      v46 = v37;
      _os_log_error_impl(&dword_1BE990000, v31, OS_LOG_TYPE_ERROR, "Failed to upload delta for operation %{public}@: %@", buf, 0x16u);

    }
  }
  v9 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_allValues(a1[5], v6, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v9, v11, (uint64_t)v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v13 = v12;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v38, v42, 16);
  if (v15)
  {
    v18 = v15;
    v19 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v39 != v19)
          objc_enumerationMutation(v13);
        v21 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        if (objc_msgSend_state(v21, v16, v17, (_QWORD)v38) == 7)
        {
          objc_msgSend_setState_(v21, v16, 8);
          objc_msgSend_error(WeakRetained, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          if (v24)
          {
            objc_msgSend_error(WeakRetained, v16, v17);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setError_(v21, v26, (uint64_t)v25);

          }
        }
      }
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v38, v42, 16);
    }
    while (v18);
  }

  objc_msgSend_stateTransitionGroup(a1[4], v27, v28);
  v29 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v29);

}

void sub_1BEBFCF40(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v15, v19, 16);
  if (v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v3);
        v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if ((objc_msgSend_isDelete(v11, v6, v7) & 1) == 0
          && (objc_msgSend_saveCompletionBlockCalled(v11, v6, v7) & 1) == 0)
        {
          objc_msgSend_record(v11, v6, v7);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removePackages(v12, v13, v14);

        }
      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v15, v19, 16);
    }
    while (v8);
  }

}

uint64_t sub_1BEBFD050(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BEBFD650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a44, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEBFD688(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  int canOpenFileAtURL;
  const char *v18;
  uint64_t v19;
  char v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  char isEqualToString;
  const char *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  int v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  int v51;
  void *v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  char hasPrefix;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  char v74;
  uint8_t buf[4];
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_21:
      v9 = 0;
      goto LABEL_22;
    }
    objc_msgSend_fileURL(v4, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_URLByResolvingSymlinksInPath(v12, v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v16)
    {
LABEL_20:

      goto LABEL_21;
    }
    canOpenFileAtURL = objc_msgSend_canOpenFileAtURL_(*(void **)(a1 + 40), v15, (uint64_t)v16);
    v20 = canOpenFileAtURL;
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v18, v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v21, v22, (uint64_t)CFSTR("SandboxFailureRoot"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_stringByResolvingSymlinksInPath(v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = v26;
      if (v23)
      {
        v74 = v20;
        v28 = v16;
        objc_msgSend_path(v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)CFSTR("/"));

        if ((isEqualToString & 1) != 0)
        {
          v36 = v28;
LABEL_18:

          if ((v74 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          v73 = v28;
          v37 = v28;
          while (1)
          {
            objc_msgSend_path(v37, v34, v35);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend_isEqualToString_(v38, v39, (uint64_t)v23))
              break;
            objc_msgSend_path(v37, v40, v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v44 = objc_msgSend_isEqualToString_(v42, v43, (uint64_t)v27);

            if (v44)
              goto LABEL_24;
            objc_msgSend_URLByDeletingLastPathComponent(v37, v45, v46);
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_path(v36, v47, v48);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = objc_msgSend_isEqualToString_(v49, v50, (uint64_t)CFSTR("/"));

            v37 = v36;
            if (v51)
              goto LABEL_18;
          }

LABEL_24:
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v53 = (void *)*MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
          {
            v54 = v53;
            objc_msgSend_path(v73, v55, v56);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v76 = v57;
            _os_log_impl(&dword_1BE990000, v54, OS_LOG_TYPE_INFO, "Pretending this is an invalid sandbox path: %{public}@", buf, 0xCu);

          }
        }
LABEL_29:
        objc_msgSend_directoryContext(*(void **)(a1 + 40), v18, v19);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_containerDirectory(v58, v59, v60);
        v61 = (void *)objc_claimAutoreleasedReturnValue();

        if (v61
          && (objc_msgSend_absoluteString(v16, v62, v63),
              v64 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend_absoluteString(v61, v65, v66),
              v67 = (void *)objc_claimAutoreleasedReturnValue(),
              hasPrefix = objc_msgSend_hasPrefix_(v64, v68, (uint64_t)v67),
              v67,
              v64,
              (hasPrefix & 1) == 0))
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v62, *MEMORY[0x1E0C947D8], 12, CFSTR("Long Lived Operation %@ may not save a record with asset %@, whose fileURL %@ is inaccessible. Note that your app should not be re-installed between enqueueing and resuming a LongLivedOperation, as your container directory will change (it's now %@)"), *(_QWORD *)(a1 + 32), v4, v12, v61);
        }
        else
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v62, *MEMORY[0x1E0C947D8], 12, CFSTR("Long Lived Operation %@ may not save a record with asset %@, whose fileURL %@ is inaccessible"), *(_QWORD *)(a1 + 32), v4, v12);
        }
        v70 = objc_claimAutoreleasedReturnValue();
        v71 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v72 = *(void **)(v71 + 40);
        *(_QWORD *)(v71 + 40) = v70;

        goto LABEL_3;
      }

      if ((v20 & 1) == 0)
        goto LABEL_29;
    }
    else if (!canOpenFileAtURL)
    {
      goto LABEL_29;
    }
LABEL_19:
    objc_msgSend_setRealPathURL_(v4, v18, (uint64_t)v16);
    goto LABEL_20;
  }
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v5, *MEMORY[0x1E0C947D8], 12, CFSTR("Long Lived Operation %@ may not save a record with a CKPackage value.  Found %@"), *(_QWORD *)(a1 + 32), v4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

LABEL_3:
  v9 = 1;
LABEL_22:

  return v9;
}

uint64_t sub_1BEBFDAA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  char hasAssetBoundaryKeyEntitlement;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_boundaryKey(v4, v5, v6), v7 = (void *)objc_claimAutoreleasedReturnValue(), v7, v7)
    && (objc_msgSend_entitlements(*(void **)(a1 + 32), v8, v9),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        hasAssetBoundaryKeyEntitlement = objc_msgSend_hasAssetBoundaryKeyEntitlement(v10, v11, v12),
        v10,
        (hasAssetBoundaryKeyEntitlement & 1) == 0))
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v14, *MEMORY[0x1E0C947D8], 12, CFSTR("Usage of -[CKAsset boundaryKey] is CloudKit SPI and requires an entitlement. com.apple.private.cloudkit.assetBoundaryKey"));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    v15 = 1;
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1BEBFE768(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEBFE8EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v18 = *(void **)(a1 + 32);
      v19 = v9;
      objc_msgSend_shareID(v18, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v25 = v22;
      v26 = 2112;
      v27 = v8;
      _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the database for %@: %@", buf, 0x16u);

    }
    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v12);

  }
  else
  {
    objc_msgSend_shareID(*(void **)(a1 + 32), v6, v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v14, v15);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_1BEBFEAA0;
    v23[3] = &unk_1E7837778;
    v23[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_fetchPCSDataForShareWithID_databaseScope_withCompletionHandler_(v5, v17, (uint64_t)v13, v16, v23);

  }
}

void sub_1BEBFEAA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  void *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[5];
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    v25 = (void *)*MEMORY[0x1E0C952F8];
    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v25);
      v26 = (void *)*MEMORY[0x1E0C952D8];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
        goto LABEL_15;
      v29 = *(void **)(a1 + 32);
      v30 = v26;
      objc_msgSend_shareID(v29, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v49 = v33;
      v50 = 2112;
      v51 = v7;
      v34 = "Error fetching PCS data from the database for %@: %@";
      v35 = v30;
      v36 = 22;
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v25);
      v37 = (void *)*MEMORY[0x1E0C952D8];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
        goto LABEL_15;
      v44 = *(void **)(a1 + 32);
      v30 = v37;
      objc_msgSend_shareID(v44, v45, v46);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v49 = v33;
      v34 = "No PCS data was found in the database for share %@";
      v35 = v30;
      v36 = 12;
    }
    _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, v34, buf, v36);

LABEL_15:
    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v27, v28);
    v38 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v38);

    goto LABEL_16;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v39 = *(void **)(a1 + 32);
    v40 = v8;
    objc_msgSend_shareID(v39, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v49 = v43;
    _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "PCS data was fetched from the database for share %@", buf, 0xCu);

  }
  objc_msgSend_container(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pcsManager(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shareModificationDate(v5, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_topmostParentOperation(*(void **)(a1 + 32), v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationID(v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = sub_1BEBFEDCC;
  v47[3] = &unk_1E7837778;
  v47[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_decryptPCSDataOnSharePCS_shareModificationDate_requestorOperationID_completionHandler_(v14, v24, (uint64_t)v5, v17, v23, v47);

LABEL_16:
}

void sub_1BEBFEDCC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v9 = objc_msgSend_pcs(v5, v7, v8);
  if (v6 || !v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v16 = *(void **)(a1 + 32);
      v17 = v14;
      objc_msgSend_shareID(v16, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138412546;
      v22 = v20;
      v23 = 2112;
      v24 = v6;
      _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Couldn't decrypt PCS data for share %@ from the database with error %@. Ignoring it and re-fetching from the server", (uint8_t *)&v21, 0x16u);

    }
  }
  else
  {
    objc_msgSend_setWasFetchedFromCache_(*(void **)(a1 + 32), v10, 1);
    objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v11, (uint64_t)v5, 0);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v15);

}

void sub_1BEBFF020(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD v28[5];

  v6 = a2;
  v7 = a4;
  objc_msgSend_invitedProtectionData(v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = *(void **)(a1 + 32);
  if (v7 || !v10)
  {
    objc_msgSend__handlePCSDataFetched_withError_(v13, v11, 0, v7);
    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v25, v26);
    v27 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v27);

  }
  else
  {
    objc_msgSend_container(v13, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topmostParentOperation(*(void **)(a1 + 32), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationID(v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_1BEBFF14C;
    v28[3] = &unk_1E7837778;
    v28[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_pcsDataFromFetchedShare_requestorOperationID_completionHandler_(v17, v24, (uint64_t)v6, v23, v28);

  }
}

void sub_1BEBFF14C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  NSObject *v6;

  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEBFF368(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEBFF390(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBFF3D4(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEBFF458()
{
  void *v0;

  v0 = (void *)qword_1ED702B68;
  qword_1ED702B68 = (uint64_t)&unk_1E78AFD20;

}

uint64_t sub_1BEBFF580(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEBFFA9C()
{
  void *v0;

  v0 = (void *)qword_1ED702B78;
  qword_1ED702B78 = (uint64_t)&unk_1E78AFD48;

}

BOOL sub_1BEBFFD50(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecord *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(CKDPRecord);
        v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(CKDPRecord);
        v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC005F0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecord *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPRecord *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          goto LABEL_34;
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

        goto LABEL_39;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

BOOL CKDPRequestedFieldsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecordFieldIdentifier *v17;
  const char *v18;
  const char *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_msgSend_addFields_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPRequestedListField);
    objc_msgSend_addListField_(a1, v19, (uint64_t)v17);
    if (!PBReaderPlaceMark() || !sub_1BEAB36C0((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordOneTimeStableUrlInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPRecordOneTimeStableUrl *v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPRecordOneTimeStableUrl);
        objc_msgSend_addOneTimeUrl_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordOneTimeStableUrlReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEC03724(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_25;
        case 4u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_25:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC04218(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC04B04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC04B1C(uint64_t a1, void *a2)
{
  id v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id location;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 456), a2);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v9 = MEMORY[0x1E0C809B0];
  v10 = 3221225472;
  v11 = sub_1BEC04C14;
  v12 = &unk_1E782EF38;
  objc_copyWeak(&v13, &location);
  objc_msgSend_setCompletionBlock_(*(void **)(*(_QWORD *)(a1 + 32) + 456), v5, (uint64_t)&v9);
  objc_msgSend_fetchVersionsGroup(*(void **)(a1 + 32), v6, v7, v9, v10, v11, v12);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v8);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

void sub_1BEC04BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEC04C14(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_fetchVersionsGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEC04CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEC052C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  objc_destroyWeak((id *)(v53 - 160));
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1BEC05310(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t hasProtectionDataEntitlement;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t hasParticipantPIIEntitlement;
  const char *v37;
  id v38;
  const char *v39;
  int v40;
  id v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = WeakRetained;
  if (!v5 || v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v29 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v40 = 138412546;
      v41 = v5;
      v42 = 2112;
      v43 = v6;
      _os_log_impl(&dword_1BE990000, v29, OS_LOG_TYPE_INFO, "Couldn't decrypt data for record version %@: %@", (uint8_t *)&v40, 0x16u);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  }
  else
  {
    objc_msgSend_container(WeakRetained, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_entitlements(v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v14, v15, v16);
    objc_msgSend_setSerializeProtectionData_(v5, v18, hasProtectionDataEntitlement);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_container(v10, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_entitlements(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_hasOutOfProcessUIEntitlement(v24, v25, v26))
      {
        objc_msgSend_setSerializePersonalInfo_(v5, v27, 1);
      }
      else
      {
        objc_msgSend_container(v10, v27, v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_entitlements(v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        hasParticipantPIIEntitlement = objc_msgSend_hasParticipantPIIEntitlement(v33, v34, v35);
        objc_msgSend_setSerializePersonalInfo_(v5, v37, hasParticipantPIIEntitlement);

      }
    }
    v38 = *(id *)(a1 + 32);
    objc_sync_enter(v38);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v39, (uint64_t)v5);
    objc_sync_exit(v38);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEC05540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC0555C(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[5];
  id v13;
  id v14;
  uint64_t v15;
  char v16;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend_recordVersionFetchedBlock(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_callbackQueue(WeakRetained, v6, v7);
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEC05648;
    block[3] = &unk_1E7837830;
    block[4] = WeakRetained;
    v13 = *(id *)(a1 + 32);
    v16 = *(_BYTE *)(a1 + 72);
    v9 = *(id *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 56);
    v14 = v9;
    v15 = v10;
    dispatch_async(v8, block);

  }
  objc_msgSend_fetchVersionsGroup(*(void **)(a1 + 48), v6, v7);
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v11);

}

void sub_1BEC05648(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_recordVersionFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

}

void sub_1BEC0569C(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_recordVersionFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

}

void sub_1BEC058F4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEC05934(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id *v8;
  id v9;
  id v10;
  id v11;
  const char *v12;
  id WeakRetained;

  v8 = (id *)(a1 + 32);
  v9 = a5;
  v10 = a4;
  v11 = a2;
  WeakRetained = objc_loadWeakRetained(v8);
  objc_msgSend__handleRecordVersionsFetchedForID_isDeleted_versions_responseCode_(WeakRetained, v12, (uint64_t)v11, a3, v10, v9);

}

void sub_1BEC059BC(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  _QWORD v16[5];
  id v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishDecryption(WeakRetained, v7, v8);
  objc_msgSend_fetchVersionsGroup(WeakRetained, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_callbackQueue(WeakRetained, v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1BEC05AA0;
  v16[3] = &unk_1E782EE20;
  v16[4] = WeakRetained;
  v17 = v6;
  v15 = v6;
  dispatch_group_notify(v11, v14, v16);

}

uint64_t sub_1BEC05AA0(uint64_t a1, const char *a2)
{
  return objc_msgSend_finishWithError_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1BEC05D48(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BEC060DC(uint64_t a1)
{
  id v1;

  v1 = *(id *)(a1 + 32);
  CKOncePerBoot();

}

uint64_t sub_1BEC06140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__expungeStaleDSIDs, a3);
}

void sub_1BEC06148(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t inited;
  void *v5;

  v1 = objc_alloc(*(Class *)(a1 + 32));
  inited = objc_msgSend_initInternal(v1, v2, v3);
  v5 = (void *)qword_1ED702B88;
  qword_1ED702B88 = inited;

}

uint64_t sub_1BEC068B8(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_aa_personID(a2, (const char *)a2, a3);
}

void sub_1BEC06A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BEC06A48(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  id obj;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend_inlock_registrationsForDSID_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_containsObject_(v3, v4, *(_QWORD *)(a1 + 48)))
  {
    objc_msgSend_inlock_registrar(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 48);
    objc_msgSend_userWithDSID_(MEMORY[0x1E0D65230], v9, *(_QWORD *)(a1 + 40));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    obj = *(id *)(v11 + 40);
    LOBYTE(v8) = objc_msgSend_removeRegistration_fromUser_error_(v7, v12, v8, v10, &obj);
    objc_storeStrong((id *)(v11 + 40), obj);

    v13 = (void *)*MEMORY[0x1E0C952F8];
    if ((v8 & 1) != 0)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v14 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v16 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v24 = v16;
        _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Removed registration from PDS: %@", buf, 0xCu);
      }
      objc_msgSend_removeObject_(v3, v15, *(_QWORD *)(a1 + 48));
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v19 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 48);
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        v24 = v20;
        v25 = 2112;
        v26 = v21;
        _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "Unable to remove registration from PDS: %@ %@", buf, 0x16u);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v18 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v24 = v18;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "Not removing registration from PDS, as PDS is not aware of %@", buf, 0xCu);
    }
  }

}

void sub_1BEC07148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEC07174(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  char v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  id obj;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend_inlock_registrar(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_userWithDSID_(MEMORY[0x1E0D65230], v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v7 + 40);
  v9 = objc_msgSend_removeAllRegistrationsFromUser_error_(v4, v8, (uint64_t)v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);

  v10 = (void *)*MEMORY[0x1E0C952F8];
  if ((v9 & 1) != 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v10);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v21 = v14;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Removed all registrations for account %@ from PDS", buf, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v10);
    v15 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v21 = v18;
      _os_log_error_impl(&dword_1BE990000, v15, OS_LOG_TYPE_ERROR, "Unable to remove all registrations from PDS: %@", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  }
  objc_msgSend_registrationsByDSID(*(void **)(a1 + 32), v12, v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, 0, *(_QWORD *)(a1 + 40));

}

void sub_1BEC073CC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  char v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  __int128 v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  id v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Removing all tokens from PDS", buf, 2u);
  }
  objc_msgSend_inlock_registrar(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0;
  objc_msgSend_activeUsersWithError_(v5, v6, (uint64_t)&v36);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v36;

  if (!v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v38 = (uint64_t)v8;
      _os_log_error_impl(&dword_1BE990000, v9, OS_LOG_TYPE_ERROR, "Unable to iterate active users: %@", buf, 0xCu);
    }
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v10 = v7;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v32, v41, 16);
  if (v12)
  {
    v16 = v12;
    v17 = *(_QWORD *)v33;
    *(_QWORD *)&v15 = 138412546;
    v30 = v15;
    do
    {
      v18 = 0;
      do
      {
        v19 = v8;
        if (*(_QWORD *)v33 != v17)
          objc_enumerationMutation(v10);
        v20 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v18);
        objc_msgSend_inlock_registrar(*(void **)(a1 + 32), v13, v14, v30);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v8;
        v23 = objc_msgSend_removeAllRegistrationsFromUser_error_(v21, v22, v20, &v31);
        v8 = v31;

        if ((v23 & 1) == 0)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v24 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v30;
            v38 = v20;
            v39 = 2112;
            v40 = v8;
            _os_log_error_impl(&dword_1BE990000, v24, OS_LOG_TYPE_ERROR, "Unable to remove all registrations for user %@: %@", buf, 0x16u);
          }
        }
        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v32, v41, 16);
    }
    while (v16);
  }

  objc_msgSend_registrationsByDSID(*(void **)(a1 + 32), v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v27, v28, v29);

}

uint64_t sub_1BEC07930(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC0815C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC0AA60(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3);
}

void sub_1BEC0B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEC0B9E0()
{
  uint64_t result;

  result = _CKUseSystemInstalledBinaries();
  *MEMORY[0x1E0C95288] = result;
  return result;
}

void sub_1BEC0BD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEC0BD24(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  dispatch_once_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  char isEqual;
  void *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  _BOOL4 v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  char v41;
  const char *v42;
  uint64_t v43;
  id v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  const char *v72;
  uint32_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  id obj;
  id v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint8_t buf[4];
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  id v103;
  _BYTE v104[128];
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  objc_msgSend_metadataCache(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_knownAppContainerAccountTuples(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  obj = v7;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v92, v104, 16);
  if (!v9)
    goto LABEL_42;
  v13 = v9;
  v14 = *(_QWORD *)v93;
  v15 = (dispatch_once_t *)MEMORY[0x1E0C95300];
  *(_QWORD *)&v12 = 138412802;
  v87 = v12;
  while (2)
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)v93 != v14)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * v16);
      objc_msgSend_appContainerTuple(v17, v10, v11, v87);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerIdentifier(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      isEqual = objc_msgSend_isEqual_(v24, v25, *(_QWORD *)(a1 + 40));

      v27 = (void *)*MEMORY[0x1E0C952F8];
      if ((isEqual & 1) != 0)
      {
        if (*v15 != -1)
          dispatch_once(v15, v27);
        v28 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v76 = *(_QWORD *)(a1 + 48);
          v75 = *(_QWORD *)(a1 + 56);
          v77 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138413058;
          v97 = v76;
          v98 = 2112;
          v99 = v75;
          v100 = 2112;
          v101 = v77;
          v102 = 2112;
          v103 = v17;
          _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "[%@ chunkDataFromSignature:%@ forContainerIdentifier:%@], %@", buf, 0x2Au);
        }
        objc_msgSend_appContainerTuple(v17, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_personaID(v31, v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = CKAdoptPersonaID(v34);

        if (v35)
        {
          v36 = *(_QWORD *)(a1 + 32);
          objc_msgSend_sharedInternalUseContainers(CKDContainer, v10, v11);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v38, (uint64_t)v17, v36, v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();

          v91 = 0;
          v41 = objc_msgSend_setupAssetTransfers_(v39, v40, (uint64_t)&v91);
          v44 = v91;
          if ((v41 & 1) != 0)
          {
            objc_msgSend_MMCS(v39, v42, v43);
            v45 = (void *)objc_claimAutoreleasedReturnValue();

            if (v45)
            {
              objc_msgSend_MMCS(v39, v46, v47);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_retrieveChunkWithSignature_(v48, v49, *(_QWORD *)(a1 + 56));
              v50 = objc_claimAutoreleasedReturnValue();
              v51 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
              v52 = *(void **)(v51 + 40);
              *(_QWORD *)(v51 + 40) = v50;

              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
              {
                if (*v15 != -1)
                  dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
                v82 = *MEMORY[0x1E0C952B0];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
                {
                  v84 = *(_QWORD *)(a1 + 40);
                  v83 = *(_QWORD *)(a1 + 48);
                  v85 = *(_QWORD *)(a1 + 56);
                  v86 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
                  *(_DWORD *)buf = 138413058;
                  v97 = v83;
                  v98 = 2112;
                  v99 = v85;
                  v100 = 2112;
                  v101 = v84;
                  v102 = 2112;
                  v103 = v86;
                  _os_log_debug_impl(&dword_1BE990000, v82, OS_LOG_TYPE_DEBUG, "[%@ chunkDataFromSignature:%@ forContainerIdentifier:%@] found %@", buf, 0x2Au);
                }

                goto LABEL_42;
              }
              if (*v15 != -1)
                dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
              v53 = *MEMORY[0x1E0C952B0];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
              {
                v55 = *(_QWORD *)(a1 + 48);
                v54 = *(_QWORD *)(a1 + 56);
                v56 = *(_QWORD *)(a1 + 40);
                *(_DWORD *)buf = v87;
                v97 = v55;
                v98 = 2112;
                v99 = v54;
                v100 = 2112;
                v101 = v56;
                _os_log_debug_impl(&dword_1BE990000, v53, OS_LOG_TYPE_DEBUG, "[%@ chunkDataFromSignature:%@ forContainerIdentifier:%@] not found", buf, 0x20u);
              }
              goto LABEL_30;
            }
            if (*v15 != -1)
              dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v74 = *MEMORY[0x1E0C952B0];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
            {
LABEL_30:

              goto LABEL_31;
            }
            v79 = *(_QWORD *)(a1 + 48);
            v78 = *(_QWORD *)(a1 + 56);
            v80 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = v87;
            v97 = v79;
            v98 = 2112;
            v99 = v78;
            v100 = 2112;
            v101 = v80;
            v71 = v74;
            v72 = "[%@ chunkDataFromSignature:%@ forContainerIdentifier:%@] container.MMCS nil";
            v73 = 32;
          }
          else
          {
            if (*v15 != -1)
              dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v67 = *MEMORY[0x1E0C952B0];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
              goto LABEL_30;
            v69 = *(_QWORD *)(a1 + 48);
            v68 = *(_QWORD *)(a1 + 56);
            v70 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138413058;
            v97 = v69;
            v98 = 2112;
            v99 = v68;
            v100 = 2112;
            v101 = v70;
            v102 = 2112;
            v103 = v44;
            v71 = v67;
            v72 = "[%@ chunkDataFromSignature:%@ forContainerIdentifier:%@] MMCS setup failed: %@";
            v73 = 42;
          }
          _os_log_error_impl(&dword_1BE990000, v71, OS_LOG_TYPE_ERROR, v72, buf, v73);
          goto LABEL_30;
        }
      }
      else
      {
        if (*v15 != -1)
          dispatch_once(v15, v27);
        v57 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v58 = *(_QWORD *)(a1 + 48);
          v88 = *(_QWORD *)(a1 + 56);
          v89 = *(_QWORD *)(a1 + 40);
          v59 = v57;
          objc_msgSend_appContainerTuple(v17, v60, v61);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerID(v39, v62, v63);
          v44 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerIdentifier(v44, v64, v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138413058;
          v97 = v58;
          v98 = 2112;
          v99 = v88;
          v100 = 2112;
          v101 = v89;
          v102 = 2112;
          v103 = v66;
          _os_log_debug_impl(&dword_1BE990000, v59, OS_LOG_TYPE_DEBUG, "[%@ chunkDataFromSignature:%@ forContainerIdentifier:%@] wrong containerIdentifier %@", buf, 0x2Au);

          goto LABEL_30;
        }
      }
LABEL_31:
      ++v16;
    }
    while (v13 != v16);
    v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v92, v104, 16);
    v13 = v81;
    if (v81)
      continue;
    break;
  }
LABEL_42:

}

uint64_t CKDPRecordTypeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC0C828(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC0D164(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  CKCDPErrorUserInfoEntry *v32;
  const char *v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        a1[52] |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_49;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_51:
        v39 = 32;
        goto LABEL_60;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 40;
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
LABEL_30:
        v26 = *(void **)&a1[v25];
        *(_QWORD *)&a1[v25] = v24;

        goto LABEL_61;
      case 4u:
        v27 = 0;
        v28 = 0;
        v19 = 0;
        a1[52] |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v19 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_55:
        v39 = 8;
        goto LABEL_60;
      case 5u:
        v32 = objc_alloc_init(CKCDPErrorUserInfoEntry);
        objc_msgSend_addAuxiliaryUserInfo_(a1, v33, (uint64_t)v32);
        if (PBReaderPlaceMark() && sub_1BEBA50E4((uint64_t)v32, a2))
        {
          PBReaderRecallMark();

LABEL_61:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 6u:
        v34 = 0;
        v35 = 0;
        v19 = 0;
        a1[52] |= 4u;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v19 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              v14 = v35++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_59:
        v39 = 48;
LABEL_60:
        *(_DWORD *)&a1[v39] = v19;
        goto LABEL_61;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_61;
    }
  }
}

uint64_t sub_1BEC0E0B8(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  const char *v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend_addConflictLoserEtags_(a1, v17, (uint64_t)v18);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

_DWORD *sub_1BEC0E6C4(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  size_t v5;
  _DWORD *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const void *v10;

  if (!a1)
    return 0;
  objc_msgSend_dataWithPropertyList_format_options_error_(MEMORY[0x1E0CB38B0], a2, a1, 200, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend_length(v2, v3, v4);
  v6 = malloc_type_calloc(1uLL, v5 + 200, 0x8CAC46C1uLL);
  *v6 = 1;
  v6[1] = v5;
  v7 = objc_retainAutorelease(v2);
  v10 = (const void *)objc_msgSend_bytes(v7, v8, v9);
  memcpy(v6 + 50, v10, v5);

  return v6;
}

uint64_t compareVersionStrings(void *a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  const char *v18;
  __CFString *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;

  v3 = a2;
  objc_msgSend_componentsSeparatedByString_(a1, v4, (uint64_t)CFSTR("."));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByString_(v3, v6, (uint64_t)CFSTR("."));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_count(v5, v8, v9);
  v13 = objc_msgSend_count(v7, v11, v12);
  if (v10 >= v13)
    v10 = v13;
  if (!v10)
  {
LABEL_11:
    if (v10 >= objc_msgSend_count(v5, v14, v15))
    {
LABEL_17:
      if (v10 >= objc_msgSend_count(v7, v26, v27))
      {
LABEL_22:
        v25 = 0;
        goto LABEL_26;
      }
      while (1)
      {
        objc_msgSend_objectAtIndexedSubscript_(v7, v36, v10);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_length(v29, v37, v38))
        {
          v40 = objc_msgSend_compare_options_(v29, v39, (uint64_t)CFSTR("0"), 64);
          if (v40 == -1)
          {
            v25 = 1;
            goto LABEL_25;
          }
          if (v40 == 1)
            break;
        }

        if (++v10 >= objc_msgSend_count(v7, v41, v42))
          goto LABEL_22;
      }
      v25 = -1;
    }
    else
    {
      v28 = v10;
      while (1)
      {
        objc_msgSend_objectAtIndexedSubscript_(v5, v26, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_length(v29, v30, v31))
        {
          v33 = objc_msgSend_compare_options_(v29, v32, (uint64_t)CFSTR("0"), 64);
          v25 = v33;
          if (v33 == -1 || v33 == 1)
            break;
        }

        if (++v28 >= (unint64_t)objc_msgSend_count(v5, v34, v35))
          goto LABEL_17;
      }
    }
LABEL_25:

    goto LABEL_26;
  }
  v16 = 0;
  while (1)
  {
    objc_msgSend_objectAtIndexedSubscript_(v5, v14, v16);
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v7, v18, v16);
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_length(v17, v20, v21))
    {

      v17 = CFSTR("0");
    }
    if (!objc_msgSend_length(v19, v22, v23))
    {

      v19 = CFSTR("0");
    }
    v25 = objc_msgSend_compare_options_(v17, v24, (uint64_t)v19, 64);

    if (v25)
      break;
    if (v10 == ++v16)
      goto LABEL_11;
  }
LABEL_26:

  return v25;
}

id sub_1BEC0E98C(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;

  if (qword_1ED702BA0 != -1)
    dispatch_once(&qword_1ED702BA0, &unk_1E7837A30);
  if (objc_msgSend_count(a1, a2, a3))
  {
    v4 = (void *)objc_opt_new();
    objc_msgSend_allKeys(a1, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v7, v8, v9))
    {
      v11 = 0;
      do
      {
        if (v11)
          objc_msgSend_appendString_(v4, v10, (uint64_t)CFSTR("&"));
        objc_msgSend_objectAtIndexedSubscript_(v7, v10, v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(v12, v13, qword_1ED702B98);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_objectAtIndexedSubscript_(v7, v15, v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(a1, v17, (uint64_t)v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(v18, v19, qword_1ED702B98);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_appendFormat_(v4, v21, (uint64_t)CFSTR("%@=%@"), v14, v20);
        ++v11;
      }
      while (v11 < objc_msgSend_count(v7, v22, v23));
    }

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t sub_1BEC0EAF4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend_URLQueryAllowedCharacterSet(MEMORY[0x1E0CB3500], a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_mutableCopy(v3, v4, v5);
  v7 = (void *)qword_1ED702B98;
  qword_1ED702B98 = v6;

  return MEMORY[0x1E0DE7D20](qword_1ED702B98, sel_removeCharactersInString_, CFSTR("&#+"));
}

uint64_t _isOperationAllowedIndependentlyInSyncBubble(void *a1, void *a2)
{
  id v3;
  const char *v4;
  id v5;
  const char *v6;
  uint64_t isAppleInternal;
  const char *v8;
  uint64_t v9;

  v3 = a1;
  v5 = a2;
  if (qword_1ED702BB0 != -1)
    dispatch_once(&qword_1ED702BB0, &unk_1E7837A50);
  if ((objc_msgSend_containsObject_((void *)qword_1ED702BA8, v4, (uint64_t)v3) & 1) != 0)
  {
    isAppleInternal = 1;
  }
  else if (objc_msgSend_isEqualToString_(v3, v6, (uint64_t)CFSTR("CKQueryOperation")))
  {
    isAppleInternal = objc_msgSend_isAppleInternal(v5, v8, v9);
  }
  else
  {
    isAppleInternal = 0;
  }

  return isAppleInternal;
}

void sub_1BEC0EBF0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("CKModifyRecordsOperation"), 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702BA8;
  qword_1ED702BA8 = v2;

}

void sub_1BEC0EC34()
{
  const char *v0;
  uint64_t v1;
  void *v2;
  id v3;

  MEMORY[0x1C3B82BAC]();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByAppendingPathComponent_(v3, v0, (uint64_t)CFSTR("Library/Caches/CloudKit"));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ED702BB8;
  qword_1ED702BB8 = v1;

}

id CKGetDataSeparatedVolumeCacheDirectory()
{
  id v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  xpc_object_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t path;
  const char *v15;
  uint64_t *v16;
  dispatch_block_t *v17;
  os_log_t *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  size_t v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  dispatch_block_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_t v32;
  NSObject *v33;
  int *v34;
  char *v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&stru_1EF571B00);
  if (!qword_1EF577A38)
  {
    v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v1 = (void *)qword_1EF577A38;
    qword_1EF577A38 = (uint64_t)v0;

  }
  CKCurrentPersonaID();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend_null(MEMORY[0x1E0C99E38], v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_objectForKeyedSubscript_((void *)qword_1EF577A38, v2, (uint64_t)v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    pthread_mutex_unlock(&stru_1EF571B00);
    goto LABEL_40;
  }
  container_query_create();
  container_query_set_class();
  v7 = xpc_string_create("com.apple.cloudd");
  container_query_set_identifiers();

  container_query_operation_set_flags();
  objc_msgSend_null(MEMORY[0x1E0C99E38], v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 != v10)
  {
    v11 = objc_retainAutorelease(v4);
    objc_msgSend_UTF8String(v11, v12, v13);
  }
  container_query_set_persona_unique_string();
  if (container_query_get_single_result() && (path = container_get_path()) != 0)
  {
    v15 = (const char *)path;
    v16 = (uint64_t *)MEMORY[0x1E0C95300];
    v17 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v18 = (os_log_t *)MEMORY[0x1E0C952B0];
    v19 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v47 = (void *)v15;
      v48 = 2112;
      v49 = v4;
      _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Got data separated volume container path %s from containermanager for persona %@", buf, 0x16u);
    }
    objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = strlen(v15);
    objc_msgSend_stringWithFileSystemRepresentation_length_(v22, v24, (uint64_t)v15, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByAppendingPathComponent_(v25, v26, (uint64_t)CFSTR("Library/Caches/CloudKit"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = container_copy_sandbox_token();
    v28 = *v17;
    v29 = *v16;
    if (v27)
    {
      v30 = (void *)v27;
      if (v29 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v28);
      v31 = *v18;
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v47 = (void *)v15;
        v48 = 2112;
        v49 = v4;
        _os_log_debug_impl(&dword_1BE990000, v31, OS_LOG_TYPE_DEBUG, "Consuming sandbox token for data separated container path %s for persona %@", buf, 0x16u);
      }
      if (sandbox_extension_consume() < 0)
      {
        if (*v16 != -1)
          dispatch_once(MEMORY[0x1E0C95300], *v17);
        v32 = *v18;
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          v33 = v32;
          v34 = __error();
          v35 = strerror(*v34);
          *(_DWORD *)buf = 136315138;
          v47 = v35;
          _os_log_error_impl(&dword_1BE990000, v33, OS_LOG_TYPE_ERROR, "Failed to consume sandbox extension: %s", buf, 0xCu);

        }
      }
    }
    else
    {
      if (v29 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v28);
      v37 = *v18;
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v47 = (void *)v15;
        v48 = 2112;
        v49 = v4;
        _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Didn't get a sandbox token for data separated container path %s for persona %@", buf, 0x16u);
      }
      v30 = 0;
    }
  }
  else
  {
    if (!container_query_get_last_error())
    {
      v6 = 0;
      goto LABEL_38;
    }
    v30 = (void *)container_error_copy_unlocalized_description();
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v36 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412546;
      v47 = v4;
      v48 = 2080;
      v49 = v30;
      _os_log_fault_impl(&dword_1BE990000, v36, OS_LOG_TYPE_FAULT, "Error getting data separated volume container from containermanager for persona %@: %s", buf, 0x16u);
    }
    v6 = 0;
  }
  free(v30);
LABEL_38:
  container_query_free();
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1EF577A38, v38, (uint64_t)v6, v4);
  pthread_mutex_unlock(&stru_1EF571B00);
  if (!v6)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v39, v40);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v43, (uint64_t)"NSString * _Nonnull CKGetDataSeparatedVolumeCacheDirectory(void)");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v42, v45, (uint64_t)v44, CFSTR("CKDDaemonUtils.m"), 436, CFSTR("Unexpectedly-nil cache dir for persona id %@"), v4);

    v6 = 0;
  }
LABEL_40:

  return v6;
}

void CKRegisterXPCActivity(const char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  id v32;
  _QWORD v34[3];
  _QWORD v35[4];

  v35[3] = *MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x1E0C99E08];
  v11 = (void *)MEMORY[0x1E0CB3940];
  v12 = *MEMORY[0x1E0C80760];
  v32 = a6;
  v13 = a5;
  v14 = a2;
  objc_msgSend_stringWithUTF8String_(v11, v15, v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = v16;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v17, a3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v35[0] = v18;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v19, *MEMORY[0x1E0C80790]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v20;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v21, a4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v35[1] = v22;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v23, *MEMORY[0x1E0C80878]);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v34[2] = v24;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v25, *MEMORY[0x1E0C80880]);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v35[2] = v26;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v27, (uint64_t)v35, v34, 3);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionaryWithDictionary_(v10, v29, (uint64_t)v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
    objc_msgSend_addEntriesFromDictionary_(v30, v31, (uint64_t)v13);
  else
    objc_msgSend_addEntriesFromDictionary_(v30, v31, MEMORY[0x1E0C9AA70]);

  sub_1BEC0F3B4(a1, v14, v30, v32);
}

void sub_1BEC0F3B4(const char *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  char isSystemInstalledBinary;
  const char *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  _QWORD handler[4];
  id v40;
  id v41;
  id v42;
  id v43;
  const char *v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend_currentProcess(CKDDaemonProcess, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_processType(v12, v13, v14);

  if (v15 == 2)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v16, v17);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v32, (uint64_t)"void _CKRegisterXPCActivity(const char *, __strong os_activity_t, NSDictionary *__strong, void (^__strong)(void))");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v31, v34, (uint64_t)v33, CFSTR("CKDDaemonUtils.m"), 577, CFSTR("You shouldn't be registering XPC activities in daemons"));

  }
  objc_msgSend_currentProcess(CKDDaemonProcess, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  isSystemInstalledBinary = objc_msgSend_isSystemInstalledBinary(v18, v19, v20);

  if ((isSystemInstalledBinary & 1) == 0)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v22, v23);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v36, (uint64_t)"void _CKRegisterXPCActivity(const char *, __strong os_activity_t, NSDictionary *__strong, void (^__strong)(void))");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v35, v38, (uint64_t)v37, CFSTR("CKDDaemonUtils.m"), 578, CFSTR("You shouldn't be registering XPC activities from non-system binaries"));

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v24 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v46 = a1;
    v47 = 2114;
    v48 = v8;
    _os_log_impl(&dword_1BE990000, v24, OS_LOG_TYPE_INFO, "Registering: %s xpc activity with criteria: %{public}@", buf, 0x16u);
  }
  CKCurrentPersonaID();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (void *)*MEMORY[0x1E0C80748];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = sub_1BEC11064;
  handler[3] = &unk_1E7837B30;
  v40 = v7;
  v41 = v8;
  v43 = v9;
  v44 = a1;
  v42 = v25;
  v27 = v9;
  v28 = v25;
  v29 = v8;
  v30 = v7;
  xpc_activity_register(a1, v26, handler);

}

void CKRegisterRepeatingXPCActivity(const char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  const char *v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  void *v34;
  id v35;
  _QWORD v37[4];
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x1E0CB3940];
  v11 = *MEMORY[0x1E0C807A8];
  v35 = a6;
  v12 = a5;
  v13 = a2;
  objc_msgSend_stringWithUTF8String_(v10, v14, v11);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v15;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v16, a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v38[0] = v17;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v18, *MEMORY[0x1E0C80790]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = v19;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v20, a4);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v38[1] = v21;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v22, *MEMORY[0x1E0C80898]);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v37[2] = v23;
  v38[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v24, *MEMORY[0x1E0C80878]);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v37[3] = v25;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v26, *MEMORY[0x1E0C80880]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v38[3] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v38, v37, 4);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = (void *)objc_msgSend_mutableCopy(v29, v30, v31);
  v34 = v32;
  if (v12)
    objc_msgSend_addEntriesFromDictionary_(v32, v33, (uint64_t)v12);
  else
    objc_msgSend_addEntriesFromDictionary_(v32, v33, MEMORY[0x1E0C9AA70]);

  sub_1BEC0F3B4(a1, v13, v34, v35);
}

void CKUnregisterXPCActivity(const char *a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v3 = 136315138;
    v4 = a1;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Unregistering: %s xpc activity", (uint8_t *)&v3, 0xCu);
  }
  xpc_activity_unregister(a1);
}

uint64_t CKEncryptWithPublicKey(void *a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const __CFDictionary *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFData *v23;
  void *v24;
  const char *v25;
  CFErrorRef v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  NSObject *v44;
  void *EncryptedDataWithParameters;
  const char *v46;
  void *v47;
  id v48;
  id v49;
  CFTypeRef cf;
  CFErrorRef error;
  id v52;
  uint8_t buf[4];
  id v54;
  __int16 v55;
  void *v56;
  _QWORD v57[2];
  _QWORD v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  error = 0;
  v52 = 0;
  v12 = *MEMORY[0x1E0CD69F8];
  v57[0] = *MEMORY[0x1E0CD6A38];
  v57[1] = v12;
  v13 = *MEMORY[0x1E0CD6A10];
  v58[0] = *MEMORY[0x1E0CD6A50];
  v58[1] = v13;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)v58, v57, 2);
  v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (a5)
    *a5 = 0;
  if (a4)
    *a4 = 0;
  if (!v9)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, *MEMORY[0x1E0C94B20], 1000, CFSTR("NULL serverPublicKeyObj"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0;
    v24 = 0;
    v33 = 0;
    v18 = 0;
LABEL_18:
    v36 = 0;
    v52 = v34;
    goto LABEL_19;
  }
  objc_msgSend_publicKey(v9, v15, v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v18)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v19, *MEMORY[0x1E0C94B20], 1000, CFSTR("nil publicKey"));
LABEL_17:
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0;
    v24 = 0;
    v33 = 0;
    goto LABEL_18;
  }
  objc_msgSend_certData(v9, v19, v20);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v18)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v21, *MEMORY[0x1E0C94B20], 1000, CFSTR("nil certData"));
    goto LABEL_17;
  }
  objc_msgSend_publicKey(v9, v21, v22);
  v23 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v24 = SecKeyCreateWithData(v23, v17, &error);

  v26 = error;
  if (error)
  {
    error = 0;
    v52 = v26;
  }
  if (v24)
  {
    cf = v24;
    v18 = (void *)objc_opt_new();
    objc_msgSend_setObject_forKeyedSubscript_(v18, v27, (uint64_t)&unk_1E78B0310, *MEMORY[0x1E0CD6EF0]);
    objc_msgSend_certData(v9, v28, v29);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v18, v30, (uint64_t)v24, *MEMORY[0x1E0CD6F00]);
    if (v11)
    {
      objc_msgSend_dataUsingEncoding_(v11, v31, 4);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v33)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v32, *MEMORY[0x1E0C94B20], 1000, CFSTR("Could not encode uri %@ to UTF-8"), v11);
        v52 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_42;
      }
      objc_msgSend_setObject_forKeyedSubscript_(v18, v32, (uint64_t)v33, *MEMORY[0x1E0CD6EE8]);
    }
    else
    {
      v33 = 0;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v38 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v49 = v10;
      v39 = v38;
      objc_msgSend_publicKey(v9, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v54 = v42;
      _os_log_impl(&dword_1BE990000, v39, OS_LOG_TYPE_INFO, "server public key: %@", buf, 0xCu);

      v10 = v49;
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    }
    v43 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v54 = v24;
      _os_log_impl(&dword_1BE990000, v43, OS_LOG_TYPE_INFO, "shared info: %@", buf, 0xCu);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    }
    v44 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v54 = v11;
      v55 = 2112;
      v56 = v33;
      _os_log_impl(&dword_1BE990000, v44, OS_LOG_TYPE_INFO, "additional auth data %@ (%@)", buf, 0x16u);
    }
    EncryptedDataWithParameters = (void *)SecKeyCreateEncryptedDataWithParameters();
    if (EncryptedDataWithParameters)
    {
      v36 = EncryptedDataWithParameters;
      if (a4)
      {
        v36 = objc_retainAutorelease(EncryptedDataWithParameters);
        *a4 = v36;
      }
      v35 = 1;
      goto LABEL_43;
    }
    if (!v52)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v46, *MEMORY[0x1E0C94B20], 1000, CFSTR("SecKeyCreateEncryptedDataWithParameters NULL error"));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = v52;
      v52 = v47;

    }
LABEL_42:
    v36 = 0;
    v35 = 0;
LABEL_43:
    CFRelease(cf);
    goto LABEL_19;
  }
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v25, *MEMORY[0x1E0C94B20], 1000, CFSTR("CCECCryptorImportPublicKey failed: NULL"));
  v52 = (id)objc_claimAutoreleasedReturnValue();

  v35 = 0;
  v33 = 0;
  v18 = 0;
  v36 = 0;
LABEL_19:
  if (a5 && (v35 & 1) == 0)
    *a5 = objc_retainAutorelease(v52);

  return v35;
}

void sub_1BEC0FEF0()
{
  void *v0;

  v0 = (void *)qword_1ED702BC8;
  qword_1ED702BC8 = (uint64_t)&unk_1E78AFE60;

}

id sub_1BEC0FF08(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)IDSCopyIDForPhoneNumber();
  if (objc_msgSend_length(v8, v9, v10))
  {
    v12 = 0;
    do
    {
      v13 = objc_msgSend_characterAtIndex_(v8, v11, v12);
      if (objc_msgSend_characterIsMember_(v4, v14, v13))
        objc_msgSend_appendFormat_(v7, v15, (uint64_t)CFSTR("%C"), v13);
      ++v12;
    }
    while (v12 < objc_msgSend_length(v8, v15, v16));
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v17 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    v20 = v1;
    v21 = 2112;
    v22 = v7;
    v23 = 2112;
    v24 = v8;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Performed phone number canonicalization: %@ -> %@ (raw was %@)", buf, 0x20u);
  }

  return v7;
}

id sub_1BEC100AC()
{
  if (qword_1ED702BE0 != -1)
    dispatch_once(&qword_1ED702BE0, &unk_1E7837AC0);
  return (id)qword_1ED702BD8;
}

void sub_1BEC100EC()
{
  id v0;
  const char *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0C99D50]);
  v2 = (void *)objc_msgSend_initWithBase64EncodedString_options_(v0, v1, (uint64_t)CFSTR("ewogICJhcHBsaW5rcyI6IHsKICAgICJkZXRhaWxzIjogWwogICAgICB7CiAgICAgICAgImFwcElEIjogImNvbS5hcHBsZS5DbG91ZEtpdC5TaGFyZUJlYXIiLAogICAgICAgICJjb21wb25lbnRzIjogWwogICAgICAgICAgICB7ICIvIjogIi9wYWdlcy8/KiIgfSwKICAgICAgICAgICAgeyAiLyI6ICIvbnVtYmVycy8/KiIgfSwKICAgICAgICAgICAgeyAiLyI6ICIva2V5bm90ZS8/KiIgfSwKICAgICAgICAgICAgeyAiLyI6ICIvaWNsb3VkZHJpdmUvPyoiIH0sCiAgICAgICAgICAgIHsgIi8iOiAiL3NoYXJlLz8qIiB9LAogICAgICAgICAgICB7ICIvIjogIi9ub3Rlcy8/KiIgfSwKICAgICAgICAgICAgeyAiLyI6ICIvcGhvdG9zLz8qIiB9LAogICAgICAgICAgICB7ICIvIjogIi9waG90b3Nfc2hhcmluZy8/KiIgfSwKICAgICAgICAgICAgeyAiLyI6ICIvcGhvdG9zX2xpbmtzLz8qIiB9LAogICAgICAgICAgICB7ICIvIjogIi9yZW1pbmRlcnMvdGVtcGxhdGUvKiIsICJleGNsdWRlIjogdHJ1ZSB9LAogICAgICAgICAgICB7ICIvIjogIi9yZW1pbmRlcnMvPyoiIH0sCiAgICAgICAgICAgIHsgIi8iOiAiL3NhZmFyaS10YWItZ3JvdXBzLz8qIiB9LAogICAgICAgICAgICB7ICIvIjogIi9mcmVlZm9ybS9jb3B5LyoiLCAiZXhjbHVkZSI6IHRydWUgfSwKICAgICAgICAgICAgeyAiLyI6ICIvZnJlZWZvcm0vPyoiIH0sCiAgICAgICAgICAgIHsgIi8iOiAiL3YvPyoiIH0KICAgICAgICBdLAogICAgICAgICJhbHdheXNFbmFibGVkIjogdHJ1ZQogICAgICB9CiAgICBdCiAgfQp9Cg=="), 1);
  v6[0] = CFSTR("*.icloud.com");
  v6[1] = CFSTR("*.icloud.com.cn");
  v7[0] = v2;
  v7[1] = v2;
  v6[2] = CFSTR("icloud.com");
  v6[3] = CFSTR("icloud.com.cn");
  v7[2] = v2;
  v7[3] = v2;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)v7, v6, 4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ED702BD8;
  qword_1ED702BD8 = v4;

}

id CKDescriptionForIdentitySet(uint64_t a1)
{
  void *v2;
  const void *v3;
  const char *v4;
  const char *v5;
  id v7;

  v2 = (void *)objc_opt_new();
  v3 = (const void *)PCSIdentitySetCopyService();
  objc_msgSend_appendFormat_(v2, v4, (uint64_t)CFSTR("<PCSIdentitySetRef %p service: %@, identities: {\n"), a1, v3);
  if (v3)
    CFRelease(v3);
  v7 = v2;
  PCSIdentitySetEnumeratePublicKeys();
  objc_msgSend_appendString_(v7, v5, (uint64_t)CFSTR("}>"));

  return v7;
}

uint64_t sub_1BEC10280(uint64_t a1, const char *a2)
{
  return objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, (uint64_t)CFSTR("\t%@\n"), a2);
}

void CKWarnForIncorrectServiceIdentity(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  BOOL v19;
  id v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  double v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  id v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint8_t buf[4];
  id v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  id v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  id v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    v49 = v8;
    objc_msgSend_ckShortDescription(v6, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v6, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v57 = v5;
    v58 = 2114;
    v59 = v52;
    v60 = 2114;
    v61 = v7;
    v62 = 2114;
    v63 = v55;
    v64 = 2114;
    v65 = v5;
    _os_log_error_impl(&dword_1BE990000, v49, OS_LOG_TYPE_ERROR, "Decryption failed for PCS using the service name, %{public}@. This likely indicates a CloudKit adopter misconfiguration. An identity exists that can decrypt this data, but the adopter process is not configured to use it. Ensure that the service name for containerID %{public}@ in the com.apple.private.cloudkit.serviceNameForContainerMap entitlement is correctly set. If this entitlement was recently modified, any zones created prior to the change must be deleted. Devices signed into affected test accounts can delete the misconfigured zone using the following command:\n\nckctl -b %{public}@ -v production -x \"container %{public}@ %{public}@\" -x \"zone deleteAll\"\n\nAlternatively, reverting the entitlement to its previous value will allow access to the data.", buf, 0x34u);

  }
  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_isAppleInternalInstall(v11, v12, v13))
    goto LABEL_13;
  objc_msgSend_currentProcess(CKDDaemonProcess, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_processType(v16, v17, v18) == 2;

  if (!v19)
  {
    if (qword_1ED702BE8 != -1)
      dispatch_once(&qword_1ED702BE8, &unk_1E7837B08);
    v20 = (id)qword_1ED702BF0;
    objc_sync_enter(v20);
    objc_msgSend_objectForKeyedSubscript_((void *)qword_1ED702BF0, v21, (uint64_t)v6);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceNow(v22, v23, v24);
    if (v22 && v27 >= -3600.0)
    {

      objc_sync_exit(v20);
      v11 = v20;
    }
    else
    {
      objc_msgSend_distantFuture(MEMORY[0x1E0C99D68], v25, v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1ED702BF0, v29, (uint64_t)v28, v6);

      objc_sync_exit(v20);
      v30 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend_ckShortDescription(v6, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v30, v34, (uint64_t)CFSTR("Unexpected service identity for %@"), v33);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      v35 = (void *)objc_opt_new();
      objc_msgSend_setComponentID_(v35, v36, (uint64_t)CFSTR("552485"));
      objc_msgSend_setTitle_(v35, v37, (uint64_t)v11);
      objc_msgSend_setComponentName_(v35, v38, (uint64_t)CFSTR("CloudKit"));
      objc_msgSend_setComponentVersion_(v35, v39, (uint64_t)CFSTR("All"));
      objc_msgSend_sharedManager(MEMORY[0x1E0C951D8], v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_triggerTapToRadarWithRequest_(v42, v43, (uint64_t)v35);

      v44 = (id)qword_1ED702BF0;
      objc_sync_enter(v44);
      objc_msgSend_date(MEMORY[0x1E0C99D68], v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1ED702BF0, v48, (uint64_t)v47, v6);

      objc_sync_exit(v44);
    }
LABEL_13:

  }
}

void sub_1BEC105FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC10620()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1ED702BF0;
  qword_1ED702BF0 = (uint64_t)v0;

}

uint64_t CKIsBundleIDForeground(void *a1)
{
  id v1;
  const char *v2;
  void *v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  id v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_predicateMatchingBundleIdentifier_(MEMORY[0x1E0D87DA0], v2, (uint64_t)v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  objc_msgSend_handleForPredicate_error_(MEMORY[0x1E0D87D68], v4, (uint64_t)v3, &v17);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v17;
  if (v5)
  {
    objc_msgSend_currentState(v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_endowmentNamespaces(v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_containsObject_(v12, v13, (uint64_t)CFSTR("com.apple.frontboard.visibility"));

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v15 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v19 = v1;
      v20 = 2112;
      v21 = v8;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_INFO, "Couldn't determine if bundle %@ is foreground: %@", buf, 0x16u);
    }
    v14 = 0;
  }

  return v14;
}

void sub_1BEC107D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  const char *v4;
  void *v5;
  const char *v6;
  id v7;

  v7 = a4;
  if (ba_is_process_extension())
  {
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v4, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v6, (uint64_t)v5, *MEMORY[0x1E0C95390]);

  }
}

id sub_1BEC10848(void *a1)
{
  return objc_getAssociatedObject(a1, "CKRecordZonePCS");
}

void sub_1BEC10854(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "CKRecordZonePCS", a3, (void *)0x301);
}

id sub_1BEC10864(void *a1)
{
  return objc_getAssociatedObject(a1, "CKZoneishPCS");
}

void sub_1BEC10870(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "CKZoneishPCS", a3, (void *)0x301);
}

void sub_1BEC10880(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  id v15;

  if (objc_msgSend_zonePCS(a1, a2, a3))
  {
    v6 = objc_msgSend_zonePCS(a1, v4, v5);
    objc_msgSend_publicKeyIDFromIdentity_(CKDPCSManager, v7, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPcsKeyID_(a1, v9, (uint64_t)v8);

  }
  if (objc_msgSend_zoneishPCS(a1, v4, v5))
  {
    v12 = objc_msgSend_zoneishPCS(a1, v10, v11);
    objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v13, v12);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setZoneishKeyID_(a1, v14, (uint64_t)v15);

  }
}

id sub_1BEC10938(void *a1)
{
  return objc_getAssociatedObject(a1, "CKRecordPCS");
}

void sub_1BEC10944(void *a1, uint64_t a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  id v10;

  objc_setAssociatedObject(a1, "CKRecordPCS", a3, (void *)0x301);
  objc_msgSend_zoneishKeyID(a1, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (a3)
  {
    if (v7)
    {
      objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v8, (uint64_t)a3);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setZoneishKeyID_(a1, v9, (uint64_t)v10);

    }
  }
}

void sub_1BEC109DC(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  objc_msgSend_zoneishKeyID(a1, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {

  }
  else if (objc_msgSend_recordPCS(a1, v6, v7))
  {
    objc_msgSend_pcsKeyID(a1, v8, v9);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = objc_msgSend_recordPCS(a1, v20, v21);
    if (v19)
    {
      objc_msgSend_allProtectionIdentifiersFromShareProtection_(CKDPCSManager, v22, v23);
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v24 = (id)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v44, v48, 16);
      if (v26)
      {
        v29 = v26;
        v30 = *(_QWORD *)v45;
        while (2)
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v45 != v30)
              objc_enumerationMutation(v24);
            v32 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
            objc_msgSend_pcsKeyID(a1, v27, v28);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v32) = objc_msgSend_isEqualToData_(v32, v34, (uint64_t)v33);

            if ((v32 & 1) != 0)
            {
              v37 = v24;
              goto LABEL_18;
            }
          }
          v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v44, v48, 16);
          if (v29)
            continue;
          break;
        }
      }

      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(a1, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v37, v41, (uint64_t)a2, a1, CFSTR("CKDDaemonUtils.m"), 1001, CFSTR("Generated PCS key ID not found in PCS for record %@"), v40);

LABEL_18:
    }
    else
    {
      objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v22, v23);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPcsKeyID_(a1, v43, (uint64_t)v42);

    }
  }
  if (objc_msgSend_recordPCS(a1, v8, v9))
  {
    v12 = objc_msgSend_recordPCS(a1, v10, v11);
    objc_msgSend_allProtectionIdentifiersFromShareProtection_(CKDPCSManager, v13, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend_copy(v14, v15, v16);
    objc_msgSend_setAllPCSKeyIDs_(a1, v18, (uint64_t)v17);

  }
}

id sub_1BEC10C20(void *a1)
{
  return objc_getAssociatedObject(a1, "PrivatePCS");
}

void sub_1BEC10C2C(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "PrivatePCS", a3, (void *)0x301);
}

id sub_1BEC10C3C(void *a1)
{
  return objc_getAssociatedObject(a1, "PublicPCS");
}

void sub_1BEC10C48(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "PublicPCS", a3, (void *)0x301);
}

id sub_1BEC10C58(void *a1)
{
  return objc_getAssociatedObject(a1, "PerParticipantPCS");
}

void sub_1BEC10C64(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "PerParticipantPCS", a3, (void *)0x301);
}

void sub_1BEC10C74(void *a1, uint64_t a2, void *a3, int a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  id v38;

  v38 = a3;
  v8 = objc_msgSend_pcs(v38, v6, v7);
  objc_msgSend_setPrivatePCS_(a1, v9, v8);
  objc_msgSend_etag(v38, v10, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a4)
    goto LABEL_6;
  objc_msgSend_previousProtectionEtag(a1, v12, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v15)
    goto LABEL_6;
  objc_msgSend_previousProtectionEtag(a1, v12, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend_isEqualToString_(v17, v18, (uint64_t)CFSTR("NO_ETAG_FOR_YOU")))
  {
    v14 = v17;
LABEL_6:
    objc_msgSend_setPreviousProtectionEtag_(a1, v12, (uint64_t)v14);
    goto LABEL_7;
  }

  v14 = 0;
  objc_msgSend_setPreviousProtectionEtag_(a1, v19, 0);
LABEL_7:
  v22 = objc_msgSend_publicPCS(v38, v20, v21);
  objc_msgSend_setPublicPCS_(a1, v23, v22);
  objc_msgSend_publicPCSEtag(v38, v24, v25);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a4)
    goto LABEL_12;
  objc_msgSend_previousPublicProtectionEtag(a1, v26, v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v29)
    goto LABEL_12;
  objc_msgSend_previousPublicProtectionEtag(a1, v26, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend_isEqualToString_(v31, v32, (uint64_t)CFSTR("NO_ETAG_FOR_YOU")))
  {
    v28 = v31;
LABEL_12:
    objc_msgSend_setPreviousPublicProtectionEtag_(a1, v26, (uint64_t)v28);
    goto LABEL_13;
  }

  v28 = 0;
  objc_msgSend_setPreviousPublicProtectionEtag_(a1, v33, 0);
LABEL_13:
  v36 = objc_msgSend_myParticipantPCS(v38, v34, v35);
  objc_msgSend_setMyParticipantPCS_(a1, v37, v36);

}

uint64_t sub_1BEC10DD0(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setSharePCSData_isUnitTestAccount_(a1, a2, a3, 0);
}

id sub_1BEC10DD8(void *a1)
{
  return objc_getAssociatedObject(a1, "PublicPCS");
}

void sub_1BEC10DE4(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "PublicPCS", a3, (void *)0x301);
}

void sub_1BEC11064(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  void *v4;
  xpc_activity_state_t v5;
  void *v6;
  xpc_object_t v7;
  void *v8;
  NSObject *v9;
  _QWORD *v10;
  os_log_t *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  xpc_object_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1C3B83E24]();
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &state);
  v5 = xpc_activity_get_state(v3);
  if (v5 == 2)
  {
    v10 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (os_log_t *)MEMORY[0x1E0C952B0];
    v12 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 136315138;
      v22 = v14;
      _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "%s xpc activity state: run.", buf, 0xCu);
    }
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1BEC11380;
    v17[3] = &unk_1E782F4D0;
    v18 = *(id *)(a1 + 48);
    v19 = *(id *)(a1 + 56);
    CKMuckingWithPersonas(v17);
    if (!xpc_activity_set_state(v3, 5))
    {
      if (*v10 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v13 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Couldn't set activity state to DONE", buf, 2u);
      }
    }

    v6 = v18;
    goto LABEL_21;
  }
  if (!v5)
  {
    v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    v7 = xpc_activity_copy_criteria(v3);
    v8 = v7;
    if (!v7 || !xpc_equal(v7, v6))
      xpc_activity_set_criteria(v3, v6);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (id)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 64);
      v16 = xpc_activity_copy_criteria(v3);
      *(_DWORD *)buf = 136315394;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "%s xpc activity state: check in. criteria: %@", buf, 0x16u);

    }
LABEL_21:

  }
  os_activity_scope_leave(&state);
  objc_autoreleasePoolPop(v4);

}

void sub_1BEC11358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEC11380(uint64_t a1)
{
  uint64_t result;

  result = CKAdoptPersonaID(*(void **)(a1 + 32));
  if ((_DWORD)result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return result;
}

BOOL CKDPRecordFieldReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPFieldAction *v18;
  const char *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(CKDPFieldAction);
        objc_msgSend_addAction_(a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || !sub_1BEB9F2CC((id *)&v18->super.super.isa, a2))
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_34;
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_31:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPRecordFieldValue);
    objc_storeStrong(a1 + 3, v18);
    if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_34;
    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC124C0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPRecord *v18;
  const char *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_35;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 24) = v22;
      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v26;

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPRecord);
        objc_msgSend_addRecord_((void *)a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC14EE8()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED702BF8;
  qword_1ED702BF8 = v0;

}

void sub_1BEC156B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC1577C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEC15A54(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  const __CFString *v8;
  NSObject *v9;
  void *v10;
  _BYTE v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    if (a2 > 2)
      v8 = CFSTR("Unknown");
    else
      v8 = off_1E7837CA8[a2];
    *(_DWORD *)v11 = 138543618;
    *(_QWORD *)&v11[4] = v8;
    *(_WORD *)&v11[12] = 2112;
    *(_QWORD *)&v11[14] = v5;
    v9 = v6;
    _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Renew result was %{public}@. error=%@", v11, 0x16u);

  }
  if (a2 == 2)
  {
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v7, *MEMORY[0x1E0C94B20], 2011, v5, CFSTR("Failed to renew account credential"), *(_OWORD *)v11, *(_QWORD *)&v11[16], v12);
  }
  else
  {
    if (a2 != 1)
    {
      v10 = 0;
      goto LABEL_14;
    }
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v7, *MEMORY[0x1E0C94B20], 2011, v5, CFSTR("User rejected a prompt to enter their iCloud account password"), *(_OWORD *)v11, *(_QWORD *)&v11[16], v12);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1BEC15E28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    if (v6)
      goto LABEL_5;
LABEL_8:
    objc_msgSend_objectForKeyedSubscript_(v5, v8, *MEMORY[0x1E0CFFF40]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1BEC15FCC;
    v14[3] = &unk_1E7837B78;
    v15 = *(id *)(a1 + 48);
    objc_msgSend_validateVettingToken_forAltDSID_completion_(v11, v13, v12, v10, v14);

    goto LABEL_9;
  }
  *(_DWORD *)buf = 138412546;
  v17 = v6;
  v18 = 2112;
  v19 = v5;
  _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Got vetting auth completion, error: %@, results: %@", buf, 0x16u);
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, id))(v9 + 16))(v9, 0, v6);
LABEL_9:

}

uint64_t sub_1BEC15FCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEC16460(uint64_t a1)
{
  NSObject *v2;
  os_activity_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[8];
  void *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Registering device count refresh activity", buf, 2u);
  }
  v3 = _os_activity_create(&dword_1BE990000, "refreshDeviceCount", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v4 = *MEMORY[0x1E0C807B8];
  v5 = *MEMORY[0x1E0C807F0];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, *MEMORY[0x1E0C80890]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v7;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v8, *MEMORY[0x1E0C807D0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v10, (uint64_t)v15, &v14, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BEC16648;
  v12[3] = &unk_1E7830348;
  v12[4] = *(_QWORD *)(a1 + 32);
  CKRegisterRepeatingXPCActivity("com.apple.cloudkit.refresh-device-count", v3, v4, v5, v11, v12);

}

void sub_1BEC16648(uint64_t a1)
{
  _QWORD *v2;
  os_log_t *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  dispatch_semaphore_t v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  id v34;
  _QWORD block[4];
  NSObject *v36;
  _QWORD v37[4];
  NSObject *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  id v43;
  uint8_t v44[128];
  uint8_t buf[4];
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (os_log_t *)MEMORY[0x1E0C952B0];
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE990000, v4, OS_LOG_TYPE_INFO, "Refreshing device counts", buf, 2u);
  }
  v5 = dispatch_group_create();
  objc_msgSend_sharedAccountStore(CKDAccountStore, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_accountStore(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v43 = 0;
  objc_msgSend_aa_appleAccountsWithError_(v11, v12, (uint64_t)&v43);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v43;
  v15 = v14;
  v16 = &unk_1BECBB000;
  if (v13)
  {
    v34 = v14;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v17 = v13;
    v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v39, v44, 16);
    if (v19)
    {
      v22 = v19;
      v23 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v40 != v23)
            objc_enumerationMutation(v17);
          v25 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
          objc_msgSend_aa_cloudKitAccount(v25, v20, v21);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          if (v26)
          {
            dispatch_group_enter(v5);
            v27 = *(void **)(a1 + 32);
            v37[0] = MEMORY[0x1E0C809B0];
            v37[1] = 3221225472;
            v37[2] = sub_1BEC16A10;
            v37[3] = &unk_1E7837BC8;
            v38 = v5;
            objc_msgSend_deviceCountForAccount_ignoreCache_completionHandler_(v27, v28, (uint64_t)v25, 0, v37);

          }
        }
        v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v39, v44, 16);
      }
      while (v22);
    }

    v3 = (os_log_t *)MEMORY[0x1E0C952B0];
    v2 = (_QWORD *)MEMORY[0x1E0C95300];
    v15 = v34;
    v16 = (_QWORD *)&unk_1BECBB000;
  }
  else
  {
    if (*v2 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v29 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v15;
      _os_log_error_impl(&dword_1BE990000, v29, OS_LOG_TYPE_ERROR, "Error getting accounts to refresh device count: %@", buf, 0xCu);
    }
  }
  v30 = dispatch_semaphore_create(0);
  CKGetGlobalQueue();
  v31 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = v16[128];
  block[2] = sub_1BEC16A18;
  block[3] = &unk_1E782EA40;
  v32 = v30;
  v36 = v32;
  dispatch_group_notify(v5, v31, block);

  dispatch_semaphore_wait(v32, 0xFFFFFFFFFFFFFFFFLL);
  if (*v2 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v33 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE990000, v33, OS_LOG_TYPE_INFO, "Finished refreshing device counts", buf, 2u);
  }

}

void sub_1BEC16A10(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

intptr_t sub_1BEC16A18(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1BEC16A60()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.cloudkit.device-count", v2);
  v1 = (void *)qword_1ED702C08;
  qword_1ED702C08 = (uint64_t)v0;

}

void sub_1BEC16BB4(uint64_t a1)
{
  _QWORD *v2;
  os_log_t *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  id *v16;
  NSObject *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  _BOOL4 v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  double v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  NSObject *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD block[4];
  _QWORD v46[2];
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (os_log_t *)MEMORY[0x1E0C952B0];
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v37 = *(_QWORD *)(a1 + 32);
    LODWORD(v51) = 138412290;
    *(_QWORD *)((char *)&v51 + 4) = v37;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Getting device count for account %@", (uint8_t *)&v51, 0xCu);
  }
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = &v51;
  v52 = 0x2020000000;
  v53 = 0;
  if (*(_BYTE *)(a1 + 64))
    goto LABEL_6;
  objc_msgSend_creationDate(*(void **)(a1 + 32), v5, v6);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceNow(v18, v19, v20);
  v22 = v21 > -86400.0;

  if (v22)
  {
    if (*v2 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v23 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "Returning unknown device count for newly signed-in account", buf, 2u);
    }
    *(_QWORD *)(*((_QWORD *)&v51 + 1) + 24) = 0;
LABEL_13:
    CKGetGlobalQueue();
    v17 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEC16FBC;
    block[3] = &unk_1E782ECB8;
    v16 = (id *)v46;
    v46[0] = *(id *)(a1 + 40);
    v46[1] = &v51;
    dispatch_async(v17, block);
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    objc_msgSend_ck_cloudKitAccount(*(void **)(a1 + 32), v5, v6);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v24;
    if (v24)
    {
      objc_msgSend_objectForKeyedSubscript_(v24, v5, (uint64_t)CFSTR("deviceCount"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend_integerValue(v26, v27, v28);
      *(_QWORD *)(*((_QWORD *)&v51 + 1) + 24) = v29;

      objc_msgSend_objectForKeyedSubscript_(v25, v30, (uint64_t)CFSTR("deviceCountFetchDate"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = v31;
      if (v31)
      {
        objc_msgSend_timeIntervalSinceNow(v31, v32, v33);
        if (v35 < 0.0 && v35 > -86400.0)
        {
          if (*v2 != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v36 = *v3;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            v38 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 24);
            *(_DWORD *)buf = 134218242;
            v48 = v38;
            v49 = 2114;
            v50 = v34;
            _os_log_debug_impl(&dword_1BE990000, v36, OS_LOG_TYPE_DEBUG, "Using cached device count %ld from last fetch date %{public}@", buf, 0x16u);
          }

          goto LABEL_13;
        }
      }

    }
  }
LABEL_6:
  objc_msgSend_deviceCountQueue(*(void **)(a1 + 56), v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_suspend(v7);

  v8 = *(void **)(a1 + 56);
  v9 = *(void **)(a1 + 32);
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = sub_1BEC16FDC;
  v39[3] = &unk_1E7837C38;
  v42 = &v51;
  v10 = v9;
  v12 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v40 = v10;
  v43 = v11;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 56);
  v41 = v13;
  v44 = v14;
  objc_msgSend_fetchDeviceCountForAccount_completionHandler_(v8, v15, (uint64_t)v10, v39);
  v16 = &v40;
  v17 = v41;
LABEL_14:

  _Block_object_dispose(&v51, 8);
}

void sub_1BEC16F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEC16FBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 1, 0);
}

void sub_1BEC16FDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  char v20;
  id v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD block[4];
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint8_t buf[4];
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  objc_msgSend_ck_cloudKitAccount(*(void **)(a1 + 32), v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v11, (uint64_t)v10, CFSTR("deviceCount"));

    objc_msgSend_date(MEMORY[0x1E0C99D68], v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, (uint64_t)v14, CFSTR("deviceCountFetchDate"));

    objc_msgSend_accountStore(v9, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0;
    v20 = objc_msgSend_saveVerifiedAccount_error_(v18, v19, (uint64_t)v9, &v35);
    v21 = v35;

    v22 = (void *)*MEMORY[0x1E0C952F8];
    if ((v20 & 1) != 0)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v22);
      v23 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BE990000, v23, OS_LOG_TYPE_DEBUG, "Saved device count", buf, 2u);
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v22);
      v24 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v37 = v21;
        _os_log_error_impl(&dword_1BE990000, v24, OS_LOG_TYPE_ERROR, "Error saving device count: %@", buf, 0xCu);
      }
    }

  }
  CKGetGlobalQueue();
  v25 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEC1726C;
  block[3] = &unk_1E7837C10;
  v26 = *(id *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 48);
  v31 = v5;
  v32 = v26;
  v28 = *(_QWORD *)(a1 + 64);
  v33 = v27;
  v34 = v28;
  v29 = v5;
  dispatch_async(v25, block);

}

void sub_1BEC1726C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  NSObject *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend_deviceCountQueue(*(void **)(a1 + 56), v2, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_resume(v4);

}

void sub_1BEC17420(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  objc_class *v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v25 = 138412290;
      v26 = (uint64_t)v9;
      _os_log_error_impl(&dword_1BE990000, v10, OS_LOG_TYPE_ERROR, "Error fetching device list: %@", (uint8_t *)&v25, 0xCu);
    }
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v11, *MEMORY[0x1E0C94B20], 1000, v9, CFSTR("Failed to fetch device list"));
LABEL_18:
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v20 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v22 = v20;
      v23 = (objc_class *)objc_opt_class();
      NSStringFromClass(v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = (uint64_t)v24;
      _os_log_error_impl(&dword_1BE990000, v22, OS_LOG_TYPE_ERROR, "Wrong response type %{public}@ when fetching devices", (uint8_t *)&v25, 0xCu);

    }
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v21, *MEMORY[0x1E0C94B20], 1000, 0, CFSTR("Bad response from AppleAccount"));
    goto LABEL_18;
  }
  objc_msgSend_devices(v8, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_count(v14, v15, v16);

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v18 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = 134217984;
    v26 = v17;
    _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Fetched device list with %ld devices", (uint8_t *)&v25, 0xCu);
  }
  v19 = 0;
LABEL_19:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_1BEC17830(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC1829C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  id v13;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend_deviceContext(v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_logicalDeviceScopedClientProxyForDeviceContext_(v3, v7, (uint64_t)v6);
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_hasBeenThrottled(v13, v8, v9))
  {
    objc_msgSend_resetThrottles(v13, v10, v11);
    objc_msgSend_setHasBeenThrottled_(v13, v12, 0);
  }

}

void sub_1BEC19A7C()
{
  CKDURLSessionPool *v0;
  const char *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;

  v0 = [CKDURLSessionPool alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2);
  v4 = (void *)qword_1ED702C18;
  qword_1ED702C18 = inited;

}

void sub_1BEC1A268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEC1A294(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  const char *v49;
  NSObject *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  NSObject *v57;
  id v58;
  uint8_t buf[4];
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_23;
  if (*MEMORY[0x1E0C95280]
    && objc_msgSend_checkAndClearUnitTestOverrides_(WeakRetained, v8, (uint64_t)CFSTR("FakePCSDecryptionFailure")))
  {
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v8, *MEMORY[0x1E0C94B20], 5004, 0, CFSTR("TEST PCS decrypt failure"));
    v11 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v11;
  }
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(v10, v8, v9);
  objc_msgSend_setError_(v10, v12, (uint64_t)v6);
  if (!v6)
  {
    v15 = objc_msgSend_pcs(v5, v13, v14);
    objc_msgSend_zone(v10, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setZonePCS_(v18, v19, v15);

    objc_msgSend_zone(v10, v20, v21);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneishProtectionData(v22, v23, v24);
    v25 = objc_claimAutoreleasedReturnValue();
    if (!v25)
    {
LABEL_15:

      goto LABEL_16;
    }
    v28 = (void *)v25;
    v29 = objc_msgSend_pcs(v5, v26, v27);

    if (v29)
    {
      objc_msgSend_container(v10, v13, v14);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zone(v10, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneishProtectionData(v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend_pcs(v5, v40, v41);
      v58 = 0;
      v44 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v33, v43, (uint64_t)v39, 1, v42, &v58);
      v22 = v58;

      objc_msgSend_zone(v10, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setZoneishPCS_(v47, v48, (uint64_t)v44);

      if (v44)
        CFRelease(v44);
      if (v22)
      {
        objc_msgSend_setError_(v10, v49, (uint64_t)v22);
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v50 = *MEMORY[0x1E0C952D8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v60 = v22;
          _os_log_error_impl(&dword_1BE990000, v50, OS_LOG_TYPE_ERROR, "Failed to decode zoneishPCS data: %@", buf, 0xCu);
        }
      }
      goto LABEL_15;
    }
  }
LABEL_16:
  objc_msgSend_error(v10, v13, v14);
  v51 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v51)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v54 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v54, OS_LOG_TYPE_DEBUG, "PCS successfully decrypted, updating cache.", buf, 2u);
    }
    objc_msgSend_updatePCSCache(v10, v55, v56);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v52, v53);
  v57 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v57);

LABEL_23:
}

void sub_1BEC1A8E8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  id v11;

  v11 = a2;
  v5 = objc_msgSend_zoneKeysRemoved(v11, v3, v4);
  objc_msgSend_setZoneKeysRemoved_(v11, v6, *(_QWORD *)(a1 + 32) + v5);
  v9 = objc_msgSend_zoneishKeysRemoved(v11, v7, v8);
  objc_msgSend_setZoneishKeysRemoved_(v11, v10, *(_QWORD *)(a1 + 40) + v9);

}

void sub_1BEC1AB28(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  _QWORD v5[4];
  id v6;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEC1ABE4;
  v5[3] = &unk_1E7837D30;
  objc_copyWeak(&v6, &location);
  objc_msgSend_setSaveCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);

}

void sub_1BEC1ABC8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEC1ABE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12 = WeakRetained;
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95280]
      && objc_msgSend_checkAndClearUnitTestOverrides_(WeakRetained, v11, (uint64_t)CFSTR("FakeZoneSaveFailure")))
    {
      objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v13, *MEMORY[0x1E0C94B20], 2000, 0, CFSTR("TEST Save Zone failure"));
      v14 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v14;
    }
    v15 = (void *)*MEMORY[0x1E0C952F8];
    v16 = *MEMORY[0x1E0C95300];
    if (v8 && !v9)
    {
      if (v16 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v15);
      v17 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v24 = v17;
        objc_msgSend_zoneID(v8, v25, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138412290;
        v29 = v27;
        _os_log_debug_impl(&dword_1BE990000, v24, OS_LOG_TYPE_DEBUG, "Saved PCS changes to the server for zone %@", (uint8_t *)&v28, 0xCu);

      }
      objc_msgSend_setZone_(v12, v18, (uint64_t)v8);
      v9 = 0;
      goto LABEL_18;
    }
    if (v16 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v15);
    v21 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v28 = 138412546;
      v29 = v7;
      v30 = 2112;
      v31 = v9;
      _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Failed to save PCS changes to the server for zone %@: %@", (uint8_t *)&v28, 0x16u);
      if (v9)
        goto LABEL_17;
    }
    else if (v9)
    {
LABEL_17:
      objc_msgSend_setError_(v12, v22, (uint64_t)v9);
LABEL_18:
      objc_msgSend_stateTransitionGroup(v12, v19, v20);
      v23 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v23);

      goto LABEL_19;
    }
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v22, *MEMORY[0x1E0C94B20], 5002, 0, CFSTR("Failed to save updated PCS to the server"));
    v9 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
LABEL_19:

}

BOOL sub_1BEC1B3BC(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPAsset *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(CKDPAsset);
        objc_msgSend_addSections_(a1, v18, (uint64_t)v17);
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(CKDPAsset);
        objc_storeStrong(a1 + 1, v17);
      }
      if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC1BD10(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  CKDPRequestedFields *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC1C27C()
{
  void *v0;

  v0 = (void *)qword_1ED700AA8;
  qword_1ED700AA8 = (uint64_t)&unk_1E78AFE88;

}

uint64_t sub_1BEC1C880(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  CKDPRequestedFields *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v17;

        goto LABEL_88;
      case 2u:
        v20 = (CKDPRequestedFields *)objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 40), v20);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
          goto LABEL_90;
        goto LABEL_44;
      case 3u:
        v20 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 24), v20);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v20, a2))
          goto LABEL_90;
        goto LABEL_44;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_69:
        v50 = 16;
        goto LABEL_74;
      case 5u:
        v27 = 0;
        v28 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v23 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_73:
        v50 = 20;
LABEL_74:
        *(_DWORD *)(a1 + v50) = v23;
        goto LABEL_88;
      case 6u:
        v20 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v20);
        if (PBReaderPlaceMark() && (sub_1BEC1BD10((uint64_t)v20, a2) & 1) != 0)
        {
LABEL_44:
          PBReaderRecallMark();

LABEL_88:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_90:

        return 0;
      case 7u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 52) |= 0x10u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_78:
        v51 = v34 != 0;
        v52 = 50;
        goto LABEL_87;
      case 8u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v40 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v40 = 0;
LABEL_82:
        v51 = v40 != 0;
        v52 = 48;
        goto LABEL_87;
      case 9u:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 52) |= 8u;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
LABEL_86:
        v51 = v46 != 0;
        v52 = 49;
LABEL_87:
        *(_BYTE *)(a1 + v52) = v51;
        goto LABEL_88;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_88;
    }
  }
}

uint64_t sub_1BEC1D8BC(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_valueID(a2, (const char *)a2, a3);
}

id sub_1BEC1D964(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;

  objc_msgSend_valueID(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_zoneID(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

BOOL sub_1BEC1F184(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPMergeableDelta *v17;
  const char *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addDeltas_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v19 = objc_claimAutoreleasedReturnValue();
    v17 = (CKDPMergeableDelta *)a1[1];
    a1[1] = v19;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC20030(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_callbackForRecordZone_zoneID_error_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1BEC2233C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  id v11;

  v11 = a2;
  v5 = objc_msgSend_zoneKeysRemoved(v11, v3, v4);
  objc_msgSend_setZoneKeysRemoved_(v11, v6, *(_QWORD *)(a1 + 32) + v5);
  v9 = objc_msgSend_zoneishKeysRemoved(v11, v7, v8);
  objc_msgSend_setZoneishKeysRemoved_(v11, v10, *(_QWORD *)(a1 + 40) + v9);

}

void sub_1BEC22398(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);

}

void sub_1BEC223CC(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_zoneKeysRolled(v6, v2, v3);
  objc_msgSend_setZoneKeysRolled_(v6, v5, v4 + 1);

}

uint64_t sub_1BEC2265C(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_callbackForRecordZone_zoneID_error_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1BEC2286C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  objc_initWeak(&from, *(id *)(a1 + 32));
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1BEC229C8;
  v10[3] = &unk_1E7837D30;
  objc_copyWeak(&v11, &from);
  objc_msgSend_setSaveCompletionBlock_(v3, v5, (uint64_t)v10);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1BEC22A2C;
  v7[3] = &unk_1E782E468;
  objc_copyWeak(&v8, &from);
  objc_copyWeak(&v9, &location);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEC2298C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEC229C8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id *v5;
  id v6;
  id v7;
  const char *v8;
  id WeakRetained;

  v5 = (id *)(a1 + 32);
  v6 = a4;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend__handleRecordZoneSaved_error_(WeakRetained, v8, (uint64_t)v7, v6);

}

void sub_1BEC22A2C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_error(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v11, (uint64_t)v10);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v12);

}

void sub_1BEC22DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a36, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEC22E30(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  id WeakRetained;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  objc_msgSend_zoneID(a2, (const char *)a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v4, v6, (uint64_t)v5);

  if (!--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend_fetchZonesFromServer_(*(void **)(a1 + 32), v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    objc_msgSend_stateTransitionGroup(WeakRetained, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v10);

  }
}

void sub_1BEC23408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEC23434(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

uint64_t sub_1BEC23544(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_callbackForRecordZone_zoneID_error_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1BEC239B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location,char a38)
{
  id *v38;
  uint64_t v39;

  objc_destroyWeak(v38);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v39 - 184), 8);
  _Block_object_dispose((const void *)(v39 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1BEC23A08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const void *v30;
  const char *v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  id obj;
  uint8_t buf[4];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v8, v9);

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    objc_msgSend_zoneishProtectionData(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    if (v12 && (v15 = (void *)v12, v16 = objc_msgSend_pcs(v5, v13, v14), v15, v16))
    {
      objc_msgSend_container(*(void **)(a1 + 40), v13, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneishProtectionData(*(void **)(a1 + 32), v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend_pcs(v5, v25, v26);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      obj = *(id *)(v28 + 40);
      v30 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v21, v29, (uint64_t)v24, 1, v27, &obj);
      objc_storeStrong((id *)(v28 + 40), obj);

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v32 = *MEMORY[0x1E0C952D8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
        {
          v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v39 = v36;
          _os_log_error_impl(&dword_1BE990000, v32, OS_LOG_TYPE_ERROR, "Couldn't decode zoneishPCS data: %@", buf, 0xCu);
        }
      }
      objc_msgSend_setZoneishPCS_(v5, v31, (uint64_t)v30);
      if (v30)
        CFRelease(v30);
    }
    else
    {
      objc_msgSend_setZoneishPCS_(v5, v13, 0);
    }
  }
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v5;
  v35 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1BEC23C50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v7;
      objc_msgSend_zoneID(v8, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412546;
      v14 = v12;
      v15 = 2112;
      v16 = v6;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Warn: Failed to decrypt zone %@ with Reminders identity: %@", (uint8_t *)&v13, 0x16u);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEC23D88(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id obj;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend_pcs(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2, a3);
  v9 = objc_msgSend_zoneishPCS(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5, v6);
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("FailZonePCSDecryptionOnZoneFetch"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend_dataUsingEncoding_(CFSTR("EncryptionBreaker"), v7, 4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v14, (uint64_t)v13);

      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, *MEMORY[0x1E0C94B20], 5004, CFSTR("Couldn't decode zone PCS data"));
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v18 = *(void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v16;

      v9 = 0;
      v4 = 0;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
    {
      v45 = *(void **)(a1 + 40);
      v46 = v19;
      objc_msgSend_zoneID(v45, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
      *(_DWORD *)buf = 138412546;
      v53 = v49;
      v54 = 2112;
      v55 = v50;
      _os_log_error_impl(&dword_1BE990000, v46, OS_LOG_TYPE_ERROR, "Error handling zone PCS for zone %@: %@", buf, 0x16u);

    }
    v22 = *(void **)(a1 + 32);
    objc_msgSend_zoneID(*(void **)(a1 + 40), v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPCSData_forFetchedZoneID_(v22, v24, 0, v23);

  }
  else
  {
    objc_msgSend_setZonePCS_(*(void **)(a1 + 40), v7, v4);
    objc_msgSend_setZoneishPCS_(*(void **)(a1 + 40), v32, v9);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    v33 = *(void **)(a1 + 32);
    v34 = *(_QWORD *)(a1 + 40);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    obj = *(id *)(v35 + 40);
    v37 = objc_msgSend__locked_checkAndUpdateZonePCSIfNeededForZone_error_(v33, v36, v34, &obj);
    objc_storeStrong((id *)(v35 + 40), obj);
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (v37)
    {
      if (!v38)
      {
        v39 = *(_QWORD *)(a1 + 40);
        objc_msgSend_zonesToSaveForPCSUpdateByZoneID(*(void **)(a1 + 32), v25, v26);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_zoneID(*(void **)(a1 + 40), v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v40, v44, v39, v43);

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
      }
    }
    else if (!v38)
    {
      objc_msgSend__cachePCSOnRecordZone_(*(void **)(a1 + 32), v25, *(_QWORD *)(a1 + 40));
    }
  }
  if (objc_msgSend_ignorePCSFailures(*(void **)(a1 + 32), v25, v26))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v30 = *(void **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = 0;

  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    objc_msgSend__locked_callbackForRecordZone_zoneID_error_(*(void **)(a1 + 32), v27, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v27, v28);
  v31 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v31);

}

void sub_1BEC24530(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1BEC245A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CKDAnonymousZoneDataObject *v15;
  const char *v16;
  void *v17;
  const char *v18;
  const char *v19;
  id WeakRetained;
  const char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = v5;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v22, v26, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v23;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v23 != v12)
          objc_enumerationMutation(v8);
        v14 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v13);
        v15 = [CKDAnonymousZoneDataObject alloc];
        v17 = (void *)objc_msgSend_initWithEncryptedData_(v15, v16, v14, (_QWORD)v22);
        objc_msgSend_addObject_(v7, v18, (uint64_t)v17);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v19, (uint64_t)&v22, v26, 16);
    }
    while (v11);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__handleAnonymousZoneDataObjects_responsecode_(WeakRetained, v21, (uint64_t)v7, v6);

}

void sub_1BEC24710(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  id WeakRetained;

  v8 = (id *)(a1 + 32);
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  WeakRetained = objc_loadWeakRetained(v8);
  objc_msgSend__handleRecordZoneFetch_zoneID_responseCode_error_(WeakRetained, v13, (uint64_t)v12, v11, v10, v9);

}

void sub_1BEC247A4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  _QWORD *v20;
  os_log_t *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  os_log_t v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  objc_class *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)MEMORY[0x1E0C94FF8];
  v6 = *MEMORY[0x1E0C94B20];
  v7 = sub_1BEB10D5C(v3);
  objc_msgSend_request(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEB10290(v10, v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(v3, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_errorDescription(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_format_(v5, v18, v6, v7, v11, CFSTR("Error fetching all record zones from server: %@"), v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v21 = (os_log_t *)MEMORY[0x1E0C952B0];
  v22 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v32 = v22;
    v33 = (objc_class *)objc_opt_class();
    NSStringFromClass(v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v39 = v34;
    v40 = 2048;
    v41 = WeakRetained;
    v42 = 2114;
    v43 = v37;
    v44 = 2112;
    v45 = v19;
    _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Fetch record zones operation <%{public}@: %p; %{public}@> hit top-level error %@",
      buf,
      0x2Au);

  }
  objc_msgSend_error(WeakRetained, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    if (*v20 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v27 = *v21;
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
    {
      v28 = v27;
      objc_msgSend_error(WeakRetained, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v39 = v19;
      v40 = 2112;
      v41 = v31;
      _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "Not propagating operation error: %@, in favor of preceding error: %@", buf, 0x16u);

    }
  }
  else
  {
    objc_msgSend_setError_(WeakRetained, v26, (uint64_t)v19);
  }

}

void sub_1BEC24A70(uint64_t a1)
{
  id WeakRetained;
  id v3;
  _QWORD *v4;
  os_log_t *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  os_log_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  objc_class *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  int v34;
  void *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = (os_log_t *)MEMORY[0x1E0C952B0];
  v6 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = v6;
    v26 = (objc_class *)objc_opt_class();
    NSStringFromClass(v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 138544130;
    v35 = v27;
    v36 = 2048;
    v37 = WeakRetained;
    v38 = 2114;
    v39 = v30;
    v40 = 2112;
    v41 = v33;
    _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Fetch record zones operation <%{public}@: %p; %{public}@> request finished with error %@",
      (uint8_t *)&v34,
      0x2Au);

  }
  objc_msgSend_error(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_error(v3, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v14 = v12;
  if (!v9)
  {
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v12);
    goto LABEL_12;
  }

  if (v14)
  {
    if (*v4 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      v14 = v17;
      objc_msgSend_error(v3, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(WeakRetained, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = 138412546;
      v35 = v20;
      v36 = 2112;
      v37 = v23;
      _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Not propagating operation request error: %@, in favor of preceding error: %@", (uint8_t *)&v34, 0x16u);

LABEL_12:
    }
  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  v24 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v24);

}

uint64_t sub_1BEC24E38(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

uint64_t CKDPResponseOperationResultErrorServerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEC26018(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("zoneID = $ZONE AND accountID = $ACCOUNT AND serviceName = $SERVICE"));
}

uint64_t sub_1BEC2615C(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("shareID = $SHARE AND accountID = $ACCOUNT AND serviceName = $SERVICE"));
}

uint64_t sub_1BEC26300(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("identifier = $IDENTIFIER AND databaseScope = $SCOPE AND itemType = $TYPE AND accountID = $ACCOUNT AND serviceName = $SERVICE"));
}

void sub_1BEC2656C(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v3;
  id v4;

  objc_msgSend_cacheTable(a2, (const char *)a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deleteAllEntries_(v4, v3, 0);

}

void sub_1BEC2674C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend_deviceScopedDatabase(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_specialContainerType(*(void **)(a1 + 40), v5, v6);
  v9 = objc_msgSend_tableGroupOptionsForContainerType_(CKDPCSSQLCacheTableGroup, v8, v7);
  v10 = *(_QWORD *)(a1 + 48);
  v21 = 0;
  objc_msgSend_tableGroupInDatabase_withName_options_error_(CKDPCSSQLCacheTableGroup, v11, (uint64_t)v4, v10, v9, &v21);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v21;
  if (v12)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 56) + 32), v12);
    objc_msgSend_cacheTable(v12, v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v23 = v20;
      v24 = 2112;
      v25 = v13;
      _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "Failed to create PCS cache database for containerID %@, error: %@", buf, 0x16u);
    }
  }

}

void sub_1BEC269EC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 40), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__lockedFetchPCSDataForID_databaseScope_itemType_(v4, v6, (uint64_t)v5, *(_QWORD *)(a1 + 56), 2);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v8, 0);

}

void sub_1BEC26B10(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 40), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__lockedFetchPCSDataForID_databaseScope_itemType_(v4, v6, (uint64_t)v5, *(_QWORD *)(a1 + 56), 1);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v8, 0);

}

void sub_1BEC26C34(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 40), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__lockedFetchPCSDataForID_databaseScope_itemType_(v4, v6, (uint64_t)v5, *(_QWORD *)(a1 + 56), 3);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v8, 0);

}

uint64_t sub_1BEC2706C(uint64_t a1, const char *a2)
{
  uint64_t result;

  objc_msgSend__lockedSetPCSData_databaseScope_itemType_forID_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t sub_1BEC27180(_QWORD *a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  uint64_t result;

  v4 = (void *)a1[4];
  if (v4)
  {
    v5 = *(void **)(a1[5] + 40);
    objc_msgSend_sqliteRepresentation(v4, a2, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend_deletePCSDataForZone_account_serviceName_(v5, v7, (uint64_t)v6, *(_QWORD *)(a1[5] + 16), *(_QWORD *)(a1[5] + 24));

  }
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEC272A8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  const char *v7;
  id v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;

  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    v5 = *(void **)(*(_QWORD *)(a1 + 40) + 40);
    objc_msgSend_sqliteRepresentation(v4, a2, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend_deletePCSDataForShare_account_serviceName_(v5, v7, (uint64_t)v6, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));

  }
  if (*(_QWORD *)(a1 + 48))
  {
    CKGetGlobalQueue();
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEC27378;
    block[3] = &unk_1E782EFD8;
    v11 = *(id *)(a1 + 48);
    dispatch_async(v9, block);

  }
}

uint64_t sub_1BEC27378(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1BEC273E0(uint64_t a1, const char *a2)
{
  return objc_msgSend_deleteAllEntries_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, 0);
}

uint64_t sub_1BEC2746C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

BOOL sub_1BEC278B4(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CKCDPCodeServiceResponseAssetAuthorizationResponseHeaderInfo *v20;
  const char *v21;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
LABEL_26:
        v20 = *(CKCDPCodeServiceResponseAssetAuthorizationResponseHeaderInfo **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(CKCDPCodeServiceResponseAssetAuthorizationResponseHeaderInfo);
    objc_msgSend_addResponseHeaders_(a1, v21, (uint64_t)v20);
    if (!PBReaderPlaceMark() || !sub_1BEAE61C0((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC283E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEC283FC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v15 = v2;
    objc_msgSend_record(WeakRetained, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138412290;
    v23 = v21;
    _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Decrypt of record %@ is complete", (uint8_t *)&v22, 0xCu);

  }
  objc_msgSend_callback(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_callback(WeakRetained, v6, v7);
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend_record(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, void *))v8)[2](v8, v11, v14);

  }
}

void sub_1BEC28A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEC28A68(uint64_t a1)
{
  void *v2;
  const char *v3;
  id WeakRetained;

  v2 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__recordInfoWasDecrypted_nextSteps_(v2, v3, (uint64_t)WeakRetained, *(_QWORD *)(a1 + 40));

}

uint64_t sub_1BEC28AB0(uint64_t a1, const char *a2)
{
  return objc_msgSend__decryptRecordInfo_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

void sub_1BEC28EEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC29BF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  _QWORD *v7;
  os_log_t *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  os_log_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const __CFString *v41;
  const __CFString *v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  const __CFString *v46;
  __int16 v47;
  const __CFString *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v36 = *(void **)(a1 + 32);
    v37 = v9;
    objc_msgSend_recordID(v36, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = CFSTR(" with error: ");
    v42 = &stru_1E7838F48;
    *(_DWORD *)buf = 138412802;
    v44 = v40;
    if (v6)
      v42 = v6;
    else
      v41 = &stru_1E7838F48;
    v45 = 2114;
    v46 = v41;
    v47 = 2112;
    v48 = v42;
    _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Got PCS data from fetched share %@%{public}@%@", buf, 0x20u);

  }
  if (objc_msgSend_pcs(v5, v10, v11))
  {
    objc_msgSend__decryptRecordPCSForRecord_usingSharePCS_(*(void **)(a1 + 40), v12, *(_QWORD *)(a1 + 32), v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 48), v14, (uint64_t)v13);
  }
  else
  {
    if (*v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v20 = *(void **)(a1 + 32);
      v21 = v17;
      objc_msgSend_share(v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v44 = v27;
      _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Couldn't get a PCS for our current share %@", buf, 0xCu);

    }
    v28 = *(void **)(a1 + 40);
    objc_msgSend_recordID(*(void **)(a1 + 32), v18, v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(*(void **)(a1 + 32), v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(v28, v33, (uint64_t)v6, v29, 5001, CFSTR("Record %@ has items that require encryption but no share protection data was found"), v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setError_(*(void **)(a1 + 48), v34, (uint64_t)v13);
  }
  objc_msgSend_decryptGroup(*(void **)(a1 + 48), v15, v16);
  v35 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v35);

}

void sub_1BEC29E94(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  os_log_t *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  os_log_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  NSObject *log;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v36 = a1[4];
    log = v9;
    objc_msgSend_recordID(v36, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1[4], v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_etag(v5, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134219010;
    v51 = v36;
    v52 = 2112;
    v53 = v39;
    v54 = 2112;
    v55 = v45;
    v56 = 2114;
    v57 = v48;
    v58 = 2112;
    v59 = v6;
    _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Fetched zone PCS data. Record %p recordID %@ zoneID %@ zone PCS etag %{public}@%@", buf, 0x34u);

  }
  if (objc_msgSend_pcs(v5, v10, v11))
  {
    objc_msgSend__decryptRecordPCSForRecord_usingZonePCS_(a1[5], v12, (uint64_t)a1[4], v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(a1[6], v14, (uint64_t)v13);
  }
  else
  {
    if (*v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v20 = a1[4];
      v21 = v17;
      objc_msgSend_recordID(v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneID(v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v51 = v27;
      _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Couldn't fetch a PCS for zone %@", buf, 0xCu);

    }
    v28 = a1[5];
    objc_msgSend_recordID(a1[4], v18, v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1[4], v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(v28, v33, (uint64_t)v6, v29, 5001, CFSTR("Record %@ has items that require encryption but no zone protection data was found"), v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setError_(a1[6], v34, (uint64_t)v13);
  }
  objc_msgSend_decryptGroup(a1[6], v15, v16);
  v35 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v35);

}

void sub_1BEC2B3D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEC2B400(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  os_log_t *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  os_log_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  NSObject *log;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v36 = a1[4];
    log = v9;
    objc_msgSend_recordID(v36, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_share(a1[4], v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_etag(v5, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134219010;
    v51 = v36;
    v52 = 2112;
    v53 = v39;
    v54 = 2112;
    v55 = v45;
    v56 = 2114;
    v57 = v48;
    v58 = 2112;
    v59 = v6;
    _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Fetched share PCS data. Record %p recordID %@ shareID %@ share PCS etag %{public}@%@", buf, 0x34u);

  }
  if (objc_msgSend_pcs(v5, v10, v11))
  {
    objc_msgSend__decryptRecordPCSForRecord_usingSharePCS_(a1[5], v12, (uint64_t)a1[4], v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(a1[6], v14, (uint64_t)v13);
  }
  else
  {
    if (*v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v20 = a1[4];
      v21 = v17;
      objc_msgSend_share(v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v51 = v27;
      _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Couldn't fetch a PCS for share %@", buf, 0xCu);

    }
    v28 = a1[5];
    objc_msgSend_recordID(a1[4], v18, v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1[4], v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(v28, v33, (uint64_t)v6, v29, 5001, CFSTR("Record %@ has items that require encryption but no share protection data was found"), v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setError_(a1[6], v34, (uint64_t)v13);
  }
  objc_msgSend_decryptGroup(a1[6], v15, v16);
  v35 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v35);

}

void sub_1BEC2B6D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *WeakRetained;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  void *v33;
  void *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8
    || (objc_msgSend_chainPCSData(v5, v6, v7), v33 = (void *)objc_claimAutoreleasedReturnValue(),
                                               v33,
                                               !v33))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = *(void **)(a1 + 32);
      v13 = v9;
      objc_msgSend_parent(v12, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v48 = v19;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Couldn't fetch a PCS for parent record %@", buf, 0xCu);

    }
    v20 = *(void **)(a1 + 40);
    objc_msgSend_recordID(*(void **)(a1 + 32), v10, v11);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(*(void **)(a1 + 32), v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_parent(*(void **)(a1 + 32), v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(v20, v31, (uint64_t)v8, WeakRetained, 5001, CFSTR("Record %@ has items that require encryption but no protection data was found for parent %@"), v24, v30);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v34 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v40 = v34;
      objc_msgSend_recordID(v5, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(*(void **)(a1 + 32), v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v48 = v43;
      v49 = 2112;
      v50 = v46;
      _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Fetched parent PCS data from record %@ for record %@", buf, 0x16u);

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend__decryptRecordPCSForRecord_usingChainPCS_(WeakRetained, v35, *(_QWORD *)(a1 + 32), v5);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend_setError_(*(void **)(a1 + 48), v36, (uint64_t)v32);
  objc_msgSend_decryptGroup(*(void **)(a1 + 48), v37, v38);
  v39 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v39);

}

void sub_1BEC2B9B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  _QWORD *v7;
  os_log_t *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  os_log_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const __CFString *v41;
  const __CFString *v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  const __CFString *v46;
  __int16 v47;
  const __CFString *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v36 = *(void **)(a1 + 32);
    v37 = v9;
    objc_msgSend_recordID(v36, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = CFSTR(" with error: ");
    v42 = &stru_1E7838F48;
    *(_DWORD *)buf = 138412802;
    v44 = v40;
    if (v6)
      v42 = v6;
    else
      v41 = &stru_1E7838F48;
    v45 = 2114;
    v46 = v41;
    v47 = 2112;
    v48 = v42;
    _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Got PCS data from fetched share %@%{public}@%@", buf, 0x20u);

  }
  if (objc_msgSend_pcs(v5, v10, v11))
  {
    objc_msgSend__decryptRecordPCSForRecord_usingSharePCS_(*(void **)(a1 + 40), v12, *(_QWORD *)(a1 + 32), v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 48), v14, (uint64_t)v13);
  }
  else
  {
    if (*v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v20 = *(void **)(a1 + 32);
      v21 = v17;
      objc_msgSend_share(v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v44 = v27;
      _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Couldn't get a PCS for our current share %@", buf, 0xCu);

    }
    v28 = *(void **)(a1 + 40);
    objc_msgSend_recordID(*(void **)(a1 + 32), v18, v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(*(void **)(a1 + 32), v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(v28, v33, (uint64_t)v6, v29, 5001, CFSTR("Record %@ has items that require encryption but no share protection data was found"), v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setError_(*(void **)(a1 + 48), v34, (uint64_t)v13);
  }
  objc_msgSend_decryptGroup(*(void **)(a1 + 48), v15, v16);
  v35 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v35);

}

void sub_1BEC2BC50(void **a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  os_log_t *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  os_log_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  NSObject *log;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (os_log_t *)MEMORY[0x1E0C952B0];
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v36 = a1[4];
    log = v9;
    objc_msgSend_recordID(v36, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1[4], v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_etag(v5, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134219010;
    v51 = v36;
    v52 = 2112;
    v53 = v39;
    v54 = 2112;
    v55 = v45;
    v56 = 2114;
    v57 = v48;
    v58 = 2112;
    v59 = v6;
    _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Fetched zone PCS data. Record %p recordID %@ zoneID %@ zone PCS etag %{public}@%@", buf, 0x34u);

  }
  if (objc_msgSend_pcs(v5, v10, v11))
  {
    objc_msgSend__decryptRecordPCSForRecord_usingZonePCS_(a1[5], v12, (uint64_t)a1[4], v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(a1[6], v14, (uint64_t)v13);
  }
  else
  {
    if (*v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v20 = a1[4];
      v21 = v17;
      objc_msgSend_recordID(v20, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneID(v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v51 = v27;
      _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Couldn't fetch a PCS for zone %@", buf, 0xCu);

    }
    v28 = a1[5];
    objc_msgSend_recordID(a1[4], v18, v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1[4], v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(v28, v33, (uint64_t)v6, v29, 5001, CFSTR("Record %@ has items that require encryption but no shared zone protection data was found"), v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setError_(a1[6], v34, (uint64_t)v13);
  }
  objc_msgSend_decryptGroup(a1[6], v15, v16);
  v35 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v35);

}

id sub_1BEC2D8F0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  objc_super v21;

  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) == 0)
  {
    objc_msgSend_outstandingDecryptions(*(void **)(a1 + 32), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend_count(v6, v7, v8);

    if (v9)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v10, v11);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(void **)(a1 + 32);
      objc_msgSend_operationID(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v14, v20, v15, v16, CFSTR("CKDDecryptRecordsOperation.m"), 672, CFSTR("Decrypt operation %@ finished but there were still outstanding decryptions"), v19);

    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  v21.receiver = *(id *)(a1 + 32);
  v21.super_class = (Class)CKDDecryptRecordsOperation;
  return objc_msgSendSuper2(&v21, sel__finishOnCallbackQueueWithError_, v12);
}

void sub_1BEC2DB14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEC2DD90(uint64_t a1)
{
  void *v2;
  const char *v3;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v2;
    objc_msgSend_operationID(v5, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v9;
    _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "All records have been decrypted for operation %{public}@", (uint8_t *)&v10, 0xCu);

  }
  return objc_msgSend_finishWithError_(*(void **)(a1 + 32), v3, 0);
}

void sub_1BEC2E1E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC2E4FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEC2E518(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  NSObject *v4;
  id WeakRetained;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_infoFetchedGroup(WeakRetained, v2, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v4);

}

void sub_1BEC2E6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1BEC2E704(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v12 = v9;
      objc_msgSend_error(v3, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412290;
      v24 = v15;
      _os_log_error_impl(&dword_1BE990000, v12, OS_LOG_TYPE_ERROR, "Error fetching database URL from the server: %@", (uint8_t *)&v23, 0xCu);
LABEL_10:

    }
  }
  else
  {
    objc_msgSend_containerServerInfo(v3, v7, v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setContainerServerInfo_(WeakRetained, v17, (uint64_t)v16);

    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v18 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = v18;
      objc_msgSend_containerServerInfo(WeakRetained, v19, v20);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412290;
      v24 = v15;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Fetched database URLS from the server: %@", (uint8_t *)&v23, 0xCu);
      goto LABEL_10;
    }
  }
  objc_msgSend_error(v3, v10, v11);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v22, (uint64_t)v21);

}

uint64_t sub_1BEC2EC34(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3);
}

id sub_1BEC2ED78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  void *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  id v54;
  const char *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  void *v68;
  void *v69;
  const char *v70;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = objc_msgSend_operationType(v4, v5, v6);
  objc_msgSend_operationRequestWithType_(v4, v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mergeableValueIDsByRequestID(*(void **)(a1 + 32), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_request(v9, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationUUID(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v12, v19, (uint64_t)v3, v18);

  if (!objc_msgSend_requiresCKAnonymousUserIDs(*(void **)(a1 + 32), v20, v21))
    goto LABEL_4;
  objc_msgSend_zoneID(v3, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_anonymousCKUserID(v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend_zoneID(v3, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_anonymousCKUserID(v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKDPIdentifier_User(v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_request(v9, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAnonymousCKUserID_(v39, v40, (uint64_t)v36);

LABEL_4:
    v41 = (void *)objc_opt_new();
    objc_msgSend_translator(*(void **)(a1 + 32), v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pMergeableValueIdentifierFromMergeableValueID_(v44, v45, (uint64_t)v3);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setIdentifier_(v41, v47, (uint64_t)v46);

    objc_msgSend_previousContinuationTokens(*(void **)(a1 + 32), v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v50, v51, (uint64_t)v3);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    if (v52)
      objc_msgSend_setContinuation_(v41, v53, (uint64_t)v52);
    objc_msgSend_setMergeableDeltaRetrieveRequest_(v9, v53, (uint64_t)v41);
    v54 = v9;
    goto LABEL_7;
  }
  v41 = (void *)objc_opt_new();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v56, (uint64_t)CFSTR("An anonymousCKUserID is required to fetch %@ when using anonymous to server share participants"), v3);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v41, v57, (uint64_t)v52, *MEMORY[0x1E0CB2D50]);
  objc_msgSend_operation(*(void **)(a1 + 32), v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_topmostParentOperation(v60, v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_operationID(v63, v64, v65);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  if (v67)
    objc_msgSend_setObject_forKeyedSubscript_(v41, v66, (uint64_t)v67, *MEMORY[0x1E0C947F8]);
  v68 = *(void **)(a1 + 32);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v66, *MEMORY[0x1E0C94B20], 5015, v41);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v68, v70, (uint64_t)v69);

  v54 = 0;
LABEL_7:

  return v54;
}

void sub_1BEC2F778()
{
  CKDLogicalDeviceContext *v0;
  const char *v1;
  uint64_t v2;
  void *v3;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED702C28);
  v0 = [CKDLogicalDeviceContext alloc];
  v2 = objc_msgSend__initWithTestDeviceReference_(v0, v1, 0);
  v3 = (void *)qword_1ED702C30;
  qword_1ED702C30 = v2;

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED702C28);
}

void sub_1BEC2F804(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED702C48;
  qword_1ED702C48 = v3;

}

void sub_1BEC2FD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEC2FFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEC3061C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC30C8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CKBasicStringForIdentitySet(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const void *v10;
  void *v11;
  const char *v12;
  uint64_t KeyID;
  const char *v14;
  const char *v15;
  const __CFDictionary *v16;
  const void *PublicKey;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  int isAppleInternalInstall;
  void *v25;
  id v26;
  const char *v27;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a1;
  v4 = (void *)MEMORY[0x1C3B83E24]();
  v5 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend_appendFormat_(v5, v6, (uint64_t)CFSTR("Identity Set: %p\n"), a2);
  objc_msgSend_appendFormat_(v5, v7, (uint64_t)CFSTR("Primary service name: %@\n"), v3);
  v8 = PCSIdentitySetCopyCurrentIdentityWithError();
  if (v8)
  {
    v10 = (const void *)v8;
    objc_msgSend_appendFormat_(v5, v9, (uint64_t)CFSTR("Current key: %p\n"), v8);
    PCSIdentityGetPublicKey();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v5, v12, (uint64_t)CFSTR("\tpublic-key: %@\n"), v11);
    KeyID = PCSIdentityGetKeyID();
    objc_msgSend_appendFormat_(v5, v14, (uint64_t)CFSTR("\tkeyid: %@\n"), KeyID);
    if (PCSIdentityIsFullManatee())
      objc_msgSend_appendFormat_(v5, v15, (uint64_t)CFSTR("\tmanatee: %@\n"), CFSTR("yes"));
    else
      objc_msgSend_appendFormat_(v5, v15, (uint64_t)CFSTR("\tmanatee: %@\n"), CFSTR("no"));
    v16 = (const __CFDictionary *)PCSGetPublicIdentitites();
    PublicKey = (const void *)PCSIdentityGetPublicKey();
    if (CFDictionaryGetValueIfPresent(v16, PublicKey, 0))
      objc_msgSend_appendFormat_(v5, v18, (uint64_t)CFSTR("\tis public identity\n"));
    CFRelease(v10);
  }
  else
  {
    objc_msgSend_appendFormat_(v5, v9, (uint64_t)CFSTR("No current key for the given service name."));
    v11 = 0;
  }
  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  isAppleInternalInstall = objc_msgSend_isAppleInternalInstall(v21, v22, v23);

  if (isAppleInternalInstall)
  {
    v25 = (void *)objc_opt_new();
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = 0;
    v29 = v11;
    v26 = v25;
    PCSIdentitySetEnumeratePublicKeys();
    if (v31[3])
      objc_msgSend_appendFormat_(v5, v27, (uint64_t)CFSTR("Additional public keys (%lu):\n%@"), v31[3], v26);

    _Block_object_dispose(&v30, 8);
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_1BEC30F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEC31088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC31170(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC31D78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC33238(uint64_t a1, const char *a2)
{
  char *v3;
  char *v4;

  objc_msgSend_CKDataFromBase64URLSafeString_(MEMORY[0x1E0C99D50], a2, (uint64_t)a2);
  v3 = (char *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;
    objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v3);
    v3 = v4;
  }

}

void sub_1BEC336A8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543618;
    v7 = v5;
    v8 = 2114;
    v9 = a2;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "service: %{public}@ <%{public}@>", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1BEC33AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1BEC33B14(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;

  if ((_DWORD)a2)
  {
    objc_msgSend_password(*(void **)(a1 + 32), a2, a3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(*(void **)(a1 + 40), v5, (uint64_t)v4) & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1BEC33BAC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED702C50;
  qword_1ED702C50 = v0;

}

void sub_1BEC33D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC33E80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC34EF4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543618;
    v7 = v5;
    v8 = 2114;
    v9 = a2;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "service: %{public}@ <%{public}@>", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1BEC35148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BEC35164(uint64_t a1)
{
  void *ExternalForm;
  uint64_t v3;
  void *v4;

  ExternalForm = (void *)PCSIdentitySetCreateExternalForm();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

  return ExternalForm;
}

void sub_1BEC35204()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED702C60;
  qword_1ED702C60 = v0;

}

void sub_1BEC35694(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC359D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC369AC()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v2 = objc_msgSend_initWithObjects_(v0, v1, (uint64_t)CFSTR("ForceSecurityErrorOnIdentityValidation"), CFSTR("MasqueradeAsManateeIdentity"), CFSTR("RefetchPCSIdentitySet"), 0);
  v3 = (void *)qword_1ED702C70;
  qword_1ED702C70 = v2;

}

void sub_1BEC36AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEC36BF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEC36CD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEC36DE4(uint64_t a1, void *a2)
{
  uint64_t result;
  const char *v5;

  result = objc_msgSend_isEqualToString_(a2, (const char *)a2, *(_QWORD *)(a1 + 32));
  if ((result & 1) == 0)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    return objc_msgSend_appendFormat_(*(void **)(a1 + 40), v5, (uint64_t)CFSTR("\t%@\n"), a2);
  }
  return result;
}

BOOL sub_1BEC36F8C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPCodeFunctionInvokeResponseAttestationResponse *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPCodeFunctionInvokeResponseAttestationResponse **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPCodeFunctionInvokeResponseAttestationResponse);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || (sub_1BEB69188(v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC375A8(uint64_t a1, char a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if ((a2 & 1) != 0)
  {
    v8 = *(void **)(a1 + 32);
    objc_msgSend_appleAccount(*(void **)(a1 + 40), v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1BEC37718;
    v13[3] = &unk_1E7837B78;
    v14 = *(id *)(a1 + 48);
    objc_msgSend_saveVerifiedAccount_withCompletionHandler_(v8, v10, (uint64_t)v9, v13);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_error_impl(&dword_1BE990000, v11, OS_LOG_TYPE_ERROR, "Failed to update account properties, error %@", buf, 0xCu);
    }
    v12 = *(_QWORD *)(a1 + 48);
    if (v12)
      (*(void (**)(uint64_t, _QWORD, id))(v12 + 16))(v12, 0, v7);
  }

}

void sub_1BEC37718(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((a2 & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v5;
      _os_log_error_impl(&dword_1BE990000, v6, OS_LOG_TYPE_ERROR, "Failed to save verified account, error %@", (uint8_t *)&v8, 0xCu);
    }
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v5);

}

void sub_1BEC38184(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEC38280(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEC3837C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEC38614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEC38644(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_error(v2, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(WeakRetained, v9, (uint64_t)v8);
  }
  else
  {
    objc_msgSend_userPrivacySettings(v2, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__handleRetrievedPrivacySettings_(WeakRetained, v10, (uint64_t)v8);
  }

}

BOOL sub_1BEC38B84(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPAssetUploadTokenRetrieveResponseUploadToken *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 4)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadData();
        v21 = objc_claimAutoreleasedReturnValue();
        v18 = (CKDPAssetUploadTokenRetrieveResponseUploadToken *)a1[1];
        a1[1] = v21;
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveResponseUploadToken);
        objc_msgSend_addUploadTokens_(a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (sub_1BEAB5C14((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_33;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveResponseHeaderInfo);
    objc_msgSend_addContentResponseHeaders_(a1, v20, (uint64_t)v18);
    if (!PBReaderPlaceMark() || !sub_1BEA37944((uint64_t)v18, a2))
    {
LABEL_33:

      return 0;
    }
LABEL_26:
    PBReaderRecallMark();
LABEL_28:

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEC39BC4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_acceptCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_acceptCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEC3A308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEC3A330(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  os_log_t *v9;
  os_log_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  const char *v31;
  void *v32;
  const char *v33;
  void *v34;
  os_log_t v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  NSObject *v58;
  id v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  v8 = (_QWORD *)MEMORY[0x1E0C95300];
  v9 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
    {
      v11 = *(void **)(a1 + 32);
      v12 = v10;
      objc_msgSend_recordID(v11, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412546;
      v61 = v15;
      v62 = 2112;
      v63 = v16;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Warn: Couldn't prep PCS data %@: %@", buf, 0x16u);

    }
  }
  if (objc_msgSend_publicPCS(*(void **)(a1 + 32), v6, v7))
  {
    objc_msgSend_container(*(void **)(a1 + 40), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_publicPCS(*(void **)(a1 + 32), v23, v24);
    v59 = 0;
    objc_msgSend_sharingIdentityDataFromPCS_error_(v22, v26, v25, &v59);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v59;
    v29 = v59;

    v30 = objc_alloc(MEMORY[0x1E0C94D18]);
    v32 = (void *)objc_msgSend_initWithData_(v30, v31, (uint64_t)v27);
    objc_msgSend_setMutableEncryptedPSK_(*(void **)(a1 + 32), v33, (uint64_t)v32);

    v34 = (void *)*MEMORY[0x1E0C952F8];
    if (v29)
    {
      if (*v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v34);
      v35 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
      {
        v36 = *(void **)(a1 + 32);
        v37 = v35;
        objc_msgSend_recordID(v36, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v61 = v40;
        v62 = 2112;
        v63 = v29;
        _os_log_impl(&dword_1BE990000, v37, OS_LOG_TYPE_INFO, "Warn: Couldn't get a public sharing identity for share %@: %@", buf, 0x16u);

      }
      v41 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = (id *)(v41 + 40);
      if (!v43)
        objc_storeStrong(v42, v28);
    }
    else
    {
      if (*v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v34);
      v44 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v45 = *(void **)(a1 + 32);
        v46 = v44;
        objc_msgSend_recordID(v45, v47, v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_mutableEncryptedPSK(*(void **)(a1 + 32), v50, v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_data(v52, v53, v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v61 = v49;
        v62 = 2112;
        v63 = v55;
        _os_log_impl(&dword_1BE990000, v46, OS_LOG_TYPE_INFO, "Public sharing identity for share %@ is %@", buf, 0x16u);

      }
    }

  }
  objc_msgSend__performCallbackForURL_withShare_error_(*(void **)(a1 + 40), v17, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v56, v57);
  v58 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v58);

}

void sub_1BEC3B4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  id *v43;
  id *v44;
  id *v45;

  objc_destroyWeak(v45);
  objc_destroyWeak(v44);
  objc_destroyWeak(v43);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a43);
  _Unwind_Resume(a1);
}

void sub_1BEC3B524(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleShareURLAccepted_forShare_responseCode_(WeakRetained, v10, (uint64_t)v9, v8, v7);

}

void sub_1BEC3B59C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = v9;
      objc_msgSend_error(v3, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138412290;
      v20 = v15;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Error accepting shares: %@", (uint8_t *)&v19, 0xCu);

    }
    objc_msgSend_error(v3, v10, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v17, (uint64_t)v16);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v18);

}

void sub_1BEC3BA14(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  NSObject *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  const char *v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id v49;
  uint8_t buf[4];
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (!v5 || v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v27 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_DWORD *)buf = 138412290;
    v51 = v9;
    v30 = "Couldn't pull pcsData off fetched share, re-fetching: %@";
    v31 = v27;
    v32 = 12;
    goto LABEL_13;
  }
  v10 = objc_msgSend_publicPCS(v5, v7, v8);
  if (!v10)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v33 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v30 = "Fetched share's PCS data lacked publicPCS, re-fetching";
    v31 = v33;
    v32 = 2;
LABEL_13:
    _os_log_impl(&dword_1BE990000, v31, OS_LOG_TYPE_INFO, v30, buf, v32);
LABEL_14:
    objc_msgSend_container(a1[5], v28, v29);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsCache(v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_share(a1[6], v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1BEC3BCC0;
    v46[3] = &unk_1E7838088;
    v44 = a1[6];
    v47 = a1[5];
    v48 = v44;
    v49 = a1[4];
    objc_msgSend_fetchPCSForShareWithID_forOperation_options_withCompletionHandler_(v37, v45, (uint64_t)v43, v47, 0, v46);

    goto LABEL_15;
  }
  v13 = v10;
  v14 = a1[4];
  objc_msgSend_container(a1[5], v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pcsManager(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__decryptDataWithPCSBlob_pcsManager_(v14, v19, v13, v18);

  v22 = objc_msgSend_acceptedInProcess(a1[4], v20, v21);
  objc_msgSend_setAcceptedInProcess_(a1[6], v23, v22);
  objc_msgSend_stateTransitionGroup(a1[5], v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v26);

LABEL_15:
}

void sub_1BEC3BCC0(void **a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  const void *v10;
  const char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  NSObject *v41;
  id v42;
  uint8_t buf[4];
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (!v5 || (v9 = objc_msgSend_publicPCS(v5, v6, v7), v8) || !v9)
  {
    objc_msgSend_container(a1[4], v6, v7);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_share(a1[5], v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_publicProtectionData(v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_privateToken(a1[5], v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 0;
    v10 = (const void *)objc_msgSend_createSharePCSFromData_sharePrivateKey_error_(v20, v30, (uint64_t)v26, v29, &v42);
    v13 = v42;

    if (!v10)
      goto LABEL_5;
LABEL_10:
    v31 = a1[6];
    objc_msgSend_container(a1[4], v11, v12);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__decryptDataWithPCSBlob_pcsManager_(v31, v36, (uint64_t)v10, v35);

    v39 = objc_msgSend_acceptedInProcess(a1[6], v37, v38);
    objc_msgSend_setAcceptedInProcess_(a1[5], v40, v39);
    CFRelease(v10);
    goto LABEL_11;
  }
  v10 = (const void *)objc_msgSend_publicPCS(v5, v6, v7);
  CFRetain(v10);
  v13 = 0;
  if (v10)
    goto LABEL_10;
LABEL_5:
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v14 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v44 = v13;
    _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Warn: Couldn't create share PCS data while accepting metadata: %@", buf, 0xCu);
  }
LABEL_11:
  objc_msgSend_stateTransitionGroup(a1[4], v15, v16);
  v41 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v41);

}

void sub_1BEC3C23C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  id v6;
  uint64_t v7;
  const char *v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  objc_initWeak(&from, *(id *)(a1 + 32));
  v4 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BEC3C3A4;
  v13[3] = &unk_1E78382D8;
  v14 = *(id *)(a1 + 40);
  objc_copyWeak(&v15, &from);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v13);
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_1BEC3C4F8;
  v9[3] = &unk_1E782E530;
  objc_copyWeak(&v12, &location);
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  objc_msgSend_setCompletionBlock_(v3, v8, (uint64_t)v9);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&v15);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEC3C370(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEC3C3A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  id WeakRetained;
  const char *v15;
  int v16;
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = *(void **)(a1 + 32);
  v9 = a4;
  v10 = a2;
  objc_msgSend_objectForKeyedSubscript_(v8, v11, (uint64_t)v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v16 = 138412546;
    v17 = v7;
    v18 = 2112;
    v19 = v12;
    _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Accepted share %@ fetched for URL %@", (uint8_t *)&v16, 0x16u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__performCallbackForURL_withShare_error_(WeakRetained, v15, (uint64_t)v12, v10, v9);

}

void sub_1BEC3C4F8(void **a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  int v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)*MEMORY[0x1E0C952F8];
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v7 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v10 = v7;
      objc_msgSend_error(WeakRetained, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v43 = v13;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Warn: Error while fetching accepted shares: %@", buf, 0xCu);

    }
    objc_msgSend_error(WeakRetained, v8, v9);
    v14 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v17 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "All accepted shares were fetched successfully", buf, 2u);
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v18, *MEMORY[0x1E0C94B20], 2003, CFSTR("Couldn't fetch accepted share from the server"));
    v14 = objc_claimAutoreleasedReturnValue();
  }
  v19 = (void *)v14;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend_allKeys(a1[4], v15, v16, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v37, v41, 16);
  if (v22)
  {
    v24 = v22;
    v25 = *(_QWORD *)v38;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v38 != v25)
          objc_enumerationMutation(v20);
        objc_msgSend_objectForKeyedSubscript_(a1[4], v23, *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v26));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_acceptedShareURLsToFetch(a1[5], v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend_containsObject_(v30, v31, (uint64_t)v27);

        if (v32)
          objc_msgSend__performCallbackForURL_withShare_error_(a1[5], v33, (uint64_t)v27, 0, v19);

        ++v26;
      }
      while (v24 != v26);
      v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v23, (uint64_t)&v37, v41, 16);
    }
    while (v24);
  }

  objc_msgSend_stateTransitionGroup(a1[5], v34, v35);
  v36 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v36);

}

void sub_1BEC3D468(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)*MEMORY[0x1E0C952F8];
  v7 = *MEMORY[0x1E0C95300];
  if (v5 || !a2)
  {
    if (v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v17 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v18 = *(void **)(a1 + 32);
      v10 = v17;
      objc_msgSend_share(v18, v19, v20);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v13, v21, v22);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412546;
      v24 = v16;
      v25 = 2112;
      v26 = v5;
      _os_log_error_impl(&dword_1BE990000, v10, OS_LOG_TYPE_ERROR, "Error decrypting the invited PCS on share %@: %@", (uint8_t *)&v23, 0x16u);
      goto LABEL_7;
    }
  }
  else
  {
    if (v7 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v9 = *(void **)(a1 + 32);
      v10 = v8;
      objc_msgSend_share(v9, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412290;
      v24 = v16;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Successfully decrypted the invited PCS on share %@", (uint8_t *)&v23, 0xCu);
LABEL_7:

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1BEC3E7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1BEC3E800(uint64_t a1, int a2, void *a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void *)*MEMORY[0x1E0C952F8];
  v8 = *MEMORY[0x1E0C95300];
  if (v6 || !a2)
  {
    if (v8 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v20 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v31 = *(void **)(a1 + 32);
      v32 = v20;
      objc_msgSend_share(v31, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v40 = v38;
      _os_log_error_impl(&dword_1BE990000, v32, OS_LOG_TYPE_ERROR, "Couldn't decrypt invited PCS blob for share %@", buf, 0xCu);

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (!v22)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v21, *MEMORY[0x1E0C94B20], 5004, CFSTR("Can not accept share at URL %@ because we couldn't decrypt the share as an invited user"), *(_QWORD *)(a1 + 40));
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v25 = *(void **)(v24 + 40);
      *(_QWORD *)(v24 + 40) = v23;

      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    }
    objc_msgSend__performCallbackForURL_withShare_error_(*(void **)(a1 + 48), v21, *(_QWORD *)(a1 + 40), 0, v22);
    objc_msgSend_shareMetadatasToAcceptByURL(*(void **)(a1 + 48), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v28, v29, *(_QWORD *)(a1 + 40));

  }
  else
  {
    if (v8 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v12 = *(void **)(a1 + 32);
      v13 = v9;
      objc_msgSend_share(v12, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v40 = v19;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "We were able to decrypt the private PCS for share %@", buf, 0xCu);

    }
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v10, v11);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

void sub_1BEC3ED8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEC3EDB8(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  NSObject *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v7, v8);
  v9 = (void *)*MEMORY[0x1E0C952F8];
  v10 = *MEMORY[0x1E0C95300];
  if (v5 || (a2 & 1) == 0)
  {
    if (v10 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v9);
    v15 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v18 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v44 = v18;
      v45 = 2112;
      v46 = v5;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@.", buf, 0x16u);
    }
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    objc_msgSend_URLsWaitingKRSByServiceType(*(void **)(a1 + 40), v16, v17, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v19, v20, *(_QWORD *)(a1 + 48));
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v38, v42, 16);
    if (v23)
    {
      v25 = v23;
      v26 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v39 != v26)
            objc_enumerationMutation(v21);
          v28 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i);
          objc_msgSend__performCallbackForURL_withShare_error_(*(void **)(a1 + 40), v24, v28, 0, v5);
          objc_msgSend_shareMetadatasToAcceptByURL(*(void **)(a1 + 40), v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removeObjectForKey_(v31, v32, v28);

        }
        v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v24, (uint64_t)&v38, v42, 16);
      }
      while (v25);
    }

  }
  else
  {
    if (v10 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v9);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v44 = v14;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@", buf, 0xCu);
    }
  }
  objc_msgSend_URLsWaitingKRSByServiceType(*(void **)(a1 + 40), v12, v13);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v33, v34, *(_QWORD *)(a1 + 48));

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v35, v36);
  v37 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v37);

}

